(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b ||= {})
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target2, all) => {
    for (var name in all)
      __defProp(target2, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target2) => (target2 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target2, "default", { value: mod, enumerable: true }) : target2,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // ../../node_modules/amazon-quicksight-embedding-sdk/dist/lib/eventify.js
  var require_eventify = __commonJS({
    "../../node_modules/amazon-quicksight-embedding-sdk/dist/lib/eventify.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = eventify;
      function eventify(object) {
        if (!object) {
          object = {};
        }
        assertObjectHasNoReservedKeywords(object);
        var listeners = /* @__PURE__ */ new Map();
        object.on = on;
        object.off = off;
        object.trigger = trigger2;
        return object;
        function on(eventName, callback) {
          var eventListeners = listeners.get(eventName);
          if (!eventListeners) {
            eventListeners = /* @__PURE__ */ new Set();
            listeners.set(eventName, eventListeners);
          }
          eventListeners.add(callback);
        }
        function trigger2(eventName) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var eventListeners = listeners.get(eventName);
          if (eventListeners) {
            eventListeners.forEach(function(listener) {
              return listener.apply(null, args);
            });
          }
        }
        function off(eventName, callback) {
          if (!callback) {
            listeners["delete"](eventName);
            return object;
          }
          var eventListeners = listeners.get(eventName);
          if (!eventListeners) {
            return object;
          }
          eventListeners["delete"](callback);
          return object;
        }
      }
      function assertObjectHasNoReservedKeywords(object) {
        ["on", "trigger", "off"].forEach(function(keyword) {
          if (keyword in object) {
            throw new Error("Cannot eventify object that has `" + keyword + "()` method on it");
          }
        });
      }
    }
  });

  // ../../node_modules/amazon-quicksight-embedding-sdk/dist/lib/constants.js
  var require_constants = __commonJS({
    "../../node_modules/amazon-quicksight-embedding-sdk/dist/lib/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.OUT_GOING_POST_MESSAGE_EVENT_NAMES = exports.IN_COMING_POST_MESSAGE_EVENT_NAMES = exports.DEFAULT_EMBEDDING_VISUAL_TYPE_OPTIONS = exports.DASHBOARD_SIZE_OPTIONS = exports.CLIENT_FACING_EVENT_NAMES = void 0;
      var OUT_GOING_POST_MESSAGE_EVENT_NAMES = {
        ESTABLISH_MESSAGE_CHANNEL: "establishMessageChannel",
        UPDATE_PARAMETER_VALUES: "updateParameterValues",
        DEFAULT_EMBEDDING_VISUAL_TYPE_OPTIONS: "updateDefaultEmbeddingVisualType",
        NAVIGATE_TO_DASHBOARD: "navigateToDashboard",
        GET_ACTIVE_PARAMETER_VALUES: "getActiveParameterValues",
        NAVIGATE_TO_SHEET: "navigateToSheet",
        GET_SHEETS: "getSheets",
        PRINT: "initiatePrint",
        HIDE_Q_BAR: "hideQSearchBar",
        SET_Q_BAR_QUESTION: "setQBarQuestion"
      };
      exports.OUT_GOING_POST_MESSAGE_EVENT_NAMES = OUT_GOING_POST_MESSAGE_EVENT_NAMES;
      var IN_COMING_POST_MESSAGE_EVENT_NAMES = {
        LOAD: "load",
        ERROR: "error",
        RESIZE_EVENT: "RESIZE_EVENT",
        SHOW_MODAL_EVENT: "SHOW_MODAL_EVENT"
      };
      exports.IN_COMING_POST_MESSAGE_EVENT_NAMES = IN_COMING_POST_MESSAGE_EVENT_NAMES;
      var CLIENT_FACING_EVENT_NAMES = {
        load: "load",
        error: "error",
        parametersChange: "parametersChange",
        selectedSheetChange: "selectedSheetChange",
        RESIZE_EVENT: "resize",
        SHOW_MODAL_EVENT: "SHOW_MODAL_EVENT",
        GET_ACTIVE_PARAMETER_VALUES: "GET_ACTIVE_PARAMETER_VALUES",
        GET_SHEETS: "GET_SHEETS",
        SHOW_Q_BAR: "showQSearchBar",
        HIDE_Q_BAR: "hideQSearchBar",
        RESIZE_Q_BAR: "resizeQSearchBar"
      };
      exports.CLIENT_FACING_EVENT_NAMES = CLIENT_FACING_EVENT_NAMES;
      var DASHBOARD_SIZE_OPTIONS = {
        AUTO_FIT: "AutoFit"
      };
      exports.DASHBOARD_SIZE_OPTIONS = DASHBOARD_SIZE_OPTIONS;
      var DEFAULT_EMBEDDING_VISUAL_TYPE_OPTIONS = {
        AUTO_GRAPH: "AUTO_GRAPH",
        TABLE: "TABLE"
      };
      exports.DEFAULT_EMBEDDING_VISUAL_TYPE_OPTIONS = DEFAULT_EMBEDDING_VISUAL_TYPE_OPTIONS;
    }
  });

  // ../../node_modules/amazon-quicksight-embedding-sdk/dist/lib/constructEvent.js
  var require_constructEvent = __commonJS({
    "../../node_modules/amazon-quicksight-embedding-sdk/dist/lib/constructEvent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = constructEvent;
      var _constants = require_constants();
      function constructEvent(eventName, payload) {
        var isValidEventName = Object.keys(_constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES).some(function(k) {
          return _constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES[k] === eventName;
        });
        if (!isValidEventName) {
          throw new Error("Unexpected eventName");
        }
        return {
          eventName,
          clientType: "EMBEDDING",
          payload
        };
      }
    }
  });

  // ../../node_modules/punycode/punycode.js
  var require_punycode = __commonJS({
    "../../node_modules/punycode/punycode.js"(exports, module) {
      "use strict";
      var maxInt = 2147483647;
      var base = 36;
      var tMin = 1;
      var tMax = 26;
      var skew = 38;
      var damp = 700;
      var initialBias = 72;
      var initialN = 128;
      var delimiter = "-";
      var regexPunycode = /^xn--/;
      var regexNonASCII = /[^\0-\x7E]/;
      var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
      var errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      };
      var baseMinusTMin = base - tMin;
      var floor = Math.floor;
      var stringFromCharCode = String.fromCharCode;
      function error2(type) {
        throw new RangeError(errors[type]);
      }
      function map(array, fn) {
        const result = [];
        let length = array.length;
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        const parts = string.split("@");
        let result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        const labels = string.split(".");
        const encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        const output = [];
        let counter = 0;
        const length = string.length;
        while (counter < length) {
          const value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            const extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      var ucs2encode = (array) => String.fromCodePoint(...array);
      var basicToDigit = function(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      };
      var digitToBasic = function(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      };
      var adapt = function(delta, numPoints, firstTime) {
        let k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      };
      var decode = function(input) {
        const output = [];
        const inputLength = input.length;
        let i = 0;
        let n = initialN;
        let bias = initialBias;
        let basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (let j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error2("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (let index2 = basic > 0 ? basic + 1 : 0; index2 < inputLength; ) {
          let oldi = i;
          for (let w = 1, k = base; ; k += base) {
            if (index2 >= inputLength) {
              error2("invalid-input");
            }
            const digit = basicToDigit(input.charCodeAt(index2++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error2("overflow");
            }
            i += digit * w;
            const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            const baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error2("overflow");
            }
            w *= baseMinusT;
          }
          const out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error2("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return String.fromCodePoint(...output);
      };
      var encode = function(input) {
        const output = [];
        input = ucs2decode(input);
        let inputLength = input.length;
        let n = initialN;
        let delta = 0;
        let bias = initialBias;
        for (const currentValue of input) {
          if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        let basicLength = output.length;
        let handledCPCount = basicLength;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          let m = maxInt;
          for (const currentValue of input) {
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          const handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error2("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (const currentValue of input) {
            if (currentValue < n && ++delta > maxInt) {
              error2("overflow");
            }
            if (currentValue == n) {
              let q = delta;
              for (let k = base; ; k += base) {
                const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                const qMinusT = q - t;
                const baseMinusT = base - t;
                output.push(
                  stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                );
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output.join("");
      };
      var toUnicode = function(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      };
      var toASCII = function(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      };
      var punycode = {
        "version": "2.1.0",
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      module.exports = punycode;
    }
  });

  // ../../node_modules/amazon-quicksight-embedding-sdk/dist/EmbeddableObject.js
  var require_EmbeddableObject = __commonJS({
    "../../node_modules/amazon-quicksight-embedding-sdk/dist/EmbeddableObject.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _eventify = _interopRequireDefault(require_eventify());
      var _constructEvent = _interopRequireDefault(require_constructEvent());
      var _constants = require_constants();
      var _punycode = _interopRequireDefault(require_punycode());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _classCallCheck2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties2(target2, props2) {
        for (var i = 0; i < props2.length; i++) {
          var descriptor = props2[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target2, descriptor.key, descriptor);
        }
      }
      function _createClass2(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties2(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties2(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      var EmbeddableObject = /* @__PURE__ */ function() {
        function EmbeddableObject2(options) {
          _classCallCheck2(this, EmbeddableObject2);
          if (!options) {
            throw new Error("options is required");
          }
          if (!options.url) {
            throw new Error("url is required");
          }
          var url = options.url, container = options.container, parameters = options.parameters, defaultEmbeddingVisualType = options.defaultEmbeddingVisualType, errorCallback = options.errorCallback, loadCallback = options.loadCallback, parametersChangeCallback = options.parametersChangeCallback, selectedSheetChangeCallback = options.selectedSheetChangeCallback, isQEmbedded = options.isQEmbedded;
          this.url = url;
          if (container instanceof HTMLElement) {
            this.container = container;
          } else if (typeof container === "string") {
            this.container = document.querySelector(container);
          }
          if (!this.container) {
            throw new Error("can't find valid container");
          }
          this.parameters = parameters;
          this.defaultEmbeddingVisualType = defaultEmbeddingVisualType;
          this.iframe = createIframe(options);
          (0, _eventify["default"])(this);
          if (typeof errorCallback === "function") {
            this.on(_constants.CLIENT_FACING_EVENT_NAMES.error, errorCallback);
          }
          if (typeof loadCallback === "function") {
            this.on(_constants.CLIENT_FACING_EVENT_NAMES.load, loadCallback);
          }
          if (typeof parametersChangeCallback === "function") {
            this.on(_constants.CLIENT_FACING_EVENT_NAMES.parametersChange, parametersChangeCallback);
          }
          if (typeof selectedSheetChangeCallback === "function") {
            this.on(_constants.CLIENT_FACING_EVENT_NAMES.selectedSheetChange, selectedSheetChangeCallback);
          }
          window.addEventListener("message", function(event) {
            if (!event) {
              return;
            }
            if (event.source === (this.iframe && this.iframe.contentWindow)) {
              this.handleMessageEvent(event, options);
            }
          }.bind(this), false);
          if (isQEmbedded) {
            this.qBarOpen = false;
            this.isQEmbedded = isQEmbedded;
            this.qOptions = options.qSearchBarOptions;
            window.addEventListener("click", function(event) {
              var isClickInside = this.container ? this.container.contains(event.target) : true;
              if (!isClickInside) {
                this.closeQPopover();
              }
            }.bind(this), false);
          }
          this.getContainer = this.getContainer.bind(this);
          this.getParameters = this.getParameters.bind(this);
          this.getActiveParameterValues = this.getActiveParameterValues.bind(this);
          this.getSheets = this.getSheets.bind(this);
          this.getDefaultEmbeddingVisualType = this.getDefaultEmbeddingVisualType.bind(this);
          this.getUrl = this.getUrl.bind(this);
          this.handleMessageEvent = this.handleMessageEvent.bind(this);
          this.setParameters = this.setParameters.bind(this);
          this.setDefaultEmbeddingVisualType = this.setDefaultEmbeddingVisualType.bind(this);
          this.setQBarQuestion = this.setQBarQuestion.bind(this);
          this.closeQPopover = this.closeQPopover.bind(this);
        }
        _createClass2(EmbeddableObject2, [{
          key: "getUrl",
          value: function getUrl() {
            return this.url;
          }
        }, {
          key: "getContainer",
          value: function getContainer() {
            return this.container;
          }
        }, {
          key: "getParameters",
          value: function getParameters() {
            return this.parameters;
          }
        }, {
          key: "getActiveParameterValues",
          value: function getActiveParameterValues(callback) {
            if (typeof callback !== "function") {
              return;
            }
            if (this.getActiveParametersCallback) {
              this.off(_constants.CLIENT_FACING_EVENT_NAMES.GET_ACTIVE_PARAMETER_VALUES, this.getActiveParametersCallback);
            }
            this.getActiveParametersCallback = callback;
            this.on(_constants.CLIENT_FACING_EVENT_NAMES.GET_ACTIVE_PARAMETER_VALUES, callback);
            var event = (0, _constructEvent["default"])(_constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.GET_ACTIVE_PARAMETER_VALUES, {});
            this.iframe.contentWindow.postMessage(event, this.url);
          }
        }, {
          key: "getSheets",
          value: function getSheets(callback) {
            if (typeof callback !== "function") {
              return;
            }
            if (this.getSheetsCallback) {
              this.off(_constants.CLIENT_FACING_EVENT_NAMES.GET_SHEETS, this.getSheetsCallback);
            }
            this.getSheetsCallback = callback;
            this.on(_constants.CLIENT_FACING_EVENT_NAMES.GET_SHEETS, callback);
            var event = (0, _constructEvent["default"])(_constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.GET_SHEETS, {});
            this.iframe.contentWindow.postMessage(event, this.url);
          }
        }, {
          key: "handleShowQ",
          value: function handleShowQ(payload) {
            if (this.qOptions && this.qOptions.expandCallback && typeof this.qOptions.expandCallback === "function" && !this.qBarOpen) {
              this.qOptions.expandCallback();
            }
            if (payload && payload.height) {
              this.iframe.height = payload.height;
            }
            this.qBarOpen = true;
          }
        }, {
          key: "handleHideQ",
          value: function handleHideQ(payload) {
            if (this.qOptions && this.qOptions.collapseCallback && typeof this.qOptions.collapseCallback === "function" && this.qBarOpen) {
              this.qOptions.collapseCallback();
            }
            if (payload && payload.height) {
              this.iframe.height = payload.height;
            }
            this.qBarOpen = false;
          }
        }, {
          key: "handleResizeQ",
          value: function handleResizeQ(payload) {
            if (payload && payload.height) {
              this.iframe.height = payload.height;
            }
          }
        }, {
          key: "handleMessageEvent",
          value: function handleMessageEvent(event, options) {
            var _event$data = event.data, eventName = _event$data.eventName, payload = _event$data.payload;
            this.trigger(_constants.CLIENT_FACING_EVENT_NAMES[eventName], payload);
            if (eventName === _constants.IN_COMING_POST_MESSAGE_EVENT_NAMES.RESIZE_EVENT) {
              var height = options.height;
              if (height === _constants.DASHBOARD_SIZE_OPTIONS.AUTO_FIT) {
                this.iframe.height = payload.height;
              }
            } else if (eventName === _constants.CLIENT_FACING_EVENT_NAMES.SHOW_Q_BAR) {
              this.handleShowQ(payload);
            } else if (eventName === _constants.CLIENT_FACING_EVENT_NAMES.HIDE_Q_BAR) {
              this.handleHideQ(payload);
            } else if (eventName === _constants.CLIENT_FACING_EVENT_NAMES.RESIZE_Q_BAR) {
              this.handleResizeQ(payload);
            }
          }
        }, {
          key: "getDefaultEmbeddingVisualType",
          value: function getDefaultEmbeddingVisualType() {
            return this.defaultEmbeddingVisualType;
          }
        }, {
          key: "setParameters",
          value: function setParameters(parameters) {
            var event = this.getParameterEvent(parameters);
            this.iframe.contentWindow.postMessage(event, this.url);
          }
        }, {
          key: "getParameterEvent",
          value: function getParameterEvent(parameters) {
            var eventName = _constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.UPDATE_PARAMETER_VALUES;
            var payload = {};
            var parameterNames = Object.keys(parameters);
            parameterNames.map(function(name) {
              var value = parameters[name];
              var values = [].concat(value);
              var encodedName = encodeURIComponent(name);
              payload[encodedName] = values.map(function(paramValue) {
                return encodeURIComponent(paramValue);
              });
            });
            return (0, _constructEvent["default"])(eventName, {
              parameters: payload
            });
          }
        }, {
          key: "setDefaultEmbeddingVisualType",
          value: function setDefaultEmbeddingVisualType(defaultEmbeddingVisualType) {
            var event = this.generateDefaultEmbeddingVisualTypeEvent(defaultEmbeddingVisualType);
            this.iframe.contentWindow.postMessage(event, this.url);
          }
        }, {
          key: "generateDefaultEmbeddingVisualTypeEvent",
          value: function generateDefaultEmbeddingVisualTypeEvent(defaultEmbeddingVisualType) {
            var eventName = _constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.DEFAULT_EMBEDDING_VISUAL_TYPE_OPTIONS;
            if (defaultEmbeddingVisualType == null || !(defaultEmbeddingVisualType in _constants.DEFAULT_EMBEDDING_VISUAL_TYPE_OPTIONS)) {
              defaultEmbeddingVisualType = _constants.DEFAULT_EMBEDDING_VISUAL_TYPE_OPTIONS.AUTO_GRAPH;
            }
            var payload = {
              defaultEmbeddingVisualType
            };
            return (0, _constructEvent["default"])(eventName, payload);
          }
        }, {
          key: "getQuestionEvent",
          value: function getQuestionEvent(question) {
            var eventName = _constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.SET_Q_BAR_QUESTION;
            return (0, _constructEvent["default"])(eventName, {
              question
            });
          }
        }, {
          key: "setQBarQuestion",
          value: function setQBarQuestion(question) {
            var event = this.getQuestionEvent(question);
            this.iframe.contentWindow.postMessage(event, this.url);
          }
        }, {
          key: "closeQPopover",
          value: function closeQPopover() {
            var _this$iframe$contentW;
            var closeQPopoverEvent = (0, _constructEvent["default"])(_constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.HIDE_Q_BAR, {});
            (_this$iframe$contentW = this.iframe.contentWindow) === null || _this$iframe$contentW === void 0 ? void 0 : _this$iframe$contentW.postMessage(closeQPopoverEvent, this.url);
          }
        }]);
        return EmbeddableObject2;
      }();
      function createIframe(options) {
        var width = options.width, height = options.height, isQEmbedded = options.isQEmbedded;
        var loadingHeight = options.loadingHeight, url = options.url, scrolling = options.scrolling, className = options.className;
        if (height === _constants.DASHBOARD_SIZE_OPTIONS.AUTO_FIT) {
          height = loadingHeight;
        }
        var iframe = document.createElement("iframe");
        iframe.className = ["quicksight-embedding-iframe", className].join(" ").trim();
        iframe.width = width || "100%";
        iframe.height = height || "100%";
        iframe.scrolling = scrolling || "no";
        iframe.onload = sendInitialPostMessage.bind(null, iframe, url);
        iframe.src = getIframeSrc(options);
        iframe.style.border = "0px";
        iframe.style.padding = "0px";
        if (isQEmbedded) {
          iframe.setAttribute("allowtransparency", "true");
        }
        return iframe;
      }
      function getIframeSrc(options) {
        var url = options.url, parameters = options.parameters, locale = options.locale, footerPaddingEnabled = options.footerPaddingEnabled, iframeResizeOnSheetChange = options.iframeResizeOnSheetChange, printEnabled = options.printEnabled, resetDisabled = options.resetDisabled, sheetId = options.sheetId, sheetTabsDisabled = options.sheetTabsDisabled, undoRedoDisabled = options.undoRedoDisabled, isQEmbedded = options.isQEmbedded, qSearchBarOptions = options.qSearchBarOptions;
        var src = url + "&punyCodeEmbedOrigin=" + _punycode["default"].encode(window.location.origin + "/");
        src = src + "&printEnabled=" + String(!!printEnabled);
        if (locale) {
          src = src + "&locale=" + locale;
        }
        if (sheetTabsDisabled) {
          src = src + "&sheetTabsDisabled=" + String(sheetTabsDisabled);
        }
        if (sheetId) {
          src = src + "&sheetId=" + sheetId;
        }
        if (footerPaddingEnabled) {
          src = src + "&footerPaddingEnabled=" + String(footerPaddingEnabled);
        }
        if (undoRedoDisabled) {
          src = src + "&undoRedoDisabled=" + String(undoRedoDisabled);
        }
        if (resetDisabled) {
          src = src + "&resetDisabled=" + String(resetDisabled);
        }
        if (iframeResizeOnSheetChange) {
          src = src + "&resizeOnSheetChange=" + String(iframeResizeOnSheetChange);
        }
        if (parameters) {
          return useParameterValuesInUrl(src, parameters);
        }
        if (isQEmbedded && qSearchBarOptions) {
          if (qSearchBarOptions.iconDisabled !== void 0) {
            src = src + "&qBarIconDisabled=" + String(qSearchBarOptions.iconDisabled);
          }
          if (qSearchBarOptions.topicNameDisabled !== void 0) {
            src = src + "&qBarTopicNameDisabled=" + String(qSearchBarOptions.topicNameDisabled);
          }
          if (qSearchBarOptions.themeId) {
            src = src + "&themeId=" + qSearchBarOptions.themeId;
          }
          if (qSearchBarOptions.allowTopicSelection !== void 0) {
            src = src + "&allowTopicSelection=" + String(qSearchBarOptions.allowTopicSelection);
          }
        }
        return src;
      }
      function useParameterValuesInUrl(url, parameters) {
        var parameterNames = Object.keys(parameters);
        var parameterStrings = parameterNames.map(function(name) {
          var value = parameters[name];
          var values = [].concat(value);
          var encodedName = encodeURIComponent(name);
          return values.map(function(paramValue) {
            return encodeURIComponent(paramValue);
          }).map(function(encodedValue) {
            return "p.".concat(encodedName, "=").concat(encodedValue);
          }).join("&");
        });
        return "".concat(url, "#").concat(parameterStrings.join("&"));
      }
      function sendInitialPostMessage(iframe, domain) {
        if (iframe.contentWindow === null) {
          setTimeout(sendInitialPostMessage.bind(null, iframe, domain), 100);
          return;
        }
        var eventName = _constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.ESTABLISH_MESSAGE_CHANNEL;
        var event = (0, _constructEvent["default"])(eventName);
        iframe.contentWindow.postMessage(event, domain);
      }
      var _default = EmbeddableObject;
      exports["default"] = _default;
    }
  });

  // ../../node_modules/amazon-quicksight-embedding-sdk/dist/EmbeddableDashboard.js
  var require_EmbeddableDashboard = __commonJS({
    "../../node_modules/amazon-quicksight-embedding-sdk/dist/EmbeddableDashboard.js"(exports) {
      "use strict";
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _constructEvent = _interopRequireDefault(require_constructEvent());
      var _EmbeddableObject2 = _interopRequireDefault(require_EmbeddableObject());
      var _constants = require_constants();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _classCallCheck2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties2(target2, props2) {
        for (var i = 0; i < props2.length; i++) {
          var descriptor = props2[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target2, descriptor.key, descriptor);
        }
      }
      function _createClass2(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties2(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties2(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized(self2);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      var EmbeddableDashboard = /* @__PURE__ */ function(_EmbeddableObject) {
        _inherits(EmbeddableDashboard2, _EmbeddableObject);
        var _super = _createSuper(EmbeddableDashboard2);
        function EmbeddableDashboard2(options) {
          _classCallCheck2(this, EmbeddableDashboard2);
          return _super.call(this, options);
        }
        _createClass2(EmbeddableDashboard2, [{
          key: "navigateToDashboard",
          value: function navigateToDashboard(options) {
            if (!options.dashboardId) {
              throw new Error("dashboardId is required");
            }
            var eventName = _constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.NAVIGATE_TO_DASHBOARD;
            var payload = options;
            var event = (0, _constructEvent["default"])(eventName, payload);
            this.iframe.contentWindow.postMessage(event, this.url);
          }
        }, {
          key: "navigateToSheet",
          value: function navigateToSheet(sheetId) {
            var eventName = _constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.NAVIGATE_TO_SHEET;
            var payload = {
              sheetId
            };
            var event = (0, _constructEvent["default"])(eventName, payload);
            this.iframe.contentWindow.postMessage(event, this.url);
          }
        }, {
          key: "initiatePrint",
          value: function initiatePrint() {
            var eventName = _constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.PRINT;
            var event = (0, _constructEvent["default"])(eventName, {});
            this.iframe.contentWindow.postMessage(event, this.url);
          }
        }]);
        return EmbeddableDashboard2;
      }(_EmbeddableObject2["default"]);
      var _default = EmbeddableDashboard;
      exports["default"] = _default;
    }
  });

  // ../../node_modules/amazon-quicksight-embedding-sdk/dist/EmbeddableVisual.js
  var require_EmbeddableVisual = __commonJS({
    "../../node_modules/amazon-quicksight-embedding-sdk/dist/EmbeddableVisual.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _eventify = _interopRequireDefault(require_eventify());
      var _constructEvent = _interopRequireDefault(require_constructEvent());
      var _constants = require_constants();
      var _punycode = _interopRequireDefault(require_punycode());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _classCallCheck2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties2(target2, props2) {
        for (var i = 0; i < props2.length; i++) {
          var descriptor = props2[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target2, descriptor.key, descriptor);
        }
      }
      function _createClass2(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties2(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties2(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      var EmbeddableVisual = /* @__PURE__ */ function() {
        function EmbeddableVisual2(options) {
          _classCallCheck2(this, EmbeddableVisual2);
          if (!options) {
            throw new Error("options is required");
          }
          if (!options.url) {
            throw new Error("url is required");
          }
          var url = options.url, container = options.container, parameters = options.parameters, errorCallback = options.errorCallback, loadCallback = options.loadCallback, parametersChangeCallback = options.parametersChangeCallback;
          this.url = url;
          if (container instanceof HTMLElement) {
            this.container = container;
          } else if (typeof container === "string") {
            this.container = document.querySelector(container);
          }
          if (!this.container) {
            throw new Error("can't find valid container");
          }
          this.parameters = parameters;
          this.iframe = createIframe(options);
          (0, _eventify["default"])(this);
          if (typeof errorCallback === "function") {
            this.on(_constants.CLIENT_FACING_EVENT_NAMES.error, errorCallback);
          }
          if (typeof loadCallback === "function") {
            this.on(_constants.CLIENT_FACING_EVENT_NAMES.load, loadCallback);
          }
          if (typeof parametersChangeCallback === "function") {
            this.on(_constants.CLIENT_FACING_EVENT_NAMES.parametersChange, parametersChangeCallback);
          }
          window.addEventListener("message", function(event) {
            if (!event) {
              return;
            }
            if (event.source === (this.iframe && this.iframe.contentWindow)) {
              this.handleMessageEvent(event, options);
            }
          }.bind(this), false);
          this.getContainer = this.getContainer.bind(this);
          this.getParameters = this.getParameters.bind(this);
          this.getActiveParameterValues = this.getActiveParameterValues.bind(this);
          this.getUrl = this.getUrl.bind(this);
          this.handleMessageEvent = this.handleMessageEvent.bind(this);
          this.setParameters = this.setParameters.bind(this);
        }
        _createClass2(EmbeddableVisual2, [{
          key: "getUrl",
          value: function getUrl() {
            return this.url;
          }
        }, {
          key: "getContainer",
          value: function getContainer() {
            return this.container;
          }
        }, {
          key: "getParameters",
          value: function getParameters() {
            return this.parameters;
          }
        }, {
          key: "getActiveParameterValues",
          value: function getActiveParameterValues(callback) {
            if (typeof callback !== "function") {
              return;
            }
            if (this.getActiveParametersCallback) {
              this.off(_constants.CLIENT_FACING_EVENT_NAMES.GET_ACTIVE_PARAMETER_VALUES, this.getActiveParametersCallback);
            }
            this.getActiveParametersCallback = callback;
            this.on(_constants.CLIENT_FACING_EVENT_NAMES.GET_ACTIVE_PARAMETER_VALUES, callback);
            var event = (0, _constructEvent["default"])(_constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.GET_ACTIVE_PARAMETER_VALUES, {});
            this.iframe.contentWindow.postMessage(event, this.url);
          }
        }, {
          key: "handleMessageEvent",
          value: function handleMessageEvent(event, options) {
            var _event$data = event.data, eventName = _event$data.eventName, payload = _event$data.payload;
            this.trigger(_constants.CLIENT_FACING_EVENT_NAMES[eventName], payload);
            if (eventName === _constants.IN_COMING_POST_MESSAGE_EVENT_NAMES.RESIZE_EVENT) {
              var height = options.height;
              if (height === _constants.DASHBOARD_SIZE_OPTIONS.AUTO_FIT) {
                this.iframe.height = payload.height;
              }
            }
          }
        }, {
          key: "setParameters",
          value: function setParameters(parameters) {
            var event = this.getParameterEvent(parameters);
            this.iframe.contentWindow.postMessage(event, this.url);
          }
        }, {
          key: "getParameterEvent",
          value: function getParameterEvent(parameters) {
            var eventName = _constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.UPDATE_PARAMETER_VALUES;
            var payload = {};
            var parameterNames = Object.keys(parameters);
            parameterNames.map(function(name) {
              var value = parameters[name];
              var values = [].concat(value);
              var encodedName = encodeURIComponent(name);
              payload[encodedName] = values.map(function(paramValue) {
                return encodeURIComponent(paramValue);
              });
            });
            return (0, _constructEvent["default"])(eventName, {
              parameters: payload
            });
          }
        }]);
        return EmbeddableVisual2;
      }();
      function createIframe(options) {
        var width = options.width, height = options.height;
        var loadingHeight = options.loadingHeight, url = options.url, scrolling = options.scrolling, className = options.className;
        if (height === _constants.DASHBOARD_SIZE_OPTIONS.AUTO_FIT) {
          height = loadingHeight;
        }
        var iframe = document.createElement("iframe");
        iframe.className = ["quicksight-embedding-iframe", className].join(" ").trim();
        iframe.width = width || "100%";
        iframe.height = height || "100%";
        iframe.scrolling = scrolling || "no";
        iframe.onload = sendInitialPostMessage.bind(null, iframe, url);
        iframe.src = getIframeSrc(options);
        iframe.style.border = "0px";
        iframe.style.padding = "0px";
        return iframe;
      }
      function getIframeSrc(options) {
        var url = options.url, parameters = options.parameters, locale = options.locale, fitToIframeWidth = options.fitToIframeWidth, footerPaddingEnabled = options.footerPaddingEnabled;
        var src = url + "&punyCodeEmbedOrigin=" + _punycode["default"].encode(window.location.origin + "/");
        if (locale) {
          src = src + "&locale=" + locale;
        }
        if (footerPaddingEnabled) {
          src = src + "&footerPaddingEnabled=true";
        }
        if (fitToIframeWidth !== false) {
          src = src + "&fitToIframeWidth=true";
        }
        if (parameters) {
          return useParameterValuesInUrl(src, parameters);
        }
        return src;
      }
      function useParameterValuesInUrl(url, parameters) {
        var parameterNames = Object.keys(parameters);
        var parameterStrings = parameterNames.map(function(name) {
          var value = parameters[name];
          var values = [].concat(value);
          var encodedName = encodeURIComponent(name);
          return values.map(function(paramValue) {
            return encodeURIComponent(paramValue);
          }).map(function(encodedValue) {
            return "p.".concat(encodedName, "=").concat(encodedValue);
          }).join("&");
        });
        return "".concat(url, "#").concat(parameterStrings.join("&"));
      }
      function sendInitialPostMessage(iframe, domain) {
        if (iframe.contentWindow === null) {
          setTimeout(sendInitialPostMessage.bind(null, iframe, domain), 100);
          return;
        }
        var eventName = _constants.OUT_GOING_POST_MESSAGE_EVENT_NAMES.ESTABLISH_MESSAGE_CHANNEL;
        var event = (0, _constructEvent["default"])(eventName);
        iframe.contentWindow.postMessage(event, domain);
      }
      var _default = EmbeddableVisual;
      exports["default"] = _default;
    }
  });

  // ../../node_modules/amazon-quicksight-embedding-sdk/dist/embed.js
  var require_embed = __commonJS({
    "../../node_modules/amazon-quicksight-embedding-sdk/dist/embed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.embedDashboard = embedDashboard2;
      exports.embedQSearchBar = embedQSearchBar;
      exports.embedSession = embedSession;
      exports.embedVisual = embedVisual;
      var _EmbeddableObject = _interopRequireDefault(require_EmbeddableObject());
      var _EmbeddableDashboard = _interopRequireDefault(require_EmbeddableDashboard());
      var _EmbeddableVisual = _interopRequireDefault(require_EmbeddableVisual());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target2, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target2;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function embedVisual(options) {
        var visual = new _EmbeddableVisual["default"](options);
        var container = visual.getContainer();
        setTimeout(attachToDom.bind(null, visual.iframe, container), 0);
        return visual;
      }
      function embedDashboard2(options) {
        var dashboard = new _EmbeddableDashboard["default"](options);
        return embedObject(dashboard);
      }
      function embedSession(options) {
        var embeddedSession = new _EmbeddableObject["default"](options);
        return embedObject(embeddedSession);
      }
      function embedQSearchBar(options) {
        var embeddedQSearchBar = new _EmbeddableObject["default"](_objectSpread(_objectSpread({}, options || {}), {}, {
          isQEmbedded: true
        }));
        return embedObject(embeddedQSearchBar);
      }
      function embedObject(embeddableObject) {
        var container = embeddableObject.getContainer();
        setTimeout(attachToDom.bind(null, embeddableObject.iframe, container), 0);
        return embeddableObject;
      }
      function attachToDom(iframe, container) {
        if (!iframe) {
          throw new Error("iFrame is required");
        }
        if (!container) {
          throw new Error("container of iFrame is required");
        }
        container.appendChild(iframe);
      }
    }
  });

  // ../../node_modules/amazon-quicksight-embedding-sdk/dist/index.js
  var require_dist = __commonJS({
    "../../node_modules/amazon-quicksight-embedding-sdk/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "embedDashboard", {
        enumerable: true,
        get: function get2() {
          return _embed.embedDashboard;
        }
      });
      Object.defineProperty(exports, "embedQSearchBar", {
        enumerable: true,
        get: function get2() {
          return _embed.embedQSearchBar;
        }
      });
      Object.defineProperty(exports, "embedSession", {
        enumerable: true,
        get: function get2() {
          return _embed.embedSession;
        }
      });
      Object.defineProperty(exports, "embedVisual", {
        enumerable: true,
        get: function get2() {
          return _embed.embedVisual;
        }
      });
      var _embed = require_embed();
    }
  });

  // ../../node_modules/@rails/actioncable/src/adapters.js
  var adapters_default;
  var init_adapters = __esm({
    "../../node_modules/@rails/actioncable/src/adapters.js"() {
      adapters_default = {
        logger: self.console,
        WebSocket: self.WebSocket
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/logger.js
  var logger_default;
  var init_logger = __esm({
    "../../node_modules/@rails/actioncable/src/logger.js"() {
      init_adapters();
      logger_default = {
        log(...messages) {
          if (this.enabled) {
            messages.push(Date.now());
            adapters_default.logger.log("[ActionCable]", ...messages);
          }
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/connection_monitor.js
  var now, secondsSince, ConnectionMonitor, connection_monitor_default;
  var init_connection_monitor = __esm({
    "../../node_modules/@rails/actioncable/src/connection_monitor.js"() {
      init_logger();
      now = () => new Date().getTime();
      secondsSince = (time) => (now() - time) / 1e3;
      ConnectionMonitor = class {
        constructor(connection) {
          this.visibilityDidChange = this.visibilityDidChange.bind(this);
          this.connection = connection;
          this.reconnectAttempts = 0;
        }
        start() {
          if (!this.isRunning()) {
            this.startedAt = now();
            delete this.stoppedAt;
            this.startPolling();
            addEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`);
          }
        }
        stop() {
          if (this.isRunning()) {
            this.stoppedAt = now();
            this.stopPolling();
            removeEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log("ConnectionMonitor stopped");
          }
        }
        isRunning() {
          return this.startedAt && !this.stoppedAt;
        }
        recordPing() {
          this.pingedAt = now();
        }
        recordConnect() {
          this.reconnectAttempts = 0;
          this.recordPing();
          delete this.disconnectedAt;
          logger_default.log("ConnectionMonitor recorded connect");
        }
        recordDisconnect() {
          this.disconnectedAt = now();
          logger_default.log("ConnectionMonitor recorded disconnect");
        }
        startPolling() {
          this.stopPolling();
          this.poll();
        }
        stopPolling() {
          clearTimeout(this.pollTimeout);
        }
        poll() {
          this.pollTimeout = setTimeout(
            () => {
              this.reconnectIfStale();
              this.poll();
            },
            this.getPollInterval()
          );
        }
        getPollInterval() {
          const { staleThreshold, reconnectionBackoffRate } = this.constructor;
          const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));
          const jitterMax = this.reconnectAttempts === 0 ? 1 : reconnectionBackoffRate;
          const jitter = jitterMax * Math.random();
          return staleThreshold * 1e3 * backoff * (1 + jitter);
        }
        reconnectIfStale() {
          if (this.connectionIsStale()) {
            logger_default.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`);
            this.reconnectAttempts++;
            if (this.disconnectedRecently()) {
              logger_default.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince(this.disconnectedAt)} s`);
            } else {
              logger_default.log("ConnectionMonitor reopening");
              this.connection.reopen();
            }
          }
        }
        get refreshedAt() {
          return this.pingedAt ? this.pingedAt : this.startedAt;
        }
        connectionIsStale() {
          return secondsSince(this.refreshedAt) > this.constructor.staleThreshold;
        }
        disconnectedRecently() {
          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;
        }
        visibilityDidChange() {
          if (document.visibilityState === "visible") {
            setTimeout(
              () => {
                if (this.connectionIsStale() || !this.connection.isOpen()) {
                  logger_default.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`);
                  this.connection.reopen();
                }
              },
              200
            );
          }
        }
      };
      ConnectionMonitor.staleThreshold = 6;
      ConnectionMonitor.reconnectionBackoffRate = 0.15;
      connection_monitor_default = ConnectionMonitor;
    }
  });

  // ../../node_modules/@rails/actioncable/src/internal.js
  var internal_default;
  var init_internal = __esm({
    "../../node_modules/@rails/actioncable/src/internal.js"() {
      internal_default = {
        "message_types": {
          "welcome": "welcome",
          "disconnect": "disconnect",
          "ping": "ping",
          "confirmation": "confirm_subscription",
          "rejection": "reject_subscription"
        },
        "disconnect_reasons": {
          "unauthorized": "unauthorized",
          "invalid_request": "invalid_request",
          "server_restart": "server_restart"
        },
        "default_mount_path": "/cable",
        "protocols": [
          "actioncable-v1-json",
          "actioncable-unsupported"
        ]
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/connection.js
  var message_types, protocols, supportedProtocols, indexOf, Connection, connection_default;
  var init_connection = __esm({
    "../../node_modules/@rails/actioncable/src/connection.js"() {
      init_adapters();
      init_connection_monitor();
      init_internal();
      init_logger();
      ({ message_types, protocols } = internal_default);
      supportedProtocols = protocols.slice(0, protocols.length - 1);
      indexOf = [].indexOf;
      Connection = class {
        constructor(consumer2) {
          this.open = this.open.bind(this);
          this.consumer = consumer2;
          this.subscriptions = this.consumer.subscriptions;
          this.monitor = new connection_monitor_default(this);
          this.disconnected = true;
        }
        send(data) {
          if (this.isOpen()) {
            this.webSocket.send(JSON.stringify(data));
            return true;
          } else {
            return false;
          }
        }
        open() {
          if (this.isActive()) {
            logger_default.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`);
            return false;
          } else {
            logger_default.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${protocols}`);
            if (this.webSocket) {
              this.uninstallEventHandlers();
            }
            this.webSocket = new adapters_default.WebSocket(this.consumer.url, protocols);
            this.installEventHandlers();
            this.monitor.start();
            return true;
          }
        }
        close({ allowReconnect } = { allowReconnect: true }) {
          if (!allowReconnect) {
            this.monitor.stop();
          }
          if (this.isOpen()) {
            return this.webSocket.close();
          }
        }
        reopen() {
          logger_default.log(`Reopening WebSocket, current state is ${this.getState()}`);
          if (this.isActive()) {
            try {
              return this.close();
            } catch (error2) {
              logger_default.log("Failed to reopen WebSocket", error2);
            } finally {
              logger_default.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`);
              setTimeout(this.open, this.constructor.reopenDelay);
            }
          } else {
            return this.open();
          }
        }
        getProtocol() {
          if (this.webSocket) {
            return this.webSocket.protocol;
          }
        }
        isOpen() {
          return this.isState("open");
        }
        isActive() {
          return this.isState("open", "connecting");
        }
        isProtocolSupported() {
          return indexOf.call(supportedProtocols, this.getProtocol()) >= 0;
        }
        isState(...states2) {
          return indexOf.call(states2, this.getState()) >= 0;
        }
        getState() {
          if (this.webSocket) {
            for (let state in adapters_default.WebSocket) {
              if (adapters_default.WebSocket[state] === this.webSocket.readyState) {
                return state.toLowerCase();
              }
            }
          }
          return null;
        }
        installEventHandlers() {
          for (let eventName in this.events) {
            const handler = this.events[eventName].bind(this);
            this.webSocket[`on${eventName}`] = handler;
          }
        }
        uninstallEventHandlers() {
          for (let eventName in this.events) {
            this.webSocket[`on${eventName}`] = function() {
            };
          }
        }
      };
      Connection.reopenDelay = 500;
      Connection.prototype.events = {
        message(event) {
          if (!this.isProtocolSupported()) {
            return;
          }
          const { identifier, message, reason, reconnect, type } = JSON.parse(event.data);
          switch (type) {
            case message_types.welcome:
              this.monitor.recordConnect();
              return this.subscriptions.reload();
            case message_types.disconnect:
              logger_default.log(`Disconnecting. Reason: ${reason}`);
              return this.close({ allowReconnect: reconnect });
            case message_types.ping:
              return this.monitor.recordPing();
            case message_types.confirmation:
              this.subscriptions.confirmSubscription(identifier);
              return this.subscriptions.notify(identifier, "connected");
            case message_types.rejection:
              return this.subscriptions.reject(identifier);
            default:
              return this.subscriptions.notify(identifier, "received", message);
          }
        },
        open() {
          logger_default.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`);
          this.disconnected = false;
          if (!this.isProtocolSupported()) {
            logger_default.log("Protocol is unsupported. Stopping monitor and disconnecting.");
            return this.close({ allowReconnect: false });
          }
        },
        close(event) {
          logger_default.log("WebSocket onclose event");
          if (this.disconnected) {
            return;
          }
          this.disconnected = true;
          this.monitor.recordDisconnect();
          return this.subscriptions.notifyAll("disconnected", { willAttemptReconnect: this.monitor.isRunning() });
        },
        error() {
          logger_default.log("WebSocket onerror event");
        }
      };
      connection_default = Connection;
    }
  });

  // ../../node_modules/@rails/actioncable/src/subscription.js
  var extend2, Subscription;
  var init_subscription = __esm({
    "../../node_modules/@rails/actioncable/src/subscription.js"() {
      extend2 = function(object, properties) {
        if (properties != null) {
          for (let key in properties) {
            const value = properties[key];
            object[key] = value;
          }
        }
        return object;
      };
      Subscription = class {
        constructor(consumer2, params = {}, mixin) {
          this.consumer = consumer2;
          this.identifier = JSON.stringify(params);
          extend2(this, mixin);
        }
        perform(action, data = {}) {
          data.action = action;
          return this.send(data);
        }
        send(data) {
          return this.consumer.send({ command: "message", identifier: this.identifier, data: JSON.stringify(data) });
        }
        unsubscribe() {
          return this.consumer.subscriptions.remove(this);
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/subscription_guarantor.js
  var SubscriptionGuarantor, subscription_guarantor_default;
  var init_subscription_guarantor = __esm({
    "../../node_modules/@rails/actioncable/src/subscription_guarantor.js"() {
      init_logger();
      SubscriptionGuarantor = class {
        constructor(subscriptions) {
          this.subscriptions = subscriptions;
          this.pendingSubscriptions = [];
        }
        guarantee(subscription) {
          if (this.pendingSubscriptions.indexOf(subscription) == -1) {
            logger_default.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`);
            this.pendingSubscriptions.push(subscription);
          } else {
            logger_default.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`);
          }
          this.startGuaranteeing();
        }
        forget(subscription) {
          logger_default.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`);
          this.pendingSubscriptions = this.pendingSubscriptions.filter((s) => s !== subscription);
        }
        startGuaranteeing() {
          this.stopGuaranteeing();
          this.retrySubscribing();
        }
        stopGuaranteeing() {
          clearTimeout(this.retryTimeout);
        }
        retrySubscribing() {
          this.retryTimeout = setTimeout(
            () => {
              if (this.subscriptions && typeof this.subscriptions.subscribe === "function") {
                this.pendingSubscriptions.map((subscription) => {
                  logger_default.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`);
                  this.subscriptions.subscribe(subscription);
                });
              }
            },
            500
          );
        }
      };
      subscription_guarantor_default = SubscriptionGuarantor;
    }
  });

  // ../../node_modules/@rails/actioncable/src/subscriptions.js
  var Subscriptions;
  var init_subscriptions = __esm({
    "../../node_modules/@rails/actioncable/src/subscriptions.js"() {
      init_subscription();
      init_subscription_guarantor();
      init_logger();
      Subscriptions = class {
        constructor(consumer2) {
          this.consumer = consumer2;
          this.guarantor = new subscription_guarantor_default(this);
          this.subscriptions = [];
        }
        create(channelName, mixin) {
          const channel = channelName;
          const params = typeof channel === "object" ? channel : { channel };
          const subscription = new Subscription(this.consumer, params, mixin);
          return this.add(subscription);
        }
        add(subscription) {
          this.subscriptions.push(subscription);
          this.consumer.ensureActiveConnection();
          this.notify(subscription, "initialized");
          this.subscribe(subscription);
          return subscription;
        }
        remove(subscription) {
          this.forget(subscription);
          if (!this.findAll(subscription.identifier).length) {
            this.sendCommand(subscription, "unsubscribe");
          }
          return subscription;
        }
        reject(identifier) {
          return this.findAll(identifier).map((subscription) => {
            this.forget(subscription);
            this.notify(subscription, "rejected");
            return subscription;
          });
        }
        forget(subscription) {
          this.guarantor.forget(subscription);
          this.subscriptions = this.subscriptions.filter((s) => s !== subscription);
          return subscription;
        }
        findAll(identifier) {
          return this.subscriptions.filter((s) => s.identifier === identifier);
        }
        reload() {
          return this.subscriptions.map((subscription) => this.subscribe(subscription));
        }
        notifyAll(callbackName, ...args) {
          return this.subscriptions.map((subscription) => this.notify(subscription, callbackName, ...args));
        }
        notify(subscription, callbackName, ...args) {
          let subscriptions;
          if (typeof subscription === "string") {
            subscriptions = this.findAll(subscription);
          } else {
            subscriptions = [subscription];
          }
          return subscriptions.map((subscription2) => typeof subscription2[callbackName] === "function" ? subscription2[callbackName](...args) : void 0);
        }
        subscribe(subscription) {
          if (this.sendCommand(subscription, "subscribe")) {
            this.guarantor.guarantee(subscription);
          }
        }
        confirmSubscription(identifier) {
          logger_default.log(`Subscription confirmed ${identifier}`);
          this.findAll(identifier).map((subscription) => this.guarantor.forget(subscription));
        }
        sendCommand(subscription, command) {
          const { identifier } = subscription;
          return this.consumer.send({ command, identifier });
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/consumer.js
  function createWebSocketURL(url) {
    if (typeof url === "function") {
      url = url();
    }
    if (url && !/^wss?:/i.test(url)) {
      const a = document.createElement("a");
      a.href = url;
      a.href = a.href;
      a.protocol = a.protocol.replace("http", "ws");
      return a.href;
    } else {
      return url;
    }
  }
  var Consumer;
  var init_consumer = __esm({
    "../../node_modules/@rails/actioncable/src/consumer.js"() {
      init_connection();
      init_subscriptions();
      Consumer = class {
        constructor(url) {
          this._url = url;
          this.subscriptions = new Subscriptions(this);
          this.connection = new connection_default(this);
        }
        get url() {
          return createWebSocketURL(this._url);
        }
        send(data) {
          return this.connection.send(data);
        }
        connect() {
          return this.connection.open();
        }
        disconnect() {
          return this.connection.close({ allowReconnect: false });
        }
        ensureActiveConnection() {
          if (!this.connection.isActive()) {
            return this.connection.open();
          }
        }
      };
    }
  });

  // ../../node_modules/@rails/actioncable/src/index.js
  var src_exports = {};
  __export(src_exports, {
    Connection: () => connection_default,
    ConnectionMonitor: () => connection_monitor_default,
    Consumer: () => Consumer,
    INTERNAL: () => internal_default,
    Subscription: () => Subscription,
    SubscriptionGuarantor: () => subscription_guarantor_default,
    Subscriptions: () => Subscriptions,
    adapters: () => adapters_default,
    createConsumer: () => createConsumer,
    createWebSocketURL: () => createWebSocketURL,
    getConfig: () => getConfig,
    logger: () => logger_default
  });
  function createConsumer(url = getConfig("url") || internal_default.default_mount_path) {
    return new Consumer(url);
  }
  function getConfig(name) {
    const element = document.head.querySelector(`meta[name='action-cable-${name}']`);
    if (element) {
      return element.getAttribute("content");
    }
  }
  var init_src = __esm({
    "../../node_modules/@rails/actioncable/src/index.js"() {
      init_connection();
      init_connection_monitor();
      init_consumer();
      init_internal();
      init_subscription();
      init_subscriptions();
      init_subscription_guarantor();
      init_adapters();
      init_logger();
    }
  });

  // ../../node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "../../node_modules/lodash/isObject.js"(exports, module) {
      function isObject2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module.exports = isObject2;
    }
  });

  // ../../node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "../../node_modules/lodash/_freeGlobal.js"(exports, module) {
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      module.exports = freeGlobal;
    }
  });

  // ../../node_modules/lodash/_root.js
  var require_root = __commonJS({
    "../../node_modules/lodash/_root.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      module.exports = root;
    }
  });

  // ../../node_modules/lodash/now.js
  var require_now = __commonJS({
    "../../node_modules/lodash/now.js"(exports, module) {
      var root = require_root();
      var now2 = function() {
        return root.Date.now();
      };
      module.exports = now2;
    }
  });

  // ../../node_modules/lodash/_trimmedEndIndex.js
  var require_trimmedEndIndex = __commonJS({
    "../../node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
      var reWhitespace = /\s/;
      function trimmedEndIndex(string) {
        var index2 = string.length;
        while (index2-- && reWhitespace.test(string.charAt(index2))) {
        }
        return index2;
      }
      module.exports = trimmedEndIndex;
    }
  });

  // ../../node_modules/lodash/_baseTrim.js
  var require_baseTrim = __commonJS({
    "../../node_modules/lodash/_baseTrim.js"(exports, module) {
      var trimmedEndIndex = require_trimmedEndIndex();
      var reTrimStart = /^\s+/;
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      module.exports = baseTrim;
    }
  });

  // ../../node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "../../node_modules/lodash/_Symbol.js"(exports, module) {
      var root = require_root();
      var Symbol2 = root.Symbol;
      module.exports = Symbol2;
    }
  });

  // ../../node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "../../node_modules/lodash/_getRawTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      module.exports = getRawTag;
    }
  });

  // ../../node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "../../node_modules/lodash/_objectToString.js"(exports, module) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module.exports = objectToString;
    }
  });

  // ../../node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "../../node_modules/lodash/_baseGetTag.js"(exports, module) {
      var Symbol2 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module.exports = baseGetTag;
    }
  });

  // ../../node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "../../node_modules/lodash/isObjectLike.js"(exports, module) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module.exports = isObjectLike;
    }
  });

  // ../../node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "../../node_modules/lodash/isSymbol.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      module.exports = isSymbol;
    }
  });

  // ../../node_modules/lodash/toNumber.js
  var require_toNumber = __commonJS({
    "../../node_modules/lodash/toNumber.js"(exports, module) {
      var baseTrim = require_baseTrim();
      var isObject2 = require_isObject();
      var isSymbol = require_isSymbol();
      var NAN = 0 / 0;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber2(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject2(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject2(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module.exports = toNumber2;
    }
  });

  // ../../node_modules/lodash/debounce.js
  var require_debounce = __commonJS({
    "../../node_modules/lodash/debounce.js"(exports, module) {
      var isObject2 = require_isObject();
      var now2 = require_now();
      var toNumber2 = require_toNumber();
      var FUNC_ERROR_TEXT = "Expected a function";
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      function debounce7(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber2(wait) || 0;
        if (isObject2(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber2(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now2();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now2());
        }
        function debounced() {
          var time = now2(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      module.exports = debounce7;
    }
  });

  // ../../node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js
  var require_rails_ujs = __commonJS({
    "../../node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js"(exports, module) {
      (function() {
        var context = this;
        (function() {
          (function() {
            this.Rails = {
              linkClickSelector: "a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]",
              buttonClickSelector: {
                selector: "button[data-remote]:not([form]), button[data-confirm]:not([form])",
                exclude: "form button"
              },
              inputChangeSelector: "select[data-remote], input[data-remote], textarea[data-remote]",
              formSubmitSelector: "form:not([data-turbo=true])",
              formInputClickSelector: "form:not([data-turbo=true]) input[type=submit], form:not([data-turbo=true]) input[type=image], form:not([data-turbo=true]) button[type=submit], form:not([data-turbo=true]) button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])",
              formDisableSelector: "input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled",
              formEnableSelector: "input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled",
              fileInputSelector: "input[name][type=file]:not([disabled])",
              linkDisableSelector: "a[data-disable-with], a[data-disable]",
              buttonDisableSelector: "button[data-remote][data-disable-with], button[data-remote][data-disable]"
            };
          }).call(this);
        }).call(context);
        var Rails7 = context.Rails;
        (function() {
          (function() {
            var nonce;
            nonce = null;
            Rails7.loadCSPNonce = function() {
              var ref2;
              return nonce = (ref2 = document.querySelector("meta[name=csp-nonce]")) != null ? ref2.content : void 0;
            };
            Rails7.cspNonce = function() {
              return nonce != null ? nonce : Rails7.loadCSPNonce();
            };
          }).call(this);
          (function() {
            var expando, m;
            m = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;
            Rails7.matches = function(element, selector) {
              if (selector.exclude != null) {
                return m.call(element, selector.selector) && !m.call(element, selector.exclude);
              } else {
                return m.call(element, selector);
              }
            };
            expando = "_ujsData";
            Rails7.getData = function(element, key) {
              var ref2;
              return (ref2 = element[expando]) != null ? ref2[key] : void 0;
            };
            Rails7.setData = function(element, key, value) {
              if (element[expando] == null) {
                element[expando] = {};
              }
              return element[expando][key] = value;
            };
            Rails7.$ = function(selector) {
              return Array.prototype.slice.call(document.querySelectorAll(selector));
            };
          }).call(this);
          (function() {
            var $, csrfParam, csrfToken;
            $ = Rails7.$;
            csrfToken = Rails7.csrfToken = function() {
              var meta;
              meta = document.querySelector("meta[name=csrf-token]");
              return meta && meta.content;
            };
            csrfParam = Rails7.csrfParam = function() {
              var meta;
              meta = document.querySelector("meta[name=csrf-param]");
              return meta && meta.content;
            };
            Rails7.CSRFProtection = function(xhr) {
              var token;
              token = csrfToken();
              if (token != null) {
                return xhr.setRequestHeader("X-CSRF-Token", token);
              }
            };
            Rails7.refreshCSRFTokens = function() {
              var param, token;
              token = csrfToken();
              param = csrfParam();
              if (token != null && param != null) {
                return $('form input[name="' + param + '"]').forEach(function(input) {
                  return input.value = token;
                });
              }
            };
          }).call(this);
          (function() {
            var CustomEvent2, fire, matches2, preventDefault;
            matches2 = Rails7.matches;
            CustomEvent2 = window.CustomEvent;
            if (typeof CustomEvent2 !== "function") {
              CustomEvent2 = function(event, params) {
                var evt;
                evt = document.createEvent("CustomEvent");
                evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
                return evt;
              };
              CustomEvent2.prototype = window.Event.prototype;
              preventDefault = CustomEvent2.prototype.preventDefault;
              CustomEvent2.prototype.preventDefault = function() {
                var result;
                result = preventDefault.call(this);
                if (this.cancelable && !this.defaultPrevented) {
                  Object.defineProperty(this, "defaultPrevented", {
                    get: function() {
                      return true;
                    }
                  });
                }
                return result;
              };
            }
            fire = Rails7.fire = function(obj, name, data) {
              var event;
              event = new CustomEvent2(name, {
                bubbles: true,
                cancelable: true,
                detail: data
              });
              obj.dispatchEvent(event);
              return !event.defaultPrevented;
            };
            Rails7.stopEverything = function(e) {
              fire(e.target, "ujs:everythingStopped");
              e.preventDefault();
              e.stopPropagation();
              return e.stopImmediatePropagation();
            };
            Rails7.delegate = function(element, selector, eventType, handler) {
              return element.addEventListener(eventType, function(e) {
                var target2;
                target2 = e.target;
                while (!(!(target2 instanceof Element) || matches2(target2, selector))) {
                  target2 = target2.parentNode;
                }
                if (target2 instanceof Element && handler.call(target2, e) === false) {
                  e.preventDefault();
                  return e.stopPropagation();
                }
              });
            };
          }).call(this);
          (function() {
            var AcceptHeaders, CSRFProtection, createXHR, cspNonce, fire, prepareOptions, processResponse;
            cspNonce = Rails7.cspNonce, CSRFProtection = Rails7.CSRFProtection, fire = Rails7.fire;
            AcceptHeaders = {
              "*": "*/*",
              text: "text/plain",
              html: "text/html",
              xml: "application/xml, text/xml",
              json: "application/json, text/javascript",
              script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
            };
            Rails7.ajax = function(options) {
              var xhr;
              options = prepareOptions(options);
              xhr = createXHR(options, function() {
                var ref2, response;
                response = processResponse((ref2 = xhr.response) != null ? ref2 : xhr.responseText, xhr.getResponseHeader("Content-Type"));
                if (Math.floor(xhr.status / 100) === 2) {
                  if (typeof options.success === "function") {
                    options.success(response, xhr.statusText, xhr);
                  }
                } else {
                  if (typeof options.error === "function") {
                    options.error(response, xhr.statusText, xhr);
                  }
                }
                return typeof options.complete === "function" ? options.complete(xhr, xhr.statusText) : void 0;
              });
              if (options.beforeSend != null && !options.beforeSend(xhr, options)) {
                return false;
              }
              if (xhr.readyState === XMLHttpRequest.OPENED) {
                return xhr.send(options.data);
              }
            };
            prepareOptions = function(options) {
              options.url = options.url || location.href;
              options.type = options.type.toUpperCase();
              if (options.type === "GET" && options.data) {
                if (options.url.indexOf("?") < 0) {
                  options.url += "?" + options.data;
                } else {
                  options.url += "&" + options.data;
                }
              }
              if (AcceptHeaders[options.dataType] == null) {
                options.dataType = "*";
              }
              options.accept = AcceptHeaders[options.dataType];
              if (options.dataType !== "*") {
                options.accept += ", */*; q=0.01";
              }
              return options;
            };
            createXHR = function(options, done) {
              var xhr;
              xhr = new XMLHttpRequest();
              xhr.open(options.type, options.url, true);
              xhr.setRequestHeader("Accept", options.accept);
              if (typeof options.data === "string") {
                xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
              }
              if (!options.crossDomain) {
                xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                CSRFProtection(xhr);
              }
              xhr.withCredentials = !!options.withCredentials;
              xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                  return done(xhr);
                }
              };
              return xhr;
            };
            processResponse = function(response, type) {
              var parser, script;
              if (typeof response === "string" && typeof type === "string") {
                if (type.match(/\bjson\b/)) {
                  try {
                    response = JSON.parse(response);
                  } catch (error2) {
                  }
                } else if (type.match(/\b(?:java|ecma)script\b/)) {
                  script = document.createElement("script");
                  script.setAttribute("nonce", cspNonce());
                  script.text = response;
                  document.head.appendChild(script).parentNode.removeChild(script);
                } else if (type.match(/\b(xml|html|svg)\b/)) {
                  parser = new DOMParser();
                  type = type.replace(/;.+/, "");
                  try {
                    response = parser.parseFromString(response, type);
                  } catch (error2) {
                  }
                }
              }
              return response;
            };
            Rails7.href = function(element) {
              return element.href;
            };
            Rails7.isCrossDomain = function(url) {
              var e, originAnchor, urlAnchor;
              originAnchor = document.createElement("a");
              originAnchor.href = location.href;
              urlAnchor = document.createElement("a");
              try {
                urlAnchor.href = url;
                return !((!urlAnchor.protocol || urlAnchor.protocol === ":") && !urlAnchor.host || originAnchor.protocol + "//" + originAnchor.host === urlAnchor.protocol + "//" + urlAnchor.host);
              } catch (error2) {
                e = error2;
                return true;
              }
            };
          }).call(this);
          (function() {
            var matches2, toArray2;
            matches2 = Rails7.matches;
            toArray2 = function(e) {
              return Array.prototype.slice.call(e);
            };
            Rails7.serializeElement = function(element, additionalParam) {
              var inputs, params;
              inputs = [element];
              if (matches2(element, "form")) {
                inputs = toArray2(element.elements);
              }
              params = [];
              inputs.forEach(function(input) {
                if (!input.name || input.disabled) {
                  return;
                }
                if (matches2(input, "fieldset[disabled] *")) {
                  return;
                }
                if (matches2(input, "select")) {
                  return toArray2(input.options).forEach(function(option) {
                    if (option.selected) {
                      return params.push({
                        name: input.name,
                        value: option.value
                      });
                    }
                  });
                } else if (input.checked || ["radio", "checkbox", "submit"].indexOf(input.type) === -1) {
                  return params.push({
                    name: input.name,
                    value: input.value
                  });
                }
              });
              if (additionalParam) {
                params.push(additionalParam);
              }
              return params.map(function(param) {
                if (param.name != null) {
                  return encodeURIComponent(param.name) + "=" + encodeURIComponent(param.value);
                } else {
                  return param;
                }
              }).join("&");
            };
            Rails7.formElements = function(form, selector) {
              if (matches2(form, "form")) {
                return toArray2(form.elements).filter(function(el) {
                  return matches2(el, selector);
                });
              } else {
                return toArray2(form.querySelectorAll(selector));
              }
            };
          }).call(this);
          (function() {
            var allowAction, fire, stopEverything;
            fire = Rails7.fire, stopEverything = Rails7.stopEverything;
            Rails7.handleConfirm = function(e) {
              if (!allowAction(this)) {
                return stopEverything(e);
              }
            };
            Rails7.confirm = function(message, element) {
              return confirm(message);
            };
            allowAction = function(element) {
              var answer, callback, message;
              message = element.getAttribute("data-confirm");
              if (!message) {
                return true;
              }
              answer = false;
              if (fire(element, "confirm")) {
                try {
                  answer = Rails7.confirm(message, element);
                } catch (error2) {
                }
                callback = fire(element, "confirm:complete", [answer]);
              }
              return answer && callback;
            };
          }).call(this);
          (function() {
            var disableFormElement, disableFormElements, disableLinkElement, enableFormElement, enableFormElements, enableLinkElement, formElements, getData2, isXhrRedirect, matches2, setData, stopEverything;
            matches2 = Rails7.matches, getData2 = Rails7.getData, setData = Rails7.setData, stopEverything = Rails7.stopEverything, formElements = Rails7.formElements;
            Rails7.handleDisabledElement = function(e) {
              var element;
              element = this;
              if (element.disabled) {
                return stopEverything(e);
              }
            };
            Rails7.enableElement = function(e) {
              var element;
              if (e instanceof Event) {
                if (isXhrRedirect(e)) {
                  return;
                }
                element = e.target;
              } else {
                element = e;
              }
              if (matches2(element, Rails7.linkDisableSelector)) {
                return enableLinkElement(element);
              } else if (matches2(element, Rails7.buttonDisableSelector) || matches2(element, Rails7.formEnableSelector)) {
                return enableFormElement(element);
              } else if (matches2(element, Rails7.formSubmitSelector)) {
                return enableFormElements(element);
              }
            };
            Rails7.disableElement = function(e) {
              var element;
              element = e instanceof Event ? e.target : e;
              if (matches2(element, Rails7.linkDisableSelector)) {
                return disableLinkElement(element);
              } else if (matches2(element, Rails7.buttonDisableSelector) || matches2(element, Rails7.formDisableSelector)) {
                return disableFormElement(element);
              } else if (matches2(element, Rails7.formSubmitSelector)) {
                return disableFormElements(element);
              }
            };
            disableLinkElement = function(element) {
              var replacement;
              if (getData2(element, "ujs:disabled")) {
                return;
              }
              replacement = element.getAttribute("data-disable-with");
              if (replacement != null) {
                setData(element, "ujs:enable-with", element.innerHTML);
                element.innerHTML = replacement;
              }
              element.addEventListener("click", stopEverything);
              return setData(element, "ujs:disabled", true);
            };
            enableLinkElement = function(element) {
              var originalText;
              originalText = getData2(element, "ujs:enable-with");
              if (originalText != null) {
                element.innerHTML = originalText;
                setData(element, "ujs:enable-with", null);
              }
              element.removeEventListener("click", stopEverything);
              return setData(element, "ujs:disabled", null);
            };
            disableFormElements = function(form) {
              return formElements(form, Rails7.formDisableSelector).forEach(disableFormElement);
            };
            disableFormElement = function(element) {
              var replacement;
              if (getData2(element, "ujs:disabled")) {
                return;
              }
              replacement = element.getAttribute("data-disable-with");
              if (replacement != null) {
                if (matches2(element, "button")) {
                  setData(element, "ujs:enable-with", element.innerHTML);
                  element.innerHTML = replacement;
                } else {
                  setData(element, "ujs:enable-with", element.value);
                  element.value = replacement;
                }
              }
              element.disabled = true;
              return setData(element, "ujs:disabled", true);
            };
            enableFormElements = function(form) {
              return formElements(form, Rails7.formEnableSelector).forEach(enableFormElement);
            };
            enableFormElement = function(element) {
              var originalText;
              originalText = getData2(element, "ujs:enable-with");
              if (originalText != null) {
                if (matches2(element, "button")) {
                  element.innerHTML = originalText;
                } else {
                  element.value = originalText;
                }
                setData(element, "ujs:enable-with", null);
              }
              element.disabled = false;
              return setData(element, "ujs:disabled", null);
            };
            isXhrRedirect = function(event) {
              var ref2, xhr;
              xhr = (ref2 = event.detail) != null ? ref2[0] : void 0;
              return (xhr != null ? xhr.getResponseHeader("X-Xhr-Redirect") : void 0) != null;
            };
          }).call(this);
          (function() {
            var stopEverything;
            stopEverything = Rails7.stopEverything;
            Rails7.handleMethod = function(e) {
              var csrfParam, csrfToken, form, formContent, href, link, method;
              link = this;
              method = link.getAttribute("data-method");
              if (!method) {
                return;
              }
              href = Rails7.href(link);
              csrfToken = Rails7.csrfToken();
              csrfParam = Rails7.csrfParam();
              form = document.createElement("form");
              formContent = "<input name='_method' value='" + method + "' type='hidden' />";
              if (csrfParam != null && csrfToken != null && !Rails7.isCrossDomain(href)) {
                formContent += "<input name='" + csrfParam + "' value='" + csrfToken + "' type='hidden' />";
              }
              formContent += '<input type="submit" />';
              form.method = "post";
              form.action = href;
              form.target = link.target;
              form.innerHTML = formContent;
              form.style.display = "none";
              document.body.appendChild(form);
              form.querySelector('[type="submit"]').click();
              return stopEverything(e);
            };
          }).call(this);
          (function() {
            var ajax, fire, getData2, isCrossDomain, isRemote, matches2, serializeElement, setData, stopEverything, slice = [].slice;
            matches2 = Rails7.matches, getData2 = Rails7.getData, setData = Rails7.setData, fire = Rails7.fire, stopEverything = Rails7.stopEverything, ajax = Rails7.ajax, isCrossDomain = Rails7.isCrossDomain, serializeElement = Rails7.serializeElement;
            isRemote = function(element) {
              var value;
              value = element.getAttribute("data-remote");
              return value != null && value !== "false";
            };
            Rails7.handleRemote = function(e) {
              var button, data, dataType, element, method, url, withCredentials;
              element = this;
              if (!isRemote(element)) {
                return true;
              }
              if (!fire(element, "ajax:before")) {
                fire(element, "ajax:stopped");
                return false;
              }
              withCredentials = element.getAttribute("data-with-credentials");
              dataType = element.getAttribute("data-type") || "script";
              if (matches2(element, Rails7.formSubmitSelector)) {
                button = getData2(element, "ujs:submit-button");
                method = getData2(element, "ujs:submit-button-formmethod") || element.method;
                url = getData2(element, "ujs:submit-button-formaction") || element.getAttribute("action") || location.href;
                if (method.toUpperCase() === "GET") {
                  url = url.replace(/\?.*$/, "");
                }
                if (element.enctype === "multipart/form-data") {
                  data = new FormData(element);
                  if (button != null) {
                    data.append(button.name, button.value);
                  }
                } else {
                  data = serializeElement(element, button);
                }
                setData(element, "ujs:submit-button", null);
                setData(element, "ujs:submit-button-formmethod", null);
                setData(element, "ujs:submit-button-formaction", null);
              } else if (matches2(element, Rails7.buttonClickSelector) || matches2(element, Rails7.inputChangeSelector)) {
                method = element.getAttribute("data-method");
                url = element.getAttribute("data-url");
                data = serializeElement(element, element.getAttribute("data-params"));
              } else {
                method = element.getAttribute("data-method");
                url = Rails7.href(element);
                data = element.getAttribute("data-params");
              }
              ajax({
                type: method || "GET",
                url,
                data,
                dataType,
                beforeSend: function(xhr, options) {
                  if (fire(element, "ajax:beforeSend", [xhr, options])) {
                    return fire(element, "ajax:send", [xhr]);
                  } else {
                    fire(element, "ajax:stopped");
                    return false;
                  }
                },
                success: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:success", args);
                },
                error: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:error", args);
                },
                complete: function() {
                  var args;
                  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  return fire(element, "ajax:complete", args);
                },
                crossDomain: isCrossDomain(url),
                withCredentials: withCredentials != null && withCredentials !== "false"
              });
              return stopEverything(e);
            };
            Rails7.formSubmitButtonClick = function(e) {
              var button, form;
              button = this;
              form = button.form;
              if (!form) {
                return;
              }
              if (button.name) {
                setData(form, "ujs:submit-button", {
                  name: button.name,
                  value: button.value
                });
              }
              setData(form, "ujs:formnovalidate-button", button.formNoValidate);
              setData(form, "ujs:submit-button-formaction", button.getAttribute("formaction"));
              return setData(form, "ujs:submit-button-formmethod", button.getAttribute("formmethod"));
            };
            Rails7.preventInsignificantClick = function(e) {
              var data, insignificantMetaClick, link, metaClick, method, nonPrimaryMouseClick;
              link = this;
              method = (link.getAttribute("data-method") || "GET").toUpperCase();
              data = link.getAttribute("data-params");
              metaClick = e.metaKey || e.ctrlKey;
              insignificantMetaClick = metaClick && method === "GET" && !data;
              nonPrimaryMouseClick = e.button != null && e.button !== 0;
              if (nonPrimaryMouseClick || insignificantMetaClick) {
                return e.stopImmediatePropagation();
              }
            };
          }).call(this);
          (function() {
            var $, CSRFProtection, delegate, disableElement, enableElement, fire, formSubmitButtonClick, getData2, handleConfirm, handleDisabledElement, handleMethod, handleRemote, loadCSPNonce, preventInsignificantClick, refreshCSRFTokens;
            fire = Rails7.fire, delegate = Rails7.delegate, getData2 = Rails7.getData, $ = Rails7.$, refreshCSRFTokens = Rails7.refreshCSRFTokens, CSRFProtection = Rails7.CSRFProtection, loadCSPNonce = Rails7.loadCSPNonce, enableElement = Rails7.enableElement, disableElement = Rails7.disableElement, handleDisabledElement = Rails7.handleDisabledElement, handleConfirm = Rails7.handleConfirm, preventInsignificantClick = Rails7.preventInsignificantClick, handleRemote = Rails7.handleRemote, formSubmitButtonClick = Rails7.formSubmitButtonClick, handleMethod = Rails7.handleMethod;
            if (typeof jQuery !== "undefined" && jQuery !== null && jQuery.ajax != null) {
              if (jQuery.rails) {
                throw new Error("If you load both jquery_ujs and rails-ujs, use rails-ujs only.");
              }
              jQuery.rails = Rails7;
              jQuery.ajaxPrefilter(function(options, originalOptions, xhr) {
                if (!options.crossDomain) {
                  return CSRFProtection(xhr);
                }
              });
            }
            Rails7.start = function() {
              if (window._rails_loaded) {
                throw new Error("rails-ujs has already been loaded!");
              }
              window.addEventListener("pageshow", function() {
                $(Rails7.formEnableSelector).forEach(function(el) {
                  if (getData2(el, "ujs:disabled")) {
                    return enableElement(el);
                  }
                });
                return $(Rails7.linkDisableSelector).forEach(function(el) {
                  if (getData2(el, "ujs:disabled")) {
                    return enableElement(el);
                  }
                });
              });
              delegate(document, Rails7.linkDisableSelector, "ajax:complete", enableElement);
              delegate(document, Rails7.linkDisableSelector, "ajax:stopped", enableElement);
              delegate(document, Rails7.buttonDisableSelector, "ajax:complete", enableElement);
              delegate(document, Rails7.buttonDisableSelector, "ajax:stopped", enableElement);
              delegate(document, Rails7.linkClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails7.linkClickSelector, "click", handleDisabledElement);
              delegate(document, Rails7.linkClickSelector, "click", handleConfirm);
              delegate(document, Rails7.linkClickSelector, "click", disableElement);
              delegate(document, Rails7.linkClickSelector, "click", handleRemote);
              delegate(document, Rails7.linkClickSelector, "click", handleMethod);
              delegate(document, Rails7.buttonClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails7.buttonClickSelector, "click", handleDisabledElement);
              delegate(document, Rails7.buttonClickSelector, "click", handleConfirm);
              delegate(document, Rails7.buttonClickSelector, "click", disableElement);
              delegate(document, Rails7.buttonClickSelector, "click", handleRemote);
              delegate(document, Rails7.inputChangeSelector, "change", handleDisabledElement);
              delegate(document, Rails7.inputChangeSelector, "change", handleConfirm);
              delegate(document, Rails7.inputChangeSelector, "change", handleRemote);
              delegate(document, Rails7.formSubmitSelector, "submit", handleDisabledElement);
              delegate(document, Rails7.formSubmitSelector, "submit", handleConfirm);
              delegate(document, Rails7.formSubmitSelector, "submit", handleRemote);
              delegate(document, Rails7.formSubmitSelector, "submit", function(e) {
                return setTimeout(function() {
                  return disableElement(e);
                }, 13);
              });
              delegate(document, Rails7.formSubmitSelector, "ajax:send", disableElement);
              delegate(document, Rails7.formSubmitSelector, "ajax:complete", enableElement);
              delegate(document, Rails7.formInputClickSelector, "click", preventInsignificantClick);
              delegate(document, Rails7.formInputClickSelector, "click", handleDisabledElement);
              delegate(document, Rails7.formInputClickSelector, "click", handleConfirm);
              delegate(document, Rails7.formInputClickSelector, "click", formSubmitButtonClick);
              document.addEventListener("DOMContentLoaded", refreshCSRFTokens);
              document.addEventListener("DOMContentLoaded", loadCSPNonce);
              return window._rails_loaded = true;
            };
            if (window.Rails === Rails7 && fire(document, "rails:attachBindings")) {
              Rails7.start();
            }
          }).call(this);
        }).call(this);
        if (typeof module === "object" && module.exports) {
          module.exports = Rails7;
        } else if (typeof define === "function" && define.amd) {
          define(Rails7);
        }
      }).call(exports);
    }
  });

  // ../../node_modules/lodash/throttle.js
  var require_throttle = __commonJS({
    "../../node_modules/lodash/throttle.js"(exports, module) {
      var debounce7 = require_debounce();
      var isObject2 = require_isObject();
      var FUNC_ERROR_TEXT = "Expected a function";
      function throttle5(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject2(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce7(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      module.exports = throttle5;
    }
  });

  // ../../node_modules/serialize-selection/index.js
  var require_serialize_selection = __commonJS({
    "../../node_modules/serialize-selection/index.js"(exports, module) {
      function restore(state, referenceNode) {
        referenceNode = referenceNode || document.body;
        var i, node, nextNodeCharIndex, currentNodeCharIndex = 0, nodes = [referenceNode], sel = window.getSelection(), range = document.createRange();
        range.setStart(referenceNode, 0);
        range.collapse(true);
        while (node = nodes.pop()) {
          if (node.nodeType === 3) {
            nextNodeCharIndex = currentNodeCharIndex + node.length;
            if (state.start >= currentNodeCharIndex && state.start <= nextNodeCharIndex) {
              range.setStart(node, state.start - currentNodeCharIndex);
            }
            if (state.end >= currentNodeCharIndex && state.end <= nextNodeCharIndex) {
              range.setEnd(node, state.end - currentNodeCharIndex);
              break;
            }
            currentNodeCharIndex = nextNodeCharIndex;
          } else {
            i = node.childNodes.length;
            while (i--) {
              nodes.push(node.childNodes[i]);
            }
          }
        }
        sel.removeAllRanges();
        sel.addRange(range);
        return sel;
      }
      function save(referenceNode) {
        referenceNode = referenceNode || document.body;
        var sel = window.getSelection(), range = sel.rangeCount ? sel.getRangeAt(0).cloneRange() : document.createRange(), startContainer = range.startContainer, startOffset = range.startOffset, state = { content: range.toString() };
        range.selectNodeContents(referenceNode);
        range.setEnd(startContainer, startOffset);
        state.start = range.toString().length;
        state.end = state.start + state.content.length;
        state.restore = restore.bind(null, state, referenceNode);
        return state;
      }
      module.exports = {
        save,
        restore
      };
    }
  });

  // ../../node_modules/insert-tag/lib/index.js
  var require_lib = __commonJS({
    "../../node_modules/insert-tag/lib/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var TagInserter = class {
        constructor() {
          this.leftTagStack = [];
          this.insideTagStack = [];
          this.rightTagStack = [];
          this.currentLine = 0;
          this.currentColumn = 0;
          this.startInsertIndex = -1;
          this.endInsertIndex = -1;
          this.replacedList = [];
        }
        insertTag(xmlString, startTag, insertPosition) {
          this.reset(xmlString, startTag, insertPosition);
          this.replaceEscapedStrings();
          this.parseXmlString();
          this.walkInsideTagStack();
          this.insertStartEndTag();
          this.replaceEscapedStringsBack();
          return this.xmlString;
        }
        replaceEscapedStrings() {
          this.xmlString = this.xmlString.replace(/&.+?;/g, (matched) => {
            this.replacedList.push(matched);
            return TagInserter.replacer;
          });
        }
        replaceEscapedStringsBack() {
          this.xmlString = this.xmlString.replace(new RegExp(TagInserter.replacer, "g"), () => {
            return this.replacedList.shift();
          });
        }
        parseXmlString() {
          let tagStack = this.leftTagStack;
          let level = 0;
          for (let i = 0; i < this.xmlString.length + 1; i++) {
            if (this.startInsertIndex >= 0 && this.endInsertIndex === -1 && this.currentLine === this.insertPosition[2] && this.currentColumn === this.insertPosition[3]) {
              this.endInsertIndex = i;
              tagStack = this.rightTagStack;
              level = 0;
            }
            if (this.xmlString[i] === "<") {
              let j = i + 1;
              while (this.xmlString[j] !== ">") {
                j++;
              }
              const tag = this.xmlString.slice(i, j + 1);
              if (this.isStartTag(tag)) {
                tagStack.push(tag);
                level++;
              } else if (this.isEndTag(tag) && level > 0) {
                tagStack.pop();
                level--;
              } else if (this.isEndTag(tag) && level === 0) {
                tagStack.push(tag);
              }
              i = j;
              continue;
            }
            if (this.startInsertIndex === -1 && this.currentLine === this.insertPosition[0] && this.currentColumn === this.insertPosition[1] && this.xmlString[i] !== "<" && this.xmlString[i] !== "\n") {
              this.startInsertIndex = i;
              tagStack = this.insideTagStack;
              level = 0;
            }
            if (this.xmlString[i] === "\n") {
              this.currentLine++;
              this.currentColumn = 0;
            } else {
              this.currentColumn++;
            }
          }
        }
        walkInsideTagStack() {
          this.insideTagStack.filter(this.isEndTag.bind(this)).forEach((tag) => {
            const startTag = this.leftTagStack.pop();
            const endTag = tag;
            if (this.xmlString[this.startInsertIndex - 1] === ">" && this.isWalkBackStartTag(this.startInsertIndex - 1)) {
              this.startInsertIndex -= startTag.length;
            } else {
              this.xmlString = this.xmlString.slice(0, this.startInsertIndex) + endTag + startTag + this.xmlString.slice(this.startInsertIndex);
              this.startInsertIndex += endTag.length;
              this.endInsertIndex += endTag.length + startTag.length;
            }
          });
          this.insideTagStack.reverse().filter(this.isStartTag.bind(this)).forEach((tag) => {
            const startTag = tag;
            const endTag = this.rightTagStack.shift();
            if (this.xmlString[this.endInsertIndex] === "<" && this.xmlString[this.endInsertIndex + 1] === "/") {
              this.endInsertIndex += endTag.length;
            } else {
              this.xmlString = this.xmlString.slice(0, this.endInsertIndex) + endTag + startTag + this.xmlString.slice(this.endInsertIndex);
              this.endInsertIndex += endTag.length;
            }
          });
        }
        insertStartEndTag() {
          this.xmlString = this.xmlString.slice(0, this.startInsertIndex) + this.startTag + this.xmlString.slice(this.startInsertIndex, this.endInsertIndex) + this.endTag + this.xmlString.slice(this.endInsertIndex);
        }
        isWalkBackStartTag(index2) {
          let i = index2;
          while (this.xmlString[i] !== "<") {
            i--;
          }
          return this.xmlString[i + 1] !== "/";
        }
        reset(xmlString, startTag, insertPosition) {
          this.xmlString = xmlString;
          this.startTag = startTag;
          this.endTag = this.getEndTag(this.startTag);
          this.insertPosition = insertPosition;
          this.leftTagStack = [];
          this.insideTagStack = [];
          this.rightTagStack = [];
          this.currentLine = 0;
          this.currentColumn = 0;
          this.startInsertIndex = -1;
          this.endInsertIndex = -1;
        }
        getEndTag(startTag) {
          return startTag.replace(/<([^ ]+).+/, "</$1>");
        }
        isStartTag(tag) {
          return !tag.startsWith("</");
        }
        isEndTag(tag) {
          return tag.startsWith("</");
        }
      };
      TagInserter.replacer = "\uFFFF";
      exports.TagInserter = TagInserter;
      var tagInserter = new TagInserter();
      var insertTag3 = tagInserter.insertTag.bind(tagInserter);
      exports.default = insertTag3;
    }
  });

  // ../../node_modules/highlight.js/lib/core.js
  var require_core = __commonJS({
    "../../node_modules/highlight.js/lib/core.js"(exports, module) {
      var deepFreezeEs6 = { exports: {} };
      function deepFreeze(obj) {
        if (obj instanceof Map) {
          obj.clear = obj.delete = obj.set = function() {
            throw new Error("map is read-only");
          };
        } else if (obj instanceof Set) {
          obj.add = obj.clear = obj.delete = function() {
            throw new Error("set is read-only");
          };
        }
        Object.freeze(obj);
        Object.getOwnPropertyNames(obj).forEach(function(name) {
          var prop = obj[name];
          if (typeof prop == "object" && !Object.isFrozen(prop)) {
            deepFreeze(prop);
          }
        });
        return obj;
      }
      deepFreezeEs6.exports = deepFreeze;
      deepFreezeEs6.exports.default = deepFreeze;
      var Response2 = class {
        constructor(mode) {
          if (mode.data === void 0)
            mode.data = {};
          this.data = mode.data;
          this.isMatchIgnored = false;
        }
        ignoreMatch() {
          this.isMatchIgnored = true;
        }
      };
      function escapeHTML(value) {
        return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
      }
      function inherit$1(original, ...objects) {
        const result = /* @__PURE__ */ Object.create(null);
        for (const key in original) {
          result[key] = original[key];
        }
        objects.forEach(function(obj) {
          for (const key in obj) {
            result[key] = obj[key];
          }
        });
        return result;
      }
      var SPAN_CLOSE = "</span>";
      var emitsWrappingTags = (node) => {
        return !!node.scope || node.sublanguage && node.language;
      };
      var scopeToCSSClass = (name, { prefix }) => {
        if (name.includes(".")) {
          const pieces = name.split(".");
          return [
            `${prefix}${pieces.shift()}`,
            ...pieces.map((x, i) => `${x}${"_".repeat(i + 1)}`)
          ].join(" ");
        }
        return `${prefix}${name}`;
      };
      var HTMLRenderer = class {
        constructor(parseTree, options) {
          this.buffer = "";
          this.classPrefix = options.classPrefix;
          parseTree.walk(this);
        }
        addText(text) {
          this.buffer += escapeHTML(text);
        }
        openNode(node) {
          if (!emitsWrappingTags(node))
            return;
          let className = "";
          if (node.sublanguage) {
            className = `language-${node.language}`;
          } else {
            className = scopeToCSSClass(node.scope, { prefix: this.classPrefix });
          }
          this.span(className);
        }
        closeNode(node) {
          if (!emitsWrappingTags(node))
            return;
          this.buffer += SPAN_CLOSE;
        }
        value() {
          return this.buffer;
        }
        span(className) {
          this.buffer += `<span class="${className}">`;
        }
      };
      var newNode = (opts = {}) => {
        const result = { children: [] };
        Object.assign(result, opts);
        return result;
      };
      var TokenTree = class {
        constructor() {
          this.rootNode = newNode();
          this.stack = [this.rootNode];
        }
        get top() {
          return this.stack[this.stack.length - 1];
        }
        get root() {
          return this.rootNode;
        }
        add(node) {
          this.top.children.push(node);
        }
        openNode(scope) {
          const node = newNode({ scope });
          this.add(node);
          this.stack.push(node);
        }
        closeNode() {
          if (this.stack.length > 1) {
            return this.stack.pop();
          }
          return void 0;
        }
        closeAllNodes() {
          while (this.closeNode())
            ;
        }
        toJSON() {
          return JSON.stringify(this.rootNode, null, 4);
        }
        walk(builder) {
          return this.constructor._walk(builder, this.rootNode);
        }
        static _walk(builder, node) {
          if (typeof node === "string") {
            builder.addText(node);
          } else if (node.children) {
            builder.openNode(node);
            node.children.forEach((child) => this._walk(builder, child));
            builder.closeNode(node);
          }
          return builder;
        }
        static _collapse(node) {
          if (typeof node === "string")
            return;
          if (!node.children)
            return;
          if (node.children.every((el) => typeof el === "string")) {
            node.children = [node.children.join("")];
          } else {
            node.children.forEach((child) => {
              TokenTree._collapse(child);
            });
          }
        }
      };
      var TokenTreeEmitter = class extends TokenTree {
        constructor(options) {
          super();
          this.options = options;
        }
        addKeyword(text, scope) {
          if (text === "") {
            return;
          }
          this.openNode(scope);
          this.addText(text);
          this.closeNode();
        }
        addText(text) {
          if (text === "") {
            return;
          }
          this.add(text);
        }
        addSublanguage(emitter, name) {
          const node = emitter.root;
          node.sublanguage = true;
          node.language = name;
          this.add(node);
        }
        toHTML() {
          const renderer = new HTMLRenderer(this, this.options);
          return renderer.value();
        }
        finalize() {
          return true;
        }
      };
      function source(re) {
        if (!re)
          return null;
        if (typeof re === "string")
          return re;
        return re.source;
      }
      function lookahead(re) {
        return concat2("(?=", re, ")");
      }
      function anyNumberOfTimes(re) {
        return concat2("(?:", re, ")*");
      }
      function optional(re) {
        return concat2("(?:", re, ")?");
      }
      function concat2(...args) {
        const joined = args.map((x) => source(x)).join("");
        return joined;
      }
      function stripOptionsFromArgs(args) {
        const opts = args[args.length - 1];
        if (typeof opts === "object" && opts.constructor === Object) {
          args.splice(args.length - 1, 1);
          return opts;
        } else {
          return {};
        }
      }
      function either(...args) {
        const opts = stripOptionsFromArgs(args);
        const joined = "(" + (opts.capture ? "" : "?:") + args.map((x) => source(x)).join("|") + ")";
        return joined;
      }
      function countMatchGroups(re) {
        return new RegExp(re.toString() + "|").exec("").length - 1;
      }
      function startsWith(re, lexeme) {
        const match = re && re.exec(lexeme);
        return match && match.index === 0;
      }
      var BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
      function _rewriteBackreferences(regexps, { joinWith }) {
        let numCaptures = 0;
        return regexps.map((regex) => {
          numCaptures += 1;
          const offset = numCaptures;
          let re = source(regex);
          let out = "";
          while (re.length > 0) {
            const match = BACKREF_RE.exec(re);
            if (!match) {
              out += re;
              break;
            }
            out += re.substring(0, match.index);
            re = re.substring(match.index + match[0].length);
            if (match[0][0] === "\\" && match[1]) {
              out += "\\" + String(Number(match[1]) + offset);
            } else {
              out += match[0];
              if (match[0] === "(") {
                numCaptures++;
              }
            }
          }
          return out;
        }).map((re) => `(${re})`).join(joinWith);
      }
      var MATCH_NOTHING_RE = /\b\B/;
      var IDENT_RE = "[a-zA-Z]\\w*";
      var UNDERSCORE_IDENT_RE = "[a-zA-Z_]\\w*";
      var NUMBER_RE = "\\b\\d+(\\.\\d+)?";
      var C_NUMBER_RE = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)";
      var BINARY_NUMBER_RE = "\\b(0b[01]+)";
      var RE_STARTERS_RE = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~";
      var SHEBANG = (opts = {}) => {
        const beginShebang = /^#![ ]*\//;
        if (opts.binary) {
          opts.begin = concat2(
            beginShebang,
            /.*\b/,
            opts.binary,
            /\b.*/
          );
        }
        return inherit$1({
          scope: "meta",
          begin: beginShebang,
          end: /$/,
          relevance: 0,
          "on:begin": (m, resp) => {
            if (m.index !== 0)
              resp.ignoreMatch();
          }
        }, opts);
      };
      var BACKSLASH_ESCAPE = {
        begin: "\\\\[\\s\\S]",
        relevance: 0
      };
      var APOS_STRING_MODE = {
        scope: "string",
        begin: "'",
        end: "'",
        illegal: "\\n",
        contains: [BACKSLASH_ESCAPE]
      };
      var QUOTE_STRING_MODE = {
        scope: "string",
        begin: '"',
        end: '"',
        illegal: "\\n",
        contains: [BACKSLASH_ESCAPE]
      };
      var PHRASAL_WORDS_MODE = {
        begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
      };
      var COMMENT = function(begin, end, modeOptions = {}) {
        const mode = inherit$1(
          {
            scope: "comment",
            begin,
            end,
            contains: []
          },
          modeOptions
        );
        mode.contains.push({
          scope: "doctag",
          begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
          end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
          excludeBegin: true,
          relevance: 0
        });
        const ENGLISH_WORD = either(
          "I",
          "a",
          "is",
          "so",
          "us",
          "to",
          "at",
          "if",
          "in",
          "it",
          "on",
          /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
          /[A-Za-z]+[-][a-z]+/,
          /[A-Za-z][a-z]{2,}/
        );
        mode.contains.push(
          {
            begin: concat2(
              /[ ]+/,
              "(",
              ENGLISH_WORD,
              /[.]?[:]?([.][ ]|[ ])/,
              "){3}"
            )
          }
        );
        return mode;
      };
      var C_LINE_COMMENT_MODE = COMMENT("//", "$");
      var C_BLOCK_COMMENT_MODE = COMMENT("/\\*", "\\*/");
      var HASH_COMMENT_MODE = COMMENT("#", "$");
      var NUMBER_MODE = {
        scope: "number",
        begin: NUMBER_RE,
        relevance: 0
      };
      var C_NUMBER_MODE = {
        scope: "number",
        begin: C_NUMBER_RE,
        relevance: 0
      };
      var BINARY_NUMBER_MODE = {
        scope: "number",
        begin: BINARY_NUMBER_RE,
        relevance: 0
      };
      var REGEXP_MODE = {
        begin: /(?=\/[^/\n]*\/)/,
        contains: [{
          scope: "regexp",
          begin: /\//,
          end: /\/[gimuy]*/,
          illegal: /\n/,
          contains: [
            BACKSLASH_ESCAPE,
            {
              begin: /\[/,
              end: /\]/,
              relevance: 0,
              contains: [BACKSLASH_ESCAPE]
            }
          ]
        }]
      };
      var TITLE_MODE = {
        scope: "title",
        begin: IDENT_RE,
        relevance: 0
      };
      var UNDERSCORE_TITLE_MODE = {
        scope: "title",
        begin: UNDERSCORE_IDENT_RE,
        relevance: 0
      };
      var METHOD_GUARD = {
        begin: "\\.\\s*" + UNDERSCORE_IDENT_RE,
        relevance: 0
      };
      var END_SAME_AS_BEGIN = function(mode) {
        return Object.assign(
          mode,
          {
            "on:begin": (m, resp) => {
              resp.data._beginMatch = m[1];
            },
            "on:end": (m, resp) => {
              if (resp.data._beginMatch !== m[1])
                resp.ignoreMatch();
            }
          }
        );
      };
      var MODES = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        MATCH_NOTHING_RE,
        IDENT_RE,
        UNDERSCORE_IDENT_RE,
        NUMBER_RE,
        C_NUMBER_RE,
        BINARY_NUMBER_RE,
        RE_STARTERS_RE,
        SHEBANG,
        BACKSLASH_ESCAPE,
        APOS_STRING_MODE,
        QUOTE_STRING_MODE,
        PHRASAL_WORDS_MODE,
        COMMENT,
        C_LINE_COMMENT_MODE,
        C_BLOCK_COMMENT_MODE,
        HASH_COMMENT_MODE,
        NUMBER_MODE,
        C_NUMBER_MODE,
        BINARY_NUMBER_MODE,
        REGEXP_MODE,
        TITLE_MODE,
        UNDERSCORE_TITLE_MODE,
        METHOD_GUARD,
        END_SAME_AS_BEGIN
      });
      function skipIfHasPrecedingDot(match, response) {
        const before = match.input[match.index - 1];
        if (before === ".") {
          response.ignoreMatch();
        }
      }
      function scopeClassName(mode, _parent) {
        if (mode.className !== void 0) {
          mode.scope = mode.className;
          delete mode.className;
        }
      }
      function beginKeywords(mode, parent) {
        if (!parent)
          return;
        if (!mode.beginKeywords)
          return;
        mode.begin = "\\b(" + mode.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)";
        mode.__beforeBegin = skipIfHasPrecedingDot;
        mode.keywords = mode.keywords || mode.beginKeywords;
        delete mode.beginKeywords;
        if (mode.relevance === void 0)
          mode.relevance = 0;
      }
      function compileIllegal(mode, _parent) {
        if (!Array.isArray(mode.illegal))
          return;
        mode.illegal = either(...mode.illegal);
      }
      function compileMatch(mode, _parent) {
        if (!mode.match)
          return;
        if (mode.begin || mode.end)
          throw new Error("begin & end are not supported with match");
        mode.begin = mode.match;
        delete mode.match;
      }
      function compileRelevance(mode, _parent) {
        if (mode.relevance === void 0)
          mode.relevance = 1;
      }
      var beforeMatchExt = (mode, parent) => {
        if (!mode.beforeMatch)
          return;
        if (mode.starts)
          throw new Error("beforeMatch cannot be used with starts");
        const originalMode = Object.assign({}, mode);
        Object.keys(mode).forEach((key) => {
          delete mode[key];
        });
        mode.keywords = originalMode.keywords;
        mode.begin = concat2(originalMode.beforeMatch, lookahead(originalMode.begin));
        mode.starts = {
          relevance: 0,
          contains: [
            Object.assign(originalMode, { endsParent: true })
          ]
        };
        mode.relevance = 0;
        delete originalMode.beforeMatch;
      };
      var COMMON_KEYWORDS = [
        "of",
        "and",
        "for",
        "in",
        "not",
        "or",
        "if",
        "then",
        "parent",
        "list",
        "value"
      ];
      var DEFAULT_KEYWORD_SCOPE = "keyword";
      function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {
        const compiledKeywords = /* @__PURE__ */ Object.create(null);
        if (typeof rawKeywords === "string") {
          compileList(scopeName, rawKeywords.split(" "));
        } else if (Array.isArray(rawKeywords)) {
          compileList(scopeName, rawKeywords);
        } else {
          Object.keys(rawKeywords).forEach(function(scopeName2) {
            Object.assign(
              compiledKeywords,
              compileKeywords(rawKeywords[scopeName2], caseInsensitive, scopeName2)
            );
          });
        }
        return compiledKeywords;
        function compileList(scopeName2, keywordList) {
          if (caseInsensitive) {
            keywordList = keywordList.map((x) => x.toLowerCase());
          }
          keywordList.forEach(function(keyword) {
            const pair = keyword.split("|");
            compiledKeywords[pair[0]] = [scopeName2, scoreForKeyword(pair[0], pair[1])];
          });
        }
      }
      function scoreForKeyword(keyword, providedScore) {
        if (providedScore) {
          return Number(providedScore);
        }
        return commonKeyword(keyword) ? 0 : 1;
      }
      function commonKeyword(keyword) {
        return COMMON_KEYWORDS.includes(keyword.toLowerCase());
      }
      var seenDeprecations = {};
      var error2 = (message) => {
        console.error(message);
      };
      var warn2 = (message, ...args) => {
        console.log(`WARN: ${message}`, ...args);
      };
      var deprecated = (version3, message) => {
        if (seenDeprecations[`${version3}/${message}`])
          return;
        console.log(`Deprecated as of ${version3}. ${message}`);
        seenDeprecations[`${version3}/${message}`] = true;
      };
      var MultiClassError = new Error();
      function remapScopeNames(mode, regexes, { key }) {
        let offset = 0;
        const scopeNames = mode[key];
        const emit = {};
        const positions = {};
        for (let i = 1; i <= regexes.length; i++) {
          positions[i + offset] = scopeNames[i];
          emit[i + offset] = true;
          offset += countMatchGroups(regexes[i - 1]);
        }
        mode[key] = positions;
        mode[key]._emit = emit;
        mode[key]._multi = true;
      }
      function beginMultiClass(mode) {
        if (!Array.isArray(mode.begin))
          return;
        if (mode.skip || mode.excludeBegin || mode.returnBegin) {
          error2("skip, excludeBegin, returnBegin not compatible with beginScope: {}");
          throw MultiClassError;
        }
        if (typeof mode.beginScope !== "object" || mode.beginScope === null) {
          error2("beginScope must be object");
          throw MultiClassError;
        }
        remapScopeNames(mode, mode.begin, { key: "beginScope" });
        mode.begin = _rewriteBackreferences(mode.begin, { joinWith: "" });
      }
      function endMultiClass(mode) {
        if (!Array.isArray(mode.end))
          return;
        if (mode.skip || mode.excludeEnd || mode.returnEnd) {
          error2("skip, excludeEnd, returnEnd not compatible with endScope: {}");
          throw MultiClassError;
        }
        if (typeof mode.endScope !== "object" || mode.endScope === null) {
          error2("endScope must be object");
          throw MultiClassError;
        }
        remapScopeNames(mode, mode.end, { key: "endScope" });
        mode.end = _rewriteBackreferences(mode.end, { joinWith: "" });
      }
      function scopeSugar(mode) {
        if (mode.scope && typeof mode.scope === "object" && mode.scope !== null) {
          mode.beginScope = mode.scope;
          delete mode.scope;
        }
      }
      function MultiClass(mode) {
        scopeSugar(mode);
        if (typeof mode.beginScope === "string") {
          mode.beginScope = { _wrap: mode.beginScope };
        }
        if (typeof mode.endScope === "string") {
          mode.endScope = { _wrap: mode.endScope };
        }
        beginMultiClass(mode);
        endMultiClass(mode);
      }
      function compileLanguage(language) {
        function langRe(value, global2) {
          return new RegExp(
            source(value),
            "m" + (language.case_insensitive ? "i" : "") + (language.unicodeRegex ? "u" : "") + (global2 ? "g" : "")
          );
        }
        class MultiRegex {
          constructor() {
            this.matchIndexes = {};
            this.regexes = [];
            this.matchAt = 1;
            this.position = 0;
          }
          addRule(re, opts) {
            opts.position = this.position++;
            this.matchIndexes[this.matchAt] = opts;
            this.regexes.push([opts, re]);
            this.matchAt += countMatchGroups(re) + 1;
          }
          compile() {
            if (this.regexes.length === 0) {
              this.exec = () => null;
            }
            const terminators = this.regexes.map((el) => el[1]);
            this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: "|" }), true);
            this.lastIndex = 0;
          }
          exec(s) {
            this.matcherRe.lastIndex = this.lastIndex;
            const match = this.matcherRe.exec(s);
            if (!match) {
              return null;
            }
            const i = match.findIndex((el, i2) => i2 > 0 && el !== void 0);
            const matchData = this.matchIndexes[i];
            match.splice(0, i);
            return Object.assign(match, matchData);
          }
        }
        class ResumableMultiRegex {
          constructor() {
            this.rules = [];
            this.multiRegexes = [];
            this.count = 0;
            this.lastIndex = 0;
            this.regexIndex = 0;
          }
          getMatcher(index2) {
            if (this.multiRegexes[index2])
              return this.multiRegexes[index2];
            const matcher = new MultiRegex();
            this.rules.slice(index2).forEach(([re, opts]) => matcher.addRule(re, opts));
            matcher.compile();
            this.multiRegexes[index2] = matcher;
            return matcher;
          }
          resumingScanAtSamePosition() {
            return this.regexIndex !== 0;
          }
          considerAll() {
            this.regexIndex = 0;
          }
          addRule(re, opts) {
            this.rules.push([re, opts]);
            if (opts.type === "begin")
              this.count++;
          }
          exec(s) {
            const m = this.getMatcher(this.regexIndex);
            m.lastIndex = this.lastIndex;
            let result = m.exec(s);
            if (this.resumingScanAtSamePosition()) {
              if (result && result.index === this.lastIndex)
                ;
              else {
                const m2 = this.getMatcher(0);
                m2.lastIndex = this.lastIndex + 1;
                result = m2.exec(s);
              }
            }
            if (result) {
              this.regexIndex += result.position + 1;
              if (this.regexIndex === this.count) {
                this.considerAll();
              }
            }
            return result;
          }
        }
        function buildModeRegex(mode) {
          const mm = new ResumableMultiRegex();
          mode.contains.forEach((term) => mm.addRule(term.begin, { rule: term, type: "begin" }));
          if (mode.terminatorEnd) {
            mm.addRule(mode.terminatorEnd, { type: "end" });
          }
          if (mode.illegal) {
            mm.addRule(mode.illegal, { type: "illegal" });
          }
          return mm;
        }
        function compileMode(mode, parent) {
          const cmode = mode;
          if (mode.isCompiled)
            return cmode;
          [
            scopeClassName,
            compileMatch,
            MultiClass,
            beforeMatchExt
          ].forEach((ext) => ext(mode, parent));
          language.compilerExtensions.forEach((ext) => ext(mode, parent));
          mode.__beforeBegin = null;
          [
            beginKeywords,
            compileIllegal,
            compileRelevance
          ].forEach((ext) => ext(mode, parent));
          mode.isCompiled = true;
          let keywordPattern = null;
          if (typeof mode.keywords === "object" && mode.keywords.$pattern) {
            mode.keywords = Object.assign({}, mode.keywords);
            keywordPattern = mode.keywords.$pattern;
            delete mode.keywords.$pattern;
          }
          keywordPattern = keywordPattern || /\w+/;
          if (mode.keywords) {
            mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
          }
          cmode.keywordPatternRe = langRe(keywordPattern, true);
          if (parent) {
            if (!mode.begin)
              mode.begin = /\B|\b/;
            cmode.beginRe = langRe(cmode.begin);
            if (!mode.end && !mode.endsWithParent)
              mode.end = /\B|\b/;
            if (mode.end)
              cmode.endRe = langRe(cmode.end);
            cmode.terminatorEnd = source(cmode.end) || "";
            if (mode.endsWithParent && parent.terminatorEnd) {
              cmode.terminatorEnd += (mode.end ? "|" : "") + parent.terminatorEnd;
            }
          }
          if (mode.illegal)
            cmode.illegalRe = langRe(mode.illegal);
          if (!mode.contains)
            mode.contains = [];
          mode.contains = [].concat(...mode.contains.map(function(c2) {
            return expandOrCloneMode(c2 === "self" ? mode : c2);
          }));
          mode.contains.forEach(function(c2) {
            compileMode(c2, cmode);
          });
          if (mode.starts) {
            compileMode(mode.starts, parent);
          }
          cmode.matcher = buildModeRegex(cmode);
          return cmode;
        }
        if (!language.compilerExtensions)
          language.compilerExtensions = [];
        if (language.contains && language.contains.includes("self")) {
          throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
        }
        language.classNameAliases = inherit$1(language.classNameAliases || {});
        return compileMode(language);
      }
      function dependencyOnParent(mode) {
        if (!mode)
          return false;
        return mode.endsWithParent || dependencyOnParent(mode.starts);
      }
      function expandOrCloneMode(mode) {
        if (mode.variants && !mode.cachedVariants) {
          mode.cachedVariants = mode.variants.map(function(variant) {
            return inherit$1(mode, { variants: null }, variant);
          });
        }
        if (mode.cachedVariants) {
          return mode.cachedVariants;
        }
        if (dependencyOnParent(mode)) {
          return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });
        }
        if (Object.isFrozen(mode)) {
          return inherit$1(mode);
        }
        return mode;
      }
      var version2 = "11.7.0";
      var HTMLInjectionError = class extends Error {
        constructor(reason, html) {
          super(reason);
          this.name = "HTMLInjectionError";
          this.html = html;
        }
      };
      var escape = escapeHTML;
      var inherit = inherit$1;
      var NO_MATCH = Symbol("nomatch");
      var MAX_KEYWORD_HITS = 7;
      var HLJS = function(hljs2) {
        const languages = /* @__PURE__ */ Object.create(null);
        const aliases = /* @__PURE__ */ Object.create(null);
        const plugins = [];
        let SAFE_MODE = true;
        const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
        const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: "Plain text", contains: [] };
        let options = {
          ignoreUnescapedHTML: false,
          throwUnescapedHTML: false,
          noHighlightRe: /^(no-?highlight)$/i,
          languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
          classPrefix: "hljs-",
          cssSelector: "pre code",
          languages: null,
          __emitter: TokenTreeEmitter
        };
        function shouldNotHighlight(languageName) {
          return options.noHighlightRe.test(languageName);
        }
        function blockLanguage(block) {
          let classes = block.className + " ";
          classes += block.parentNode ? block.parentNode.className : "";
          const match = options.languageDetectRe.exec(classes);
          if (match) {
            const language = getLanguage(match[1]);
            if (!language) {
              warn2(LANGUAGE_NOT_FOUND.replace("{}", match[1]));
              warn2("Falling back to no-highlight mode for this block.", block);
            }
            return language ? match[1] : "no-highlight";
          }
          return classes.split(/\s+/).find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
        }
        function highlight2(codeOrLanguageName, optionsOrCode, ignoreIllegals) {
          let code = "";
          let languageName = "";
          if (typeof optionsOrCode === "object") {
            code = codeOrLanguageName;
            ignoreIllegals = optionsOrCode.ignoreIllegals;
            languageName = optionsOrCode.language;
          } else {
            deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
            deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
            languageName = codeOrLanguageName;
            code = optionsOrCode;
          }
          if (ignoreIllegals === void 0) {
            ignoreIllegals = true;
          }
          const context = {
            code,
            language: languageName
          };
          fire("before:highlight", context);
          const result = context.result ? context.result : _highlight(context.language, context.code, ignoreIllegals);
          result.code = context.code;
          fire("after:highlight", result);
          return result;
        }
        function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
          const keywordHits = /* @__PURE__ */ Object.create(null);
          function keywordData(mode, matchText) {
            return mode.keywords[matchText];
          }
          function processKeywords() {
            if (!top.keywords) {
              emitter.addText(modeBuffer);
              return;
            }
            let lastIndex = 0;
            top.keywordPatternRe.lastIndex = 0;
            let match = top.keywordPatternRe.exec(modeBuffer);
            let buf = "";
            while (match) {
              buf += modeBuffer.substring(lastIndex, match.index);
              const word = language.case_insensitive ? match[0].toLowerCase() : match[0];
              const data = keywordData(top, word);
              if (data) {
                const [kind, keywordRelevance] = data;
                emitter.addText(buf);
                buf = "";
                keywordHits[word] = (keywordHits[word] || 0) + 1;
                if (keywordHits[word] <= MAX_KEYWORD_HITS)
                  relevance += keywordRelevance;
                if (kind.startsWith("_")) {
                  buf += match[0];
                } else {
                  const cssClass = language.classNameAliases[kind] || kind;
                  emitter.addKeyword(match[0], cssClass);
                }
              } else {
                buf += match[0];
              }
              lastIndex = top.keywordPatternRe.lastIndex;
              match = top.keywordPatternRe.exec(modeBuffer);
            }
            buf += modeBuffer.substring(lastIndex);
            emitter.addText(buf);
          }
          function processSubLanguage() {
            if (modeBuffer === "")
              return;
            let result2 = null;
            if (typeof top.subLanguage === "string") {
              if (!languages[top.subLanguage]) {
                emitter.addText(modeBuffer);
                return;
              }
              result2 = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
              continuations[top.subLanguage] = result2._top;
            } else {
              result2 = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
            }
            if (top.relevance > 0) {
              relevance += result2.relevance;
            }
            emitter.addSublanguage(result2._emitter, result2.language);
          }
          function processBuffer() {
            if (top.subLanguage != null) {
              processSubLanguage();
            } else {
              processKeywords();
            }
            modeBuffer = "";
          }
          function emitMultiClass(scope, match) {
            let i = 1;
            const max = match.length - 1;
            while (i <= max) {
              if (!scope._emit[i]) {
                i++;
                continue;
              }
              const klass2 = language.classNameAliases[scope[i]] || scope[i];
              const text = match[i];
              if (klass2) {
                emitter.addKeyword(text, klass2);
              } else {
                modeBuffer = text;
                processKeywords();
                modeBuffer = "";
              }
              i++;
            }
          }
          function startNewMode(mode, match) {
            if (mode.scope && typeof mode.scope === "string") {
              emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);
            }
            if (mode.beginScope) {
              if (mode.beginScope._wrap) {
                emitter.addKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);
                modeBuffer = "";
              } else if (mode.beginScope._multi) {
                emitMultiClass(mode.beginScope, match);
                modeBuffer = "";
              }
            }
            top = Object.create(mode, { parent: { value: top } });
            return top;
          }
          function endOfMode(mode, match, matchPlusRemainder) {
            let matched = startsWith(mode.endRe, matchPlusRemainder);
            if (matched) {
              if (mode["on:end"]) {
                const resp = new Response2(mode);
                mode["on:end"](match, resp);
                if (resp.isMatchIgnored)
                  matched = false;
              }
              if (matched) {
                while (mode.endsParent && mode.parent) {
                  mode = mode.parent;
                }
                return mode;
              }
            }
            if (mode.endsWithParent) {
              return endOfMode(mode.parent, match, matchPlusRemainder);
            }
          }
          function doIgnore(lexeme) {
            if (top.matcher.regexIndex === 0) {
              modeBuffer += lexeme[0];
              return 1;
            } else {
              resumeScanAtSamePosition = true;
              return 0;
            }
          }
          function doBeginMatch(match) {
            const lexeme = match[0];
            const newMode = match.rule;
            const resp = new Response2(newMode);
            const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
            for (const cb of beforeCallbacks) {
              if (!cb)
                continue;
              cb(match, resp);
              if (resp.isMatchIgnored)
                return doIgnore(lexeme);
            }
            if (newMode.skip) {
              modeBuffer += lexeme;
            } else {
              if (newMode.excludeBegin) {
                modeBuffer += lexeme;
              }
              processBuffer();
              if (!newMode.returnBegin && !newMode.excludeBegin) {
                modeBuffer = lexeme;
              }
            }
            startNewMode(newMode, match);
            return newMode.returnBegin ? 0 : lexeme.length;
          }
          function doEndMatch(match) {
            const lexeme = match[0];
            const matchPlusRemainder = codeToHighlight.substring(match.index);
            const endMode = endOfMode(top, match, matchPlusRemainder);
            if (!endMode) {
              return NO_MATCH;
            }
            const origin = top;
            if (top.endScope && top.endScope._wrap) {
              processBuffer();
              emitter.addKeyword(lexeme, top.endScope._wrap);
            } else if (top.endScope && top.endScope._multi) {
              processBuffer();
              emitMultiClass(top.endScope, match);
            } else if (origin.skip) {
              modeBuffer += lexeme;
            } else {
              if (!(origin.returnEnd || origin.excludeEnd)) {
                modeBuffer += lexeme;
              }
              processBuffer();
              if (origin.excludeEnd) {
                modeBuffer = lexeme;
              }
            }
            do {
              if (top.scope) {
                emitter.closeNode();
              }
              if (!top.skip && !top.subLanguage) {
                relevance += top.relevance;
              }
              top = top.parent;
            } while (top !== endMode.parent);
            if (endMode.starts) {
              startNewMode(endMode.starts, match);
            }
            return origin.returnEnd ? 0 : lexeme.length;
          }
          function processContinuations() {
            const list = [];
            for (let current = top; current !== language; current = current.parent) {
              if (current.scope) {
                list.unshift(current.scope);
              }
            }
            list.forEach((item) => emitter.openNode(item));
          }
          let lastMatch = {};
          function processLexeme(textBeforeMatch, match) {
            const lexeme = match && match[0];
            modeBuffer += textBeforeMatch;
            if (lexeme == null) {
              processBuffer();
              return 0;
            }
            if (lastMatch.type === "begin" && match.type === "end" && lastMatch.index === match.index && lexeme === "") {
              modeBuffer += codeToHighlight.slice(match.index, match.index + 1);
              if (!SAFE_MODE) {
                const err = new Error(`0 width match regex (${languageName})`);
                err.languageName = languageName;
                err.badRule = lastMatch.rule;
                throw err;
              }
              return 1;
            }
            lastMatch = match;
            if (match.type === "begin") {
              return doBeginMatch(match);
            } else if (match.type === "illegal" && !ignoreIllegals) {
              const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.scope || "<unnamed>") + '"');
              err.mode = top;
              throw err;
            } else if (match.type === "end") {
              const processed = doEndMatch(match);
              if (processed !== NO_MATCH) {
                return processed;
              }
            }
            if (match.type === "illegal" && lexeme === "") {
              return 1;
            }
            if (iterations > 1e5 && iterations > match.index * 3) {
              const err = new Error("potential infinite loop, way more iterations than matches");
              throw err;
            }
            modeBuffer += lexeme;
            return lexeme.length;
          }
          const language = getLanguage(languageName);
          if (!language) {
            error2(LANGUAGE_NOT_FOUND.replace("{}", languageName));
            throw new Error('Unknown language: "' + languageName + '"');
          }
          const md = compileLanguage(language);
          let result = "";
          let top = continuation || md;
          const continuations = {};
          const emitter = new options.__emitter(options);
          processContinuations();
          let modeBuffer = "";
          let relevance = 0;
          let index2 = 0;
          let iterations = 0;
          let resumeScanAtSamePosition = false;
          try {
            top.matcher.considerAll();
            for (; ; ) {
              iterations++;
              if (resumeScanAtSamePosition) {
                resumeScanAtSamePosition = false;
              } else {
                top.matcher.considerAll();
              }
              top.matcher.lastIndex = index2;
              const match = top.matcher.exec(codeToHighlight);
              if (!match)
                break;
              const beforeMatch = codeToHighlight.substring(index2, match.index);
              const processedCount = processLexeme(beforeMatch, match);
              index2 = match.index + processedCount;
            }
            processLexeme(codeToHighlight.substring(index2));
            emitter.closeAllNodes();
            emitter.finalize();
            result = emitter.toHTML();
            return {
              language: languageName,
              value: result,
              relevance,
              illegal: false,
              _emitter: emitter,
              _top: top
            };
          } catch (err) {
            if (err.message && err.message.includes("Illegal")) {
              return {
                language: languageName,
                value: escape(codeToHighlight),
                illegal: true,
                relevance: 0,
                _illegalBy: {
                  message: err.message,
                  index: index2,
                  context: codeToHighlight.slice(index2 - 100, index2 + 100),
                  mode: err.mode,
                  resultSoFar: result
                },
                _emitter: emitter
              };
            } else if (SAFE_MODE) {
              return {
                language: languageName,
                value: escape(codeToHighlight),
                illegal: false,
                relevance: 0,
                errorRaised: err,
                _emitter: emitter,
                _top: top
              };
            } else {
              throw err;
            }
          }
        }
        function justTextHighlightResult(code) {
          const result = {
            value: escape(code),
            illegal: false,
            relevance: 0,
            _top: PLAINTEXT_LANGUAGE,
            _emitter: new options.__emitter(options)
          };
          result._emitter.addText(code);
          return result;
        }
        function highlightAuto(code, languageSubset) {
          languageSubset = languageSubset || options.languages || Object.keys(languages);
          const plaintext = justTextHighlightResult(code);
          const results = languageSubset.filter(getLanguage).filter(autoDetection).map(
            (name) => _highlight(name, code, false)
          );
          results.unshift(plaintext);
          const sorted = results.sort((a, b) => {
            if (a.relevance !== b.relevance)
              return b.relevance - a.relevance;
            if (a.language && b.language) {
              if (getLanguage(a.language).supersetOf === b.language) {
                return 1;
              } else if (getLanguage(b.language).supersetOf === a.language) {
                return -1;
              }
            }
            return 0;
          });
          const [best, secondBest] = sorted;
          const result = best;
          result.secondBest = secondBest;
          return result;
        }
        function updateClassName(element, currentLang, resultLang) {
          const language = currentLang && aliases[currentLang] || resultLang;
          element.classList.add("hljs");
          element.classList.add(`language-${language}`);
        }
        function highlightElement(element) {
          let node = null;
          const language = blockLanguage(element);
          if (shouldNotHighlight(language))
            return;
          fire(
            "before:highlightElement",
            { el: element, language }
          );
          if (element.children.length > 0) {
            if (!options.ignoreUnescapedHTML) {
              console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk.");
              console.warn("https://github.com/highlightjs/highlight.js/wiki/security");
              console.warn("The element with unescaped HTML:");
              console.warn(element);
            }
            if (options.throwUnescapedHTML) {
              const err = new HTMLInjectionError(
                "One of your code blocks includes unescaped HTML.",
                element.innerHTML
              );
              throw err;
            }
          }
          node = element;
          const text = node.textContent;
          const result = language ? highlight2(text, { language, ignoreIllegals: true }) : highlightAuto(text);
          element.innerHTML = result.value;
          updateClassName(element, language, result.language);
          element.result = {
            language: result.language,
            re: result.relevance,
            relevance: result.relevance
          };
          if (result.secondBest) {
            element.secondBest = {
              language: result.secondBest.language,
              relevance: result.secondBest.relevance
            };
          }
          fire("after:highlightElement", { el: element, result, text });
        }
        function configure(userOptions) {
          options = inherit(options, userOptions);
        }
        const initHighlighting = () => {
          highlightAll();
          deprecated("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
        };
        function initHighlightingOnLoad() {
          highlightAll();
          deprecated("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
        }
        let wantsHighlight = false;
        function highlightAll() {
          if (document.readyState === "loading") {
            wantsHighlight = true;
            return;
          }
          const blocks = document.querySelectorAll(options.cssSelector);
          blocks.forEach(highlightElement);
        }
        function boot() {
          if (wantsHighlight)
            highlightAll();
        }
        if (typeof window !== "undefined" && window.addEventListener) {
          window.addEventListener("DOMContentLoaded", boot, false);
        }
        function registerLanguage(languageName, languageDefinition) {
          let lang = null;
          try {
            lang = languageDefinition(hljs2);
          } catch (error$1) {
            error2("Language definition for '{}' could not be registered.".replace("{}", languageName));
            if (!SAFE_MODE) {
              throw error$1;
            } else {
              error2(error$1);
            }
            lang = PLAINTEXT_LANGUAGE;
          }
          if (!lang.name)
            lang.name = languageName;
          languages[languageName] = lang;
          lang.rawDefinition = languageDefinition.bind(null, hljs2);
          if (lang.aliases) {
            registerAliases(lang.aliases, { languageName });
          }
        }
        function unregisterLanguage(languageName) {
          delete languages[languageName];
          for (const alias of Object.keys(aliases)) {
            if (aliases[alias] === languageName) {
              delete aliases[alias];
            }
          }
        }
        function listLanguages() {
          return Object.keys(languages);
        }
        function getLanguage(name) {
          name = (name || "").toLowerCase();
          return languages[name] || languages[aliases[name]];
        }
        function registerAliases(aliasList, { languageName }) {
          if (typeof aliasList === "string") {
            aliasList = [aliasList];
          }
          aliasList.forEach((alias) => {
            aliases[alias.toLowerCase()] = languageName;
          });
        }
        function autoDetection(name) {
          const lang = getLanguage(name);
          return lang && !lang.disableAutodetect;
        }
        function upgradePluginAPI(plugin2) {
          if (plugin2["before:highlightBlock"] && !plugin2["before:highlightElement"]) {
            plugin2["before:highlightElement"] = (data) => {
              plugin2["before:highlightBlock"](
                Object.assign({ block: data.el }, data)
              );
            };
          }
          if (plugin2["after:highlightBlock"] && !plugin2["after:highlightElement"]) {
            plugin2["after:highlightElement"] = (data) => {
              plugin2["after:highlightBlock"](
                Object.assign({ block: data.el }, data)
              );
            };
          }
        }
        function addPlugin(plugin2) {
          upgradePluginAPI(plugin2);
          plugins.push(plugin2);
        }
        function fire(event, args) {
          const cb = event;
          plugins.forEach(function(plugin2) {
            if (plugin2[cb]) {
              plugin2[cb](args);
            }
          });
        }
        function deprecateHighlightBlock(el) {
          deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
          deprecated("10.7.0", "Please use highlightElement now.");
          return highlightElement(el);
        }
        Object.assign(hljs2, {
          highlight: highlight2,
          highlightAuto,
          highlightAll,
          highlightElement,
          highlightBlock: deprecateHighlightBlock,
          configure,
          initHighlighting,
          initHighlightingOnLoad,
          registerLanguage,
          unregisterLanguage,
          listLanguages,
          getLanguage,
          registerAliases,
          autoDetection,
          inherit,
          addPlugin
        });
        hljs2.debugMode = function() {
          SAFE_MODE = false;
        };
        hljs2.safeMode = function() {
          SAFE_MODE = true;
        };
        hljs2.versionString = version2;
        hljs2.regex = {
          concat: concat2,
          lookahead,
          either,
          optional,
          anyNumberOfTimes
        };
        for (const key in MODES) {
          if (typeof MODES[key] === "object") {
            deepFreezeEs6.exports(MODES[key]);
          }
        }
        Object.assign(hljs2, MODES);
        return hljs2;
      };
      var highlight = HLJS({});
      module.exports = highlight;
      highlight.HighlightJS = highlight;
      highlight.default = highlight;
    }
  });

  // ../../node_modules/clipboard/dist/clipboard.js
  var require_clipboard = __commonJS({
    "../../node_modules/clipboard/dist/clipboard.js"(exports, module) {
      (function webpackUniversalModuleDefinition(root, factory) {
        if (typeof exports === "object" && typeof module === "object")
          module.exports = factory();
        else if (typeof define === "function" && define.amd)
          define([], factory);
        else if (typeof exports === "object")
          exports["ClipboardJS"] = factory();
        else
          root["ClipboardJS"] = factory();
      })(exports, function() {
        return function() {
          var __webpack_modules__ = {
            686: function(__unused_webpack_module, __webpack_exports__, __webpack_require__2) {
              "use strict";
              __webpack_require__2.d(__webpack_exports__, {
                "default": function() {
                  return clipboard;
                }
              });
              var tiny_emitter = __webpack_require__2(279);
              var tiny_emitter_default = /* @__PURE__ */ __webpack_require__2.n(tiny_emitter);
              var listen = __webpack_require__2(370);
              var listen_default = /* @__PURE__ */ __webpack_require__2.n(listen);
              var src_select = __webpack_require__2(817);
              var select_default = /* @__PURE__ */ __webpack_require__2.n(src_select);
              ;
              function command(type) {
                try {
                  return document.execCommand(type);
                } catch (err) {
                  return false;
                }
              }
              ;
              var ClipboardActionCut = function ClipboardActionCut2(target2) {
                var selectedText = select_default()(target2);
                command("cut");
                return selectedText;
              };
              var actions_cut = ClipboardActionCut;
              ;
              function createFakeElement(value) {
                var isRTL = document.documentElement.getAttribute("dir") === "rtl";
                var fakeElement = document.createElement("textarea");
                fakeElement.style.fontSize = "12pt";
                fakeElement.style.border = "0";
                fakeElement.style.padding = "0";
                fakeElement.style.margin = "0";
                fakeElement.style.position = "absolute";
                fakeElement.style[isRTL ? "right" : "left"] = "-9999px";
                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                fakeElement.style.top = "".concat(yPosition, "px");
                fakeElement.setAttribute("readonly", "");
                fakeElement.value = value;
                return fakeElement;
              }
              ;
              var fakeCopyAction = function fakeCopyAction2(value, options) {
                var fakeElement = createFakeElement(value);
                options.container.appendChild(fakeElement);
                var selectedText = select_default()(fakeElement);
                command("copy");
                fakeElement.remove();
                return selectedText;
              };
              var ClipboardActionCopy = function ClipboardActionCopy2(target2) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                  container: document.body
                };
                var selectedText = "";
                if (typeof target2 === "string") {
                  selectedText = fakeCopyAction(target2, options);
                } else if (target2 instanceof HTMLInputElement && !["text", "search", "url", "tel", "password"].includes(target2 === null || target2 === void 0 ? void 0 : target2.type)) {
                  selectedText = fakeCopyAction(target2.value, options);
                } else {
                  selectedText = select_default()(target2);
                  command("copy");
                }
                return selectedText;
              };
              var actions_copy = ClipboardActionCopy;
              ;
              function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  _typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return _typeof(obj);
              }
              var ClipboardActionDefault = function ClipboardActionDefault2() {
                var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                var _options$action = options.action, action = _options$action === void 0 ? "copy" : _options$action, container = options.container, target2 = options.target, text = options.text;
                if (action !== "copy" && action !== "cut") {
                  throw new Error('Invalid "action" value, use either "copy" or "cut"');
                }
                if (target2 !== void 0) {
                  if (target2 && _typeof(target2) === "object" && target2.nodeType === 1) {
                    if (action === "copy" && target2.hasAttribute("disabled")) {
                      throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    }
                    if (action === "cut" && (target2.hasAttribute("readonly") || target2.hasAttribute("disabled"))) {
                      throw new Error(`Invalid "target" attribute. You can't cut text from elements with "readonly" or "disabled" attributes`);
                    }
                  } else {
                    throw new Error('Invalid "target" value, use a valid Element');
                  }
                }
                if (text) {
                  return actions_copy(text, {
                    container
                  });
                }
                if (target2) {
                  return action === "cut" ? actions_cut(target2) : actions_copy(target2, {
                    container
                  });
                }
              };
              var actions_default = ClipboardActionDefault;
              ;
              function clipboard_typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  clipboard_typeof = function _typeof2(obj2) {
                    return typeof obj2;
                  };
                } else {
                  clipboard_typeof = function _typeof2(obj2) {
                    return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                  };
                }
                return clipboard_typeof(obj);
              }
              function _classCallCheck2(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              function _defineProperties2(target2, props2) {
                for (var i = 0; i < props2.length; i++) {
                  var descriptor = props2[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target2, descriptor.key, descriptor);
                }
              }
              function _createClass2(Constructor, protoProps, staticProps) {
                if (protoProps)
                  _defineProperties2(Constructor.prototype, protoProps);
                if (staticProps)
                  _defineProperties2(Constructor, staticProps);
                return Constructor;
              }
              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }
                subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                if (superClass)
                  _setPrototypeOf(subClass, superClass);
              }
              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                  o2.__proto__ = p2;
                  return o2;
                };
                return _setPrototypeOf(o, p);
              }
              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();
                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived), result;
                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;
                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }
                  return _possibleConstructorReturn(this, result);
                };
              }
              function _possibleConstructorReturn(self2, call) {
                if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                }
                return _assertThisInitialized(self2);
              }
              function _assertThisInitialized(self2) {
                if (self2 === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }
                return self2;
              }
              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct)
                  return false;
                if (Reflect.construct.sham)
                  return false;
                if (typeof Proxy === "function")
                  return true;
                try {
                  Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                  }));
                  return true;
                } catch (e) {
                  return false;
                }
              }
              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                  return o2.__proto__ || Object.getPrototypeOf(o2);
                };
                return _getPrototypeOf(o);
              }
              function getAttributeValue(suffix, element) {
                var attribute = "data-clipboard-".concat(suffix);
                if (!element.hasAttribute(attribute)) {
                  return;
                }
                return element.getAttribute(attribute);
              }
              var Clipboard = /* @__PURE__ */ function(_Emitter) {
                _inherits(Clipboard2, _Emitter);
                var _super = _createSuper(Clipboard2);
                function Clipboard2(trigger2, options) {
                  var _this;
                  _classCallCheck2(this, Clipboard2);
                  _this = _super.call(this);
                  _this.resolveOptions(options);
                  _this.listenClick(trigger2);
                  return _this;
                }
                _createClass2(Clipboard2, [{
                  key: "resolveOptions",
                  value: function resolveOptions() {
                    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    this.action = typeof options.action === "function" ? options.action : this.defaultAction;
                    this.target = typeof options.target === "function" ? options.target : this.defaultTarget;
                    this.text = typeof options.text === "function" ? options.text : this.defaultText;
                    this.container = clipboard_typeof(options.container) === "object" ? options.container : document.body;
                  }
                }, {
                  key: "listenClick",
                  value: function listenClick(trigger2) {
                    var _this2 = this;
                    this.listener = listen_default()(trigger2, "click", function(e) {
                      return _this2.onClick(e);
                    });
                  }
                }, {
                  key: "onClick",
                  value: function onClick(e) {
                    var trigger2 = e.delegateTarget || e.currentTarget;
                    var action = this.action(trigger2) || "copy";
                    var text = actions_default({
                      action,
                      container: this.container,
                      target: this.target(trigger2),
                      text: this.text(trigger2)
                    });
                    this.emit(text ? "success" : "error", {
                      action,
                      text,
                      trigger: trigger2,
                      clearSelection: function clearSelection() {
                        if (trigger2) {
                          trigger2.focus();
                        }
                        window.getSelection().removeAllRanges();
                      }
                    });
                  }
                }, {
                  key: "defaultAction",
                  value: function defaultAction(trigger2) {
                    return getAttributeValue("action", trigger2);
                  }
                }, {
                  key: "defaultTarget",
                  value: function defaultTarget(trigger2) {
                    var selector = getAttributeValue("target", trigger2);
                    if (selector) {
                      return document.querySelector(selector);
                    }
                  }
                }, {
                  key: "defaultText",
                  value: function defaultText(trigger2) {
                    return getAttributeValue("text", trigger2);
                  }
                }, {
                  key: "destroy",
                  value: function destroy() {
                    this.listener.destroy();
                  }
                }], [{
                  key: "copy",
                  value: function copy(target2) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                      container: document.body
                    };
                    return actions_copy(target2, options);
                  }
                }, {
                  key: "cut",
                  value: function cut(target2) {
                    return actions_cut(target2);
                  }
                }, {
                  key: "isSupported",
                  value: function isSupported() {
                    var action = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["copy", "cut"];
                    var actions = typeof action === "string" ? [action] : action;
                    var support = !!document.queryCommandSupported;
                    actions.forEach(function(action2) {
                      support = support && !!document.queryCommandSupported(action2);
                    });
                    return support;
                  }
                }]);
                return Clipboard2;
              }(tiny_emitter_default());
              var clipboard = Clipboard;
            },
            828: function(module2) {
              var DOCUMENT_NODE_TYPE = 9;
              if (typeof Element !== "undefined" && !Element.prototype.matches) {
                var proto = Element.prototype;
                proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
              }
              function closest(element, selector) {
                while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                  if (typeof element.matches === "function" && element.matches(selector)) {
                    return element;
                  }
                  element = element.parentNode;
                }
              }
              module2.exports = closest;
            },
            438: function(module2, __unused_webpack_exports, __webpack_require__2) {
              var closest = __webpack_require__2(828);
              function _delegate(element, selector, type, callback, useCapture) {
                var listenerFn = listener.apply(this, arguments);
                element.addEventListener(type, listenerFn, useCapture);
                return {
                  destroy: function() {
                    element.removeEventListener(type, listenerFn, useCapture);
                  }
                };
              }
              function delegate(elements, selector, type, callback, useCapture) {
                if (typeof elements.addEventListener === "function") {
                  return _delegate.apply(null, arguments);
                }
                if (typeof type === "function") {
                  return _delegate.bind(null, document).apply(null, arguments);
                }
                if (typeof elements === "string") {
                  elements = document.querySelectorAll(elements);
                }
                return Array.prototype.map.call(elements, function(element) {
                  return _delegate(element, selector, type, callback, useCapture);
                });
              }
              function listener(element, selector, type, callback) {
                return function(e) {
                  e.delegateTarget = closest(e.target, selector);
                  if (e.delegateTarget) {
                    callback.call(element, e);
                  }
                };
              }
              module2.exports = delegate;
            },
            879: function(__unused_webpack_module, exports2) {
              exports2.node = function(value) {
                return value !== void 0 && value instanceof HTMLElement && value.nodeType === 1;
              };
              exports2.nodeList = function(value) {
                var type = Object.prototype.toString.call(value);
                return value !== void 0 && (type === "[object NodeList]" || type === "[object HTMLCollection]") && "length" in value && (value.length === 0 || exports2.node(value[0]));
              };
              exports2.string = function(value) {
                return typeof value === "string" || value instanceof String;
              };
              exports2.fn = function(value) {
                var type = Object.prototype.toString.call(value);
                return type === "[object Function]";
              };
            },
            370: function(module2, __unused_webpack_exports, __webpack_require__2) {
              var is = __webpack_require__2(879);
              var delegate = __webpack_require__2(438);
              function listen(target2, type, callback) {
                if (!target2 && !type && !callback) {
                  throw new Error("Missing required arguments");
                }
                if (!is.string(type)) {
                  throw new TypeError("Second argument must be a String");
                }
                if (!is.fn(callback)) {
                  throw new TypeError("Third argument must be a Function");
                }
                if (is.node(target2)) {
                  return listenNode(target2, type, callback);
                } else if (is.nodeList(target2)) {
                  return listenNodeList(target2, type, callback);
                } else if (is.string(target2)) {
                  return listenSelector(target2, type, callback);
                } else {
                  throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
                }
              }
              function listenNode(node, type, callback) {
                node.addEventListener(type, callback);
                return {
                  destroy: function() {
                    node.removeEventListener(type, callback);
                  }
                };
              }
              function listenNodeList(nodeList, type, callback) {
                Array.prototype.forEach.call(nodeList, function(node) {
                  node.addEventListener(type, callback);
                });
                return {
                  destroy: function() {
                    Array.prototype.forEach.call(nodeList, function(node) {
                      node.removeEventListener(type, callback);
                    });
                  }
                };
              }
              function listenSelector(selector, type, callback) {
                return delegate(document.body, selector, type, callback);
              }
              module2.exports = listen;
            },
            817: function(module2) {
              function select(element) {
                var selectedText;
                if (element.nodeName === "SELECT") {
                  element.focus();
                  selectedText = element.value;
                } else if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {
                  var isReadOnly = element.hasAttribute("readonly");
                  if (!isReadOnly) {
                    element.setAttribute("readonly", "");
                  }
                  element.select();
                  element.setSelectionRange(0, element.value.length);
                  if (!isReadOnly) {
                    element.removeAttribute("readonly");
                  }
                  selectedText = element.value;
                } else {
                  if (element.hasAttribute("contenteditable")) {
                    element.focus();
                  }
                  var selection = window.getSelection();
                  var range = document.createRange();
                  range.selectNodeContents(element);
                  selection.removeAllRanges();
                  selection.addRange(range);
                  selectedText = selection.toString();
                }
                return selectedText;
              }
              module2.exports = select;
            },
            279: function(module2) {
              function E() {
              }
              E.prototype = {
                on: function(name, callback, ctx) {
                  var e = this.e || (this.e = {});
                  (e[name] || (e[name] = [])).push({
                    fn: callback,
                    ctx
                  });
                  return this;
                },
                once: function(name, callback, ctx) {
                  var self2 = this;
                  function listener() {
                    self2.off(name, listener);
                    callback.apply(ctx, arguments);
                  }
                  ;
                  listener._ = callback;
                  return this.on(name, listener, ctx);
                },
                emit: function(name) {
                  var data = [].slice.call(arguments, 1);
                  var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                  var i = 0;
                  var len = evtArr.length;
                  for (i; i < len; i++) {
                    evtArr[i].fn.apply(evtArr[i].ctx, data);
                  }
                  return this;
                },
                off: function(name, callback) {
                  var e = this.e || (this.e = {});
                  var evts = e[name];
                  var liveEvents = [];
                  if (evts && callback) {
                    for (var i = 0, len = evts.length; i < len; i++) {
                      if (evts[i].fn !== callback && evts[i].fn._ !== callback)
                        liveEvents.push(evts[i]);
                    }
                  }
                  liveEvents.length ? e[name] = liveEvents : delete e[name];
                  return this;
                }
              };
              module2.exports = E;
              module2.exports.TinyEmitter = E;
            }
          };
          var __webpack_module_cache__ = {};
          function __webpack_require__(moduleId) {
            if (__webpack_module_cache__[moduleId]) {
              return __webpack_module_cache__[moduleId].exports;
            }
            var module2 = __webpack_module_cache__[moduleId] = {
              exports: {}
            };
            __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
            return module2.exports;
          }
          !function() {
            __webpack_require__.n = function(module2) {
              var getter = module2 && module2.__esModule ? function() {
                return module2["default"];
              } : function() {
                return module2;
              };
              __webpack_require__.d(getter, { a: getter });
              return getter;
            };
          }();
          !function() {
            __webpack_require__.d = function(exports2, definition) {
              for (var key in definition) {
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
                  Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
                }
              }
            };
          }();
          !function() {
            __webpack_require__.o = function(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
          }();
          return __webpack_require__(686);
        }().default;
      });
    }
  });

  // ../../node_modules/highlight.js/lib/languages/bash.js
  var require_bash = __commonJS({
    "../../node_modules/highlight.js/lib/languages/bash.js"(exports, module) {
      function bash2(hljs2) {
        const regex = hljs2.regex;
        const VAR = {};
        const BRACED_VAR = {
          begin: /\$\{/,
          end: /\}/,
          contains: [
            "self",
            {
              begin: /:-/,
              contains: [VAR]
            }
          ]
        };
        Object.assign(VAR, {
          className: "variable",
          variants: [
            { begin: regex.concat(
              /\$[\w\d#@][\w\d_]*/,
              `(?![\\w\\d])(?![$])`
            ) },
            BRACED_VAR
          ]
        });
        const SUBST = {
          className: "subst",
          begin: /\$\(/,
          end: /\)/,
          contains: [hljs2.BACKSLASH_ESCAPE]
        };
        const HERE_DOC = {
          begin: /<<-?\s*(?=\w+)/,
          starts: { contains: [
            hljs2.END_SAME_AS_BEGIN({
              begin: /(\w+)/,
              end: /(\w+)/,
              className: "string"
            })
          ] }
        };
        const QUOTE_STRING = {
          className: "string",
          begin: /"/,
          end: /"/,
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            VAR,
            SUBST
          ]
        };
        SUBST.contains.push(QUOTE_STRING);
        const ESCAPED_QUOTE = {
          className: "",
          begin: /\\"/
        };
        const APOS_STRING = {
          className: "string",
          begin: /'/,
          end: /'/
        };
        const ARITHMETIC = {
          begin: /\$?\(\(/,
          end: /\)\)/,
          contains: [
            {
              begin: /\d+#[0-9a-f]+/,
              className: "number"
            },
            hljs2.NUMBER_MODE,
            VAR
          ]
        };
        const SH_LIKE_SHELLS = [
          "fish",
          "bash",
          "zsh",
          "sh",
          "csh",
          "ksh",
          "tcsh",
          "dash",
          "scsh"
        ];
        const KNOWN_SHEBANG = hljs2.SHEBANG({
          binary: `(${SH_LIKE_SHELLS.join("|")})`,
          relevance: 10
        });
        const FUNCTION = {
          className: "function",
          begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
          returnBegin: true,
          contains: [hljs2.inherit(hljs2.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
          relevance: 0
        };
        const KEYWORDS = [
          "if",
          "then",
          "else",
          "elif",
          "fi",
          "for",
          "while",
          "in",
          "do",
          "done",
          "case",
          "esac",
          "function"
        ];
        const LITERALS = [
          "true",
          "false"
        ];
        const PATH_MODE = { match: /(\/[a-z._-]+)+/ };
        const SHELL_BUILT_INS = [
          "break",
          "cd",
          "continue",
          "eval",
          "exec",
          "exit",
          "export",
          "getopts",
          "hash",
          "pwd",
          "readonly",
          "return",
          "shift",
          "test",
          "times",
          "trap",
          "umask",
          "unset"
        ];
        const BASH_BUILT_INS = [
          "alias",
          "bind",
          "builtin",
          "caller",
          "command",
          "declare",
          "echo",
          "enable",
          "help",
          "let",
          "local",
          "logout",
          "mapfile",
          "printf",
          "read",
          "readarray",
          "source",
          "type",
          "typeset",
          "ulimit",
          "unalias"
        ];
        const ZSH_BUILT_INS = [
          "autoload",
          "bg",
          "bindkey",
          "bye",
          "cap",
          "chdir",
          "clone",
          "comparguments",
          "compcall",
          "compctl",
          "compdescribe",
          "compfiles",
          "compgroups",
          "compquote",
          "comptags",
          "comptry",
          "compvalues",
          "dirs",
          "disable",
          "disown",
          "echotc",
          "echoti",
          "emulate",
          "fc",
          "fg",
          "float",
          "functions",
          "getcap",
          "getln",
          "history",
          "integer",
          "jobs",
          "kill",
          "limit",
          "log",
          "noglob",
          "popd",
          "print",
          "pushd",
          "pushln",
          "rehash",
          "sched",
          "setcap",
          "setopt",
          "stat",
          "suspend",
          "ttyctl",
          "unfunction",
          "unhash",
          "unlimit",
          "unsetopt",
          "vared",
          "wait",
          "whence",
          "where",
          "which",
          "zcompile",
          "zformat",
          "zftp",
          "zle",
          "zmodload",
          "zparseopts",
          "zprof",
          "zpty",
          "zregexparse",
          "zsocket",
          "zstyle",
          "ztcp"
        ];
        const GNU_CORE_UTILS = [
          "chcon",
          "chgrp",
          "chown",
          "chmod",
          "cp",
          "dd",
          "df",
          "dir",
          "dircolors",
          "ln",
          "ls",
          "mkdir",
          "mkfifo",
          "mknod",
          "mktemp",
          "mv",
          "realpath",
          "rm",
          "rmdir",
          "shred",
          "sync",
          "touch",
          "truncate",
          "vdir",
          "b2sum",
          "base32",
          "base64",
          "cat",
          "cksum",
          "comm",
          "csplit",
          "cut",
          "expand",
          "fmt",
          "fold",
          "head",
          "join",
          "md5sum",
          "nl",
          "numfmt",
          "od",
          "paste",
          "ptx",
          "pr",
          "sha1sum",
          "sha224sum",
          "sha256sum",
          "sha384sum",
          "sha512sum",
          "shuf",
          "sort",
          "split",
          "sum",
          "tac",
          "tail",
          "tr",
          "tsort",
          "unexpand",
          "uniq",
          "wc",
          "arch",
          "basename",
          "chroot",
          "date",
          "dirname",
          "du",
          "echo",
          "env",
          "expr",
          "factor",
          "groups",
          "hostid",
          "id",
          "link",
          "logname",
          "nice",
          "nohup",
          "nproc",
          "pathchk",
          "pinky",
          "printenv",
          "printf",
          "pwd",
          "readlink",
          "runcon",
          "seq",
          "sleep",
          "stat",
          "stdbuf",
          "stty",
          "tee",
          "test",
          "timeout",
          "tty",
          "uname",
          "unlink",
          "uptime",
          "users",
          "who",
          "whoami",
          "yes"
        ];
        return {
          name: "Bash",
          aliases: ["sh"],
          keywords: {
            $pattern: /\b[a-z][a-z0-9._-]+\b/,
            keyword: KEYWORDS,
            literal: LITERALS,
            built_in: [
              ...SHELL_BUILT_INS,
              ...BASH_BUILT_INS,
              "set",
              "shopt",
              ...ZSH_BUILT_INS,
              ...GNU_CORE_UTILS
            ]
          },
          contains: [
            KNOWN_SHEBANG,
            hljs2.SHEBANG(),
            FUNCTION,
            ARITHMETIC,
            hljs2.HASH_COMMENT_MODE,
            HERE_DOC,
            PATH_MODE,
            QUOTE_STRING,
            ESCAPED_QUOTE,
            APOS_STRING,
            VAR
          ]
        };
      }
      module.exports = bash2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/c.js
  var require_c = __commonJS({
    "../../node_modules/highlight.js/lib/languages/c.js"(exports, module) {
      function c2(hljs2) {
        const regex = hljs2.regex;
        const C_LINE_COMMENT_MODE = hljs2.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] });
        const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
        const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
        const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
        const FUNCTION_TYPE_RE = "(" + DECLTYPE_AUTO_RE + "|" + regex.optional(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + regex.optional(TEMPLATE_ARGUMENT_RE) + ")";
        const TYPES = {
          className: "type",
          variants: [
            { begin: "\\b[a-z\\d_]*_t\\b" },
            { match: /\batomic_[a-z]{3,6}\b/ }
          ]
        };
        const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
        const STRINGS = {
          className: "string",
          variants: [
            {
              begin: '(u8?|U|L)?"',
              end: '"',
              illegal: "\\n",
              contains: [hljs2.BACKSLASH_ESCAPE]
            },
            {
              begin: "(u8?|U|L)?'(" + CHARACTER_ESCAPES + "|.)",
              end: "'",
              illegal: "."
            },
            hljs2.END_SAME_AS_BEGIN({
              begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
              end: /\)([^()\\ ]{0,16})"/
            })
          ]
        };
        const NUMBERS = {
          className: "number",
          variants: [
            { begin: "\\b(0b[01']+)" },
            { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
            { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
          ],
          relevance: 0
        };
        const PREPROCESSOR = {
          className: "meta",
          begin: /#\s*[a-z]+\b/,
          end: /$/,
          keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
          contains: [
            {
              begin: /\\\n/,
              relevance: 0
            },
            hljs2.inherit(STRINGS, { className: "string" }),
            {
              className: "string",
              begin: /<.*?>/
            },
            C_LINE_COMMENT_MODE,
            hljs2.C_BLOCK_COMMENT_MODE
          ]
        };
        const TITLE_MODE = {
          className: "title",
          begin: regex.optional(NAMESPACE_RE) + hljs2.IDENT_RE,
          relevance: 0
        };
        const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs2.IDENT_RE + "\\s*\\(";
        const C_KEYWORDS = [
          "asm",
          "auto",
          "break",
          "case",
          "continue",
          "default",
          "do",
          "else",
          "enum",
          "extern",
          "for",
          "fortran",
          "goto",
          "if",
          "inline",
          "register",
          "restrict",
          "return",
          "sizeof",
          "struct",
          "switch",
          "typedef",
          "union",
          "volatile",
          "while",
          "_Alignas",
          "_Alignof",
          "_Atomic",
          "_Generic",
          "_Noreturn",
          "_Static_assert",
          "_Thread_local",
          "alignas",
          "alignof",
          "noreturn",
          "static_assert",
          "thread_local",
          "_Pragma"
        ];
        const C_TYPES = [
          "float",
          "double",
          "signed",
          "unsigned",
          "int",
          "short",
          "long",
          "char",
          "void",
          "_Bool",
          "_Complex",
          "_Imaginary",
          "_Decimal32",
          "_Decimal64",
          "_Decimal128",
          "const",
          "static",
          "complex",
          "bool",
          "imaginary"
        ];
        const KEYWORDS = {
          keyword: C_KEYWORDS,
          type: C_TYPES,
          literal: "true false NULL",
          built_in: "std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"
        };
        const EXPRESSION_CONTAINS = [
          PREPROCESSOR,
          TYPES,
          C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE,
          NUMBERS,
          STRINGS
        ];
        const EXPRESSION_CONTEXT = {
          variants: [
            {
              begin: /=/,
              end: /;/
            },
            {
              begin: /\(/,
              end: /\)/
            },
            {
              beginKeywords: "new throw return else",
              end: /;/
            }
          ],
          keywords: KEYWORDS,
          contains: EXPRESSION_CONTAINS.concat([
            {
              begin: /\(/,
              end: /\)/,
              keywords: KEYWORDS,
              contains: EXPRESSION_CONTAINS.concat(["self"]),
              relevance: 0
            }
          ]),
          relevance: 0
        };
        const FUNCTION_DECLARATION = {
          begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
          returnBegin: true,
          end: /[{;=]/,
          excludeEnd: true,
          keywords: KEYWORDS,
          illegal: /[^\w\s\*&:<>.]/,
          contains: [
            {
              begin: DECLTYPE_AUTO_RE,
              keywords: KEYWORDS,
              relevance: 0
            },
            {
              begin: FUNCTION_TITLE,
              returnBegin: true,
              contains: [hljs2.inherit(TITLE_MODE, { className: "title.function" })],
              relevance: 0
            },
            {
              relevance: 0,
              match: /,/
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: KEYWORDS,
              relevance: 0,
              contains: [
                C_LINE_COMMENT_MODE,
                hljs2.C_BLOCK_COMMENT_MODE,
                STRINGS,
                NUMBERS,
                TYPES,
                {
                  begin: /\(/,
                  end: /\)/,
                  keywords: KEYWORDS,
                  relevance: 0,
                  contains: [
                    "self",
                    C_LINE_COMMENT_MODE,
                    hljs2.C_BLOCK_COMMENT_MODE,
                    STRINGS,
                    NUMBERS,
                    TYPES
                  ]
                }
              ]
            },
            TYPES,
            C_LINE_COMMENT_MODE,
            hljs2.C_BLOCK_COMMENT_MODE,
            PREPROCESSOR
          ]
        };
        return {
          name: "C",
          aliases: ["h"],
          keywords: KEYWORDS,
          disableAutodetect: true,
          illegal: "</",
          contains: [].concat(
            EXPRESSION_CONTEXT,
            FUNCTION_DECLARATION,
            EXPRESSION_CONTAINS,
            [
              PREPROCESSOR,
              {
                begin: hljs2.IDENT_RE + "::",
                keywords: KEYWORDS
              },
              {
                className: "class",
                beginKeywords: "enum class struct union",
                end: /[{;:<>=]/,
                contains: [
                  { beginKeywords: "final class struct" },
                  hljs2.TITLE_MODE
                ]
              }
            ]
          ),
          exports: {
            preprocessor: PREPROCESSOR,
            strings: STRINGS,
            keywords: KEYWORDS
          }
        };
      }
      module.exports = c2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/cpp.js
  var require_cpp = __commonJS({
    "../../node_modules/highlight.js/lib/languages/cpp.js"(exports, module) {
      function cpp2(hljs2) {
        const regex = hljs2.regex;
        const C_LINE_COMMENT_MODE = hljs2.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] });
        const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
        const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
        const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
        const FUNCTION_TYPE_RE = "(?!struct)(" + DECLTYPE_AUTO_RE + "|" + regex.optional(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + regex.optional(TEMPLATE_ARGUMENT_RE) + ")";
        const CPP_PRIMITIVE_TYPES = {
          className: "type",
          begin: "\\b[a-z\\d_]*_t\\b"
        };
        const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
        const STRINGS = {
          className: "string",
          variants: [
            {
              begin: '(u8?|U|L)?"',
              end: '"',
              illegal: "\\n",
              contains: [hljs2.BACKSLASH_ESCAPE]
            },
            {
              begin: "(u8?|U|L)?'(" + CHARACTER_ESCAPES + "|.)",
              end: "'",
              illegal: "."
            },
            hljs2.END_SAME_AS_BEGIN({
              begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
              end: /\)([^()\\ ]{0,16})"/
            })
          ]
        };
        const NUMBERS = {
          className: "number",
          variants: [
            { begin: "\\b(0b[01']+)" },
            { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
            { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
          ],
          relevance: 0
        };
        const PREPROCESSOR = {
          className: "meta",
          begin: /#\s*[a-z]+\b/,
          end: /$/,
          keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
          contains: [
            {
              begin: /\\\n/,
              relevance: 0
            },
            hljs2.inherit(STRINGS, { className: "string" }),
            {
              className: "string",
              begin: /<.*?>/
            },
            C_LINE_COMMENT_MODE,
            hljs2.C_BLOCK_COMMENT_MODE
          ]
        };
        const TITLE_MODE = {
          className: "title",
          begin: regex.optional(NAMESPACE_RE) + hljs2.IDENT_RE,
          relevance: 0
        };
        const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs2.IDENT_RE + "\\s*\\(";
        const RESERVED_KEYWORDS = [
          "alignas",
          "alignof",
          "and",
          "and_eq",
          "asm",
          "atomic_cancel",
          "atomic_commit",
          "atomic_noexcept",
          "auto",
          "bitand",
          "bitor",
          "break",
          "case",
          "catch",
          "class",
          "co_await",
          "co_return",
          "co_yield",
          "compl",
          "concept",
          "const_cast|10",
          "consteval",
          "constexpr",
          "constinit",
          "continue",
          "decltype",
          "default",
          "delete",
          "do",
          "dynamic_cast|10",
          "else",
          "enum",
          "explicit",
          "export",
          "extern",
          "false",
          "final",
          "for",
          "friend",
          "goto",
          "if",
          "import",
          "inline",
          "module",
          "mutable",
          "namespace",
          "new",
          "noexcept",
          "not",
          "not_eq",
          "nullptr",
          "operator",
          "or",
          "or_eq",
          "override",
          "private",
          "protected",
          "public",
          "reflexpr",
          "register",
          "reinterpret_cast|10",
          "requires",
          "return",
          "sizeof",
          "static_assert",
          "static_cast|10",
          "struct",
          "switch",
          "synchronized",
          "template",
          "this",
          "thread_local",
          "throw",
          "transaction_safe",
          "transaction_safe_dynamic",
          "true",
          "try",
          "typedef",
          "typeid",
          "typename",
          "union",
          "using",
          "virtual",
          "volatile",
          "while",
          "xor",
          "xor_eq"
        ];
        const RESERVED_TYPES = [
          "bool",
          "char",
          "char16_t",
          "char32_t",
          "char8_t",
          "double",
          "float",
          "int",
          "long",
          "short",
          "void",
          "wchar_t",
          "unsigned",
          "signed",
          "const",
          "static"
        ];
        const TYPE_HINTS = [
          "any",
          "auto_ptr",
          "barrier",
          "binary_semaphore",
          "bitset",
          "complex",
          "condition_variable",
          "condition_variable_any",
          "counting_semaphore",
          "deque",
          "false_type",
          "future",
          "imaginary",
          "initializer_list",
          "istringstream",
          "jthread",
          "latch",
          "lock_guard",
          "multimap",
          "multiset",
          "mutex",
          "optional",
          "ostringstream",
          "packaged_task",
          "pair",
          "promise",
          "priority_queue",
          "queue",
          "recursive_mutex",
          "recursive_timed_mutex",
          "scoped_lock",
          "set",
          "shared_future",
          "shared_lock",
          "shared_mutex",
          "shared_timed_mutex",
          "shared_ptr",
          "stack",
          "string_view",
          "stringstream",
          "timed_mutex",
          "thread",
          "true_type",
          "tuple",
          "unique_lock",
          "unique_ptr",
          "unordered_map",
          "unordered_multimap",
          "unordered_multiset",
          "unordered_set",
          "variant",
          "vector",
          "weak_ptr",
          "wstring",
          "wstring_view"
        ];
        const FUNCTION_HINTS = [
          "abort",
          "abs",
          "acos",
          "apply",
          "as_const",
          "asin",
          "atan",
          "atan2",
          "calloc",
          "ceil",
          "cerr",
          "cin",
          "clog",
          "cos",
          "cosh",
          "cout",
          "declval",
          "endl",
          "exchange",
          "exit",
          "exp",
          "fabs",
          "floor",
          "fmod",
          "forward",
          "fprintf",
          "fputs",
          "free",
          "frexp",
          "fscanf",
          "future",
          "invoke",
          "isalnum",
          "isalpha",
          "iscntrl",
          "isdigit",
          "isgraph",
          "islower",
          "isprint",
          "ispunct",
          "isspace",
          "isupper",
          "isxdigit",
          "labs",
          "launder",
          "ldexp",
          "log",
          "log10",
          "make_pair",
          "make_shared",
          "make_shared_for_overwrite",
          "make_tuple",
          "make_unique",
          "malloc",
          "memchr",
          "memcmp",
          "memcpy",
          "memset",
          "modf",
          "move",
          "pow",
          "printf",
          "putchar",
          "puts",
          "realloc",
          "scanf",
          "sin",
          "sinh",
          "snprintf",
          "sprintf",
          "sqrt",
          "sscanf",
          "std",
          "stderr",
          "stdin",
          "stdout",
          "strcat",
          "strchr",
          "strcmp",
          "strcpy",
          "strcspn",
          "strlen",
          "strncat",
          "strncmp",
          "strncpy",
          "strpbrk",
          "strrchr",
          "strspn",
          "strstr",
          "swap",
          "tan",
          "tanh",
          "terminate",
          "to_underlying",
          "tolower",
          "toupper",
          "vfprintf",
          "visit",
          "vprintf",
          "vsprintf"
        ];
        const LITERALS = [
          "NULL",
          "false",
          "nullopt",
          "nullptr",
          "true"
        ];
        const BUILT_IN = ["_Pragma"];
        const CPP_KEYWORDS = {
          type: RESERVED_TYPES,
          keyword: RESERVED_KEYWORDS,
          literal: LITERALS,
          built_in: BUILT_IN,
          _type_hints: TYPE_HINTS
        };
        const FUNCTION_DISPATCH = {
          className: "function.dispatch",
          relevance: 0,
          keywords: {
            _hint: FUNCTION_HINTS
          },
          begin: regex.concat(
            /\b/,
            /(?!decltype)/,
            /(?!if)/,
            /(?!for)/,
            /(?!switch)/,
            /(?!while)/,
            hljs2.IDENT_RE,
            regex.lookahead(/(<[^<>]+>|)\s*\(/)
          )
        };
        const EXPRESSION_CONTAINS = [
          FUNCTION_DISPATCH,
          PREPROCESSOR,
          CPP_PRIMITIVE_TYPES,
          C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE,
          NUMBERS,
          STRINGS
        ];
        const EXPRESSION_CONTEXT = {
          variants: [
            {
              begin: /=/,
              end: /;/
            },
            {
              begin: /\(/,
              end: /\)/
            },
            {
              beginKeywords: "new throw return else",
              end: /;/
            }
          ],
          keywords: CPP_KEYWORDS,
          contains: EXPRESSION_CONTAINS.concat([
            {
              begin: /\(/,
              end: /\)/,
              keywords: CPP_KEYWORDS,
              contains: EXPRESSION_CONTAINS.concat(["self"]),
              relevance: 0
            }
          ]),
          relevance: 0
        };
        const FUNCTION_DECLARATION = {
          className: "function",
          begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
          returnBegin: true,
          end: /[{;=]/,
          excludeEnd: true,
          keywords: CPP_KEYWORDS,
          illegal: /[^\w\s\*&:<>.]/,
          contains: [
            {
              begin: DECLTYPE_AUTO_RE,
              keywords: CPP_KEYWORDS,
              relevance: 0
            },
            {
              begin: FUNCTION_TITLE,
              returnBegin: true,
              contains: [TITLE_MODE],
              relevance: 0
            },
            {
              begin: /::/,
              relevance: 0
            },
            {
              begin: /:/,
              endsWithParent: true,
              contains: [
                STRINGS,
                NUMBERS
              ]
            },
            {
              relevance: 0,
              match: /,/
            },
            {
              className: "params",
              begin: /\(/,
              end: /\)/,
              keywords: CPP_KEYWORDS,
              relevance: 0,
              contains: [
                C_LINE_COMMENT_MODE,
                hljs2.C_BLOCK_COMMENT_MODE,
                STRINGS,
                NUMBERS,
                CPP_PRIMITIVE_TYPES,
                {
                  begin: /\(/,
                  end: /\)/,
                  keywords: CPP_KEYWORDS,
                  relevance: 0,
                  contains: [
                    "self",
                    C_LINE_COMMENT_MODE,
                    hljs2.C_BLOCK_COMMENT_MODE,
                    STRINGS,
                    NUMBERS,
                    CPP_PRIMITIVE_TYPES
                  ]
                }
              ]
            },
            CPP_PRIMITIVE_TYPES,
            C_LINE_COMMENT_MODE,
            hljs2.C_BLOCK_COMMENT_MODE,
            PREPROCESSOR
          ]
        };
        return {
          name: "C++",
          aliases: [
            "cc",
            "c++",
            "h++",
            "hpp",
            "hh",
            "hxx",
            "cxx"
          ],
          keywords: CPP_KEYWORDS,
          illegal: "</",
          classNameAliases: { "function.dispatch": "built_in" },
          contains: [].concat(
            EXPRESSION_CONTEXT,
            FUNCTION_DECLARATION,
            FUNCTION_DISPATCH,
            EXPRESSION_CONTAINS,
            [
              PREPROCESSOR,
              {
                begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
                end: ">",
                keywords: CPP_KEYWORDS,
                contains: [
                  "self",
                  CPP_PRIMITIVE_TYPES
                ]
              },
              {
                begin: hljs2.IDENT_RE + "::",
                keywords: CPP_KEYWORDS
              },
              {
                match: [
                  /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
                  /\s+/,
                  /\w+/
                ],
                className: {
                  1: "keyword",
                  3: "title.class"
                }
              }
            ]
          )
        };
      }
      module.exports = cpp2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/csharp.js
  var require_csharp = __commonJS({
    "../../node_modules/highlight.js/lib/languages/csharp.js"(exports, module) {
      function csharp2(hljs2) {
        const BUILT_IN_KEYWORDS = [
          "bool",
          "byte",
          "char",
          "decimal",
          "delegate",
          "double",
          "dynamic",
          "enum",
          "float",
          "int",
          "long",
          "nint",
          "nuint",
          "object",
          "sbyte",
          "short",
          "string",
          "ulong",
          "uint",
          "ushort"
        ];
        const FUNCTION_MODIFIERS = [
          "public",
          "private",
          "protected",
          "static",
          "internal",
          "protected",
          "abstract",
          "async",
          "extern",
          "override",
          "unsafe",
          "virtual",
          "new",
          "sealed",
          "partial"
        ];
        const LITERAL_KEYWORDS = [
          "default",
          "false",
          "null",
          "true"
        ];
        const NORMAL_KEYWORDS = [
          "abstract",
          "as",
          "base",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "do",
          "else",
          "event",
          "explicit",
          "extern",
          "finally",
          "fixed",
          "for",
          "foreach",
          "goto",
          "if",
          "implicit",
          "in",
          "interface",
          "internal",
          "is",
          "lock",
          "namespace",
          "new",
          "operator",
          "out",
          "override",
          "params",
          "private",
          "protected",
          "public",
          "readonly",
          "record",
          "ref",
          "return",
          "scoped",
          "sealed",
          "sizeof",
          "stackalloc",
          "static",
          "struct",
          "switch",
          "this",
          "throw",
          "try",
          "typeof",
          "unchecked",
          "unsafe",
          "using",
          "virtual",
          "void",
          "volatile",
          "while"
        ];
        const CONTEXTUAL_KEYWORDS = [
          "add",
          "alias",
          "and",
          "ascending",
          "async",
          "await",
          "by",
          "descending",
          "equals",
          "from",
          "get",
          "global",
          "group",
          "init",
          "into",
          "join",
          "let",
          "nameof",
          "not",
          "notnull",
          "on",
          "or",
          "orderby",
          "partial",
          "remove",
          "select",
          "set",
          "unmanaged",
          "value|0",
          "var",
          "when",
          "where",
          "with",
          "yield"
        ];
        const KEYWORDS = {
          keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),
          built_in: BUILT_IN_KEYWORDS,
          literal: LITERAL_KEYWORDS
        };
        const TITLE_MODE = hljs2.inherit(hljs2.TITLE_MODE, { begin: "[a-zA-Z](\\.?\\w)*" });
        const NUMBERS = {
          className: "number",
          variants: [
            { begin: "\\b(0b[01']+)" },
            { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)" },
            { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
          ],
          relevance: 0
        };
        const VERBATIM_STRING = {
          className: "string",
          begin: '@"',
          end: '"',
          contains: [{ begin: '""' }]
        };
        const VERBATIM_STRING_NO_LF = hljs2.inherit(VERBATIM_STRING, { illegal: /\n/ });
        const SUBST = {
          className: "subst",
          begin: /\{/,
          end: /\}/,
          keywords: KEYWORDS
        };
        const SUBST_NO_LF = hljs2.inherit(SUBST, { illegal: /\n/ });
        const INTERPOLATED_STRING = {
          className: "string",
          begin: /\$"/,
          end: '"',
          illegal: /\n/,
          contains: [
            { begin: /\{\{/ },
            { begin: /\}\}/ },
            hljs2.BACKSLASH_ESCAPE,
            SUBST_NO_LF
          ]
        };
        const INTERPOLATED_VERBATIM_STRING = {
          className: "string",
          begin: /\$@"/,
          end: '"',
          contains: [
            { begin: /\{\{/ },
            { begin: /\}\}/ },
            { begin: '""' },
            SUBST
          ]
        };
        const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs2.inherit(INTERPOLATED_VERBATIM_STRING, {
          illegal: /\n/,
          contains: [
            { begin: /\{\{/ },
            { begin: /\}\}/ },
            { begin: '""' },
            SUBST_NO_LF
          ]
        });
        SUBST.contains = [
          INTERPOLATED_VERBATIM_STRING,
          INTERPOLATED_STRING,
          VERBATIM_STRING,
          hljs2.APOS_STRING_MODE,
          hljs2.QUOTE_STRING_MODE,
          NUMBERS,
          hljs2.C_BLOCK_COMMENT_MODE
        ];
        SUBST_NO_LF.contains = [
          INTERPOLATED_VERBATIM_STRING_NO_LF,
          INTERPOLATED_STRING,
          VERBATIM_STRING_NO_LF,
          hljs2.APOS_STRING_MODE,
          hljs2.QUOTE_STRING_MODE,
          NUMBERS,
          hljs2.inherit(hljs2.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
        ];
        const STRING = { variants: [
          INTERPOLATED_VERBATIM_STRING,
          INTERPOLATED_STRING,
          VERBATIM_STRING,
          hljs2.APOS_STRING_MODE,
          hljs2.QUOTE_STRING_MODE
        ] };
        const GENERIC_MODIFIER = {
          begin: "<",
          end: ">",
          contains: [
            { beginKeywords: "in out" },
            TITLE_MODE
          ]
        };
        const TYPE_IDENT_RE = hljs2.IDENT_RE + "(<" + hljs2.IDENT_RE + "(\\s*,\\s*" + hljs2.IDENT_RE + ")*>)?(\\[\\])?";
        const AT_IDENTIFIER = {
          begin: "@" + hljs2.IDENT_RE,
          relevance: 0
        };
        return {
          name: "C#",
          aliases: [
            "cs",
            "c#"
          ],
          keywords: KEYWORDS,
          illegal: /::/,
          contains: [
            hljs2.COMMENT(
              "///",
              "$",
              {
                returnBegin: true,
                contains: [
                  {
                    className: "doctag",
                    variants: [
                      {
                        begin: "///",
                        relevance: 0
                      },
                      { begin: "<!--|-->" },
                      {
                        begin: "</?",
                        end: ">"
                      }
                    ]
                  }
                ]
              }
            ),
            hljs2.C_LINE_COMMENT_MODE,
            hljs2.C_BLOCK_COMMENT_MODE,
            {
              className: "meta",
              begin: "#",
              end: "$",
              keywords: { keyword: "if else elif endif define undef warning error line region endregion pragma checksum" }
            },
            STRING,
            NUMBERS,
            {
              beginKeywords: "class interface",
              relevance: 0,
              end: /[{;=]/,
              illegal: /[^\s:,]/,
              contains: [
                { beginKeywords: "where class" },
                TITLE_MODE,
                GENERIC_MODIFIER,
                hljs2.C_LINE_COMMENT_MODE,
                hljs2.C_BLOCK_COMMENT_MODE
              ]
            },
            {
              beginKeywords: "namespace",
              relevance: 0,
              end: /[{;=]/,
              illegal: /[^\s:]/,
              contains: [
                TITLE_MODE,
                hljs2.C_LINE_COMMENT_MODE,
                hljs2.C_BLOCK_COMMENT_MODE
              ]
            },
            {
              beginKeywords: "record",
              relevance: 0,
              end: /[{;=]/,
              illegal: /[^\s:]/,
              contains: [
                TITLE_MODE,
                GENERIC_MODIFIER,
                hljs2.C_LINE_COMMENT_MODE,
                hljs2.C_BLOCK_COMMENT_MODE
              ]
            },
            {
              className: "meta",
              begin: "^\\s*\\[(?=[\\w])",
              excludeBegin: true,
              end: "\\]",
              excludeEnd: true,
              contains: [
                {
                  className: "string",
                  begin: /"/,
                  end: /"/
                }
              ]
            },
            {
              beginKeywords: "new return throw await else",
              relevance: 0
            },
            {
              className: "function",
              begin: "(" + TYPE_IDENT_RE + "\\s+)+" + hljs2.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
              returnBegin: true,
              end: /\s*[{;=]/,
              excludeEnd: true,
              keywords: KEYWORDS,
              contains: [
                {
                  beginKeywords: FUNCTION_MODIFIERS.join(" "),
                  relevance: 0
                },
                {
                  begin: hljs2.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
                  returnBegin: true,
                  contains: [
                    hljs2.TITLE_MODE,
                    GENERIC_MODIFIER
                  ],
                  relevance: 0
                },
                { match: /\(\)/ },
                {
                  className: "params",
                  begin: /\(/,
                  end: /\)/,
                  excludeBegin: true,
                  excludeEnd: true,
                  keywords: KEYWORDS,
                  relevance: 0,
                  contains: [
                    STRING,
                    NUMBERS,
                    hljs2.C_BLOCK_COMMENT_MODE
                  ]
                },
                hljs2.C_LINE_COMMENT_MODE,
                hljs2.C_BLOCK_COMMENT_MODE
              ]
            },
            AT_IDENTIFIER
          ]
        };
      }
      module.exports = csharp2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/css.js
  var require_css = __commonJS({
    "../../node_modules/highlight.js/lib/languages/css.js"(exports, module) {
      var MODES = (hljs2) => {
        return {
          IMPORTANT: {
            scope: "meta",
            begin: "!important"
          },
          BLOCK_COMMENT: hljs2.C_BLOCK_COMMENT_MODE,
          HEXCOLOR: {
            scope: "number",
            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
          },
          FUNCTION_DISPATCH: {
            className: "built_in",
            begin: /[\w-]+(?=\()/
          },
          ATTRIBUTE_SELECTOR_MODE: {
            scope: "selector-attr",
            begin: /\[/,
            end: /\]/,
            illegal: "$",
            contains: [
              hljs2.APOS_STRING_MODE,
              hljs2.QUOTE_STRING_MODE
            ]
          },
          CSS_NUMBER_MODE: {
            scope: "number",
            begin: hljs2.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
            relevance: 0
          },
          CSS_VARIABLE: {
            className: "attr",
            begin: /--[A-Za-z][A-Za-z0-9_-]*/
          }
        };
      };
      var TAGS = [
        "a",
        "abbr",
        "address",
        "article",
        "aside",
        "audio",
        "b",
        "blockquote",
        "body",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "dd",
        "del",
        "details",
        "dfn",
        "div",
        "dl",
        "dt",
        "em",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "header",
        "hgroup",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "label",
        "legend",
        "li",
        "main",
        "mark",
        "menu",
        "nav",
        "object",
        "ol",
        "p",
        "q",
        "quote",
        "samp",
        "section",
        "span",
        "strong",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "tr",
        "ul",
        "var",
        "video"
      ];
      var MEDIA_FEATURES = [
        "any-hover",
        "any-pointer",
        "aspect-ratio",
        "color",
        "color-gamut",
        "color-index",
        "device-aspect-ratio",
        "device-height",
        "device-width",
        "display-mode",
        "forced-colors",
        "grid",
        "height",
        "hover",
        "inverted-colors",
        "monochrome",
        "orientation",
        "overflow-block",
        "overflow-inline",
        "pointer",
        "prefers-color-scheme",
        "prefers-contrast",
        "prefers-reduced-motion",
        "prefers-reduced-transparency",
        "resolution",
        "scan",
        "scripting",
        "update",
        "width",
        "min-width",
        "max-width",
        "min-height",
        "max-height"
      ];
      var PSEUDO_CLASSES = [
        "active",
        "any-link",
        "blank",
        "checked",
        "current",
        "default",
        "defined",
        "dir",
        "disabled",
        "drop",
        "empty",
        "enabled",
        "first",
        "first-child",
        "first-of-type",
        "fullscreen",
        "future",
        "focus",
        "focus-visible",
        "focus-within",
        "has",
        "host",
        "host-context",
        "hover",
        "indeterminate",
        "in-range",
        "invalid",
        "is",
        "lang",
        "last-child",
        "last-of-type",
        "left",
        "link",
        "local-link",
        "not",
        "nth-child",
        "nth-col",
        "nth-last-child",
        "nth-last-col",
        "nth-last-of-type",
        "nth-of-type",
        "only-child",
        "only-of-type",
        "optional",
        "out-of-range",
        "past",
        "placeholder-shown",
        "read-only",
        "read-write",
        "required",
        "right",
        "root",
        "scope",
        "target",
        "target-within",
        "user-invalid",
        "valid",
        "visited",
        "where"
      ];
      var PSEUDO_ELEMENTS = [
        "after",
        "backdrop",
        "before",
        "cue",
        "cue-region",
        "first-letter",
        "first-line",
        "grammar-error",
        "marker",
        "part",
        "placeholder",
        "selection",
        "slotted",
        "spelling-error"
      ];
      var ATTRIBUTES = [
        "align-content",
        "align-items",
        "align-self",
        "all",
        "animation",
        "animation-delay",
        "animation-direction",
        "animation-duration",
        "animation-fill-mode",
        "animation-iteration-count",
        "animation-name",
        "animation-play-state",
        "animation-timing-function",
        "backface-visibility",
        "background",
        "background-attachment",
        "background-blend-mode",
        "background-clip",
        "background-color",
        "background-image",
        "background-origin",
        "background-position",
        "background-repeat",
        "background-size",
        "block-size",
        "border",
        "border-block",
        "border-block-color",
        "border-block-end",
        "border-block-end-color",
        "border-block-end-style",
        "border-block-end-width",
        "border-block-start",
        "border-block-start-color",
        "border-block-start-style",
        "border-block-start-width",
        "border-block-style",
        "border-block-width",
        "border-bottom",
        "border-bottom-color",
        "border-bottom-left-radius",
        "border-bottom-right-radius",
        "border-bottom-style",
        "border-bottom-width",
        "border-collapse",
        "border-color",
        "border-image",
        "border-image-outset",
        "border-image-repeat",
        "border-image-slice",
        "border-image-source",
        "border-image-width",
        "border-inline",
        "border-inline-color",
        "border-inline-end",
        "border-inline-end-color",
        "border-inline-end-style",
        "border-inline-end-width",
        "border-inline-start",
        "border-inline-start-color",
        "border-inline-start-style",
        "border-inline-start-width",
        "border-inline-style",
        "border-inline-width",
        "border-left",
        "border-left-color",
        "border-left-style",
        "border-left-width",
        "border-radius",
        "border-right",
        "border-right-color",
        "border-right-style",
        "border-right-width",
        "border-spacing",
        "border-style",
        "border-top",
        "border-top-color",
        "border-top-left-radius",
        "border-top-right-radius",
        "border-top-style",
        "border-top-width",
        "border-width",
        "bottom",
        "box-decoration-break",
        "box-shadow",
        "box-sizing",
        "break-after",
        "break-before",
        "break-inside",
        "caption-side",
        "caret-color",
        "clear",
        "clip",
        "clip-path",
        "clip-rule",
        "color",
        "column-count",
        "column-fill",
        "column-gap",
        "column-rule",
        "column-rule-color",
        "column-rule-style",
        "column-rule-width",
        "column-span",
        "column-width",
        "columns",
        "contain",
        "content",
        "content-visibility",
        "counter-increment",
        "counter-reset",
        "cue",
        "cue-after",
        "cue-before",
        "cursor",
        "direction",
        "display",
        "empty-cells",
        "filter",
        "flex",
        "flex-basis",
        "flex-direction",
        "flex-flow",
        "flex-grow",
        "flex-shrink",
        "flex-wrap",
        "float",
        "flow",
        "font",
        "font-display",
        "font-family",
        "font-feature-settings",
        "font-kerning",
        "font-language-override",
        "font-size",
        "font-size-adjust",
        "font-smoothing",
        "font-stretch",
        "font-style",
        "font-synthesis",
        "font-variant",
        "font-variant-caps",
        "font-variant-east-asian",
        "font-variant-ligatures",
        "font-variant-numeric",
        "font-variant-position",
        "font-variation-settings",
        "font-weight",
        "gap",
        "glyph-orientation-vertical",
        "grid",
        "grid-area",
        "grid-auto-columns",
        "grid-auto-flow",
        "grid-auto-rows",
        "grid-column",
        "grid-column-end",
        "grid-column-start",
        "grid-gap",
        "grid-row",
        "grid-row-end",
        "grid-row-start",
        "grid-template",
        "grid-template-areas",
        "grid-template-columns",
        "grid-template-rows",
        "hanging-punctuation",
        "height",
        "hyphens",
        "icon",
        "image-orientation",
        "image-rendering",
        "image-resolution",
        "ime-mode",
        "inline-size",
        "isolation",
        "justify-content",
        "left",
        "letter-spacing",
        "line-break",
        "line-height",
        "list-style",
        "list-style-image",
        "list-style-position",
        "list-style-type",
        "margin",
        "margin-block",
        "margin-block-end",
        "margin-block-start",
        "margin-bottom",
        "margin-inline",
        "margin-inline-end",
        "margin-inline-start",
        "margin-left",
        "margin-right",
        "margin-top",
        "marks",
        "mask",
        "mask-border",
        "mask-border-mode",
        "mask-border-outset",
        "mask-border-repeat",
        "mask-border-slice",
        "mask-border-source",
        "mask-border-width",
        "mask-clip",
        "mask-composite",
        "mask-image",
        "mask-mode",
        "mask-origin",
        "mask-position",
        "mask-repeat",
        "mask-size",
        "mask-type",
        "max-block-size",
        "max-height",
        "max-inline-size",
        "max-width",
        "min-block-size",
        "min-height",
        "min-inline-size",
        "min-width",
        "mix-blend-mode",
        "nav-down",
        "nav-index",
        "nav-left",
        "nav-right",
        "nav-up",
        "none",
        "normal",
        "object-fit",
        "object-position",
        "opacity",
        "order",
        "orphans",
        "outline",
        "outline-color",
        "outline-offset",
        "outline-style",
        "outline-width",
        "overflow",
        "overflow-wrap",
        "overflow-x",
        "overflow-y",
        "padding",
        "padding-block",
        "padding-block-end",
        "padding-block-start",
        "padding-bottom",
        "padding-inline",
        "padding-inline-end",
        "padding-inline-start",
        "padding-left",
        "padding-right",
        "padding-top",
        "page-break-after",
        "page-break-before",
        "page-break-inside",
        "pause",
        "pause-after",
        "pause-before",
        "perspective",
        "perspective-origin",
        "pointer-events",
        "position",
        "quotes",
        "resize",
        "rest",
        "rest-after",
        "rest-before",
        "right",
        "row-gap",
        "scroll-margin",
        "scroll-margin-block",
        "scroll-margin-block-end",
        "scroll-margin-block-start",
        "scroll-margin-bottom",
        "scroll-margin-inline",
        "scroll-margin-inline-end",
        "scroll-margin-inline-start",
        "scroll-margin-left",
        "scroll-margin-right",
        "scroll-margin-top",
        "scroll-padding",
        "scroll-padding-block",
        "scroll-padding-block-end",
        "scroll-padding-block-start",
        "scroll-padding-bottom",
        "scroll-padding-inline",
        "scroll-padding-inline-end",
        "scroll-padding-inline-start",
        "scroll-padding-left",
        "scroll-padding-right",
        "scroll-padding-top",
        "scroll-snap-align",
        "scroll-snap-stop",
        "scroll-snap-type",
        "scrollbar-color",
        "scrollbar-gutter",
        "scrollbar-width",
        "shape-image-threshold",
        "shape-margin",
        "shape-outside",
        "speak",
        "speak-as",
        "src",
        "tab-size",
        "table-layout",
        "text-align",
        "text-align-all",
        "text-align-last",
        "text-combine-upright",
        "text-decoration",
        "text-decoration-color",
        "text-decoration-line",
        "text-decoration-style",
        "text-emphasis",
        "text-emphasis-color",
        "text-emphasis-position",
        "text-emphasis-style",
        "text-indent",
        "text-justify",
        "text-orientation",
        "text-overflow",
        "text-rendering",
        "text-shadow",
        "text-transform",
        "text-underline-position",
        "top",
        "transform",
        "transform-box",
        "transform-origin",
        "transform-style",
        "transition",
        "transition-delay",
        "transition-duration",
        "transition-property",
        "transition-timing-function",
        "unicode-bidi",
        "vertical-align",
        "visibility",
        "voice-balance",
        "voice-duration",
        "voice-family",
        "voice-pitch",
        "voice-range",
        "voice-rate",
        "voice-stress",
        "voice-volume",
        "white-space",
        "widows",
        "width",
        "will-change",
        "word-break",
        "word-spacing",
        "word-wrap",
        "writing-mode",
        "z-index"
      ].reverse();
      function css2(hljs2) {
        const regex = hljs2.regex;
        const modes = MODES(hljs2);
        const VENDOR_PREFIX = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ };
        const AT_MODIFIERS = "and or not only";
        const AT_PROPERTY_RE = /@-?\w[\w]*(-\w+)*/;
        const IDENT_RE = "[a-zA-Z-][a-zA-Z0-9_-]*";
        const STRINGS = [
          hljs2.APOS_STRING_MODE,
          hljs2.QUOTE_STRING_MODE
        ];
        return {
          name: "CSS",
          case_insensitive: true,
          illegal: /[=|'\$]/,
          keywords: { keyframePosition: "from to" },
          classNameAliases: {
            keyframePosition: "selector-tag"
          },
          contains: [
            modes.BLOCK_COMMENT,
            VENDOR_PREFIX,
            modes.CSS_NUMBER_MODE,
            {
              className: "selector-id",
              begin: /#[A-Za-z0-9_-]+/,
              relevance: 0
            },
            {
              className: "selector-class",
              begin: "\\." + IDENT_RE,
              relevance: 0
            },
            modes.ATTRIBUTE_SELECTOR_MODE,
            {
              className: "selector-pseudo",
              variants: [
                { begin: ":(" + PSEUDO_CLASSES.join("|") + ")" },
                { begin: ":(:)?(" + PSEUDO_ELEMENTS.join("|") + ")" }
              ]
            },
            modes.CSS_VARIABLE,
            {
              className: "attribute",
              begin: "\\b(" + ATTRIBUTES.join("|") + ")\\b"
            },
            {
              begin: /:/,
              end: /[;}{]/,
              contains: [
                modes.BLOCK_COMMENT,
                modes.HEXCOLOR,
                modes.IMPORTANT,
                modes.CSS_NUMBER_MODE,
                ...STRINGS,
                {
                  begin: /(url|data-uri)\(/,
                  end: /\)/,
                  relevance: 0,
                  keywords: { built_in: "url data-uri" },
                  contains: [
                    ...STRINGS,
                    {
                      className: "string",
                      begin: /[^)]/,
                      endsWithParent: true,
                      excludeEnd: true
                    }
                  ]
                },
                modes.FUNCTION_DISPATCH
              ]
            },
            {
              begin: regex.lookahead(/@/),
              end: "[{;]",
              relevance: 0,
              illegal: /:/,
              contains: [
                {
                  className: "keyword",
                  begin: AT_PROPERTY_RE
                },
                {
                  begin: /\s/,
                  endsWithParent: true,
                  excludeEnd: true,
                  relevance: 0,
                  keywords: {
                    $pattern: /[a-z-]+/,
                    keyword: AT_MODIFIERS,
                    attribute: MEDIA_FEATURES.join(" ")
                  },
                  contains: [
                    {
                      begin: /[a-z-]+(?=:)/,
                      className: "attribute"
                    },
                    ...STRINGS,
                    modes.CSS_NUMBER_MODE
                  ]
                }
              ]
            },
            {
              className: "selector-tag",
              begin: "\\b(" + TAGS.join("|") + ")\\b"
            }
          ]
        };
      }
      module.exports = css2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/dart.js
  var require_dart = __commonJS({
    "../../node_modules/highlight.js/lib/languages/dart.js"(exports, module) {
      function dart2(hljs2) {
        const SUBST = {
          className: "subst",
          variants: [{ begin: "\\$[A-Za-z0-9_]+" }]
        };
        const BRACED_SUBST = {
          className: "subst",
          variants: [
            {
              begin: /\$\{/,
              end: /\}/
            }
          ],
          keywords: "true false null this is new super"
        };
        const STRING = {
          className: "string",
          variants: [
            {
              begin: "r'''",
              end: "'''"
            },
            {
              begin: 'r"""',
              end: '"""'
            },
            {
              begin: "r'",
              end: "'",
              illegal: "\\n"
            },
            {
              begin: 'r"',
              end: '"',
              illegal: "\\n"
            },
            {
              begin: "'''",
              end: "'''",
              contains: [
                hljs2.BACKSLASH_ESCAPE,
                SUBST,
                BRACED_SUBST
              ]
            },
            {
              begin: '"""',
              end: '"""',
              contains: [
                hljs2.BACKSLASH_ESCAPE,
                SUBST,
                BRACED_SUBST
              ]
            },
            {
              begin: "'",
              end: "'",
              illegal: "\\n",
              contains: [
                hljs2.BACKSLASH_ESCAPE,
                SUBST,
                BRACED_SUBST
              ]
            },
            {
              begin: '"',
              end: '"',
              illegal: "\\n",
              contains: [
                hljs2.BACKSLASH_ESCAPE,
                SUBST,
                BRACED_SUBST
              ]
            }
          ]
        };
        BRACED_SUBST.contains = [
          hljs2.C_NUMBER_MODE,
          STRING
        ];
        const BUILT_IN_TYPES = [
          "Comparable",
          "DateTime",
          "Duration",
          "Function",
          "Iterable",
          "Iterator",
          "List",
          "Map",
          "Match",
          "Object",
          "Pattern",
          "RegExp",
          "Set",
          "Stopwatch",
          "String",
          "StringBuffer",
          "StringSink",
          "Symbol",
          "Type",
          "Uri",
          "bool",
          "double",
          "int",
          "num",
          "Element",
          "ElementList"
        ];
        const NULLABLE_BUILT_IN_TYPES = BUILT_IN_TYPES.map((e) => `${e}?`);
        const BASIC_KEYWORDS = [
          "abstract",
          "as",
          "assert",
          "async",
          "await",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "covariant",
          "default",
          "deferred",
          "do",
          "dynamic",
          "else",
          "enum",
          "export",
          "extends",
          "extension",
          "external",
          "factory",
          "false",
          "final",
          "finally",
          "for",
          "Function",
          "get",
          "hide",
          "if",
          "implements",
          "import",
          "in",
          "inferface",
          "is",
          "late",
          "library",
          "mixin",
          "new",
          "null",
          "on",
          "operator",
          "part",
          "required",
          "rethrow",
          "return",
          "set",
          "show",
          "static",
          "super",
          "switch",
          "sync",
          "this",
          "throw",
          "true",
          "try",
          "typedef",
          "var",
          "void",
          "while",
          "with",
          "yield"
        ];
        const KEYWORDS = {
          keyword: BASIC_KEYWORDS,
          built_in: BUILT_IN_TYPES.concat(NULLABLE_BUILT_IN_TYPES).concat([
            "Never",
            "Null",
            "dynamic",
            "print",
            "document",
            "querySelector",
            "querySelectorAll",
            "window"
          ]),
          $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
        };
        return {
          name: "Dart",
          keywords: KEYWORDS,
          contains: [
            STRING,
            hljs2.COMMENT(
              /\/\*\*(?!\/)/,
              /\*\//,
              {
                subLanguage: "markdown",
                relevance: 0
              }
            ),
            hljs2.COMMENT(
              /\/{3,} ?/,
              /$/,
              { contains: [
                {
                  subLanguage: "markdown",
                  begin: ".",
                  end: "$",
                  relevance: 0
                }
              ] }
            ),
            hljs2.C_LINE_COMMENT_MODE,
            hljs2.C_BLOCK_COMMENT_MODE,
            {
              className: "class",
              beginKeywords: "class interface",
              end: /\{/,
              excludeEnd: true,
              contains: [
                { beginKeywords: "extends implements" },
                hljs2.UNDERSCORE_TITLE_MODE
              ]
            },
            hljs2.C_NUMBER_MODE,
            {
              className: "meta",
              begin: "@[A-Za-z]+"
            },
            {
              begin: "=>"
            }
          ]
        };
      }
      module.exports = dart2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/dockerfile.js
  var require_dockerfile = __commonJS({
    "../../node_modules/highlight.js/lib/languages/dockerfile.js"(exports, module) {
      function dockerfile2(hljs2) {
        const KEYWORDS = [
          "from",
          "maintainer",
          "expose",
          "env",
          "arg",
          "user",
          "onbuild",
          "stopsignal"
        ];
        return {
          name: "Dockerfile",
          aliases: ["docker"],
          case_insensitive: true,
          keywords: KEYWORDS,
          contains: [
            hljs2.HASH_COMMENT_MODE,
            hljs2.APOS_STRING_MODE,
            hljs2.QUOTE_STRING_MODE,
            hljs2.NUMBER_MODE,
            {
              beginKeywords: "run cmd entrypoint volume add copy workdir label healthcheck shell",
              starts: {
                end: /[^\\]$/,
                subLanguage: "bash"
              }
            }
          ],
          illegal: "</"
        };
      }
      module.exports = dockerfile2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/gradle.js
  var require_gradle = __commonJS({
    "../../node_modules/highlight.js/lib/languages/gradle.js"(exports, module) {
      function gradle2(hljs2) {
        const KEYWORDS = [
          "task",
          "project",
          "allprojects",
          "subprojects",
          "artifacts",
          "buildscript",
          "configurations",
          "dependencies",
          "repositories",
          "sourceSets",
          "description",
          "delete",
          "from",
          "into",
          "include",
          "exclude",
          "source",
          "classpath",
          "destinationDir",
          "includes",
          "options",
          "sourceCompatibility",
          "targetCompatibility",
          "group",
          "flatDir",
          "doLast",
          "doFirst",
          "flatten",
          "todir",
          "fromdir",
          "ant",
          "def",
          "abstract",
          "break",
          "case",
          "catch",
          "continue",
          "default",
          "do",
          "else",
          "extends",
          "final",
          "finally",
          "for",
          "if",
          "implements",
          "instanceof",
          "native",
          "new",
          "private",
          "protected",
          "public",
          "return",
          "static",
          "switch",
          "synchronized",
          "throw",
          "throws",
          "transient",
          "try",
          "volatile",
          "while",
          "strictfp",
          "package",
          "import",
          "false",
          "null",
          "super",
          "this",
          "true",
          "antlrtask",
          "checkstyle",
          "codenarc",
          "copy",
          "boolean",
          "byte",
          "char",
          "class",
          "double",
          "float",
          "int",
          "interface",
          "long",
          "short",
          "void",
          "compile",
          "runTime",
          "file",
          "fileTree",
          "abs",
          "any",
          "append",
          "asList",
          "asWritable",
          "call",
          "collect",
          "compareTo",
          "count",
          "div",
          "dump",
          "each",
          "eachByte",
          "eachFile",
          "eachLine",
          "every",
          "find",
          "findAll",
          "flatten",
          "getAt",
          "getErr",
          "getIn",
          "getOut",
          "getText",
          "grep",
          "immutable",
          "inject",
          "inspect",
          "intersect",
          "invokeMethods",
          "isCase",
          "join",
          "leftShift",
          "minus",
          "multiply",
          "newInputStream",
          "newOutputStream",
          "newPrintWriter",
          "newReader",
          "newWriter",
          "next",
          "plus",
          "pop",
          "power",
          "previous",
          "print",
          "println",
          "push",
          "putAt",
          "read",
          "readBytes",
          "readLines",
          "reverse",
          "reverseEach",
          "round",
          "size",
          "sort",
          "splitEachLine",
          "step",
          "subMap",
          "times",
          "toInteger",
          "toList",
          "tokenize",
          "upto",
          "waitForOrKill",
          "withPrintWriter",
          "withReader",
          "withStream",
          "withWriter",
          "withWriterAppend",
          "write",
          "writeLine"
        ];
        return {
          name: "Gradle",
          case_insensitive: true,
          keywords: KEYWORDS,
          contains: [
            hljs2.C_LINE_COMMENT_MODE,
            hljs2.C_BLOCK_COMMENT_MODE,
            hljs2.APOS_STRING_MODE,
            hljs2.QUOTE_STRING_MODE,
            hljs2.NUMBER_MODE,
            hljs2.REGEXP_MODE
          ]
        };
      }
      module.exports = gradle2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/java.js
  var require_java = __commonJS({
    "../../node_modules/highlight.js/lib/languages/java.js"(exports, module) {
      var decimalDigits = "[0-9](_*[0-9])*";
      var frac = `\\.(${decimalDigits})`;
      var hexDigits = "[0-9a-fA-F](_*[0-9a-fA-F])*";
      var NUMERIC = {
        className: "number",
        variants: [
          { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
          { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
          { begin: `(${frac})[fFdD]?\\b` },
          { begin: `\\b(${decimalDigits})[fFdD]\\b` },
          { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))[pP][+-]?(${decimalDigits})[fFdD]?\\b` },
          { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
          { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },
          { begin: "\\b0(_*[0-7])*[lL]?\\b" },
          { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
        ],
        relevance: 0
      };
      function recurRegex(re, substitution, depth) {
        if (depth === -1)
          return "";
        return re.replace(substitution, (_) => {
          return recurRegex(re, substitution, depth - 1);
        });
      }
      function java2(hljs2) {
        const regex = hljs2.regex;
        const JAVA_IDENT_RE = "[\xC0-\u02B8a-zA-Z_$][\xC0-\u02B8a-zA-Z_$0-9]*";
        const GENERIC_IDENT_RE = JAVA_IDENT_RE + recurRegex("(?:<" + JAVA_IDENT_RE + "~~~(?:\\s*,\\s*" + JAVA_IDENT_RE + "~~~)*>)?", /~~~/g, 2);
        const MAIN_KEYWORDS = [
          "synchronized",
          "abstract",
          "private",
          "var",
          "static",
          "if",
          "const ",
          "for",
          "while",
          "strictfp",
          "finally",
          "protected",
          "import",
          "native",
          "final",
          "void",
          "enum",
          "else",
          "break",
          "transient",
          "catch",
          "instanceof",
          "volatile",
          "case",
          "assert",
          "package",
          "default",
          "public",
          "try",
          "switch",
          "continue",
          "throws",
          "protected",
          "public",
          "private",
          "module",
          "requires",
          "exports",
          "do",
          "sealed",
          "yield",
          "permits"
        ];
        const BUILT_INS = [
          "super",
          "this"
        ];
        const LITERALS = [
          "false",
          "true",
          "null"
        ];
        const TYPES = [
          "char",
          "boolean",
          "long",
          "float",
          "int",
          "byte",
          "short",
          "double"
        ];
        const KEYWORDS = {
          keyword: MAIN_KEYWORDS,
          literal: LITERALS,
          type: TYPES,
          built_in: BUILT_INS
        };
        const ANNOTATION = {
          className: "meta",
          begin: "@" + JAVA_IDENT_RE,
          contains: [
            {
              begin: /\(/,
              end: /\)/,
              contains: ["self"]
            }
          ]
        };
        const PARAMS = {
          className: "params",
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS,
          relevance: 0,
          contains: [hljs2.C_BLOCK_COMMENT_MODE],
          endsParent: true
        };
        return {
          name: "Java",
          aliases: ["jsp"],
          keywords: KEYWORDS,
          illegal: /<\/|#/,
          contains: [
            hljs2.COMMENT(
              "/\\*\\*",
              "\\*/",
              {
                relevance: 0,
                contains: [
                  {
                    begin: /\w+@/,
                    relevance: 0
                  },
                  {
                    className: "doctag",
                    begin: "@[A-Za-z]+"
                  }
                ]
              }
            ),
            {
              begin: /import java\.[a-z]+\./,
              keywords: "import",
              relevance: 2
            },
            hljs2.C_LINE_COMMENT_MODE,
            hljs2.C_BLOCK_COMMENT_MODE,
            {
              begin: /"""/,
              end: /"""/,
              className: "string",
              contains: [hljs2.BACKSLASH_ESCAPE]
            },
            hljs2.APOS_STRING_MODE,
            hljs2.QUOTE_STRING_MODE,
            {
              match: [
                /\b(?:class|interface|enum|extends|implements|new)/,
                /\s+/,
                JAVA_IDENT_RE
              ],
              className: {
                1: "keyword",
                3: "title.class"
              }
            },
            {
              match: /non-sealed/,
              scope: "keyword"
            },
            {
              begin: [
                regex.concat(/(?!else)/, JAVA_IDENT_RE),
                /\s+/,
                JAVA_IDENT_RE,
                /\s+/,
                /=(?!=)/
              ],
              className: {
                1: "type",
                3: "variable",
                5: "operator"
              }
            },
            {
              begin: [
                /record/,
                /\s+/,
                JAVA_IDENT_RE
              ],
              className: {
                1: "keyword",
                3: "title.class"
              },
              contains: [
                PARAMS,
                hljs2.C_LINE_COMMENT_MODE,
                hljs2.C_BLOCK_COMMENT_MODE
              ]
            },
            {
              beginKeywords: "new throw return else",
              relevance: 0
            },
            {
              begin: [
                "(?:" + GENERIC_IDENT_RE + "\\s+)",
                hljs2.UNDERSCORE_IDENT_RE,
                /\s*(?=\()/
              ],
              className: { 2: "title.function" },
              keywords: KEYWORDS,
              contains: [
                {
                  className: "params",
                  begin: /\(/,
                  end: /\)/,
                  keywords: KEYWORDS,
                  relevance: 0,
                  contains: [
                    ANNOTATION,
                    hljs2.APOS_STRING_MODE,
                    hljs2.QUOTE_STRING_MODE,
                    NUMERIC,
                    hljs2.C_BLOCK_COMMENT_MODE
                  ]
                },
                hljs2.C_LINE_COMMENT_MODE,
                hljs2.C_BLOCK_COMMENT_MODE
              ]
            },
            NUMERIC,
            ANNOTATION
          ]
        };
      }
      module.exports = java2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/javascript.js
  var require_javascript = __commonJS({
    "../../node_modules/highlight.js/lib/languages/javascript.js"(exports, module) {
      var IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
      var KEYWORDS = [
        "as",
        "in",
        "of",
        "if",
        "for",
        "while",
        "finally",
        "var",
        "new",
        "function",
        "do",
        "return",
        "void",
        "else",
        "break",
        "catch",
        "instanceof",
        "with",
        "throw",
        "case",
        "default",
        "try",
        "switch",
        "continue",
        "typeof",
        "delete",
        "let",
        "yield",
        "const",
        "class",
        "debugger",
        "async",
        "await",
        "static",
        "import",
        "from",
        "export",
        "extends"
      ];
      var LITERALS = [
        "true",
        "false",
        "null",
        "undefined",
        "NaN",
        "Infinity"
      ];
      var TYPES = [
        "Object",
        "Function",
        "Boolean",
        "Symbol",
        "Math",
        "Date",
        "Number",
        "BigInt",
        "String",
        "RegExp",
        "Array",
        "Float32Array",
        "Float64Array",
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Int32Array",
        "Uint16Array",
        "Uint32Array",
        "BigInt64Array",
        "BigUint64Array",
        "Set",
        "Map",
        "WeakSet",
        "WeakMap",
        "ArrayBuffer",
        "SharedArrayBuffer",
        "Atomics",
        "DataView",
        "JSON",
        "Promise",
        "Generator",
        "GeneratorFunction",
        "AsyncFunction",
        "Reflect",
        "Proxy",
        "Intl",
        "WebAssembly"
      ];
      var ERROR_TYPES = [
        "Error",
        "EvalError",
        "InternalError",
        "RangeError",
        "ReferenceError",
        "SyntaxError",
        "TypeError",
        "URIError"
      ];
      var BUILT_IN_GLOBALS = [
        "setInterval",
        "setTimeout",
        "clearInterval",
        "clearTimeout",
        "require",
        "exports",
        "eval",
        "isFinite",
        "isNaN",
        "parseFloat",
        "parseInt",
        "decodeURI",
        "decodeURIComponent",
        "encodeURI",
        "encodeURIComponent",
        "escape",
        "unescape"
      ];
      var BUILT_IN_VARIABLES = [
        "arguments",
        "this",
        "super",
        "console",
        "window",
        "document",
        "localStorage",
        "module",
        "global"
      ];
      var BUILT_INS = [].concat(
        BUILT_IN_GLOBALS,
        TYPES,
        ERROR_TYPES
      );
      function javascript2(hljs2) {
        const regex = hljs2.regex;
        const hasClosingTag = (match, { after }) => {
          const tag = "</" + match[0].slice(1);
          const pos = match.input.indexOf(tag, after);
          return pos !== -1;
        };
        const IDENT_RE$1 = IDENT_RE;
        const FRAGMENT = {
          begin: "<>",
          end: "</>"
        };
        const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
        const XML_TAG = {
          begin: /<[A-Za-z0-9\\._:-]+/,
          end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
          isTrulyOpeningTag: (match, response) => {
            const afterMatchIndex = match[0].length + match.index;
            const nextChar = match.input[afterMatchIndex];
            if (nextChar === "<" || nextChar === ",") {
              response.ignoreMatch();
              return;
            }
            if (nextChar === ">") {
              if (!hasClosingTag(match, { after: afterMatchIndex })) {
                response.ignoreMatch();
              }
            }
            let m;
            const afterMatch = match.input.substring(afterMatchIndex);
            if (m = afterMatch.match(/^\s*=/)) {
              response.ignoreMatch();
              return;
            }
            if (m = afterMatch.match(/^\s+extends\s+/)) {
              if (m.index === 0) {
                response.ignoreMatch();
                return;
              }
            }
          }
        };
        const KEYWORDS$1 = {
          $pattern: IDENT_RE,
          keyword: KEYWORDS,
          literal: LITERALS,
          built_in: BUILT_INS,
          "variable.language": BUILT_IN_VARIABLES
        };
        const decimalDigits = "[0-9](_?[0-9])*";
        const frac = `\\.(${decimalDigits})`;
        const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
        const NUMBER = {
          className: "number",
          variants: [
            { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))[eE][+-]?(${decimalDigits})\\b` },
            { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },
            { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },
            { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
            { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
            { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
            { begin: "\\b0[0-7]+n?\\b" }
          ],
          relevance: 0
        };
        const SUBST = {
          className: "subst",
          begin: "\\$\\{",
          end: "\\}",
          keywords: KEYWORDS$1,
          contains: []
        };
        const HTML_TEMPLATE = {
          begin: "html`",
          end: "",
          starts: {
            end: "`",
            returnEnd: false,
            contains: [
              hljs2.BACKSLASH_ESCAPE,
              SUBST
            ],
            subLanguage: "xml"
          }
        };
        const CSS_TEMPLATE = {
          begin: "css`",
          end: "",
          starts: {
            end: "`",
            returnEnd: false,
            contains: [
              hljs2.BACKSLASH_ESCAPE,
              SUBST
            ],
            subLanguage: "css"
          }
        };
        const TEMPLATE_STRING = {
          className: "string",
          begin: "`",
          end: "`",
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            SUBST
          ]
        };
        const JSDOC_COMMENT = hljs2.COMMENT(
          /\/\*\*(?!\/)/,
          "\\*/",
          {
            relevance: 0,
            contains: [
              {
                begin: "(?=@[A-Za-z]+)",
                relevance: 0,
                contains: [
                  {
                    className: "doctag",
                    begin: "@[A-Za-z]+"
                  },
                  {
                    className: "type",
                    begin: "\\{",
                    end: "\\}",
                    excludeEnd: true,
                    excludeBegin: true,
                    relevance: 0
                  },
                  {
                    className: "variable",
                    begin: IDENT_RE$1 + "(?=\\s*(-)|$)",
                    endsParent: true,
                    relevance: 0
                  },
                  {
                    begin: /(?=[^\n])\s/,
                    relevance: 0
                  }
                ]
              }
            ]
          }
        );
        const COMMENT = {
          className: "comment",
          variants: [
            JSDOC_COMMENT,
            hljs2.C_BLOCK_COMMENT_MODE,
            hljs2.C_LINE_COMMENT_MODE
          ]
        };
        const SUBST_INTERNALS = [
          hljs2.APOS_STRING_MODE,
          hljs2.QUOTE_STRING_MODE,
          HTML_TEMPLATE,
          CSS_TEMPLATE,
          TEMPLATE_STRING,
          { match: /\$\d+/ },
          NUMBER
        ];
        SUBST.contains = SUBST_INTERNALS.concat({
          begin: /\{/,
          end: /\}/,
          keywords: KEYWORDS$1,
          contains: [
            "self"
          ].concat(SUBST_INTERNALS)
        });
        const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
        const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
          {
            begin: /\(/,
            end: /\)/,
            keywords: KEYWORDS$1,
            contains: ["self"].concat(SUBST_AND_COMMENTS)
          }
        ]);
        const PARAMS = {
          className: "params",
          begin: /\(/,
          end: /\)/,
          excludeBegin: true,
          excludeEnd: true,
          keywords: KEYWORDS$1,
          contains: PARAMS_CONTAINS
        };
        const CLASS_OR_EXTENDS = {
          variants: [
            {
              match: [
                /class/,
                /\s+/,
                IDENT_RE$1,
                /\s+/,
                /extends/,
                /\s+/,
                regex.concat(IDENT_RE$1, "(", regex.concat(/\./, IDENT_RE$1), ")*")
              ],
              scope: {
                1: "keyword",
                3: "title.class",
                5: "keyword",
                7: "title.class.inherited"
              }
            },
            {
              match: [
                /class/,
                /\s+/,
                IDENT_RE$1
              ],
              scope: {
                1: "keyword",
                3: "title.class"
              }
            }
          ]
        };
        const CLASS_REFERENCE = {
          relevance: 0,
          match: regex.either(
            /\bJSON/,
            /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
            /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
            /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
          ),
          className: "title.class",
          keywords: {
            _: [
              ...TYPES,
              ...ERROR_TYPES
            ]
          }
        };
        const USE_STRICT = {
          label: "use_strict",
          className: "meta",
          relevance: 10,
          begin: /^\s*['"]use (strict|asm)['"]/
        };
        const FUNCTION_DEFINITION = {
          variants: [
            {
              match: [
                /function/,
                /\s+/,
                IDENT_RE$1,
                /(?=\s*\()/
              ]
            },
            {
              match: [
                /function/,
                /\s*(?=\()/
              ]
            }
          ],
          className: {
            1: "keyword",
            3: "title.function"
          },
          label: "func.def",
          contains: [PARAMS],
          illegal: /%/
        };
        const UPPER_CASE_CONSTANT = {
          relevance: 0,
          match: /\b[A-Z][A-Z_0-9]+\b/,
          className: "variable.constant"
        };
        function noneOf(list) {
          return regex.concat("(?!", list.join("|"), ")");
        }
        const FUNCTION_CALL = {
          match: regex.concat(
            /\b/,
            noneOf([
              ...BUILT_IN_GLOBALS,
              "super",
              "import"
            ]),
            IDENT_RE$1,
            regex.lookahead(/\(/)
          ),
          className: "title.function",
          relevance: 0
        };
        const PROPERTY_ACCESS = {
          begin: regex.concat(/\./, regex.lookahead(
            regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)
          )),
          end: IDENT_RE$1,
          excludeBegin: true,
          keywords: "prototype",
          className: "property",
          relevance: 0
        };
        const GETTER_OR_SETTER = {
          match: [
            /get|set/,
            /\s+/,
            IDENT_RE$1,
            /(?=\()/
          ],
          className: {
            1: "keyword",
            3: "title.function"
          },
          contains: [
            {
              begin: /\(\)/
            },
            PARAMS
          ]
        };
        const FUNC_LEAD_IN_RE = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + hljs2.UNDERSCORE_IDENT_RE + ")\\s*=>";
        const FUNCTION_VARIABLE = {
          match: [
            /const|var|let/,
            /\s+/,
            IDENT_RE$1,
            /\s*/,
            /=\s*/,
            /(async\s*)?/,
            regex.lookahead(FUNC_LEAD_IN_RE)
          ],
          keywords: "async",
          className: {
            1: "keyword",
            3: "title.function"
          },
          contains: [
            PARAMS
          ]
        };
        return {
          name: "Javascript",
          aliases: ["js", "jsx", "mjs", "cjs"],
          keywords: KEYWORDS$1,
          exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
          illegal: /#(?![$_A-z])/,
          contains: [
            hljs2.SHEBANG({
              label: "shebang",
              binary: "node",
              relevance: 5
            }),
            USE_STRICT,
            hljs2.APOS_STRING_MODE,
            hljs2.QUOTE_STRING_MODE,
            HTML_TEMPLATE,
            CSS_TEMPLATE,
            TEMPLATE_STRING,
            COMMENT,
            { match: /\$\d+/ },
            NUMBER,
            CLASS_REFERENCE,
            {
              className: "attr",
              begin: IDENT_RE$1 + regex.lookahead(":"),
              relevance: 0
            },
            FUNCTION_VARIABLE,
            {
              begin: "(" + hljs2.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
              keywords: "return throw case",
              relevance: 0,
              contains: [
                COMMENT,
                hljs2.REGEXP_MODE,
                {
                  className: "function",
                  begin: FUNC_LEAD_IN_RE,
                  returnBegin: true,
                  end: "\\s*=>",
                  contains: [
                    {
                      className: "params",
                      variants: [
                        {
                          begin: hljs2.UNDERSCORE_IDENT_RE,
                          relevance: 0
                        },
                        {
                          className: null,
                          begin: /\(\s*\)/,
                          skip: true
                        },
                        {
                          begin: /\(/,
                          end: /\)/,
                          excludeBegin: true,
                          excludeEnd: true,
                          keywords: KEYWORDS$1,
                          contains: PARAMS_CONTAINS
                        }
                      ]
                    }
                  ]
                },
                {
                  begin: /,/,
                  relevance: 0
                },
                {
                  match: /\s+/,
                  relevance: 0
                },
                {
                  variants: [
                    { begin: FRAGMENT.begin, end: FRAGMENT.end },
                    { match: XML_SELF_CLOSING },
                    {
                      begin: XML_TAG.begin,
                      "on:begin": XML_TAG.isTrulyOpeningTag,
                      end: XML_TAG.end
                    }
                  ],
                  subLanguage: "xml",
                  contains: [
                    {
                      begin: XML_TAG.begin,
                      end: XML_TAG.end,
                      skip: true,
                      contains: ["self"]
                    }
                  ]
                }
              ]
            },
            FUNCTION_DEFINITION,
            {
              beginKeywords: "while if switch catch for"
            },
            {
              begin: "\\b(?!function)" + hljs2.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
              returnBegin: true,
              label: "func.def",
              contains: [
                PARAMS,
                hljs2.inherit(hljs2.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
              ]
            },
            {
              match: /\.\.\./,
              relevance: 0
            },
            PROPERTY_ACCESS,
            {
              match: "\\$" + IDENT_RE$1,
              relevance: 0
            },
            {
              match: [/\bconstructor(?=\s*\()/],
              className: { 1: "title.function" },
              contains: [PARAMS]
            },
            FUNCTION_CALL,
            UPPER_CASE_CONSTANT,
            CLASS_OR_EXTENDS,
            GETTER_OR_SETTER,
            {
              match: /\$[(.]/
            }
          ]
        };
      }
      module.exports = javascript2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/json.js
  var require_json = __commonJS({
    "../../node_modules/highlight.js/lib/languages/json.js"(exports, module) {
      function json2(hljs2) {
        const ATTRIBUTE = {
          className: "attr",
          begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
          relevance: 1.01
        };
        const PUNCTUATION = {
          match: /[{}[\],:]/,
          className: "punctuation",
          relevance: 0
        };
        const LITERALS = [
          "true",
          "false",
          "null"
        ];
        const LITERALS_MODE = {
          scope: "literal",
          beginKeywords: LITERALS.join(" ")
        };
        return {
          name: "JSON",
          keywords: {
            literal: LITERALS
          },
          contains: [
            ATTRIBUTE,
            PUNCTUATION,
            hljs2.QUOTE_STRING_MODE,
            LITERALS_MODE,
            hljs2.C_NUMBER_MODE,
            hljs2.C_LINE_COMMENT_MODE,
            hljs2.C_BLOCK_COMMENT_MODE
          ],
          illegal: "\\S"
        };
      }
      module.exports = json2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/kotlin.js
  var require_kotlin = __commonJS({
    "../../node_modules/highlight.js/lib/languages/kotlin.js"(exports, module) {
      var decimalDigits = "[0-9](_*[0-9])*";
      var frac = `\\.(${decimalDigits})`;
      var hexDigits = "[0-9a-fA-F](_*[0-9a-fA-F])*";
      var NUMERIC = {
        className: "number",
        variants: [
          { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
          { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
          { begin: `(${frac})[fFdD]?\\b` },
          { begin: `\\b(${decimalDigits})[fFdD]\\b` },
          { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))[pP][+-]?(${decimalDigits})[fFdD]?\\b` },
          { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
          { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },
          { begin: "\\b0(_*[0-7])*[lL]?\\b" },
          { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
        ],
        relevance: 0
      };
      function kotlin2(hljs2) {
        const KEYWORDS = {
          keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
          built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
          literal: "true false null"
        };
        const KEYWORDS_WITH_LABEL = {
          className: "keyword",
          begin: /\b(break|continue|return|this)\b/,
          starts: { contains: [
            {
              className: "symbol",
              begin: /@\w+/
            }
          ] }
        };
        const LABEL = {
          className: "symbol",
          begin: hljs2.UNDERSCORE_IDENT_RE + "@"
        };
        const SUBST = {
          className: "subst",
          begin: /\$\{/,
          end: /\}/,
          contains: [hljs2.C_NUMBER_MODE]
        };
        const VARIABLE = {
          className: "variable",
          begin: "\\$" + hljs2.UNDERSCORE_IDENT_RE
        };
        const STRING = {
          className: "string",
          variants: [
            {
              begin: '"""',
              end: '"""(?=[^"])',
              contains: [
                VARIABLE,
                SUBST
              ]
            },
            {
              begin: "'",
              end: "'",
              illegal: /\n/,
              contains: [hljs2.BACKSLASH_ESCAPE]
            },
            {
              begin: '"',
              end: '"',
              illegal: /\n/,
              contains: [
                hljs2.BACKSLASH_ESCAPE,
                VARIABLE,
                SUBST
              ]
            }
          ]
        };
        SUBST.contains.push(STRING);
        const ANNOTATION_USE_SITE = {
          className: "meta",
          begin: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*" + hljs2.UNDERSCORE_IDENT_RE + ")?"
        };
        const ANNOTATION = {
          className: "meta",
          begin: "@" + hljs2.UNDERSCORE_IDENT_RE,
          contains: [
            {
              begin: /\(/,
              end: /\)/,
              contains: [
                hljs2.inherit(STRING, { className: "string" }),
                "self"
              ]
            }
          ]
        };
        const KOTLIN_NUMBER_MODE = NUMERIC;
        const KOTLIN_NESTED_COMMENT = hljs2.COMMENT(
          "/\\*",
          "\\*/",
          { contains: [hljs2.C_BLOCK_COMMENT_MODE] }
        );
        const KOTLIN_PAREN_TYPE = { variants: [
          {
            className: "type",
            begin: hljs2.UNDERSCORE_IDENT_RE
          },
          {
            begin: /\(/,
            end: /\)/,
            contains: []
          }
        ] };
        const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
        KOTLIN_PAREN_TYPE2.variants[1].contains = [KOTLIN_PAREN_TYPE];
        KOTLIN_PAREN_TYPE.variants[1].contains = [KOTLIN_PAREN_TYPE2];
        return {
          name: "Kotlin",
          aliases: [
            "kt",
            "kts"
          ],
          keywords: KEYWORDS,
          contains: [
            hljs2.COMMENT(
              "/\\*\\*",
              "\\*/",
              {
                relevance: 0,
                contains: [
                  {
                    className: "doctag",
                    begin: "@[A-Za-z]+"
                  }
                ]
              }
            ),
            hljs2.C_LINE_COMMENT_MODE,
            KOTLIN_NESTED_COMMENT,
            KEYWORDS_WITH_LABEL,
            LABEL,
            ANNOTATION_USE_SITE,
            ANNOTATION,
            {
              className: "function",
              beginKeywords: "fun",
              end: "[(]|$",
              returnBegin: true,
              excludeEnd: true,
              keywords: KEYWORDS,
              relevance: 5,
              contains: [
                {
                  begin: hljs2.UNDERSCORE_IDENT_RE + "\\s*\\(",
                  returnBegin: true,
                  relevance: 0,
                  contains: [hljs2.UNDERSCORE_TITLE_MODE]
                },
                {
                  className: "type",
                  begin: /</,
                  end: />/,
                  keywords: "reified",
                  relevance: 0
                },
                {
                  className: "params",
                  begin: /\(/,
                  end: /\)/,
                  endsParent: true,
                  keywords: KEYWORDS,
                  relevance: 0,
                  contains: [
                    {
                      begin: /:/,
                      end: /[=,\/]/,
                      endsWithParent: true,
                      contains: [
                        KOTLIN_PAREN_TYPE,
                        hljs2.C_LINE_COMMENT_MODE,
                        KOTLIN_NESTED_COMMENT
                      ],
                      relevance: 0
                    },
                    hljs2.C_LINE_COMMENT_MODE,
                    KOTLIN_NESTED_COMMENT,
                    ANNOTATION_USE_SITE,
                    ANNOTATION,
                    STRING,
                    hljs2.C_NUMBER_MODE
                  ]
                },
                KOTLIN_NESTED_COMMENT
              ]
            },
            {
              begin: [
                /class|interface|trait/,
                /\s+/,
                hljs2.UNDERSCORE_IDENT_RE
              ],
              beginScope: {
                3: "title.class"
              },
              keywords: "class interface trait",
              end: /[:\{(]|$/,
              excludeEnd: true,
              illegal: "extends implements",
              contains: [
                { beginKeywords: "public protected internal private constructor" },
                hljs2.UNDERSCORE_TITLE_MODE,
                {
                  className: "type",
                  begin: /</,
                  end: />/,
                  excludeBegin: true,
                  excludeEnd: true,
                  relevance: 0
                },
                {
                  className: "type",
                  begin: /[,:]\s*/,
                  end: /[<\(,){\s]|$/,
                  excludeBegin: true,
                  returnEnd: true
                },
                ANNOTATION_USE_SITE,
                ANNOTATION
              ]
            },
            STRING,
            {
              className: "meta",
              begin: "^#!/usr/bin/env",
              end: "$",
              illegal: "\n"
            },
            KOTLIN_NUMBER_MODE
          ]
        };
      }
      module.exports = kotlin2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/markdown.js
  var require_markdown = __commonJS({
    "../../node_modules/highlight.js/lib/languages/markdown.js"(exports, module) {
      function markdown2(hljs2) {
        const regex = hljs2.regex;
        const INLINE_HTML = {
          begin: /<\/?[A-Za-z_]/,
          end: ">",
          subLanguage: "xml",
          relevance: 0
        };
        const HORIZONTAL_RULE = {
          begin: "^[-\\*]{3,}",
          end: "$"
        };
        const CODE = {
          className: "code",
          variants: [
            { begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*" },
            { begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*" },
            {
              begin: "```",
              end: "```+[ ]*$"
            },
            {
              begin: "~~~",
              end: "~~~+[ ]*$"
            },
            { begin: "`.+?`" },
            {
              begin: "(?=^( {4}|\\t))",
              contains: [
                {
                  begin: "^( {4}|\\t)",
                  end: "(\\n)$"
                }
              ],
              relevance: 0
            }
          ]
        };
        const LIST = {
          className: "bullet",
          begin: "^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)",
          end: "\\s+",
          excludeEnd: true
        };
        const LINK_REFERENCE = {
          begin: /^\[[^\n]+\]:/,
          returnBegin: true,
          contains: [
            {
              className: "symbol",
              begin: /\[/,
              end: /\]/,
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "link",
              begin: /:\s*/,
              end: /$/,
              excludeBegin: true
            }
          ]
        };
        const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;
        const LINK = {
          variants: [
            {
              begin: /\[.+?\]\[.*?\]/,
              relevance: 0
            },
            {
              begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
              relevance: 2
            },
            {
              begin: regex.concat(/\[.+?\]\(/, URL_SCHEME, /:\/\/.*?\)/),
              relevance: 2
            },
            {
              begin: /\[.+?\]\([./?&#].*?\)/,
              relevance: 1
            },
            {
              begin: /\[.*?\]\(.*?\)/,
              relevance: 0
            }
          ],
          returnBegin: true,
          contains: [
            {
              match: /\[(?=\])/
            },
            {
              className: "string",
              relevance: 0,
              begin: "\\[",
              end: "\\]",
              excludeBegin: true,
              returnEnd: true
            },
            {
              className: "link",
              relevance: 0,
              begin: "\\]\\(",
              end: "\\)",
              excludeBegin: true,
              excludeEnd: true
            },
            {
              className: "symbol",
              relevance: 0,
              begin: "\\]\\[",
              end: "\\]",
              excludeBegin: true,
              excludeEnd: true
            }
          ]
        };
        const BOLD = {
          className: "strong",
          contains: [],
          variants: [
            {
              begin: /_{2}(?!\s)/,
              end: /_{2}/
            },
            {
              begin: /\*{2}(?!\s)/,
              end: /\*{2}/
            }
          ]
        };
        const ITALIC = {
          className: "emphasis",
          contains: [],
          variants: [
            {
              begin: /\*(?![*\s])/,
              end: /\*/
            },
            {
              begin: /_(?![_\s])/,
              end: /_/,
              relevance: 0
            }
          ]
        };
        const BOLD_WITHOUT_ITALIC = hljs2.inherit(BOLD, { contains: [] });
        const ITALIC_WITHOUT_BOLD = hljs2.inherit(ITALIC, { contains: [] });
        BOLD.contains.push(ITALIC_WITHOUT_BOLD);
        ITALIC.contains.push(BOLD_WITHOUT_ITALIC);
        let CONTAINABLE = [
          INLINE_HTML,
          LINK
        ];
        [
          BOLD,
          ITALIC,
          BOLD_WITHOUT_ITALIC,
          ITALIC_WITHOUT_BOLD
        ].forEach((m) => {
          m.contains = m.contains.concat(CONTAINABLE);
        });
        CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);
        const HEADER = {
          className: "section",
          variants: [
            {
              begin: "^#{1,6}",
              end: "$",
              contains: CONTAINABLE
            },
            {
              begin: "(?=^.+?\\n[=-]{2,}$)",
              contains: [
                { begin: "^[=-]*$" },
                {
                  begin: "^",
                  end: "\\n",
                  contains: CONTAINABLE
                }
              ]
            }
          ]
        };
        const BLOCKQUOTE = {
          className: "quote",
          begin: "^>\\s+",
          contains: CONTAINABLE,
          end: "$"
        };
        return {
          name: "Markdown",
          aliases: [
            "md",
            "mkdown",
            "mkd"
          ],
          contains: [
            HEADER,
            INLINE_HTML,
            LIST,
            BOLD,
            ITALIC,
            BLOCKQUOTE,
            CODE,
            HORIZONTAL_RULE,
            LINK,
            LINK_REFERENCE
          ]
        };
      }
      module.exports = markdown2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/objectivec.js
  var require_objectivec = __commonJS({
    "../../node_modules/highlight.js/lib/languages/objectivec.js"(exports, module) {
      function objectivec2(hljs2) {
        const API_CLASS = {
          className: "built_in",
          begin: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
        };
        const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;
        const TYPES = [
          "int",
          "float",
          "char",
          "unsigned",
          "signed",
          "short",
          "long",
          "double",
          "wchar_t",
          "unichar",
          "void",
          "bool",
          "BOOL",
          "id|0",
          "_Bool"
        ];
        const KWS = [
          "while",
          "export",
          "sizeof",
          "typedef",
          "const",
          "struct",
          "for",
          "union",
          "volatile",
          "static",
          "mutable",
          "if",
          "do",
          "return",
          "goto",
          "enum",
          "else",
          "break",
          "extern",
          "asm",
          "case",
          "default",
          "register",
          "explicit",
          "typename",
          "switch",
          "continue",
          "inline",
          "readonly",
          "assign",
          "readwrite",
          "self",
          "@synchronized",
          "id",
          "typeof",
          "nonatomic",
          "IBOutlet",
          "IBAction",
          "strong",
          "weak",
          "copy",
          "in",
          "out",
          "inout",
          "bycopy",
          "byref",
          "oneway",
          "__strong",
          "__weak",
          "__block",
          "__autoreleasing",
          "@private",
          "@protected",
          "@public",
          "@try",
          "@property",
          "@end",
          "@throw",
          "@catch",
          "@finally",
          "@autoreleasepool",
          "@synthesize",
          "@dynamic",
          "@selector",
          "@optional",
          "@required",
          "@encode",
          "@package",
          "@import",
          "@defs",
          "@compatibility_alias",
          "__bridge",
          "__bridge_transfer",
          "__bridge_retained",
          "__bridge_retain",
          "__covariant",
          "__contravariant",
          "__kindof",
          "_Nonnull",
          "_Nullable",
          "_Null_unspecified",
          "__FUNCTION__",
          "__PRETTY_FUNCTION__",
          "__attribute__",
          "getter",
          "setter",
          "retain",
          "unsafe_unretained",
          "nonnull",
          "nullable",
          "null_unspecified",
          "null_resettable",
          "class",
          "instancetype",
          "NS_DESIGNATED_INITIALIZER",
          "NS_UNAVAILABLE",
          "NS_REQUIRES_SUPER",
          "NS_RETURNS_INNER_POINTER",
          "NS_INLINE",
          "NS_AVAILABLE",
          "NS_DEPRECATED",
          "NS_ENUM",
          "NS_OPTIONS",
          "NS_SWIFT_UNAVAILABLE",
          "NS_ASSUME_NONNULL_BEGIN",
          "NS_ASSUME_NONNULL_END",
          "NS_REFINED_FOR_SWIFT",
          "NS_SWIFT_NAME",
          "NS_SWIFT_NOTHROW",
          "NS_DURING",
          "NS_HANDLER",
          "NS_ENDHANDLER",
          "NS_VALUERETURN",
          "NS_VOIDRETURN"
        ];
        const LITERALS = [
          "false",
          "true",
          "FALSE",
          "TRUE",
          "nil",
          "YES",
          "NO",
          "NULL"
        ];
        const BUILT_INS = [
          "dispatch_once_t",
          "dispatch_queue_t",
          "dispatch_sync",
          "dispatch_async",
          "dispatch_once"
        ];
        const KEYWORDS = {
          "variable.language": [
            "this",
            "super"
          ],
          $pattern: IDENTIFIER_RE,
          keyword: KWS,
          literal: LITERALS,
          built_in: BUILT_INS,
          type: TYPES
        };
        const CLASS_KEYWORDS = {
          $pattern: IDENTIFIER_RE,
          keyword: [
            "@interface",
            "@class",
            "@protocol",
            "@implementation"
          ]
        };
        return {
          name: "Objective-C",
          aliases: [
            "mm",
            "objc",
            "obj-c",
            "obj-c++",
            "objective-c++"
          ],
          keywords: KEYWORDS,
          illegal: "</",
          contains: [
            API_CLASS,
            hljs2.C_LINE_COMMENT_MODE,
            hljs2.C_BLOCK_COMMENT_MODE,
            hljs2.C_NUMBER_MODE,
            hljs2.QUOTE_STRING_MODE,
            hljs2.APOS_STRING_MODE,
            {
              className: "string",
              variants: [
                {
                  begin: '@"',
                  end: '"',
                  illegal: "\\n",
                  contains: [hljs2.BACKSLASH_ESCAPE]
                }
              ]
            },
            {
              className: "meta",
              begin: /#\s*[a-z]+\b/,
              end: /$/,
              keywords: { keyword: "if else elif endif define undef warning error line pragma ifdef ifndef include" },
              contains: [
                {
                  begin: /\\\n/,
                  relevance: 0
                },
                hljs2.inherit(hljs2.QUOTE_STRING_MODE, { className: "string" }),
                {
                  className: "string",
                  begin: /<.*?>/,
                  end: /$/,
                  illegal: "\\n"
                },
                hljs2.C_LINE_COMMENT_MODE,
                hljs2.C_BLOCK_COMMENT_MODE
              ]
            },
            {
              className: "class",
              begin: "(" + CLASS_KEYWORDS.keyword.join("|") + ")\\b",
              end: /(\{|$)/,
              excludeEnd: true,
              keywords: CLASS_KEYWORDS,
              contains: [hljs2.UNDERSCORE_TITLE_MODE]
            },
            {
              begin: "\\." + hljs2.UNDERSCORE_IDENT_RE,
              relevance: 0
            }
          ]
        };
      }
      module.exports = objectivec2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/ruby.js
  var require_ruby = __commonJS({
    "../../node_modules/highlight.js/lib/languages/ruby.js"(exports, module) {
      function ruby2(hljs2) {
        const regex = hljs2.regex;
        const RUBY_METHOD_RE = "([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)";
        const CLASS_NAME_RE = regex.either(
          /\b([A-Z]+[a-z0-9]+)+/,
          /\b([A-Z]+[a-z0-9]+)+[A-Z]+/
        );
        const CLASS_NAME_WITH_NAMESPACE_RE = regex.concat(CLASS_NAME_RE, /(::\w+)*/);
        const PSEUDO_KWS = [
          "include",
          "extend",
          "prepend",
          "public",
          "private",
          "protected",
          "raise",
          "throw"
        ];
        const RUBY_KEYWORDS = {
          "variable.constant": [
            "__FILE__",
            "__LINE__",
            "__ENCODING__"
          ],
          "variable.language": [
            "self",
            "super"
          ],
          keyword: [
            "alias",
            "and",
            "begin",
            "BEGIN",
            "break",
            "case",
            "class",
            "defined",
            "do",
            "else",
            "elsif",
            "end",
            "END",
            "ensure",
            "for",
            "if",
            "in",
            "module",
            "next",
            "not",
            "or",
            "redo",
            "require",
            "rescue",
            "retry",
            "return",
            "then",
            "undef",
            "unless",
            "until",
            "when",
            "while",
            "yield",
            ...PSEUDO_KWS
          ],
          built_in: [
            "proc",
            "lambda",
            "attr_accessor",
            "attr_reader",
            "attr_writer",
            "define_method",
            "private_constant",
            "module_function"
          ],
          literal: [
            "true",
            "false",
            "nil"
          ]
        };
        const YARDOCTAG = {
          className: "doctag",
          begin: "@[A-Za-z]+"
        };
        const IRB_OBJECT = {
          begin: "#<",
          end: ">"
        };
        const COMMENT_MODES = [
          hljs2.COMMENT(
            "#",
            "$",
            { contains: [YARDOCTAG] }
          ),
          hljs2.COMMENT(
            "^=begin",
            "^=end",
            {
              contains: [YARDOCTAG],
              relevance: 10
            }
          ),
          hljs2.COMMENT("^__END__", hljs2.MATCH_NOTHING_RE)
        ];
        const SUBST = {
          className: "subst",
          begin: /#\{/,
          end: /\}/,
          keywords: RUBY_KEYWORDS
        };
        const STRING = {
          className: "string",
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            SUBST
          ],
          variants: [
            {
              begin: /'/,
              end: /'/
            },
            {
              begin: /"/,
              end: /"/
            },
            {
              begin: /`/,
              end: /`/
            },
            {
              begin: /%[qQwWx]?\(/,
              end: /\)/
            },
            {
              begin: /%[qQwWx]?\[/,
              end: /\]/
            },
            {
              begin: /%[qQwWx]?\{/,
              end: /\}/
            },
            {
              begin: /%[qQwWx]?</,
              end: />/
            },
            {
              begin: /%[qQwWx]?\//,
              end: /\//
            },
            {
              begin: /%[qQwWx]?%/,
              end: /%/
            },
            {
              begin: /%[qQwWx]?-/,
              end: /-/
            },
            {
              begin: /%[qQwWx]?\|/,
              end: /\|/
            },
            { begin: /\B\?(\\\d{1,3})/ },
            { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
            { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
            { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
            { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
            { begin: /\B\?\\?\S/ },
            {
              begin: regex.concat(
                /<<[-~]?'?/,
                regex.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
              ),
              contains: [
                hljs2.END_SAME_AS_BEGIN({
                  begin: /(\w+)/,
                  end: /(\w+)/,
                  contains: [
                    hljs2.BACKSLASH_ESCAPE,
                    SUBST
                  ]
                })
              ]
            }
          ]
        };
        const decimal = "[1-9](_?[0-9])*|0";
        const digits = "[0-9](_?[0-9])*";
        const NUMBER = {
          className: "number",
          relevance: 0,
          variants: [
            { begin: `\\b(${decimal})(\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\b` },
            { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
            { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
            { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
            { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },
            { begin: "\\b0(_?[0-7])+r?i?\\b" }
          ]
        };
        const PARAMS = {
          variants: [
            {
              match: /\(\)/
            },
            {
              className: "params",
              begin: /\(/,
              end: /(?=\))/,
              excludeBegin: true,
              endsParent: true,
              keywords: RUBY_KEYWORDS
            }
          ]
        };
        const INCLUDE_EXTEND = {
          match: [
            /(include|extend)\s+/,
            CLASS_NAME_WITH_NAMESPACE_RE
          ],
          scope: {
            2: "title.class"
          },
          keywords: RUBY_KEYWORDS
        };
        const CLASS_DEFINITION = {
          variants: [
            {
              match: [
                /class\s+/,
                CLASS_NAME_WITH_NAMESPACE_RE,
                /\s+<\s+/,
                CLASS_NAME_WITH_NAMESPACE_RE
              ]
            },
            {
              match: [
                /\b(class|module)\s+/,
                CLASS_NAME_WITH_NAMESPACE_RE
              ]
            }
          ],
          scope: {
            2: "title.class",
            4: "title.class.inherited"
          },
          keywords: RUBY_KEYWORDS
        };
        const UPPER_CASE_CONSTANT = {
          relevance: 0,
          match: /\b[A-Z][A-Z_0-9]+\b/,
          className: "variable.constant"
        };
        const METHOD_DEFINITION = {
          match: [
            /def/,
            /\s+/,
            RUBY_METHOD_RE
          ],
          scope: {
            1: "keyword",
            3: "title.function"
          },
          contains: [
            PARAMS
          ]
        };
        const OBJECT_CREATION = {
          relevance: 0,
          match: [
            CLASS_NAME_WITH_NAMESPACE_RE,
            /\.new[. (]/
          ],
          scope: {
            1: "title.class"
          }
        };
        const CLASS_REFERENCE = {
          relevance: 0,
          match: CLASS_NAME_RE,
          scope: "title.class"
        };
        const RUBY_DEFAULT_CONTAINS = [
          STRING,
          CLASS_DEFINITION,
          INCLUDE_EXTEND,
          OBJECT_CREATION,
          UPPER_CASE_CONSTANT,
          CLASS_REFERENCE,
          METHOD_DEFINITION,
          {
            begin: hljs2.IDENT_RE + "::"
          },
          {
            className: "symbol",
            begin: hljs2.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
            relevance: 0
          },
          {
            className: "symbol",
            begin: ":(?!\\s)",
            contains: [
              STRING,
              { begin: RUBY_METHOD_RE }
            ],
            relevance: 0
          },
          NUMBER,
          {
            className: "variable",
            begin: `(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])`
          },
          {
            className: "params",
            begin: /\|/,
            end: /\|/,
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0,
            keywords: RUBY_KEYWORDS
          },
          {
            begin: "(" + hljs2.RE_STARTERS_RE + "|unless)\\s*",
            keywords: "unless",
            contains: [
              {
                className: "regexp",
                contains: [
                  hljs2.BACKSLASH_ESCAPE,
                  SUBST
                ],
                illegal: /\n/,
                variants: [
                  {
                    begin: "/",
                    end: "/[a-z]*"
                  },
                  {
                    begin: /%r\{/,
                    end: /\}[a-z]*/
                  },
                  {
                    begin: "%r\\(",
                    end: "\\)[a-z]*"
                  },
                  {
                    begin: "%r!",
                    end: "![a-z]*"
                  },
                  {
                    begin: "%r\\[",
                    end: "\\][a-z]*"
                  }
                ]
              }
            ].concat(IRB_OBJECT, COMMENT_MODES),
            relevance: 0
          }
        ].concat(IRB_OBJECT, COMMENT_MODES);
        SUBST.contains = RUBY_DEFAULT_CONTAINS;
        PARAMS.contains = RUBY_DEFAULT_CONTAINS;
        const SIMPLE_PROMPT = "[>?]>";
        const DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]";
        const RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>";
        const IRB_DEFAULT = [
          {
            begin: /^\s*=>/,
            starts: {
              end: "$",
              contains: RUBY_DEFAULT_CONTAINS
            }
          },
          {
            className: "meta.prompt",
            begin: "^(" + SIMPLE_PROMPT + "|" + DEFAULT_PROMPT + "|" + RVM_PROMPT + ")(?=[ ])",
            starts: {
              end: "$",
              keywords: RUBY_KEYWORDS,
              contains: RUBY_DEFAULT_CONTAINS
            }
          }
        ];
        COMMENT_MODES.unshift(IRB_OBJECT);
        return {
          name: "Ruby",
          aliases: [
            "rb",
            "gemspec",
            "podspec",
            "thor",
            "irb"
          ],
          keywords: RUBY_KEYWORDS,
          illegal: /\/\*/,
          contains: [hljs2.SHEBANG({ binary: "ruby" })].concat(IRB_DEFAULT).concat(COMMENT_MODES).concat(RUBY_DEFAULT_CONTAINS)
        };
      }
      module.exports = ruby2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/sql.js
  var require_sql = __commonJS({
    "../../node_modules/highlight.js/lib/languages/sql.js"(exports, module) {
      function sql2(hljs2) {
        const regex = hljs2.regex;
        const COMMENT_MODE = hljs2.COMMENT("--", "$");
        const STRING = {
          className: "string",
          variants: [
            {
              begin: /'/,
              end: /'/,
              contains: [{ begin: /''/ }]
            }
          ]
        };
        const QUOTED_IDENTIFIER = {
          begin: /"/,
          end: /"/,
          contains: [{ begin: /""/ }]
        };
        const LITERALS = [
          "true",
          "false",
          "unknown"
        ];
        const MULTI_WORD_TYPES = [
          "double precision",
          "large object",
          "with timezone",
          "without timezone"
        ];
        const TYPES = [
          "bigint",
          "binary",
          "blob",
          "boolean",
          "char",
          "character",
          "clob",
          "date",
          "dec",
          "decfloat",
          "decimal",
          "float",
          "int",
          "integer",
          "interval",
          "nchar",
          "nclob",
          "national",
          "numeric",
          "real",
          "row",
          "smallint",
          "time",
          "timestamp",
          "varchar",
          "varying",
          "varbinary"
        ];
        const NON_RESERVED_WORDS = [
          "add",
          "asc",
          "collation",
          "desc",
          "final",
          "first",
          "last",
          "view"
        ];
        const RESERVED_WORDS = [
          "abs",
          "acos",
          "all",
          "allocate",
          "alter",
          "and",
          "any",
          "are",
          "array",
          "array_agg",
          "array_max_cardinality",
          "as",
          "asensitive",
          "asin",
          "asymmetric",
          "at",
          "atan",
          "atomic",
          "authorization",
          "avg",
          "begin",
          "begin_frame",
          "begin_partition",
          "between",
          "bigint",
          "binary",
          "blob",
          "boolean",
          "both",
          "by",
          "call",
          "called",
          "cardinality",
          "cascaded",
          "case",
          "cast",
          "ceil",
          "ceiling",
          "char",
          "char_length",
          "character",
          "character_length",
          "check",
          "classifier",
          "clob",
          "close",
          "coalesce",
          "collate",
          "collect",
          "column",
          "commit",
          "condition",
          "connect",
          "constraint",
          "contains",
          "convert",
          "copy",
          "corr",
          "corresponding",
          "cos",
          "cosh",
          "count",
          "covar_pop",
          "covar_samp",
          "create",
          "cross",
          "cube",
          "cume_dist",
          "current",
          "current_catalog",
          "current_date",
          "current_default_transform_group",
          "current_path",
          "current_role",
          "current_row",
          "current_schema",
          "current_time",
          "current_timestamp",
          "current_path",
          "current_role",
          "current_transform_group_for_type",
          "current_user",
          "cursor",
          "cycle",
          "date",
          "day",
          "deallocate",
          "dec",
          "decimal",
          "decfloat",
          "declare",
          "default",
          "define",
          "delete",
          "dense_rank",
          "deref",
          "describe",
          "deterministic",
          "disconnect",
          "distinct",
          "double",
          "drop",
          "dynamic",
          "each",
          "element",
          "else",
          "empty",
          "end",
          "end_frame",
          "end_partition",
          "end-exec",
          "equals",
          "escape",
          "every",
          "except",
          "exec",
          "execute",
          "exists",
          "exp",
          "external",
          "extract",
          "false",
          "fetch",
          "filter",
          "first_value",
          "float",
          "floor",
          "for",
          "foreign",
          "frame_row",
          "free",
          "from",
          "full",
          "function",
          "fusion",
          "get",
          "global",
          "grant",
          "group",
          "grouping",
          "groups",
          "having",
          "hold",
          "hour",
          "identity",
          "in",
          "indicator",
          "initial",
          "inner",
          "inout",
          "insensitive",
          "insert",
          "int",
          "integer",
          "intersect",
          "intersection",
          "interval",
          "into",
          "is",
          "join",
          "json_array",
          "json_arrayagg",
          "json_exists",
          "json_object",
          "json_objectagg",
          "json_query",
          "json_table",
          "json_table_primitive",
          "json_value",
          "lag",
          "language",
          "large",
          "last_value",
          "lateral",
          "lead",
          "leading",
          "left",
          "like",
          "like_regex",
          "listagg",
          "ln",
          "local",
          "localtime",
          "localtimestamp",
          "log",
          "log10",
          "lower",
          "match",
          "match_number",
          "match_recognize",
          "matches",
          "max",
          "member",
          "merge",
          "method",
          "min",
          "minute",
          "mod",
          "modifies",
          "module",
          "month",
          "multiset",
          "national",
          "natural",
          "nchar",
          "nclob",
          "new",
          "no",
          "none",
          "normalize",
          "not",
          "nth_value",
          "ntile",
          "null",
          "nullif",
          "numeric",
          "octet_length",
          "occurrences_regex",
          "of",
          "offset",
          "old",
          "omit",
          "on",
          "one",
          "only",
          "open",
          "or",
          "order",
          "out",
          "outer",
          "over",
          "overlaps",
          "overlay",
          "parameter",
          "partition",
          "pattern",
          "per",
          "percent",
          "percent_rank",
          "percentile_cont",
          "percentile_disc",
          "period",
          "portion",
          "position",
          "position_regex",
          "power",
          "precedes",
          "precision",
          "prepare",
          "primary",
          "procedure",
          "ptf",
          "range",
          "rank",
          "reads",
          "real",
          "recursive",
          "ref",
          "references",
          "referencing",
          "regr_avgx",
          "regr_avgy",
          "regr_count",
          "regr_intercept",
          "regr_r2",
          "regr_slope",
          "regr_sxx",
          "regr_sxy",
          "regr_syy",
          "release",
          "result",
          "return",
          "returns",
          "revoke",
          "right",
          "rollback",
          "rollup",
          "row",
          "row_number",
          "rows",
          "running",
          "savepoint",
          "scope",
          "scroll",
          "search",
          "second",
          "seek",
          "select",
          "sensitive",
          "session_user",
          "set",
          "show",
          "similar",
          "sin",
          "sinh",
          "skip",
          "smallint",
          "some",
          "specific",
          "specifictype",
          "sql",
          "sqlexception",
          "sqlstate",
          "sqlwarning",
          "sqrt",
          "start",
          "static",
          "stddev_pop",
          "stddev_samp",
          "submultiset",
          "subset",
          "substring",
          "substring_regex",
          "succeeds",
          "sum",
          "symmetric",
          "system",
          "system_time",
          "system_user",
          "table",
          "tablesample",
          "tan",
          "tanh",
          "then",
          "time",
          "timestamp",
          "timezone_hour",
          "timezone_minute",
          "to",
          "trailing",
          "translate",
          "translate_regex",
          "translation",
          "treat",
          "trigger",
          "trim",
          "trim_array",
          "true",
          "truncate",
          "uescape",
          "union",
          "unique",
          "unknown",
          "unnest",
          "update",
          "upper",
          "user",
          "using",
          "value",
          "values",
          "value_of",
          "var_pop",
          "var_samp",
          "varbinary",
          "varchar",
          "varying",
          "versioning",
          "when",
          "whenever",
          "where",
          "width_bucket",
          "window",
          "with",
          "within",
          "without",
          "year"
        ];
        const RESERVED_FUNCTIONS = [
          "abs",
          "acos",
          "array_agg",
          "asin",
          "atan",
          "avg",
          "cast",
          "ceil",
          "ceiling",
          "coalesce",
          "corr",
          "cos",
          "cosh",
          "count",
          "covar_pop",
          "covar_samp",
          "cume_dist",
          "dense_rank",
          "deref",
          "element",
          "exp",
          "extract",
          "first_value",
          "floor",
          "json_array",
          "json_arrayagg",
          "json_exists",
          "json_object",
          "json_objectagg",
          "json_query",
          "json_table",
          "json_table_primitive",
          "json_value",
          "lag",
          "last_value",
          "lead",
          "listagg",
          "ln",
          "log",
          "log10",
          "lower",
          "max",
          "min",
          "mod",
          "nth_value",
          "ntile",
          "nullif",
          "percent_rank",
          "percentile_cont",
          "percentile_disc",
          "position",
          "position_regex",
          "power",
          "rank",
          "regr_avgx",
          "regr_avgy",
          "regr_count",
          "regr_intercept",
          "regr_r2",
          "regr_slope",
          "regr_sxx",
          "regr_sxy",
          "regr_syy",
          "row_number",
          "sin",
          "sinh",
          "sqrt",
          "stddev_pop",
          "stddev_samp",
          "substring",
          "substring_regex",
          "sum",
          "tan",
          "tanh",
          "translate",
          "translate_regex",
          "treat",
          "trim",
          "trim_array",
          "unnest",
          "upper",
          "value_of",
          "var_pop",
          "var_samp",
          "width_bucket"
        ];
        const POSSIBLE_WITHOUT_PARENS = [
          "current_catalog",
          "current_date",
          "current_default_transform_group",
          "current_path",
          "current_role",
          "current_schema",
          "current_transform_group_for_type",
          "current_user",
          "session_user",
          "system_time",
          "system_user",
          "current_time",
          "localtime",
          "current_timestamp",
          "localtimestamp"
        ];
        const COMBOS = [
          "create table",
          "insert into",
          "primary key",
          "foreign key",
          "not null",
          "alter table",
          "add constraint",
          "grouping sets",
          "on overflow",
          "character set",
          "respect nulls",
          "ignore nulls",
          "nulls first",
          "nulls last",
          "depth first",
          "breadth first"
        ];
        const FUNCTIONS = RESERVED_FUNCTIONS;
        const KEYWORDS = [
          ...RESERVED_WORDS,
          ...NON_RESERVED_WORDS
        ].filter((keyword) => {
          return !RESERVED_FUNCTIONS.includes(keyword);
        });
        const VARIABLE = {
          className: "variable",
          begin: /@[a-z0-9]+/
        };
        const OPERATOR = {
          className: "operator",
          begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
          relevance: 0
        };
        const FUNCTION_CALL = {
          begin: regex.concat(/\b/, regex.either(...FUNCTIONS), /\s*\(/),
          relevance: 0,
          keywords: { built_in: FUNCTIONS }
        };
        function reduceRelevancy(list, {
          exceptions,
          when
        } = {}) {
          const qualifyFn = when;
          exceptions = exceptions || [];
          return list.map((item) => {
            if (item.match(/\|\d+$/) || exceptions.includes(item)) {
              return item;
            } else if (qualifyFn(item)) {
              return `${item}|0`;
            } else {
              return item;
            }
          });
        }
        return {
          name: "SQL",
          case_insensitive: true,
          illegal: /[{}]|<\//,
          keywords: {
            $pattern: /\b[\w\.]+/,
            keyword: reduceRelevancy(KEYWORDS, { when: (x) => x.length < 3 }),
            literal: LITERALS,
            type: TYPES,
            built_in: POSSIBLE_WITHOUT_PARENS
          },
          contains: [
            {
              begin: regex.either(...COMBOS),
              relevance: 0,
              keywords: {
                $pattern: /[\w\.]+/,
                keyword: KEYWORDS.concat(COMBOS),
                literal: LITERALS,
                type: TYPES
              }
            },
            {
              className: "type",
              begin: regex.either(...MULTI_WORD_TYPES)
            },
            FUNCTION_CALL,
            VARIABLE,
            STRING,
            QUOTED_IDENTIFIER,
            hljs2.C_NUMBER_MODE,
            hljs2.C_BLOCK_COMMENT_MODE,
            COMMENT_MODE,
            OPERATOR
          ]
        };
      }
      module.exports = sql2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/swift.js
  var require_swift = __commonJS({
    "../../node_modules/highlight.js/lib/languages/swift.js"(exports, module) {
      function source(re) {
        if (!re)
          return null;
        if (typeof re === "string")
          return re;
        return re.source;
      }
      function lookahead(re) {
        return concat2("(?=", re, ")");
      }
      function concat2(...args) {
        const joined = args.map((x) => source(x)).join("");
        return joined;
      }
      function stripOptionsFromArgs(args) {
        const opts = args[args.length - 1];
        if (typeof opts === "object" && opts.constructor === Object) {
          args.splice(args.length - 1, 1);
          return opts;
        } else {
          return {};
        }
      }
      function either(...args) {
        const opts = stripOptionsFromArgs(args);
        const joined = "(" + (opts.capture ? "" : "?:") + args.map((x) => source(x)).join("|") + ")";
        return joined;
      }
      var keywordWrapper = (keyword) => concat2(
        /\b/,
        keyword,
        /\w$/.test(keyword) ? /\b/ : /\B/
      );
      var dotKeywords = [
        "Protocol",
        "Type"
      ].map(keywordWrapper);
      var optionalDotKeywords = [
        "init",
        "self"
      ].map(keywordWrapper);
      var keywordTypes = [
        "Any",
        "Self"
      ];
      var keywords = [
        "actor",
        "any",
        "associatedtype",
        "async",
        "await",
        /as\?/,
        /as!/,
        "as",
        "break",
        "case",
        "catch",
        "class",
        "continue",
        "convenience",
        "default",
        "defer",
        "deinit",
        "didSet",
        "distributed",
        "do",
        "dynamic",
        "else",
        "enum",
        "extension",
        "fallthrough",
        /fileprivate\(set\)/,
        "fileprivate",
        "final",
        "for",
        "func",
        "get",
        "guard",
        "if",
        "import",
        "indirect",
        "infix",
        /init\?/,
        /init!/,
        "inout",
        /internal\(set\)/,
        "internal",
        "in",
        "is",
        "isolated",
        "nonisolated",
        "lazy",
        "let",
        "mutating",
        "nonmutating",
        /open\(set\)/,
        "open",
        "operator",
        "optional",
        "override",
        "postfix",
        "precedencegroup",
        "prefix",
        /private\(set\)/,
        "private",
        "protocol",
        /public\(set\)/,
        "public",
        "repeat",
        "required",
        "rethrows",
        "return",
        "set",
        "some",
        "static",
        "struct",
        "subscript",
        "super",
        "switch",
        "throws",
        "throw",
        /try\?/,
        /try!/,
        "try",
        "typealias",
        /unowned\(safe\)/,
        /unowned\(unsafe\)/,
        "unowned",
        "var",
        "weak",
        "where",
        "while",
        "willSet"
      ];
      var literals = [
        "false",
        "nil",
        "true"
      ];
      var precedencegroupKeywords = [
        "assignment",
        "associativity",
        "higherThan",
        "left",
        "lowerThan",
        "none",
        "right"
      ];
      var numberSignKeywords = [
        "#colorLiteral",
        "#column",
        "#dsohandle",
        "#else",
        "#elseif",
        "#endif",
        "#error",
        "#file",
        "#fileID",
        "#fileLiteral",
        "#filePath",
        "#function",
        "#if",
        "#imageLiteral",
        "#keyPath",
        "#line",
        "#selector",
        "#sourceLocation",
        "#warn_unqualified_access",
        "#warning"
      ];
      var builtIns = [
        "abs",
        "all",
        "any",
        "assert",
        "assertionFailure",
        "debugPrint",
        "dump",
        "fatalError",
        "getVaList",
        "isKnownUniquelyReferenced",
        "max",
        "min",
        "numericCast",
        "pointwiseMax",
        "pointwiseMin",
        "precondition",
        "preconditionFailure",
        "print",
        "readLine",
        "repeatElement",
        "sequence",
        "stride",
        "swap",
        "swift_unboxFromSwiftValueWithType",
        "transcode",
        "type",
        "unsafeBitCast",
        "unsafeDowncast",
        "withExtendedLifetime",
        "withUnsafeMutablePointer",
        "withUnsafePointer",
        "withVaList",
        "withoutActuallyEscaping",
        "zip"
      ];
      var operatorHead = either(
        /[/=\-+!*%<>&|^~?]/,
        /[\u00A1-\u00A7]/,
        /[\u00A9\u00AB]/,
        /[\u00AC\u00AE]/,
        /[\u00B0\u00B1]/,
        /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
        /[\u2016-\u2017]/,
        /[\u2020-\u2027]/,
        /[\u2030-\u203E]/,
        /[\u2041-\u2053]/,
        /[\u2055-\u205E]/,
        /[\u2190-\u23FF]/,
        /[\u2500-\u2775]/,
        /[\u2794-\u2BFF]/,
        /[\u2E00-\u2E7F]/,
        /[\u3001-\u3003]/,
        /[\u3008-\u3020]/,
        /[\u3030]/
      );
      var operatorCharacter = either(
        operatorHead,
        /[\u0300-\u036F]/,
        /[\u1DC0-\u1DFF]/,
        /[\u20D0-\u20FF]/,
        /[\uFE00-\uFE0F]/,
        /[\uFE20-\uFE2F]/
      );
      var operator = concat2(operatorHead, operatorCharacter, "*");
      var identifierHead = either(
        /[a-zA-Z_]/,
        /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
        /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
        /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
        /[\u1E00-\u1FFF]/,
        /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
        /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
        /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
        /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
        /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
        /[\uFE47-\uFEFE\uFF00-\uFFFD]/
      );
      var identifierCharacter = either(
        identifierHead,
        /\d/,
        /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
      );
      var identifier = concat2(identifierHead, identifierCharacter, "*");
      var typeIdentifier = concat2(/[A-Z]/, identifierCharacter, "*");
      var keywordAttributes = [
        "autoclosure",
        concat2(/convention\(/, either("swift", "block", "c"), /\)/),
        "discardableResult",
        "dynamicCallable",
        "dynamicMemberLookup",
        "escaping",
        "frozen",
        "GKInspectable",
        "IBAction",
        "IBDesignable",
        "IBInspectable",
        "IBOutlet",
        "IBSegueAction",
        "inlinable",
        "main",
        "nonobjc",
        "NSApplicationMain",
        "NSCopying",
        "NSManaged",
        concat2(/objc\(/, identifier, /\)/),
        "objc",
        "objcMembers",
        "propertyWrapper",
        "requires_stored_property_inits",
        "resultBuilder",
        "testable",
        "UIApplicationMain",
        "unknown",
        "usableFromInline"
      ];
      var availabilityKeywords = [
        "iOS",
        "iOSApplicationExtension",
        "macOS",
        "macOSApplicationExtension",
        "macCatalyst",
        "macCatalystApplicationExtension",
        "watchOS",
        "watchOSApplicationExtension",
        "tvOS",
        "tvOSApplicationExtension",
        "swift"
      ];
      function swift2(hljs2) {
        const WHITESPACE = {
          match: /\s+/,
          relevance: 0
        };
        const BLOCK_COMMENT = hljs2.COMMENT(
          "/\\*",
          "\\*/",
          { contains: ["self"] }
        );
        const COMMENTS = [
          hljs2.C_LINE_COMMENT_MODE,
          BLOCK_COMMENT
        ];
        const DOT_KEYWORD = {
          match: [
            /\./,
            either(...dotKeywords, ...optionalDotKeywords)
          ],
          className: { 2: "keyword" }
        };
        const KEYWORD_GUARD = {
          match: concat2(/\./, either(...keywords)),
          relevance: 0
        };
        const PLAIN_KEYWORDS = keywords.filter((kw) => typeof kw === "string").concat(["_|0"]);
        const REGEX_KEYWORDS = keywords.filter((kw) => typeof kw !== "string").concat(keywordTypes).map(keywordWrapper);
        const KEYWORD = { variants: [
          {
            className: "keyword",
            match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)
          }
        ] };
        const KEYWORDS = {
          $pattern: either(
            /\b\w+/,
            /#\w+/
          ),
          keyword: PLAIN_KEYWORDS.concat(numberSignKeywords),
          literal: literals
        };
        const KEYWORD_MODES = [
          DOT_KEYWORD,
          KEYWORD_GUARD,
          KEYWORD
        ];
        const BUILT_IN_GUARD = {
          match: concat2(/\./, either(...builtIns)),
          relevance: 0
        };
        const BUILT_IN = {
          className: "built_in",
          match: concat2(/\b/, either(...builtIns), /(?=\()/)
        };
        const BUILT_INS = [
          BUILT_IN_GUARD,
          BUILT_IN
        ];
        const OPERATOR_GUARD = {
          match: /->/,
          relevance: 0
        };
        const OPERATOR = {
          className: "operator",
          relevance: 0,
          variants: [
            { match: operator },
            {
              match: `\\.(\\.|${operatorCharacter})+`
            }
          ]
        };
        const OPERATORS = [
          OPERATOR_GUARD,
          OPERATOR
        ];
        const decimalDigits = "([0-9]_*)+";
        const hexDigits = "([0-9a-fA-F]_*)+";
        const NUMBER = {
          className: "number",
          relevance: 0,
          variants: [
            { match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?([eE][+-]?(${decimalDigits}))?\\b` },
            { match: `\\b0x(${hexDigits})(\\.(${hexDigits}))?([pP][+-]?(${decimalDigits}))?\\b` },
            { match: /\b0o([0-7]_*)+\b/ },
            { match: /\b0b([01]_*)+\b/ }
          ]
        };
        const ESCAPED_CHARACTER = (rawDelimiter = "") => ({
          className: "subst",
          variants: [
            { match: concat2(/\\/, rawDelimiter, /[0\\tnr"']/) },
            { match: concat2(/\\/, rawDelimiter, /u\{[0-9a-fA-F]{1,8}\}/) }
          ]
        });
        const ESCAPED_NEWLINE = (rawDelimiter = "") => ({
          className: "subst",
          match: concat2(/\\/, rawDelimiter, /[\t ]*(?:[\r\n]|\r\n)/)
        });
        const INTERPOLATION = (rawDelimiter = "") => ({
          className: "subst",
          label: "interpol",
          begin: concat2(/\\/, rawDelimiter, /\(/),
          end: /\)/
        });
        const MULTILINE_STRING = (rawDelimiter = "") => ({
          begin: concat2(rawDelimiter, /"""/),
          end: concat2(/"""/, rawDelimiter),
          contains: [
            ESCAPED_CHARACTER(rawDelimiter),
            ESCAPED_NEWLINE(rawDelimiter),
            INTERPOLATION(rawDelimiter)
          ]
        });
        const SINGLE_LINE_STRING = (rawDelimiter = "") => ({
          begin: concat2(rawDelimiter, /"/),
          end: concat2(/"/, rawDelimiter),
          contains: [
            ESCAPED_CHARACTER(rawDelimiter),
            INTERPOLATION(rawDelimiter)
          ]
        });
        const STRING = {
          className: "string",
          variants: [
            MULTILINE_STRING(),
            MULTILINE_STRING("#"),
            MULTILINE_STRING("##"),
            MULTILINE_STRING("###"),
            SINGLE_LINE_STRING(),
            SINGLE_LINE_STRING("#"),
            SINGLE_LINE_STRING("##"),
            SINGLE_LINE_STRING("###")
          ]
        };
        const QUOTED_IDENTIFIER = { match: concat2(/`/, identifier, /`/) };
        const IMPLICIT_PARAMETER = {
          className: "variable",
          match: /\$\d+/
        };
        const PROPERTY_WRAPPER_PROJECTION = {
          className: "variable",
          match: `\\$${identifierCharacter}+`
        };
        const IDENTIFIERS = [
          QUOTED_IDENTIFIER,
          IMPLICIT_PARAMETER,
          PROPERTY_WRAPPER_PROJECTION
        ];
        const AVAILABLE_ATTRIBUTE = {
          match: /(@|#(un)?)available/,
          className: "keyword",
          starts: { contains: [
            {
              begin: /\(/,
              end: /\)/,
              keywords: availabilityKeywords,
              contains: [
                ...OPERATORS,
                NUMBER,
                STRING
              ]
            }
          ] }
        };
        const KEYWORD_ATTRIBUTE = {
          className: "keyword",
          match: concat2(/@/, either(...keywordAttributes))
        };
        const USER_DEFINED_ATTRIBUTE = {
          className: "meta",
          match: concat2(/@/, identifier)
        };
        const ATTRIBUTES = [
          AVAILABLE_ATTRIBUTE,
          KEYWORD_ATTRIBUTE,
          USER_DEFINED_ATTRIBUTE
        ];
        const TYPE = {
          match: lookahead(/\b[A-Z]/),
          relevance: 0,
          contains: [
            {
              className: "type",
              match: concat2(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, "+")
            },
            {
              className: "type",
              match: typeIdentifier,
              relevance: 0
            },
            {
              match: /[?!]+/,
              relevance: 0
            },
            {
              match: /\.\.\./,
              relevance: 0
            },
            {
              match: concat2(/\s+&\s+/, lookahead(typeIdentifier)),
              relevance: 0
            }
          ]
        };
        const GENERIC_ARGUMENTS = {
          begin: /</,
          end: />/,
          keywords: KEYWORDS,
          contains: [
            ...COMMENTS,
            ...KEYWORD_MODES,
            ...ATTRIBUTES,
            OPERATOR_GUARD,
            TYPE
          ]
        };
        TYPE.contains.push(GENERIC_ARGUMENTS);
        const TUPLE_ELEMENT_NAME = {
          match: concat2(identifier, /\s*:/),
          keywords: "_|0",
          relevance: 0
        };
        const TUPLE = {
          begin: /\(/,
          end: /\)/,
          relevance: 0,
          keywords: KEYWORDS,
          contains: [
            "self",
            TUPLE_ELEMENT_NAME,
            ...COMMENTS,
            ...KEYWORD_MODES,
            ...BUILT_INS,
            ...OPERATORS,
            NUMBER,
            STRING,
            ...IDENTIFIERS,
            ...ATTRIBUTES,
            TYPE
          ]
        };
        const GENERIC_PARAMETERS = {
          begin: /</,
          end: />/,
          contains: [
            ...COMMENTS,
            TYPE
          ]
        };
        const FUNCTION_PARAMETER_NAME = {
          begin: either(
            lookahead(concat2(identifier, /\s*:/)),
            lookahead(concat2(identifier, /\s+/, identifier, /\s*:/))
          ),
          end: /:/,
          relevance: 0,
          contains: [
            {
              className: "keyword",
              match: /\b_\b/
            },
            {
              className: "params",
              match: identifier
            }
          ]
        };
        const FUNCTION_PARAMETERS = {
          begin: /\(/,
          end: /\)/,
          keywords: KEYWORDS,
          contains: [
            FUNCTION_PARAMETER_NAME,
            ...COMMENTS,
            ...KEYWORD_MODES,
            ...OPERATORS,
            NUMBER,
            STRING,
            ...ATTRIBUTES,
            TYPE,
            TUPLE
          ],
          endsParent: true,
          illegal: /["']/
        };
        const FUNCTION = {
          match: [
            /func/,
            /\s+/,
            either(QUOTED_IDENTIFIER.match, identifier, operator)
          ],
          className: {
            1: "keyword",
            3: "title.function"
          },
          contains: [
            GENERIC_PARAMETERS,
            FUNCTION_PARAMETERS,
            WHITESPACE
          ],
          illegal: [
            /\[/,
            /%/
          ]
        };
        const INIT_SUBSCRIPT = {
          match: [
            /\b(?:subscript|init[?!]?)/,
            /\s*(?=[<(])/
          ],
          className: { 1: "keyword" },
          contains: [
            GENERIC_PARAMETERS,
            FUNCTION_PARAMETERS,
            WHITESPACE
          ],
          illegal: /\[|%/
        };
        const OPERATOR_DECLARATION = {
          match: [
            /operator/,
            /\s+/,
            operator
          ],
          className: {
            1: "keyword",
            3: "title"
          }
        };
        const PRECEDENCEGROUP = {
          begin: [
            /precedencegroup/,
            /\s+/,
            typeIdentifier
          ],
          className: {
            1: "keyword",
            3: "title"
          },
          contains: [TYPE],
          keywords: [
            ...precedencegroupKeywords,
            ...literals
          ],
          end: /}/
        };
        for (const variant of STRING.variants) {
          const interpolation = variant.contains.find((mode) => mode.label === "interpol");
          interpolation.keywords = KEYWORDS;
          const submodes = [
            ...KEYWORD_MODES,
            ...BUILT_INS,
            ...OPERATORS,
            NUMBER,
            STRING,
            ...IDENTIFIERS
          ];
          interpolation.contains = [
            ...submodes,
            {
              begin: /\(/,
              end: /\)/,
              contains: [
                "self",
                ...submodes
              ]
            }
          ];
        }
        return {
          name: "Swift",
          keywords: KEYWORDS,
          contains: [
            ...COMMENTS,
            FUNCTION,
            INIT_SUBSCRIPT,
            {
              beginKeywords: "struct protocol class extension enum actor",
              end: "\\{",
              excludeEnd: true,
              keywords: KEYWORDS,
              contains: [
                hljs2.inherit(hljs2.TITLE_MODE, {
                  className: "title.class",
                  begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
                }),
                ...KEYWORD_MODES
              ]
            },
            OPERATOR_DECLARATION,
            PRECEDENCEGROUP,
            {
              beginKeywords: "import",
              end: /$/,
              contains: [...COMMENTS],
              relevance: 0
            },
            ...KEYWORD_MODES,
            ...BUILT_INS,
            ...OPERATORS,
            NUMBER,
            STRING,
            ...IDENTIFIERS,
            ...ATTRIBUTES,
            TYPE,
            TUPLE
          ]
        };
      }
      module.exports = swift2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/xml.js
  var require_xml = __commonJS({
    "../../node_modules/highlight.js/lib/languages/xml.js"(exports, module) {
      function xml2(hljs2) {
        const regex = hljs2.regex;
        const TAG_NAME_RE = regex.concat(/[\p{L}_]/u, regex.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u);
        const XML_IDENT_RE = /[\p{L}0-9._:-]+/u;
        const XML_ENTITIES = {
          className: "symbol",
          begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
        };
        const XML_META_KEYWORDS = {
          begin: /\s/,
          contains: [
            {
              className: "keyword",
              begin: /#?[a-z_][a-z1-9_-]+/,
              illegal: /\n/
            }
          ]
        };
        const XML_META_PAR_KEYWORDS = hljs2.inherit(XML_META_KEYWORDS, {
          begin: /\(/,
          end: /\)/
        });
        const APOS_META_STRING_MODE = hljs2.inherit(hljs2.APOS_STRING_MODE, { className: "string" });
        const QUOTE_META_STRING_MODE = hljs2.inherit(hljs2.QUOTE_STRING_MODE, { className: "string" });
        const TAG_INTERNALS = {
          endsWithParent: true,
          illegal: /</,
          relevance: 0,
          contains: [
            {
              className: "attr",
              begin: XML_IDENT_RE,
              relevance: 0
            },
            {
              begin: /=\s*/,
              relevance: 0,
              contains: [
                {
                  className: "string",
                  endsParent: true,
                  variants: [
                    {
                      begin: /"/,
                      end: /"/,
                      contains: [XML_ENTITIES]
                    },
                    {
                      begin: /'/,
                      end: /'/,
                      contains: [XML_ENTITIES]
                    },
                    { begin: /[^\s"'=<>`]+/ }
                  ]
                }
              ]
            }
          ]
        };
        return {
          name: "HTML, XML",
          aliases: [
            "html",
            "xhtml",
            "rss",
            "atom",
            "xjb",
            "xsd",
            "xsl",
            "plist",
            "wsf",
            "svg"
          ],
          case_insensitive: true,
          unicodeRegex: true,
          contains: [
            {
              className: "meta",
              begin: /<![a-z]/,
              end: />/,
              relevance: 10,
              contains: [
                XML_META_KEYWORDS,
                QUOTE_META_STRING_MODE,
                APOS_META_STRING_MODE,
                XML_META_PAR_KEYWORDS,
                {
                  begin: /\[/,
                  end: /\]/,
                  contains: [
                    {
                      className: "meta",
                      begin: /<![a-z]/,
                      end: />/,
                      contains: [
                        XML_META_KEYWORDS,
                        XML_META_PAR_KEYWORDS,
                        QUOTE_META_STRING_MODE,
                        APOS_META_STRING_MODE
                      ]
                    }
                  ]
                }
              ]
            },
            hljs2.COMMENT(
              /<!--/,
              /-->/,
              { relevance: 10 }
            ),
            {
              begin: /<!\[CDATA\[/,
              end: /\]\]>/,
              relevance: 10
            },
            XML_ENTITIES,
            {
              className: "meta",
              end: /\?>/,
              variants: [
                {
                  begin: /<\?xml/,
                  relevance: 10,
                  contains: [
                    QUOTE_META_STRING_MODE
                  ]
                },
                {
                  begin: /<\?[a-z][a-z0-9]+/
                }
              ]
            },
            {
              className: "tag",
              begin: /<style(?=\s|>)/,
              end: />/,
              keywords: { name: "style" },
              contains: [TAG_INTERNALS],
              starts: {
                end: /<\/style>/,
                returnEnd: true,
                subLanguage: [
                  "css",
                  "xml"
                ]
              }
            },
            {
              className: "tag",
              begin: /<script(?=\s|>)/,
              end: />/,
              keywords: { name: "script" },
              contains: [TAG_INTERNALS],
              starts: {
                end: /<\/script>/,
                returnEnd: true,
                subLanguage: [
                  "javascript",
                  "handlebars",
                  "xml"
                ]
              }
            },
            {
              className: "tag",
              begin: /<>|<\/>/
            },
            {
              className: "tag",
              begin: regex.concat(
                /</,
                regex.lookahead(regex.concat(
                  TAG_NAME_RE,
                  regex.either(/\/>/, />/, /\s/)
                ))
              ),
              end: /\/?>/,
              contains: [
                {
                  className: "name",
                  begin: TAG_NAME_RE,
                  relevance: 0,
                  starts: TAG_INTERNALS
                }
              ]
            },
            {
              className: "tag",
              begin: regex.concat(
                /<\//,
                regex.lookahead(regex.concat(
                  TAG_NAME_RE,
                  />/
                ))
              ),
              contains: [
                {
                  className: "name",
                  begin: TAG_NAME_RE,
                  relevance: 0
                },
                {
                  begin: />/,
                  relevance: 0,
                  endsParent: true
                }
              ]
            }
          ]
        };
      }
      module.exports = xml2;
    }
  });

  // ../../node_modules/highlight.js/lib/languages/yaml.js
  var require_yaml = __commonJS({
    "../../node_modules/highlight.js/lib/languages/yaml.js"(exports, module) {
      function yaml2(hljs2) {
        const LITERALS = "true false yes no null";
        const URI_CHARACTERS = "[\\w#;/?:@&=+$,.~*'()[\\]]+";
        const KEY = {
          className: "attr",
          variants: [
            { begin: "\\w[\\w :\\/.-]*:(?=[ 	]|$)" },
            {
              begin: '"\\w[\\w :\\/.-]*":(?=[ 	]|$)'
            },
            {
              begin: "'\\w[\\w :\\/.-]*':(?=[ 	]|$)"
            }
          ]
        };
        const TEMPLATE_VARIABLES = {
          className: "template-variable",
          variants: [
            {
              begin: /\{\{/,
              end: /\}\}/
            },
            {
              begin: /%\{/,
              end: /\}/
            }
          ]
        };
        const STRING = {
          className: "string",
          relevance: 0,
          variants: [
            {
              begin: /'/,
              end: /'/
            },
            {
              begin: /"/,
              end: /"/
            },
            { begin: /\S+/ }
          ],
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            TEMPLATE_VARIABLES
          ]
        };
        const CONTAINER_STRING = hljs2.inherit(STRING, { variants: [
          {
            begin: /'/,
            end: /'/
          },
          {
            begin: /"/,
            end: /"/
          },
          { begin: /[^\s,{}[\]]+/ }
        ] });
        const DATE_RE = "[0-9]{4}(-[0-9][0-9]){0,2}";
        const TIME_RE = "([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?";
        const FRACTION_RE = "(\\.[0-9]*)?";
        const ZONE_RE = "([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?";
        const TIMESTAMP = {
          className: "number",
          begin: "\\b" + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + "\\b"
        };
        const VALUE_CONTAINER = {
          end: ",",
          endsWithParent: true,
          excludeEnd: true,
          keywords: LITERALS,
          relevance: 0
        };
        const OBJECT = {
          begin: /\{/,
          end: /\}/,
          contains: [VALUE_CONTAINER],
          illegal: "\\n",
          relevance: 0
        };
        const ARRAY = {
          begin: "\\[",
          end: "\\]",
          contains: [VALUE_CONTAINER],
          illegal: "\\n",
          relevance: 0
        };
        const MODES = [
          KEY,
          {
            className: "meta",
            begin: "^---\\s*$",
            relevance: 10
          },
          {
            className: "string",
            begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
          },
          {
            begin: "<%[%=-]?",
            end: "[%-]?%>",
            subLanguage: "ruby",
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0
          },
          {
            className: "type",
            begin: "!\\w+!" + URI_CHARACTERS
          },
          {
            className: "type",
            begin: "!<" + URI_CHARACTERS + ">"
          },
          {
            className: "type",
            begin: "!" + URI_CHARACTERS
          },
          {
            className: "type",
            begin: "!!" + URI_CHARACTERS
          },
          {
            className: "meta",
            begin: "&" + hljs2.UNDERSCORE_IDENT_RE + "$"
          },
          {
            className: "meta",
            begin: "\\*" + hljs2.UNDERSCORE_IDENT_RE + "$"
          },
          {
            className: "bullet",
            begin: "-(?=[ ]|$)",
            relevance: 0
          },
          hljs2.HASH_COMMENT_MODE,
          {
            beginKeywords: LITERALS,
            keywords: { literal: LITERALS }
          },
          TIMESTAMP,
          {
            className: "number",
            begin: hljs2.C_NUMBER_RE + "\\b",
            relevance: 0
          },
          OBJECT,
          ARRAY,
          STRING
        ];
        const VALUE_MODES = [...MODES];
        VALUE_MODES.pop();
        VALUE_MODES.push(CONTAINER_STRING);
        VALUE_CONTAINER.contains = VALUE_MODES;
        return {
          name: "YAML",
          case_insensitive: true,
          aliases: ["yml"],
          contains: MODES
        };
      }
      module.exports = yaml2;
    }
  });

  // ../../node_modules/hammerjs/hammer.js
  var require_hammer = __commonJS({
    "../../node_modules/hammerjs/hammer.js"(exports, module) {
      (function(window2, document2, exportName, undefined2) {
        "use strict";
        var VENDOR_PREFIXES = ["", "webkit", "Moz", "MS", "ms", "o"];
        var TEST_ELEMENT = document2.createElement("div");
        var TYPE_FUNCTION = "function";
        var round = Math.round;
        var abs = Math.abs;
        var now2 = Date.now;
        function setTimeoutContext(fn, timeout, context) {
          return setTimeout(bindFn(fn, context), timeout);
        }
        function invokeArrayArg(arg, fn, context) {
          if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
          }
          return false;
        }
        function each(obj, iterator, context) {
          var i;
          if (!obj) {
            return;
          }
          if (obj.forEach) {
            obj.forEach(iterator, context);
          } else if (obj.length !== undefined2) {
            i = 0;
            while (i < obj.length) {
              iterator.call(context, obj[i], i, obj);
              i++;
            }
          } else {
            for (i in obj) {
              obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
            }
          }
        }
        function deprecate(method, name, message) {
          var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
          return function() {
            var e = new Error("get-stack-trace");
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
            var log = window2.console && (window2.console.warn || window2.console.log);
            if (log) {
              log.call(window2.console, deprecationMessage, stack);
            }
            return method.apply(this, arguments);
          };
        }
        var assign;
        if (typeof Object.assign !== "function") {
          assign = function assign2(target2) {
            if (target2 === undefined2 || target2 === null) {
              throw new TypeError("Cannot convert undefined or null to object");
            }
            var output = Object(target2);
            for (var index2 = 1; index2 < arguments.length; index2++) {
              var source = arguments[index2];
              if (source !== undefined2 && source !== null) {
                for (var nextKey in source) {
                  if (source.hasOwnProperty(nextKey)) {
                    output[nextKey] = source[nextKey];
                  }
                }
              }
            }
            return output;
          };
        } else {
          assign = Object.assign;
        }
        var extend4 = deprecate(function extend5(dest, src, merge2) {
          var keys = Object.keys(src);
          var i = 0;
          while (i < keys.length) {
            if (!merge2 || merge2 && dest[keys[i]] === undefined2) {
              dest[keys[i]] = src[keys[i]];
            }
            i++;
          }
          return dest;
        }, "extend", "Use `assign`.");
        var merge = deprecate(function merge2(dest, src) {
          return extend4(dest, src, true);
        }, "merge", "Use `assign`.");
        function inherit(child, base, properties) {
          var baseP = base.prototype, childP;
          childP = child.prototype = Object.create(baseP);
          childP.constructor = child;
          childP._super = baseP;
          if (properties) {
            assign(childP, properties);
          }
        }
        function bindFn(fn, context) {
          return function boundFn() {
            return fn.apply(context, arguments);
          };
        }
        function boolOrFn(val, args) {
          if (typeof val == TYPE_FUNCTION) {
            return val.apply(args ? args[0] || undefined2 : undefined2, args);
          }
          return val;
        }
        function ifUndefined(val1, val2) {
          return val1 === undefined2 ? val2 : val1;
        }
        function addEventListeners(target2, types, handler) {
          each(splitStr(types), function(type) {
            target2.addEventListener(type, handler, false);
          });
        }
        function removeEventListeners(target2, types, handler) {
          each(splitStr(types), function(type) {
            target2.removeEventListener(type, handler, false);
          });
        }
        function hasParent(node, parent) {
          while (node) {
            if (node == parent) {
              return true;
            }
            node = node.parentNode;
          }
          return false;
        }
        function inStr(str, find2) {
          return str.indexOf(find2) > -1;
        }
        function splitStr(str) {
          return str.trim().split(/\s+/g);
        }
        function inArray(src, find2, findByKey) {
          if (src.indexOf && !findByKey) {
            return src.indexOf(find2);
          } else {
            var i = 0;
            while (i < src.length) {
              if (findByKey && src[i][findByKey] == find2 || !findByKey && src[i] === find2) {
                return i;
              }
              i++;
            }
            return -1;
          }
        }
        function toArray2(obj) {
          return Array.prototype.slice.call(obj, 0);
        }
        function uniqueArray(src, key, sort) {
          var results = [];
          var values = [];
          var i = 0;
          while (i < src.length) {
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) {
              results.push(src[i]);
            }
            values[i] = val;
            i++;
          }
          if (sort) {
            if (!key) {
              results = results.sort();
            } else {
              results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
              });
            }
          }
          return results;
        }
        function prefixed(obj, property) {
          var prefix, prop;
          var camelProp = property[0].toUpperCase() + property.slice(1);
          var i = 0;
          while (i < VENDOR_PREFIXES.length) {
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;
            if (prop in obj) {
              return prop;
            }
            i++;
          }
          return undefined2;
        }
        var _uniqueId = 1;
        function uniqueId() {
          return _uniqueId++;
        }
        function getWindowForElement(element) {
          var doc = element.ownerDocument || element;
          return doc.defaultView || doc.parentWindow || window2;
        }
        var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
        var SUPPORT_TOUCH = "ontouchstart" in window2;
        var SUPPORT_POINTER_EVENTS = prefixed(window2, "PointerEvent") !== undefined2;
        var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
        var INPUT_TYPE_TOUCH = "touch";
        var INPUT_TYPE_PEN = "pen";
        var INPUT_TYPE_MOUSE = "mouse";
        var INPUT_TYPE_KINECT = "kinect";
        var COMPUTE_INTERVAL = 25;
        var INPUT_START = 1;
        var INPUT_MOVE = 2;
        var INPUT_END = 4;
        var INPUT_CANCEL = 8;
        var DIRECTION_NONE = 1;
        var DIRECTION_LEFT = 2;
        var DIRECTION_RIGHT = 4;
        var DIRECTION_UP = 8;
        var DIRECTION_DOWN = 16;
        var DIRECTION_HORIZONTAL2 = DIRECTION_LEFT | DIRECTION_RIGHT;
        var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
        var DIRECTION_ALL = DIRECTION_HORIZONTAL2 | DIRECTION_VERTICAL;
        var PROPS_XY = ["x", "y"];
        var PROPS_CLIENT_XY = ["clientX", "clientY"];
        function Input(manager, callback) {
          var self2 = this;
          this.manager = manager;
          this.callback = callback;
          this.element = manager.element;
          this.target = manager.options.inputTarget;
          this.domHandler = function(ev) {
            if (boolOrFn(manager.options.enable, [manager])) {
              self2.handler(ev);
            }
          };
          this.init();
        }
        Input.prototype = {
          handler: function() {
          },
          init: function() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
          },
          destroy: function() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
          }
        };
        function createInputInstance(manager) {
          var Type;
          var inputClass = manager.options.inputClass;
          if (inputClass) {
            Type = inputClass;
          } else if (SUPPORT_POINTER_EVENTS) {
            Type = PointerEventInput;
          } else if (SUPPORT_ONLY_TOUCH) {
            Type = TouchInput;
          } else if (!SUPPORT_TOUCH) {
            Type = MouseInput;
          } else {
            Type = TouchMouseInput;
          }
          return new Type(manager, inputHandler);
        }
        function inputHandler(manager, eventType, input) {
          var pointersLen = input.pointers.length;
          var changedPointersLen = input.changedPointers.length;
          var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
          var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
          input.isFirst = !!isFirst;
          input.isFinal = !!isFinal;
          if (isFirst) {
            manager.session = {};
          }
          input.eventType = eventType;
          computeInputData(manager, input);
          manager.emit("hammer.input", input);
          manager.recognize(input);
          manager.session.prevInput = input;
        }
        function computeInputData(manager, input) {
          var session2 = manager.session;
          var pointers = input.pointers;
          var pointersLength = pointers.length;
          if (!session2.firstInput) {
            session2.firstInput = simpleCloneInputData(input);
          }
          if (pointersLength > 1 && !session2.firstMultiple) {
            session2.firstMultiple = simpleCloneInputData(input);
          } else if (pointersLength === 1) {
            session2.firstMultiple = false;
          }
          var firstInput = session2.firstInput;
          var firstMultiple = session2.firstMultiple;
          var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
          var center = input.center = getCenter(pointers);
          input.timeStamp = now2();
          input.deltaTime = input.timeStamp - firstInput.timeStamp;
          input.angle = getAngle(offsetCenter, center);
          input.distance = getDistance(offsetCenter, center);
          computeDeltaXY(session2, input);
          input.offsetDirection = getDirection(input.deltaX, input.deltaY);
          var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
          input.overallVelocityX = overallVelocity.x;
          input.overallVelocityY = overallVelocity.y;
          input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
          input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
          input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
          input.maxPointers = !session2.prevInput ? input.pointers.length : input.pointers.length > session2.prevInput.maxPointers ? input.pointers.length : session2.prevInput.maxPointers;
          computeIntervalInputData(session2, input);
          var target2 = manager.element;
          if (hasParent(input.srcEvent.target, target2)) {
            target2 = input.srcEvent.target;
          }
          input.target = target2;
        }
        function computeDeltaXY(session2, input) {
          var center = input.center;
          var offset = session2.offsetDelta || {};
          var prevDelta = session2.prevDelta || {};
          var prevInput = session2.prevInput || {};
          if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session2.prevDelta = {
              x: prevInput.deltaX || 0,
              y: prevInput.deltaY || 0
            };
            offset = session2.offsetDelta = {
              x: center.x,
              y: center.y
            };
          }
          input.deltaX = prevDelta.x + (center.x - offset.x);
          input.deltaY = prevDelta.y + (center.y - offset.y);
        }
        function computeIntervalInputData(session2, input) {
          var last2 = session2.lastInterval || input, deltaTime = input.timeStamp - last2.timeStamp, velocity, velocityX, velocityY, direction;
          if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last2.velocity === undefined2)) {
            var deltaX = input.deltaX - last2.deltaX;
            var deltaY = input.deltaY - last2.deltaY;
            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);
            session2.lastInterval = input;
          } else {
            velocity = last2.velocity;
            velocityX = last2.velocityX;
            velocityY = last2.velocityY;
            direction = last2.direction;
          }
          input.velocity = velocity;
          input.velocityX = velocityX;
          input.velocityY = velocityY;
          input.direction = direction;
        }
        function simpleCloneInputData(input) {
          var pointers = [];
          var i = 0;
          while (i < input.pointers.length) {
            pointers[i] = {
              clientX: round(input.pointers[i].clientX),
              clientY: round(input.pointers[i].clientY)
            };
            i++;
          }
          return {
            timeStamp: now2(),
            pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
          };
        }
        function getCenter(pointers) {
          var pointersLength = pointers.length;
          if (pointersLength === 1) {
            return {
              x: round(pointers[0].clientX),
              y: round(pointers[0].clientY)
            };
          }
          var x = 0, y = 0, i = 0;
          while (i < pointersLength) {
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
          }
          return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
          };
        }
        function getVelocity(deltaTime, x, y) {
          return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
          };
        }
        function getDirection(x, y) {
          if (x === y) {
            return DIRECTION_NONE;
          }
          if (abs(x) >= abs(y)) {
            return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
          }
          return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
        }
        function getDistance(p1, p2, props2) {
          if (!props2) {
            props2 = PROPS_XY;
          }
          var x = p2[props2[0]] - p1[props2[0]], y = p2[props2[1]] - p1[props2[1]];
          return Math.sqrt(x * x + y * y);
        }
        function getAngle(p1, p2, props2) {
          if (!props2) {
            props2 = PROPS_XY;
          }
          var x = p2[props2[0]] - p1[props2[0]], y = p2[props2[1]] - p1[props2[1]];
          return Math.atan2(y, x) * 180 / Math.PI;
        }
        function getRotation(start2, end) {
          return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start2[1], start2[0], PROPS_CLIENT_XY);
        }
        function getScale(start2, end) {
          return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start2[0], start2[1], PROPS_CLIENT_XY);
        }
        var MOUSE_INPUT_MAP = {
          mousedown: INPUT_START,
          mousemove: INPUT_MOVE,
          mouseup: INPUT_END
        };
        var MOUSE_ELEMENT_EVENTS = "mousedown";
        var MOUSE_WINDOW_EVENTS = "mousemove mouseup";
        function MouseInput() {
          this.evEl = MOUSE_ELEMENT_EVENTS;
          this.evWin = MOUSE_WINDOW_EVENTS;
          this.pressed = false;
          Input.apply(this, arguments);
        }
        inherit(MouseInput, Input, {
          handler: function MEhandler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type];
            if (eventType & INPUT_START && ev.button === 0) {
              this.pressed = true;
            }
            if (eventType & INPUT_MOVE && ev.which !== 1) {
              eventType = INPUT_END;
            }
            if (!this.pressed) {
              return;
            }
            if (eventType & INPUT_END) {
              this.pressed = false;
            }
            this.callback(this.manager, eventType, {
              pointers: [ev],
              changedPointers: [ev],
              pointerType: INPUT_TYPE_MOUSE,
              srcEvent: ev
            });
          }
        });
        var POINTER_INPUT_MAP = {
          pointerdown: INPUT_START,
          pointermove: INPUT_MOVE,
          pointerup: INPUT_END,
          pointercancel: INPUT_CANCEL,
          pointerout: INPUT_CANCEL
        };
        var IE10_POINTER_TYPE_ENUM = {
          2: INPUT_TYPE_TOUCH,
          3: INPUT_TYPE_PEN,
          4: INPUT_TYPE_MOUSE,
          5: INPUT_TYPE_KINECT
        };
        var POINTER_ELEMENT_EVENTS = "pointerdown";
        var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel";
        if (window2.MSPointerEvent && !window2.PointerEvent) {
          POINTER_ELEMENT_EVENTS = "MSPointerDown";
          POINTER_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel";
        }
        function PointerEventInput() {
          this.evEl = POINTER_ELEMENT_EVENTS;
          this.evWin = POINTER_WINDOW_EVENTS;
          Input.apply(this, arguments);
          this.store = this.manager.session.pointerEvents = [];
        }
        inherit(PointerEventInput, Input, {
          handler: function PEhandler(ev) {
            var store = this.store;
            var removePointer = false;
            var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
            var isTouch = pointerType == INPUT_TYPE_TOUCH;
            var storeIndex = inArray(store, ev.pointerId, "pointerId");
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
              if (storeIndex < 0) {
                store.push(ev);
                storeIndex = store.length - 1;
              }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
              removePointer = true;
            }
            if (storeIndex < 0) {
              return;
            }
            store[storeIndex] = ev;
            this.callback(this.manager, eventType, {
              pointers: store,
              changedPointers: [ev],
              pointerType,
              srcEvent: ev
            });
            if (removePointer) {
              store.splice(storeIndex, 1);
            }
          }
        });
        var SINGLE_TOUCH_INPUT_MAP = {
          touchstart: INPUT_START,
          touchmove: INPUT_MOVE,
          touchend: INPUT_END,
          touchcancel: INPUT_CANCEL
        };
        var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
        var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";
        function SingleTouchInput() {
          this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
          this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
          this.started = false;
          Input.apply(this, arguments);
        }
        inherit(SingleTouchInput, Input, {
          handler: function TEhandler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
            if (type === INPUT_START) {
              this.started = true;
            }
            if (!this.started) {
              return;
            }
            var touches = normalizeSingleTouches.call(this, ev, type);
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
              this.started = false;
            }
            this.callback(this.manager, type, {
              pointers: touches[0],
              changedPointers: touches[1],
              pointerType: INPUT_TYPE_TOUCH,
              srcEvent: ev
            });
          }
        });
        function normalizeSingleTouches(ev, type) {
          var all = toArray2(ev.touches);
          var changed = toArray2(ev.changedTouches);
          if (type & (INPUT_END | INPUT_CANCEL)) {
            all = uniqueArray(all.concat(changed), "identifier", true);
          }
          return [all, changed];
        }
        var TOUCH_INPUT_MAP = {
          touchstart: INPUT_START,
          touchmove: INPUT_MOVE,
          touchend: INPUT_END,
          touchcancel: INPUT_CANCEL
        };
        var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";
        function TouchInput() {
          this.evTarget = TOUCH_TARGET_EVENTS;
          this.targetIds = {};
          Input.apply(this, arguments);
        }
        inherit(TouchInput, Input, {
          handler: function MTEhandler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) {
              return;
            }
            this.callback(this.manager, type, {
              pointers: touches[0],
              changedPointers: touches[1],
              pointerType: INPUT_TYPE_TOUCH,
              srcEvent: ev
            });
          }
        });
        function getTouches(ev, type) {
          var allTouches = toArray2(ev.touches);
          var targetIds = this.targetIds;
          if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [allTouches, allTouches];
          }
          var i, targetTouches, changedTouches = toArray2(ev.changedTouches), changedTargetTouches = [], target2 = this.target;
          targetTouches = allTouches.filter(function(touch) {
            return hasParent(touch.target, target2);
          });
          if (type === INPUT_START) {
            i = 0;
            while (i < targetTouches.length) {
              targetIds[targetTouches[i].identifier] = true;
              i++;
            }
          }
          i = 0;
          while (i < changedTouches.length) {
            if (targetIds[changedTouches[i].identifier]) {
              changedTargetTouches.push(changedTouches[i]);
            }
            if (type & (INPUT_END | INPUT_CANCEL)) {
              delete targetIds[changedTouches[i].identifier];
            }
            i++;
          }
          if (!changedTargetTouches.length) {
            return;
          }
          return [
            uniqueArray(targetTouches.concat(changedTargetTouches), "identifier", true),
            changedTargetTouches
          ];
        }
        var DEDUP_TIMEOUT = 2500;
        var DEDUP_DISTANCE = 25;
        function TouchMouseInput() {
          Input.apply(this, arguments);
          var handler = bindFn(this.handler, this);
          this.touch = new TouchInput(this.manager, handler);
          this.mouse = new MouseInput(this.manager, handler);
          this.primaryTouch = null;
          this.lastTouches = [];
        }
        inherit(TouchMouseInput, Input, {
          handler: function TMEhandler(manager, inputEvent, inputData) {
            var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH, isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
              return;
            }
            if (isTouch) {
              recordTouches.call(this, inputEvent, inputData);
            } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
              return;
            }
            this.callback(manager, inputEvent, inputData);
          },
          destroy: function destroy() {
            this.touch.destroy();
            this.mouse.destroy();
          }
        });
        function recordTouches(eventType, eventData) {
          if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
          } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            setLastTouch.call(this, eventData);
          }
        }
        function setLastTouch(eventData) {
          var touch = eventData.changedPointers[0];
          if (touch.identifier === this.primaryTouch) {
            var lastTouch = { x: touch.clientX, y: touch.clientY };
            this.lastTouches.push(lastTouch);
            var lts = this.lastTouches;
            var removeLastTouch = function() {
              var i = lts.indexOf(lastTouch);
              if (i > -1) {
                lts.splice(i, 1);
              }
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
          }
        }
        function isSyntheticEvent(eventData) {
          var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
          for (var i = 0; i < this.lastTouches.length; i++) {
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
              return true;
            }
          }
          return false;
        }
        var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
        var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined2;
        var TOUCH_ACTION_COMPUTE = "compute";
        var TOUCH_ACTION_AUTO = "auto";
        var TOUCH_ACTION_MANIPULATION = "manipulation";
        var TOUCH_ACTION_NONE = "none";
        var TOUCH_ACTION_PAN_X = "pan-x";
        var TOUCH_ACTION_PAN_Y = "pan-y";
        var TOUCH_ACTION_MAP = getTouchActionProps();
        function TouchAction(manager, value) {
          this.manager = manager;
          this.set(value);
        }
        TouchAction.prototype = {
          set: function(value) {
            if (value == TOUCH_ACTION_COMPUTE) {
              value = this.compute();
            }
            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
              this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            }
            this.actions = value.toLowerCase().trim();
          },
          update: function() {
            this.set(this.manager.options.touchAction);
          },
          compute: function() {
            var actions = [];
            each(this.manager.recognizers, function(recognizer) {
              if (boolOrFn(recognizer.options.enable, [recognizer])) {
                actions = actions.concat(recognizer.getTouchAction());
              }
            });
            return cleanTouchActions(actions.join(" "));
          },
          preventDefaults: function(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection;
            if (this.manager.session.prevented) {
              srcEvent.preventDefault();
              return;
            }
            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
            if (hasNone) {
              var isTapPointer = input.pointers.length === 1;
              var isTapMovement = input.distance < 2;
              var isTapTouchTime = input.deltaTime < 250;
              if (isTapPointer && isTapMovement && isTapTouchTime) {
                return;
              }
            }
            if (hasPanX && hasPanY) {
              return;
            }
            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL2 || hasPanX && direction & DIRECTION_VERTICAL) {
              return this.preventSrc(srcEvent);
            }
          },
          preventSrc: function(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
          }
        };
        function cleanTouchActions(actions) {
          if (inStr(actions, TOUCH_ACTION_NONE)) {
            return TOUCH_ACTION_NONE;
          }
          var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
          var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
          if (hasPanX && hasPanY) {
            return TOUCH_ACTION_NONE;
          }
          if (hasPanX || hasPanY) {
            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
          }
          if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
            return TOUCH_ACTION_MANIPULATION;
          }
          return TOUCH_ACTION_AUTO;
        }
        function getTouchActionProps() {
          if (!NATIVE_TOUCH_ACTION) {
            return false;
          }
          var touchMap = {};
          var cssSupports = window2.CSS && window2.CSS.supports;
          ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function(val) {
            touchMap[val] = cssSupports ? window2.CSS.supports("touch-action", val) : true;
          });
          return touchMap;
        }
        var STATE_POSSIBLE = 1;
        var STATE_BEGAN = 2;
        var STATE_CHANGED = 4;
        var STATE_ENDED = 8;
        var STATE_RECOGNIZED = STATE_ENDED;
        var STATE_CANCELLED = 16;
        var STATE_FAILED = 32;
        function Recognizer(options) {
          this.options = assign({}, this.defaults, options || {});
          this.id = uniqueId();
          this.manager = null;
          this.options.enable = ifUndefined(this.options.enable, true);
          this.state = STATE_POSSIBLE;
          this.simultaneous = {};
          this.requireFail = [];
        }
        Recognizer.prototype = {
          defaults: {},
          set: function(options) {
            assign(this.options, options);
            this.manager && this.manager.touchAction.update();
            return this;
          },
          recognizeWith: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) {
              return this;
            }
            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
              simultaneous[otherRecognizer.id] = otherRecognizer;
              otherRecognizer.recognizeWith(this);
            }
            return this;
          },
          dropRecognizeWith: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "dropRecognizeWith", this)) {
              return this;
            }
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
          },
          requireFailure: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "requireFailure", this)) {
              return this;
            }
            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
              requireFail.push(otherRecognizer);
              otherRecognizer.requireFailure(this);
            }
            return this;
          },
          dropRequireFailure: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) {
              return this;
            }
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index2 = inArray(this.requireFail, otherRecognizer);
            if (index2 > -1) {
              this.requireFail.splice(index2, 1);
            }
            return this;
          },
          hasRequireFailures: function() {
            return this.requireFail.length > 0;
          },
          canRecognizeWith: function(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
          },
          emit: function(input) {
            var self2 = this;
            var state = this.state;
            function emit(event) {
              self2.manager.emit(event, input);
            }
            if (state < STATE_ENDED) {
              emit(self2.options.event + stateStr(state));
            }
            emit(self2.options.event);
            if (input.additionalEvent) {
              emit(input.additionalEvent);
            }
            if (state >= STATE_ENDED) {
              emit(self2.options.event + stateStr(state));
            }
          },
          tryEmit: function(input) {
            if (this.canEmit()) {
              return this.emit(input);
            }
            this.state = STATE_FAILED;
          },
          canEmit: function() {
            var i = 0;
            while (i < this.requireFail.length) {
              if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                return false;
              }
              i++;
            }
            return true;
          },
          recognize: function(inputData) {
            var inputDataClone = assign({}, inputData);
            if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
              this.reset();
              this.state = STATE_FAILED;
              return;
            }
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
              this.state = STATE_POSSIBLE;
            }
            this.state = this.process(inputDataClone);
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
              this.tryEmit(inputDataClone);
            }
          },
          process: function(inputData) {
          },
          getTouchAction: function() {
          },
          reset: function() {
          }
        };
        function stateStr(state) {
          if (state & STATE_CANCELLED) {
            return "cancel";
          } else if (state & STATE_ENDED) {
            return "end";
          } else if (state & STATE_CHANGED) {
            return "move";
          } else if (state & STATE_BEGAN) {
            return "start";
          }
          return "";
        }
        function directionStr(direction) {
          if (direction == DIRECTION_DOWN) {
            return "down";
          } else if (direction == DIRECTION_UP) {
            return "up";
          } else if (direction == DIRECTION_LEFT) {
            return "left";
          } else if (direction == DIRECTION_RIGHT) {
            return "right";
          }
          return "";
        }
        function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
          var manager = recognizer.manager;
          if (manager) {
            return manager.get(otherRecognizer);
          }
          return otherRecognizer;
        }
        function AttrRecognizer() {
          Recognizer.apply(this, arguments);
        }
        inherit(AttrRecognizer, Recognizer, {
          defaults: {
            pointers: 1
          },
          attrTest: function(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
          },
          process: function(input) {
            var state = this.state;
            var eventType = input.eventType;
            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input);
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
              return state | STATE_CANCELLED;
            } else if (isRecognized || isValid) {
              if (eventType & INPUT_END) {
                return state | STATE_ENDED;
              } else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
              }
              return state | STATE_CHANGED;
            }
            return STATE_FAILED;
          }
        });
        function PanRecognizer() {
          AttrRecognizer.apply(this, arguments);
          this.pX = null;
          this.pY = null;
        }
        inherit(PanRecognizer, AttrRecognizer, {
          defaults: {
            event: "pan",
            threshold: 10,
            pointers: 1,
            direction: DIRECTION_ALL
          },
          getTouchAction: function() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL2) {
              actions.push(TOUCH_ACTION_PAN_Y);
            }
            if (direction & DIRECTION_VERTICAL) {
              actions.push(TOUCH_ACTION_PAN_X);
            }
            return actions;
          },
          directionTest: function(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY;
            if (!(direction & options.direction)) {
              if (options.direction & DIRECTION_HORIZONTAL2) {
                direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                hasMoved = x != this.pX;
                distance = Math.abs(input.deltaX);
              } else {
                direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                hasMoved = y != this.pY;
                distance = Math.abs(input.deltaY);
              }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
          },
          attrTest: function(input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
          },
          emit: function(input) {
            this.pX = input.deltaX;
            this.pY = input.deltaY;
            var direction = directionStr(input.direction);
            if (direction) {
              input.additionalEvent = this.options.event + direction;
            }
            this._super.emit.call(this, input);
          }
        });
        function PinchRecognizer() {
          AttrRecognizer.apply(this, arguments);
        }
        inherit(PinchRecognizer, AttrRecognizer, {
          defaults: {
            event: "pinch",
            threshold: 0,
            pointers: 2
          },
          getTouchAction: function() {
            return [TOUCH_ACTION_NONE];
          },
          attrTest: function(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
          },
          emit: function(input) {
            if (input.scale !== 1) {
              var inOut = input.scale < 1 ? "in" : "out";
              input.additionalEvent = this.options.event + inOut;
            }
            this._super.emit.call(this, input);
          }
        });
        function PressRecognizer() {
          Recognizer.apply(this, arguments);
          this._timer = null;
          this._input = null;
        }
        inherit(PressRecognizer, Recognizer, {
          defaults: {
            event: "press",
            pointers: 1,
            time: 251,
            threshold: 9
          },
          getTouchAction: function() {
            return [TOUCH_ACTION_AUTO];
          },
          process: function(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;
            this._input = input;
            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
              this.reset();
            } else if (input.eventType & INPUT_START) {
              this.reset();
              this._timer = setTimeoutContext(function() {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
              }, options.time, this);
            } else if (input.eventType & INPUT_END) {
              return STATE_RECOGNIZED;
            }
            return STATE_FAILED;
          },
          reset: function() {
            clearTimeout(this._timer);
          },
          emit: function(input) {
            if (this.state !== STATE_RECOGNIZED) {
              return;
            }
            if (input && input.eventType & INPUT_END) {
              this.manager.emit(this.options.event + "up", input);
            } else {
              this._input.timeStamp = now2();
              this.manager.emit(this.options.event, this._input);
            }
          }
        });
        function RotateRecognizer() {
          AttrRecognizer.apply(this, arguments);
        }
        inherit(RotateRecognizer, AttrRecognizer, {
          defaults: {
            event: "rotate",
            threshold: 0,
            pointers: 2
          },
          getTouchAction: function() {
            return [TOUCH_ACTION_NONE];
          },
          attrTest: function(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
          }
        });
        function SwipeRecognizer() {
          AttrRecognizer.apply(this, arguments);
        }
        inherit(SwipeRecognizer, AttrRecognizer, {
          defaults: {
            event: "swipe",
            threshold: 10,
            velocity: 0.3,
            direction: DIRECTION_HORIZONTAL2 | DIRECTION_VERTICAL,
            pointers: 1
          },
          getTouchAction: function() {
            return PanRecognizer.prototype.getTouchAction.call(this);
          },
          attrTest: function(input) {
            var direction = this.options.direction;
            var velocity;
            if (direction & (DIRECTION_HORIZONTAL2 | DIRECTION_VERTICAL)) {
              velocity = input.overallVelocity;
            } else if (direction & DIRECTION_HORIZONTAL2) {
              velocity = input.overallVelocityX;
            } else if (direction & DIRECTION_VERTICAL) {
              velocity = input.overallVelocityY;
            }
            return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
          },
          emit: function(input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) {
              this.manager.emit(this.options.event + direction, input);
            }
            this.manager.emit(this.options.event, input);
          }
        });
        function TapRecognizer() {
          Recognizer.apply(this, arguments);
          this.pTime = false;
          this.pCenter = false;
          this._timer = null;
          this._input = null;
          this.count = 0;
        }
        inherit(TapRecognizer, Recognizer, {
          defaults: {
            event: "tap",
            pointers: 1,
            taps: 1,
            interval: 300,
            time: 250,
            threshold: 9,
            posThreshold: 10
          },
          getTouchAction: function() {
            return [TOUCH_ACTION_MANIPULATION];
          },
          process: function(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;
            this.reset();
            if (input.eventType & INPUT_START && this.count === 0) {
              return this.failTimeout();
            }
            if (validMovement && validTouchTime && validPointers) {
              if (input.eventType != INPUT_END) {
                return this.failTimeout();
              }
              var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
              var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
              this.pTime = input.timeStamp;
              this.pCenter = input.center;
              if (!validMultiTap || !validInterval) {
                this.count = 1;
              } else {
                this.count += 1;
              }
              this._input = input;
              var tapCount = this.count % options.taps;
              if (tapCount === 0) {
                if (!this.hasRequireFailures()) {
                  return STATE_RECOGNIZED;
                } else {
                  this._timer = setTimeoutContext(function() {
                    this.state = STATE_RECOGNIZED;
                    this.tryEmit();
                  }, options.interval, this);
                  return STATE_BEGAN;
                }
              }
            }
            return STATE_FAILED;
          },
          failTimeout: function() {
            this._timer = setTimeoutContext(function() {
              this.state = STATE_FAILED;
            }, this.options.interval, this);
            return STATE_FAILED;
          },
          reset: function() {
            clearTimeout(this._timer);
          },
          emit: function() {
            if (this.state == STATE_RECOGNIZED) {
              this._input.tapCount = this.count;
              this.manager.emit(this.options.event, this._input);
            }
          }
        });
        function Hammer2(element, options) {
          options = options || {};
          options.recognizers = ifUndefined(options.recognizers, Hammer2.defaults.preset);
          return new Manager2(element, options);
        }
        Hammer2.VERSION = "2.0.7";
        Hammer2.defaults = {
          domEvents: false,
          touchAction: TOUCH_ACTION_COMPUTE,
          enable: true,
          inputTarget: null,
          inputClass: null,
          preset: [
            [RotateRecognizer, { enable: false }],
            [PinchRecognizer, { enable: false }, ["rotate"]],
            [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL2 }],
            [PanRecognizer, { direction: DIRECTION_HORIZONTAL2 }, ["swipe"]],
            [TapRecognizer],
            [TapRecognizer, { event: "doubletap", taps: 2 }, ["tap"]],
            [PressRecognizer]
          ],
          cssProps: {
            userSelect: "none",
            touchSelect: "none",
            touchCallout: "none",
            contentZooming: "none",
            userDrag: "none",
            tapHighlightColor: "rgba(0,0,0,0)"
          }
        };
        var STOP = 1;
        var FORCED_STOP = 2;
        function Manager2(element, options) {
          this.options = assign({}, Hammer2.defaults, options || {});
          this.options.inputTarget = this.options.inputTarget || element;
          this.handlers = {};
          this.session = {};
          this.recognizers = [];
          this.oldCssProps = {};
          this.element = element;
          this.input = createInputInstance(this);
          this.touchAction = new TouchAction(this, this.options.touchAction);
          toggleCssProps(this, true);
          each(this.options.recognizers, function(item) {
            var recognizer = this.add(new item[0](item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
          }, this);
        }
        Manager2.prototype = {
          set: function(options) {
            assign(this.options, options);
            if (options.touchAction) {
              this.touchAction.update();
            }
            if (options.inputTarget) {
              this.input.destroy();
              this.input.target = options.inputTarget;
              this.input.init();
            }
            return this;
          },
          stop: function(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
          },
          recognize: function(inputData) {
            var session2 = this.session;
            if (session2.stopped) {
              return;
            }
            this.touchAction.preventDefaults(inputData);
            var recognizer;
            var recognizers = this.recognizers;
            var curRecognizer = session2.curRecognizer;
            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
              curRecognizer = session2.curRecognizer = null;
            }
            var i = 0;
            while (i < recognizers.length) {
              recognizer = recognizers[i];
              if (session2.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer || recognizer.canRecognizeWith(curRecognizer))) {
                recognizer.recognize(inputData);
              } else {
                recognizer.reset();
              }
              if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                curRecognizer = session2.curRecognizer = recognizer;
              }
              i++;
            }
          },
          get: function(recognizer) {
            if (recognizer instanceof Recognizer) {
              return recognizer;
            }
            var recognizers = this.recognizers;
            for (var i = 0; i < recognizers.length; i++) {
              if (recognizers[i].options.event == recognizer) {
                return recognizers[i];
              }
            }
            return null;
          },
          add: function(recognizer) {
            if (invokeArrayArg(recognizer, "add", this)) {
              return this;
            }
            var existing = this.get(recognizer.options.event);
            if (existing) {
              this.remove(existing);
            }
            this.recognizers.push(recognizer);
            recognizer.manager = this;
            this.touchAction.update();
            return recognizer;
          },
          remove: function(recognizer) {
            if (invokeArrayArg(recognizer, "remove", this)) {
              return this;
            }
            recognizer = this.get(recognizer);
            if (recognizer) {
              var recognizers = this.recognizers;
              var index2 = inArray(recognizers, recognizer);
              if (index2 !== -1) {
                recognizers.splice(index2, 1);
                this.touchAction.update();
              }
            }
            return this;
          },
          on: function(events2, handler) {
            if (events2 === undefined2) {
              return;
            }
            if (handler === undefined2) {
              return;
            }
            var handlers = this.handlers;
            each(splitStr(events2), function(event) {
              handlers[event] = handlers[event] || [];
              handlers[event].push(handler);
            });
            return this;
          },
          off: function(events2, handler) {
            if (events2 === undefined2) {
              return;
            }
            var handlers = this.handlers;
            each(splitStr(events2), function(event) {
              if (!handler) {
                delete handlers[event];
              } else {
                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
              }
            });
            return this;
          },
          emit: function(event, data) {
            if (this.options.domEvents) {
              triggerDomEvent(event, data);
            }
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) {
              return;
            }
            data.type = event;
            data.preventDefault = function() {
              data.srcEvent.preventDefault();
            };
            var i = 0;
            while (i < handlers.length) {
              handlers[i](data);
              i++;
            }
          },
          destroy: function() {
            this.element && toggleCssProps(this, false);
            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
          }
        };
        function toggleCssProps(manager, add3) {
          var element = manager.element;
          if (!element.style) {
            return;
          }
          var prop;
          each(manager.options.cssProps, function(value, name) {
            prop = prefixed(element.style, name);
            if (add3) {
              manager.oldCssProps[prop] = element.style[prop];
              element.style[prop] = value;
            } else {
              element.style[prop] = manager.oldCssProps[prop] || "";
            }
          });
          if (!add3) {
            manager.oldCssProps = {};
          }
        }
        function triggerDomEvent(event, data) {
          var gestureEvent = document2.createEvent("Event");
          gestureEvent.initEvent(event, true, true);
          gestureEvent.gesture = data;
          data.target.dispatchEvent(gestureEvent);
        }
        assign(Hammer2, {
          INPUT_START,
          INPUT_MOVE,
          INPUT_END,
          INPUT_CANCEL,
          STATE_POSSIBLE,
          STATE_BEGAN,
          STATE_CHANGED,
          STATE_ENDED,
          STATE_RECOGNIZED,
          STATE_CANCELLED,
          STATE_FAILED,
          DIRECTION_NONE,
          DIRECTION_LEFT,
          DIRECTION_RIGHT,
          DIRECTION_UP,
          DIRECTION_DOWN,
          DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL2,
          DIRECTION_VERTICAL,
          DIRECTION_ALL,
          Manager: Manager2,
          Input,
          TouchAction,
          TouchInput,
          MouseInput,
          PointerEventInput,
          TouchMouseInput,
          SingleTouchInput,
          Recognizer,
          AttrRecognizer,
          Tap: TapRecognizer,
          Pan: PanRecognizer,
          Swipe: SwipeRecognizer,
          Pinch: PinchRecognizer,
          Rotate: RotateRecognizer,
          Press: PressRecognizer,
          on: addEventListeners,
          off: removeEventListeners,
          each,
          merge,
          extend: extend4,
          assign,
          inherit,
          bindFn,
          prefixed
        });
        var freeGlobal = typeof window2 !== "undefined" ? window2 : typeof self !== "undefined" ? self : {};
        freeGlobal.Hammer = Hammer2;
        if (typeof define === "function" && define.amd) {
          define(function() {
            return Hammer2;
          });
        } else if (typeof module != "undefined" && module.exports) {
          module.exports = Hammer2;
        } else {
          window2[exportName] = Hammer2;
        }
      })(window, document, "Hammer");
    }
  });

  // ../../node_modules/lodash/last.js
  var require_last = __commonJS({
    "../../node_modules/lodash/last.js"(exports, module) {
      function last2(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : void 0;
      }
      module.exports = last2;
    }
  });

  // ../../node_modules/bezier-easing/src/index.js
  var require_src = __commonJS({
    "../../node_modules/bezier-easing/src/index.js"(exports, module) {
      var NEWTON_ITERATIONS = 4;
      var NEWTON_MIN_SLOPE = 1e-3;
      var SUBDIVISION_PRECISION = 1e-7;
      var SUBDIVISION_MAX_ITERATIONS = 10;
      var kSplineTableSize = 11;
      var kSampleStepSize = 1 / (kSplineTableSize - 1);
      var float32ArraySupported = typeof Float32Array === "function";
      function A(aA1, aA2) {
        return 1 - 3 * aA2 + 3 * aA1;
      }
      function B(aA1, aA2) {
        return 3 * aA2 - 6 * aA1;
      }
      function C(aA1) {
        return 3 * aA1;
      }
      function calcBezier(aT, aA1, aA2) {
        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
      }
      function getSlope(aT, aA1, aA2) {
        return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);
      }
      function binarySubdivide(aX, aA, aB, mX1, mX2) {
        var currentX, currentT, i = 0;
        do {
          currentT = aA + (aB - aA) / 2;
          currentX = calcBezier(currentT, mX1, mX2) - aX;
          if (currentX > 0) {
            aB = currentT;
          } else {
            aA = currentT;
          }
        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
        return currentT;
      }
      function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
        for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
          var currentSlope = getSlope(aGuessT, mX1, mX2);
          if (currentSlope === 0) {
            return aGuessT;
          }
          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
          aGuessT -= currentX / currentSlope;
        }
        return aGuessT;
      }
      function LinearEasing(x) {
        return x;
      }
      module.exports = function bezier(mX1, mY1, mX2, mY2) {
        if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
          throw new Error("bezier x values must be in [0, 1] range");
        }
        if (mX1 === mY1 && mX2 === mY2) {
          return LinearEasing;
        }
        var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
        for (var i = 0; i < kSplineTableSize; ++i) {
          sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
        }
        function getTForX(aX) {
          var intervalStart = 0;
          var currentSample = 1;
          var lastSample = kSplineTableSize - 1;
          for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
            intervalStart += kSampleStepSize;
          }
          --currentSample;
          var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
          var guessForT = intervalStart + dist * kSampleStepSize;
          var initialSlope = getSlope(guessForT, mX1, mX2);
          if (initialSlope >= NEWTON_MIN_SLOPE) {
            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
          } else if (initialSlope === 0) {
            return guessForT;
          } else {
            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
          }
        }
        return function BezierEasing(x) {
          if (x === 0) {
            return 0;
          }
          if (x === 1) {
            return 1;
          }
          return calcBezier(getTForX(x), mY1, mY2);
        };
      };
    }
  });

  // ../../node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js
  var require_activestorage = __commonJS({
    "../../node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.ActiveStorage = {}));
      })(exports, function(exports2) {
        "use strict";
        var sparkMd5 = {
          exports: {}
        };
        (function(module2, exports3) {
          (function(factory) {
            {
              module2.exports = factory();
            }
          })(function(undefined$1) {
            var hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
            function md5cycle(x, k) {
              var a = x[0], b = x[1], c2 = x[2], d = x[3];
              a += (b & c2 | ~b & d) + k[0] - 680876936 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c2) + k[1] - 389564586 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c2 += (d & a | ~d & b) + k[2] + 606105819 | 0;
              c2 = (c2 << 17 | c2 >>> 15) + d | 0;
              b += (c2 & d | ~c2 & a) + k[3] - 1044525330 | 0;
              b = (b << 22 | b >>> 10) + c2 | 0;
              a += (b & c2 | ~b & d) + k[4] - 176418897 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c2) + k[5] + 1200080426 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c2 += (d & a | ~d & b) + k[6] - 1473231341 | 0;
              c2 = (c2 << 17 | c2 >>> 15) + d | 0;
              b += (c2 & d | ~c2 & a) + k[7] - 45705983 | 0;
              b = (b << 22 | b >>> 10) + c2 | 0;
              a += (b & c2 | ~b & d) + k[8] + 1770035416 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c2) + k[9] - 1958414417 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c2 += (d & a | ~d & b) + k[10] - 42063 | 0;
              c2 = (c2 << 17 | c2 >>> 15) + d | 0;
              b += (c2 & d | ~c2 & a) + k[11] - 1990404162 | 0;
              b = (b << 22 | b >>> 10) + c2 | 0;
              a += (b & c2 | ~b & d) + k[12] + 1804603682 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c2) + k[13] - 40341101 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c2 += (d & a | ~d & b) + k[14] - 1502002290 | 0;
              c2 = (c2 << 17 | c2 >>> 15) + d | 0;
              b += (c2 & d | ~c2 & a) + k[15] + 1236535329 | 0;
              b = (b << 22 | b >>> 10) + c2 | 0;
              a += (b & d | c2 & ~d) + k[1] - 165796510 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c2 | b & ~c2) + k[6] - 1069501632 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c2 += (d & b | a & ~b) + k[11] + 643717713 | 0;
              c2 = (c2 << 14 | c2 >>> 18) + d | 0;
              b += (c2 & a | d & ~a) + k[0] - 373897302 | 0;
              b = (b << 20 | b >>> 12) + c2 | 0;
              a += (b & d | c2 & ~d) + k[5] - 701558691 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c2 | b & ~c2) + k[10] + 38016083 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c2 += (d & b | a & ~b) + k[15] - 660478335 | 0;
              c2 = (c2 << 14 | c2 >>> 18) + d | 0;
              b += (c2 & a | d & ~a) + k[4] - 405537848 | 0;
              b = (b << 20 | b >>> 12) + c2 | 0;
              a += (b & d | c2 & ~d) + k[9] + 568446438 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c2 | b & ~c2) + k[14] - 1019803690 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c2 += (d & b | a & ~b) + k[3] - 187363961 | 0;
              c2 = (c2 << 14 | c2 >>> 18) + d | 0;
              b += (c2 & a | d & ~a) + k[8] + 1163531501 | 0;
              b = (b << 20 | b >>> 12) + c2 | 0;
              a += (b & d | c2 & ~d) + k[13] - 1444681467 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c2 | b & ~c2) + k[2] - 51403784 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c2 += (d & b | a & ~b) + k[7] + 1735328473 | 0;
              c2 = (c2 << 14 | c2 >>> 18) + d | 0;
              b += (c2 & a | d & ~a) + k[12] - 1926607734 | 0;
              b = (b << 20 | b >>> 12) + c2 | 0;
              a += (b ^ c2 ^ d) + k[5] - 378558 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c2) + k[8] - 2022574463 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c2 += (d ^ a ^ b) + k[11] + 1839030562 | 0;
              c2 = (c2 << 16 | c2 >>> 16) + d | 0;
              b += (c2 ^ d ^ a) + k[14] - 35309556 | 0;
              b = (b << 23 | b >>> 9) + c2 | 0;
              a += (b ^ c2 ^ d) + k[1] - 1530992060 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c2) + k[4] + 1272893353 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c2 += (d ^ a ^ b) + k[7] - 155497632 | 0;
              c2 = (c2 << 16 | c2 >>> 16) + d | 0;
              b += (c2 ^ d ^ a) + k[10] - 1094730640 | 0;
              b = (b << 23 | b >>> 9) + c2 | 0;
              a += (b ^ c2 ^ d) + k[13] + 681279174 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c2) + k[0] - 358537222 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c2 += (d ^ a ^ b) + k[3] - 722521979 | 0;
              c2 = (c2 << 16 | c2 >>> 16) + d | 0;
              b += (c2 ^ d ^ a) + k[6] + 76029189 | 0;
              b = (b << 23 | b >>> 9) + c2 | 0;
              a += (b ^ c2 ^ d) + k[9] - 640364487 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c2) + k[12] - 421815835 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c2 += (d ^ a ^ b) + k[15] + 530742520 | 0;
              c2 = (c2 << 16 | c2 >>> 16) + d | 0;
              b += (c2 ^ d ^ a) + k[2] - 995338651 | 0;
              b = (b << 23 | b >>> 9) + c2 | 0;
              a += (c2 ^ (b | ~d)) + k[0] - 198630844 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c2)) + k[7] + 1126891415 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c2 += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
              c2 = (c2 << 15 | c2 >>> 17) + d | 0;
              b += (d ^ (c2 | ~a)) + k[5] - 57434055 | 0;
              b = (b << 21 | b >>> 11) + c2 | 0;
              a += (c2 ^ (b | ~d)) + k[12] + 1700485571 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c2)) + k[3] - 1894986606 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c2 += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
              c2 = (c2 << 15 | c2 >>> 17) + d | 0;
              b += (d ^ (c2 | ~a)) + k[1] - 2054922799 | 0;
              b = (b << 21 | b >>> 11) + c2 | 0;
              a += (c2 ^ (b | ~d)) + k[8] + 1873313359 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c2)) + k[15] - 30611744 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c2 += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
              c2 = (c2 << 15 | c2 >>> 17) + d | 0;
              b += (d ^ (c2 | ~a)) + k[13] + 1309151649 | 0;
              b = (b << 21 | b >>> 11) + c2 | 0;
              a += (c2 ^ (b | ~d)) + k[4] - 145523070 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c2)) + k[11] - 1120210379 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c2 += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
              c2 = (c2 << 15 | c2 >>> 17) + d | 0;
              b += (d ^ (c2 | ~a)) + k[9] - 343485551 | 0;
              b = (b << 21 | b >>> 11) + c2 | 0;
              x[0] = a + x[0] | 0;
              x[1] = b + x[1] | 0;
              x[2] = c2 + x[2] | 0;
              x[3] = d + x[3] | 0;
            }
            function md5blk(s) {
              var md5blks = [], i;
              for (i = 0; i < 64; i += 4) {
                md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
              }
              return md5blks;
            }
            function md5blk_array(a) {
              var md5blks = [], i;
              for (i = 0; i < 64; i += 4) {
                md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
              }
              return md5blks;
            }
            function md51(s) {
              var n = s.length, state = [1732584193, -271733879, -1732584194, 271733878], i, length, tail, tmp, lo, hi;
              for (i = 64; i <= n; i += 64) {
                md5cycle(state, md5blk(s.substring(i - 64, i)));
              }
              s = s.substring(i - 64);
              length = s.length;
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
              }
              tail[i >> 2] |= 128 << (i % 4 << 3);
              if (i > 55) {
                md5cycle(state, tail);
                for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
                }
              }
              tmp = n * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(state, tail);
              return state;
            }
            function md51_array(a) {
              var n = a.length, state = [1732584193, -271733879, -1732584194, 271733878], i, length, tail, tmp, lo, hi;
              for (i = 64; i <= n; i += 64) {
                md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
              }
              a = i - 64 < n ? a.subarray(i - 64) : new Uint8Array(0);
              length = a.length;
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= a[i] << (i % 4 << 3);
              }
              tail[i >> 2] |= 128 << (i % 4 << 3);
              if (i > 55) {
                md5cycle(state, tail);
                for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
                }
              }
              tmp = n * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(state, tail);
              return state;
            }
            function rhex(n) {
              var s = "", j;
              for (j = 0; j < 4; j += 1) {
                s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];
              }
              return s;
            }
            function hex(x) {
              var i;
              for (i = 0; i < x.length; i += 1) {
                x[i] = rhex(x[i]);
              }
              return x.join("");
            }
            if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592")
              ;
            if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
              (function() {
                function clamp(val, length) {
                  val = val | 0 || 0;
                  if (val < 0) {
                    return Math.max(val + length, 0);
                  }
                  return Math.min(val, length);
                }
                ArrayBuffer.prototype.slice = function(from, to) {
                  var length = this.byteLength, begin = clamp(from, length), end = length, num, target2, targetArray, sourceArray;
                  if (to !== undefined$1) {
                    end = clamp(to, length);
                  }
                  if (begin > end) {
                    return new ArrayBuffer(0);
                  }
                  num = end - begin;
                  target2 = new ArrayBuffer(num);
                  targetArray = new Uint8Array(target2);
                  sourceArray = new Uint8Array(this, begin, num);
                  targetArray.set(sourceArray);
                  return target2;
                };
              })();
            }
            function toUtf8(str) {
              if (/[\u0080-\uFFFF]/.test(str)) {
                str = unescape(encodeURIComponent(str));
              }
              return str;
            }
            function utf8Str2ArrayBuffer(str, returnUInt8Array) {
              var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i;
              for (i = 0; i < length; i += 1) {
                arr[i] = str.charCodeAt(i);
              }
              return returnUInt8Array ? arr : buff;
            }
            function arrayBuffer2Utf8Str(buff) {
              return String.fromCharCode.apply(null, new Uint8Array(buff));
            }
            function concatenateArrayBuffers(first, second, returnUInt8Array) {
              var result = new Uint8Array(first.byteLength + second.byteLength);
              result.set(new Uint8Array(first));
              result.set(new Uint8Array(second), first.byteLength);
              return returnUInt8Array ? result : result.buffer;
            }
            function hexToBinaryString(hex2) {
              var bytes = [], length = hex2.length, x;
              for (x = 0; x < length - 1; x += 2) {
                bytes.push(parseInt(hex2.substr(x, 2), 16));
              }
              return String.fromCharCode.apply(String, bytes);
            }
            function SparkMD52() {
              this.reset();
            }
            SparkMD52.prototype.append = function(str) {
              this.appendBinary(toUtf8(str));
              return this;
            };
            SparkMD52.prototype.appendBinary = function(contents) {
              this._buff += contents;
              this._length += contents.length;
              var length = this._buff.length, i;
              for (i = 64; i <= length; i += 64) {
                md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
              }
              this._buff = this._buff.substring(i - 64);
              return this;
            };
            SparkMD52.prototype.end = function(raw) {
              var buff = this._buff, length = buff.length, i, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= buff.charCodeAt(i) << (i % 4 << 3);
              }
              this._finish(tail, length);
              ret = hex(this._hash);
              if (raw) {
                ret = hexToBinaryString(ret);
              }
              this.reset();
              return ret;
            };
            SparkMD52.prototype.reset = function() {
              this._buff = "";
              this._length = 0;
              this._hash = [1732584193, -271733879, -1732584194, 271733878];
              return this;
            };
            SparkMD52.prototype.getState = function() {
              return {
                buff: this._buff,
                length: this._length,
                hash: this._hash.slice()
              };
            };
            SparkMD52.prototype.setState = function(state) {
              this._buff = state.buff;
              this._length = state.length;
              this._hash = state.hash;
              return this;
            };
            SparkMD52.prototype.destroy = function() {
              delete this._hash;
              delete this._buff;
              delete this._length;
            };
            SparkMD52.prototype._finish = function(tail, length) {
              var i = length, tmp, lo, hi;
              tail[i >> 2] |= 128 << (i % 4 << 3);
              if (i > 55) {
                md5cycle(this._hash, tail);
                for (i = 0; i < 16; i += 1) {
                  tail[i] = 0;
                }
              }
              tmp = this._length * 8;
              tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
              lo = parseInt(tmp[2], 16);
              hi = parseInt(tmp[1], 16) || 0;
              tail[14] = lo;
              tail[15] = hi;
              md5cycle(this._hash, tail);
            };
            SparkMD52.hash = function(str, raw) {
              return SparkMD52.hashBinary(toUtf8(str), raw);
            };
            SparkMD52.hashBinary = function(content, raw) {
              var hash = md51(content), ret = hex(hash);
              return raw ? hexToBinaryString(ret) : ret;
            };
            SparkMD52.ArrayBuffer = function() {
              this.reset();
            };
            SparkMD52.ArrayBuffer.prototype.append = function(arr) {
              var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i;
              this._length += arr.byteLength;
              for (i = 64; i <= length; i += 64) {
                md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
              }
              this._buff = i - 64 < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);
              return this;
            };
            SparkMD52.ArrayBuffer.prototype.end = function(raw) {
              var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i, ret;
              for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= buff[i] << (i % 4 << 3);
              }
              this._finish(tail, length);
              ret = hex(this._hash);
              if (raw) {
                ret = hexToBinaryString(ret);
              }
              this.reset();
              return ret;
            };
            SparkMD52.ArrayBuffer.prototype.reset = function() {
              this._buff = new Uint8Array(0);
              this._length = 0;
              this._hash = [1732584193, -271733879, -1732584194, 271733878];
              return this;
            };
            SparkMD52.ArrayBuffer.prototype.getState = function() {
              var state = SparkMD52.prototype.getState.call(this);
              state.buff = arrayBuffer2Utf8Str(state.buff);
              return state;
            };
            SparkMD52.ArrayBuffer.prototype.setState = function(state) {
              state.buff = utf8Str2ArrayBuffer(state.buff, true);
              return SparkMD52.prototype.setState.call(this, state);
            };
            SparkMD52.ArrayBuffer.prototype.destroy = SparkMD52.prototype.destroy;
            SparkMD52.ArrayBuffer.prototype._finish = SparkMD52.prototype._finish;
            SparkMD52.ArrayBuffer.hash = function(arr, raw) {
              var hash = md51_array(new Uint8Array(arr)), ret = hex(hash);
              return raw ? hexToBinaryString(ret) : ret;
            };
            return SparkMD52;
          });
        })(sparkMd5);
        var SparkMD5 = sparkMd5.exports;
        const fileSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;
        class FileChecksum {
          static create(file, callback) {
            const instance = new FileChecksum(file);
            instance.create(callback);
          }
          constructor(file) {
            this.file = file;
            this.chunkSize = 2097152;
            this.chunkCount = Math.ceil(this.file.size / this.chunkSize);
            this.chunkIndex = 0;
          }
          create(callback) {
            this.callback = callback;
            this.md5Buffer = new SparkMD5.ArrayBuffer();
            this.fileReader = new FileReader();
            this.fileReader.addEventListener("load", (event) => this.fileReaderDidLoad(event));
            this.fileReader.addEventListener("error", (event) => this.fileReaderDidError(event));
            this.readNextChunk();
          }
          fileReaderDidLoad(event) {
            this.md5Buffer.append(event.target.result);
            if (!this.readNextChunk()) {
              const binaryDigest = this.md5Buffer.end(true);
              const base64digest = btoa(binaryDigest);
              this.callback(null, base64digest);
            }
          }
          fileReaderDidError(event) {
            this.callback(`Error reading ${this.file.name}`);
          }
          readNextChunk() {
            if (this.chunkIndex < this.chunkCount || this.chunkIndex == 0 && this.chunkCount == 0) {
              const start3 = this.chunkIndex * this.chunkSize;
              const end = Math.min(start3 + this.chunkSize, this.file.size);
              const bytes = fileSlice.call(this.file, start3, end);
              this.fileReader.readAsArrayBuffer(bytes);
              this.chunkIndex++;
              return true;
            } else {
              return false;
            }
          }
        }
        function getMetaValue(name) {
          const element = findElement(document.head, `meta[name="${name}"]`);
          if (element) {
            return element.getAttribute("content");
          }
        }
        function findElements(root, selector) {
          if (typeof root == "string") {
            selector = root;
            root = document;
          }
          const elements = root.querySelectorAll(selector);
          return toArray2(elements);
        }
        function findElement(root, selector) {
          if (typeof root == "string") {
            selector = root;
            root = document;
          }
          return root.querySelector(selector);
        }
        function dispatchEvent2(element, type, eventInit = {}) {
          const { disabled } = element;
          const { bubbles, cancelable, detail } = eventInit;
          const event = document.createEvent("Event");
          event.initEvent(type, bubbles || true, cancelable || true);
          event.detail = detail || {};
          try {
            element.disabled = false;
            element.dispatchEvent(event);
          } finally {
            element.disabled = disabled;
          }
          return event;
        }
        function toArray2(value) {
          if (Array.isArray(value)) {
            return value;
          } else if (Array.from) {
            return Array.from(value);
          } else {
            return [].slice.call(value);
          }
        }
        class BlobRecord {
          constructor(file, checksum, url) {
            this.file = file;
            this.attributes = {
              filename: file.name,
              content_type: file.type || "application/octet-stream",
              byte_size: file.size,
              checksum
            };
            this.xhr = new XMLHttpRequest();
            this.xhr.open("POST", url, true);
            this.xhr.responseType = "json";
            this.xhr.setRequestHeader("Content-Type", "application/json");
            this.xhr.setRequestHeader("Accept", "application/json");
            this.xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            const csrfToken = getMetaValue("csrf-token");
            if (csrfToken != void 0) {
              this.xhr.setRequestHeader("X-CSRF-Token", csrfToken);
            }
            this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
            this.xhr.addEventListener("error", (event) => this.requestDidError(event));
          }
          get status() {
            return this.xhr.status;
          }
          get response() {
            const { responseType, response } = this.xhr;
            if (responseType == "json") {
              return response;
            } else {
              return JSON.parse(response);
            }
          }
          create(callback) {
            this.callback = callback;
            this.xhr.send(JSON.stringify({
              blob: this.attributes
            }));
          }
          requestDidLoad(event) {
            if (this.status >= 200 && this.status < 300) {
              const { response } = this;
              const { direct_upload } = response;
              delete response.direct_upload;
              this.attributes = response;
              this.directUploadData = direct_upload;
              this.callback(null, this.toJSON());
            } else {
              this.requestDidError(event);
            }
          }
          requestDidError(event) {
            this.callback(`Error creating Blob for "${this.file.name}". Status: ${this.status}`);
          }
          toJSON() {
            const result = {};
            for (const key in this.attributes) {
              result[key] = this.attributes[key];
            }
            return result;
          }
        }
        class BlobUpload {
          constructor(blob) {
            this.blob = blob;
            this.file = blob.file;
            const { url, headers } = blob.directUploadData;
            this.xhr = new XMLHttpRequest();
            this.xhr.open("PUT", url, true);
            this.xhr.responseType = "text";
            for (const key in headers) {
              this.xhr.setRequestHeader(key, headers[key]);
            }
            this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
            this.xhr.addEventListener("error", (event) => this.requestDidError(event));
          }
          create(callback) {
            this.callback = callback;
            this.xhr.send(this.file.slice());
          }
          requestDidLoad(event) {
            const { status, response } = this.xhr;
            if (status >= 200 && status < 300) {
              this.callback(null, response);
            } else {
              this.requestDidError(event);
            }
          }
          requestDidError(event) {
            this.callback(`Error storing "${this.file.name}". Status: ${this.xhr.status}`);
          }
        }
        let id = 0;
        class DirectUpload {
          constructor(file, url, delegate) {
            this.id = ++id;
            this.file = file;
            this.url = url;
            this.delegate = delegate;
          }
          create(callback) {
            FileChecksum.create(this.file, (error2, checksum) => {
              if (error2) {
                callback(error2);
                return;
              }
              const blob = new BlobRecord(this.file, checksum, this.url);
              notify(this.delegate, "directUploadWillCreateBlobWithXHR", blob.xhr);
              blob.create((error3) => {
                if (error3) {
                  callback(error3);
                } else {
                  const upload = new BlobUpload(blob);
                  notify(this.delegate, "directUploadWillStoreFileWithXHR", upload.xhr);
                  upload.create((error4) => {
                    if (error4) {
                      callback(error4);
                    } else {
                      callback(null, blob.toJSON());
                    }
                  });
                }
              });
            });
          }
        }
        function notify(object, methodName, ...messages) {
          if (object && typeof object[methodName] == "function") {
            return object[methodName](...messages);
          }
        }
        class DirectUploadController {
          constructor(input, file) {
            this.input = input;
            this.file = file;
            this.directUpload = new DirectUpload(this.file, this.url, this);
            this.dispatch("initialize");
          }
          start(callback) {
            const hiddenInput = document.createElement("input");
            hiddenInput.type = "hidden";
            hiddenInput.name = this.input.name;
            this.input.insertAdjacentElement("beforebegin", hiddenInput);
            this.dispatch("start");
            this.directUpload.create((error2, attributes) => {
              if (error2) {
                hiddenInput.parentNode.removeChild(hiddenInput);
                this.dispatchError(error2);
              } else {
                hiddenInput.value = attributes.signed_id;
              }
              this.dispatch("end");
              callback(error2);
            });
          }
          uploadRequestDidProgress(event) {
            const progress = event.loaded / event.total * 100;
            if (progress) {
              this.dispatch("progress", {
                progress
              });
            }
          }
          get url() {
            return this.input.getAttribute("data-direct-upload-url");
          }
          dispatch(name, detail = {}) {
            detail.file = this.file;
            detail.id = this.directUpload.id;
            return dispatchEvent2(this.input, `direct-upload:${name}`, {
              detail
            });
          }
          dispatchError(error2) {
            const event = this.dispatch("error", {
              error: error2
            });
            if (!event.defaultPrevented) {
              alert(error2);
            }
          }
          directUploadWillCreateBlobWithXHR(xhr) {
            this.dispatch("before-blob-request", {
              xhr
            });
          }
          directUploadWillStoreFileWithXHR(xhr) {
            this.dispatch("before-storage-request", {
              xhr
            });
            xhr.upload.addEventListener("progress", (event) => this.uploadRequestDidProgress(event));
          }
        }
        const inputSelector = "input[type=file][data-direct-upload-url]:not([disabled])";
        class DirectUploadsController {
          constructor(form) {
            this.form = form;
            this.inputs = findElements(form, inputSelector).filter((input) => input.files.length);
          }
          start(callback) {
            const controllers = this.createDirectUploadControllers();
            const startNextController = () => {
              const controller = controllers.shift();
              if (controller) {
                controller.start((error2) => {
                  if (error2) {
                    callback(error2);
                    this.dispatch("end");
                  } else {
                    startNextController();
                  }
                });
              } else {
                callback();
                this.dispatch("end");
              }
            };
            this.dispatch("start");
            startNextController();
          }
          createDirectUploadControllers() {
            const controllers = [];
            this.inputs.forEach((input) => {
              toArray2(input.files).forEach((file) => {
                const controller = new DirectUploadController(input, file);
                controllers.push(controller);
              });
            });
            return controllers;
          }
          dispatch(name, detail = {}) {
            return dispatchEvent2(this.form, `direct-uploads:${name}`, {
              detail
            });
          }
        }
        const processingAttribute = "data-direct-uploads-processing";
        const submitButtonsByForm = /* @__PURE__ */ new WeakMap();
        let started = false;
        function start2() {
          if (!started) {
            started = true;
            document.addEventListener("click", didClick, true);
            document.addEventListener("submit", didSubmitForm, true);
            document.addEventListener("ajax:before", didSubmitRemoteElement);
          }
        }
        function didClick(event) {
          const { target: target2 } = event;
          if ((target2.tagName == "INPUT" || target2.tagName == "BUTTON") && target2.type == "submit" && target2.form) {
            submitButtonsByForm.set(target2.form, target2);
          }
        }
        function didSubmitForm(event) {
          handleFormSubmissionEvent(event);
        }
        function didSubmitRemoteElement(event) {
          if (event.target.tagName == "FORM") {
            handleFormSubmissionEvent(event);
          }
        }
        function handleFormSubmissionEvent(event) {
          const form = event.target;
          if (form.hasAttribute(processingAttribute)) {
            event.preventDefault();
            return;
          }
          const controller = new DirectUploadsController(form);
          const { inputs } = controller;
          if (inputs.length) {
            event.preventDefault();
            form.setAttribute(processingAttribute, "");
            inputs.forEach(disable);
            controller.start((error2) => {
              form.removeAttribute(processingAttribute);
              if (error2) {
                inputs.forEach(enable);
              } else {
                submitForm(form);
              }
            });
          }
        }
        function submitForm(form) {
          let button = submitButtonsByForm.get(form) || findElement(form, "input[type=submit], button[type=submit]");
          if (button) {
            const { disabled } = button;
            button.disabled = false;
            button.focus();
            button.click();
            button.disabled = disabled;
          } else {
            button = document.createElement("input");
            button.type = "submit";
            button.style.display = "none";
            form.appendChild(button);
            button.click();
            form.removeChild(button);
          }
          submitButtonsByForm.delete(form);
        }
        function disable(input) {
          input.disabled = true;
        }
        function enable(input) {
          input.disabled = false;
        }
        function autostart() {
          if (window.ActiveStorage) {
            start2();
          }
        }
        setTimeout(autostart, 1);
        exports2.DirectUpload = DirectUpload;
        exports2.start = start2;
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
      });
    }
  });

  // channels/index.js
  var channels_exports = {};
  var init_channels = __esm({
    "channels/index.js"() {
    }
  });

  // ../../node_modules/@hotwired/stimulus/dist/stimulus.js
  var EventListener = class {
    constructor(eventTarget, eventName, eventOptions) {
      this.eventTarget = eventTarget;
      this.eventName = eventName;
      this.eventOptions = eventOptions;
      this.unorderedBindings = /* @__PURE__ */ new Set();
    }
    connect() {
      this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);
    }
    disconnect() {
      this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);
    }
    bindingConnected(binding) {
      this.unorderedBindings.add(binding);
    }
    bindingDisconnected(binding) {
      this.unorderedBindings.delete(binding);
    }
    handleEvent(event) {
      const extendedEvent = extendEvent(event);
      for (const binding of this.bindings) {
        if (extendedEvent.immediatePropagationStopped) {
          break;
        } else {
          binding.handleEvent(extendedEvent);
        }
      }
    }
    hasBindings() {
      return this.unorderedBindings.size > 0;
    }
    get bindings() {
      return Array.from(this.unorderedBindings).sort((left, right) => {
        const leftIndex = left.index, rightIndex = right.index;
        return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;
      });
    }
  };
  function extendEvent(event) {
    if ("immediatePropagationStopped" in event) {
      return event;
    } else {
      const { stopImmediatePropagation } = event;
      return Object.assign(event, {
        immediatePropagationStopped: false,
        stopImmediatePropagation() {
          this.immediatePropagationStopped = true;
          stopImmediatePropagation.call(this);
        }
      });
    }
  }
  var Dispatcher = class {
    constructor(application2) {
      this.application = application2;
      this.eventListenerMaps = /* @__PURE__ */ new Map();
      this.started = false;
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.eventListeners.forEach((eventListener) => eventListener.connect());
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.eventListeners.forEach((eventListener) => eventListener.disconnect());
      }
    }
    get eventListeners() {
      return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);
    }
    bindingConnected(binding) {
      this.fetchEventListenerForBinding(binding).bindingConnected(binding);
    }
    bindingDisconnected(binding, clearEventListeners = false) {
      this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);
      if (clearEventListeners)
        this.clearEventListenersForBinding(binding);
    }
    handleError(error2, message, detail = {}) {
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    clearEventListenersForBinding(binding) {
      const eventListener = this.fetchEventListenerForBinding(binding);
      if (!eventListener.hasBindings()) {
        eventListener.disconnect();
        this.removeMappedEventListenerFor(binding);
      }
    }
    removeMappedEventListenerFor(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      eventListenerMap.delete(cacheKey);
      if (eventListenerMap.size == 0)
        this.eventListenerMaps.delete(eventTarget);
    }
    fetchEventListenerForBinding(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      return this.fetchEventListener(eventTarget, eventName, eventOptions);
    }
    fetchEventListener(eventTarget, eventName, eventOptions) {
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      let eventListener = eventListenerMap.get(cacheKey);
      if (!eventListener) {
        eventListener = this.createEventListener(eventTarget, eventName, eventOptions);
        eventListenerMap.set(cacheKey, eventListener);
      }
      return eventListener;
    }
    createEventListener(eventTarget, eventName, eventOptions) {
      const eventListener = new EventListener(eventTarget, eventName, eventOptions);
      if (this.started) {
        eventListener.connect();
      }
      return eventListener;
    }
    fetchEventListenerMapForEventTarget(eventTarget) {
      let eventListenerMap = this.eventListenerMaps.get(eventTarget);
      if (!eventListenerMap) {
        eventListenerMap = /* @__PURE__ */ new Map();
        this.eventListenerMaps.set(eventTarget, eventListenerMap);
      }
      return eventListenerMap;
    }
    cacheKey(eventName, eventOptions) {
      const parts = [eventName];
      Object.keys(eventOptions).sort().forEach((key) => {
        parts.push(`${eventOptions[key] ? "" : "!"}${key}`);
      });
      return parts.join(":");
    }
  };
  var defaultActionDescriptorFilters = {
    stop({ event, value }) {
      if (value)
        event.stopPropagation();
      return true;
    },
    prevent({ event, value }) {
      if (value)
        event.preventDefault();
      return true;
    },
    self({ event, value, element }) {
      if (value) {
        return element === event.target;
      } else {
        return true;
      }
    }
  };
  var descriptorPattern = /^(?:(.+?)(?:\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;
  function parseActionDescriptorString(descriptorString) {
    const source = descriptorString.trim();
    const matches2 = source.match(descriptorPattern) || [];
    let eventName = matches2[1];
    let keyFilter = matches2[2];
    if (keyFilter && !["keydown", "keyup", "keypress"].includes(eventName)) {
      eventName += `.${keyFilter}`;
      keyFilter = "";
    }
    return {
      eventTarget: parseEventTarget(matches2[3]),
      eventName,
      eventOptions: matches2[6] ? parseEventOptions(matches2[6]) : {},
      identifier: matches2[4],
      methodName: matches2[5],
      keyFilter
    };
  }
  function parseEventTarget(eventTargetName) {
    if (eventTargetName == "window") {
      return window;
    } else if (eventTargetName == "document") {
      return document;
    }
  }
  function parseEventOptions(eventOptions) {
    return eventOptions.split(":").reduce((options, token) => Object.assign(options, { [token.replace(/^!/, "")]: !/^!/.test(token) }), {});
  }
  function stringifyEventTarget(eventTarget) {
    if (eventTarget == window) {
      return "window";
    } else if (eventTarget == document) {
      return "document";
    }
  }
  function camelize(value) {
    return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase());
  }
  function namespaceCamelize(value) {
    return camelize(value.replace(/--/g, "-").replace(/__/g, "_"));
  }
  function capitalize(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }
  function dasherize(value) {
    return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`);
  }
  function tokenize(value) {
    return value.match(/[^\s]+/g) || [];
  }
  var Action = class {
    constructor(element, index2, descriptor, schema) {
      this.element = element;
      this.index = index2;
      this.eventTarget = descriptor.eventTarget || element;
      this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error("missing event name");
      this.eventOptions = descriptor.eventOptions || {};
      this.identifier = descriptor.identifier || error("missing identifier");
      this.methodName = descriptor.methodName || error("missing method name");
      this.keyFilter = descriptor.keyFilter || "";
      this.schema = schema;
    }
    static forToken(token, schema) {
      return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);
    }
    toString() {
      const eventFilter = this.keyFilter ? `.${this.keyFilter}` : "";
      const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : "";
      return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`;
    }
    isFilterTarget(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filteres = this.keyFilter.split("+");
      const modifiers = ["meta", "ctrl", "alt", "shift"];
      const [meta, ctrl, alt, shift] = modifiers.map((modifier) => filteres.includes(modifier));
      if (event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift) {
        return true;
      }
      const standardFilter = filteres.filter((key) => !modifiers.includes(key))[0];
      if (!standardFilter) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(this.keyMappings, standardFilter)) {
        error(`contains unknown key filter: ${this.keyFilter}`);
      }
      return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();
    }
    get params() {
      const params = {};
      const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, "i");
      for (const { name, value } of Array.from(this.element.attributes)) {
        const match = name.match(pattern);
        const key = match && match[1];
        if (key) {
          params[camelize(key)] = typecast(value);
        }
      }
      return params;
    }
    get eventTargetName() {
      return stringifyEventTarget(this.eventTarget);
    }
    get keyMappings() {
      return this.schema.keyMappings;
    }
  };
  var defaultEventNames = {
    a: () => "click",
    button: () => "click",
    form: () => "submit",
    details: () => "toggle",
    input: (e) => e.getAttribute("type") == "submit" ? "click" : "input",
    select: () => "change",
    textarea: () => "input"
  };
  function getDefaultEventNameForElement(element) {
    const tagName2 = element.tagName.toLowerCase();
    if (tagName2 in defaultEventNames) {
      return defaultEventNames[tagName2](element);
    }
  }
  function error(message) {
    throw new Error(message);
  }
  function typecast(value) {
    try {
      return JSON.parse(value);
    } catch (o_O) {
      return value;
    }
  }
  var Binding = class {
    constructor(context, action) {
      this.context = context;
      this.action = action;
    }
    get index() {
      return this.action.index;
    }
    get eventTarget() {
      return this.action.eventTarget;
    }
    get eventOptions() {
      return this.action.eventOptions;
    }
    get identifier() {
      return this.context.identifier;
    }
    handleEvent(event) {
      if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(event)) {
        this.invokeWithEvent(event);
      }
    }
    get eventName() {
      return this.action.eventName;
    }
    get method() {
      const method = this.controller[this.methodName];
      if (typeof method == "function") {
        return method;
      }
      throw new Error(`Action "${this.action}" references undefined method "${this.methodName}"`);
    }
    applyEventModifiers(event) {
      const { element } = this.action;
      const { actionDescriptorFilters } = this.context.application;
      let passes = true;
      for (const [name, value] of Object.entries(this.eventOptions)) {
        if (name in actionDescriptorFilters) {
          const filter = actionDescriptorFilters[name];
          passes = passes && filter({ name, value, event, element });
        } else {
          continue;
        }
      }
      return passes;
    }
    invokeWithEvent(event) {
      const { target: target2, currentTarget } = event;
      try {
        const { params } = this.action;
        const actionEvent = Object.assign(event, { params });
        this.method.call(this.controller, actionEvent);
        this.context.logDebugActivity(this.methodName, { event, target: target2, currentTarget, action: this.methodName });
      } catch (error2) {
        const { identifier, controller, element, index: index2 } = this;
        const detail = { identifier, controller, element, index: index2, event };
        this.context.handleError(error2, `invoking action "${this.action}"`, detail);
      }
    }
    willBeInvokedByEvent(event) {
      const eventTarget = event.target;
      if (event instanceof KeyboardEvent && this.action.isFilterTarget(event)) {
        return false;
      }
      if (this.element === eventTarget) {
        return true;
      } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {
        return this.scope.containsElement(eventTarget);
      } else {
        return this.scope.containsElement(this.action.element);
      }
    }
    get controller() {
      return this.context.controller;
    }
    get methodName() {
      return this.action.methodName;
    }
    get element() {
      return this.scope.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  var ElementObserver = class {
    constructor(element, delegate) {
      this.mutationObserverInit = { attributes: true, childList: true, subtree: true };
      this.element = element;
      this.started = false;
      this.delegate = delegate;
      this.elements = /* @__PURE__ */ new Set();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.refresh();
      }
    }
    pause(callback) {
      if (this.started) {
        this.mutationObserver.disconnect();
        this.started = false;
      }
      callback();
      if (!this.started) {
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        const matches2 = new Set(this.matchElementsInTree());
        for (const element of Array.from(this.elements)) {
          if (!matches2.has(element)) {
            this.removeElement(element);
          }
        }
        for (const element of Array.from(matches2)) {
          this.addElement(element);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      if (mutation.type == "attributes") {
        this.processAttributeChange(mutation.target, mutation.attributeName);
      } else if (mutation.type == "childList") {
        this.processRemovedNodes(mutation.removedNodes);
        this.processAddedNodes(mutation.addedNodes);
      }
    }
    processAttributeChange(node, attributeName) {
      const element = node;
      if (this.elements.has(element)) {
        if (this.delegate.elementAttributeChanged && this.matchElement(element)) {
          this.delegate.elementAttributeChanged(element, attributeName);
        } else {
          this.removeElement(element);
        }
      } else if (this.matchElement(element)) {
        this.addElement(element);
      }
    }
    processRemovedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element) {
          this.processTree(element, this.removeElement);
        }
      }
    }
    processAddedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element && this.elementIsActive(element)) {
          this.processTree(element, this.addElement);
        }
      }
    }
    matchElement(element) {
      return this.delegate.matchElement(element);
    }
    matchElementsInTree(tree = this.element) {
      return this.delegate.matchElementsInTree(tree);
    }
    processTree(tree, processor) {
      for (const element of this.matchElementsInTree(tree)) {
        processor.call(this, element);
      }
    }
    elementFromNode(node) {
      if (node.nodeType == Node.ELEMENT_NODE) {
        return node;
      }
    }
    elementIsActive(element) {
      if (element.isConnected != this.element.isConnected) {
        return false;
      } else {
        return this.element.contains(element);
      }
    }
    addElement(element) {
      if (!this.elements.has(element)) {
        if (this.elementIsActive(element)) {
          this.elements.add(element);
          if (this.delegate.elementMatched) {
            this.delegate.elementMatched(element);
          }
        }
      }
    }
    removeElement(element) {
      if (this.elements.has(element)) {
        this.elements.delete(element);
        if (this.delegate.elementUnmatched) {
          this.delegate.elementUnmatched(element);
        }
      }
    }
  };
  var AttributeObserver = class {
    constructor(element, attributeName, delegate) {
      this.attributeName = attributeName;
      this.delegate = delegate;
      this.elementObserver = new ElementObserver(element, this);
    }
    get element() {
      return this.elementObserver.element;
    }
    get selector() {
      return `[${this.attributeName}]`;
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get started() {
      return this.elementObserver.started;
    }
    matchElement(element) {
      return element.hasAttribute(this.attributeName);
    }
    matchElementsInTree(tree) {
      const match = this.matchElement(tree) ? [tree] : [];
      const matches2 = Array.from(tree.querySelectorAll(this.selector));
      return match.concat(matches2);
    }
    elementMatched(element) {
      if (this.delegate.elementMatchedAttribute) {
        this.delegate.elementMatchedAttribute(element, this.attributeName);
      }
    }
    elementUnmatched(element) {
      if (this.delegate.elementUnmatchedAttribute) {
        this.delegate.elementUnmatchedAttribute(element, this.attributeName);
      }
    }
    elementAttributeChanged(element, attributeName) {
      if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {
        this.delegate.elementAttributeValueChanged(element, attributeName);
      }
    }
  };
  function add(map, key, value) {
    fetch2(map, key).add(value);
  }
  function del(map, key, value) {
    fetch2(map, key).delete(value);
    prune(map, key);
  }
  function fetch2(map, key) {
    let values = map.get(key);
    if (!values) {
      values = /* @__PURE__ */ new Set();
      map.set(key, values);
    }
    return values;
  }
  function prune(map, key) {
    const values = map.get(key);
    if (values != null && values.size == 0) {
      map.delete(key);
    }
  }
  var Multimap = class {
    constructor() {
      this.valuesByKey = /* @__PURE__ */ new Map();
    }
    get keys() {
      return Array.from(this.valuesByKey.keys());
    }
    get values() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((values, set3) => values.concat(Array.from(set3)), []);
    }
    get size() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((size, set3) => size + set3.size, 0);
    }
    add(key, value) {
      add(this.valuesByKey, key, value);
    }
    delete(key, value) {
      del(this.valuesByKey, key, value);
    }
    has(key, value) {
      const values = this.valuesByKey.get(key);
      return values != null && values.has(value);
    }
    hasKey(key) {
      return this.valuesByKey.has(key);
    }
    hasValue(value) {
      const sets = Array.from(this.valuesByKey.values());
      return sets.some((set3) => set3.has(value));
    }
    getValuesForKey(key) {
      const values = this.valuesByKey.get(key);
      return values ? Array.from(values) : [];
    }
    getKeysForValue(value) {
      return Array.from(this.valuesByKey).filter(([_key, values]) => values.has(value)).map(([key, _values]) => key);
    }
  };
  var SelectorObserver = class {
    constructor(element, selector, delegate, details = {}) {
      this.selector = selector;
      this.details = details;
      this.elementObserver = new ElementObserver(element, this);
      this.delegate = delegate;
      this.matchesByElement = new Multimap();
    }
    get started() {
      return this.elementObserver.started;
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get element() {
      return this.elementObserver.element;
    }
    matchElement(element) {
      const matches2 = element.matches(this.selector);
      if (this.delegate.selectorMatchElement) {
        return matches2 && this.delegate.selectorMatchElement(element, this.details);
      }
      return matches2;
    }
    matchElementsInTree(tree) {
      const match = this.matchElement(tree) ? [tree] : [];
      const matches2 = Array.from(tree.querySelectorAll(this.selector)).filter((match2) => this.matchElement(match2));
      return match.concat(matches2);
    }
    elementMatched(element) {
      this.selectorMatched(element);
    }
    elementUnmatched(element) {
      this.selectorUnmatched(element);
    }
    elementAttributeChanged(element, _attributeName) {
      const matches2 = this.matchElement(element);
      const matchedBefore = this.matchesByElement.has(this.selector, element);
      if (!matches2 && matchedBefore) {
        this.selectorUnmatched(element);
      }
    }
    selectorMatched(element) {
      if (this.delegate.selectorMatched) {
        this.delegate.selectorMatched(element, this.selector, this.details);
        this.matchesByElement.add(this.selector, element);
      }
    }
    selectorUnmatched(element) {
      this.delegate.selectorUnmatched(element, this.selector, this.details);
      this.matchesByElement.delete(this.selector, element);
    }
  };
  var StringMapObserver = class {
    constructor(element, delegate) {
      this.element = element;
      this.delegate = delegate;
      this.started = false;
      this.stringMap = /* @__PURE__ */ new Map();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });
        this.refresh();
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        for (const attributeName of this.knownAttributeNames) {
          this.refreshAttribute(attributeName, null);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      const attributeName = mutation.attributeName;
      if (attributeName) {
        this.refreshAttribute(attributeName, mutation.oldValue);
      }
    }
    refreshAttribute(attributeName, oldValue) {
      const key = this.delegate.getStringMapKeyForAttribute(attributeName);
      if (key != null) {
        if (!this.stringMap.has(attributeName)) {
          this.stringMapKeyAdded(key, attributeName);
        }
        const value = this.element.getAttribute(attributeName);
        if (this.stringMap.get(attributeName) != value) {
          this.stringMapValueChanged(value, key, oldValue);
        }
        if (value == null) {
          const oldValue2 = this.stringMap.get(attributeName);
          this.stringMap.delete(attributeName);
          if (oldValue2)
            this.stringMapKeyRemoved(key, attributeName, oldValue2);
        } else {
          this.stringMap.set(attributeName, value);
        }
      }
    }
    stringMapKeyAdded(key, attributeName) {
      if (this.delegate.stringMapKeyAdded) {
        this.delegate.stringMapKeyAdded(key, attributeName);
      }
    }
    stringMapValueChanged(value, key, oldValue) {
      if (this.delegate.stringMapValueChanged) {
        this.delegate.stringMapValueChanged(value, key, oldValue);
      }
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      if (this.delegate.stringMapKeyRemoved) {
        this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);
      }
    }
    get knownAttributeNames() {
      return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));
    }
    get currentAttributeNames() {
      return Array.from(this.element.attributes).map((attribute) => attribute.name);
    }
    get recordedAttributeNames() {
      return Array.from(this.stringMap.keys());
    }
  };
  var TokenListObserver = class {
    constructor(element, attributeName, delegate) {
      this.attributeObserver = new AttributeObserver(element, attributeName, this);
      this.delegate = delegate;
      this.tokensByElement = new Multimap();
    }
    get started() {
      return this.attributeObserver.started;
    }
    start() {
      this.attributeObserver.start();
    }
    pause(callback) {
      this.attributeObserver.pause(callback);
    }
    stop() {
      this.attributeObserver.stop();
    }
    refresh() {
      this.attributeObserver.refresh();
    }
    get element() {
      return this.attributeObserver.element;
    }
    get attributeName() {
      return this.attributeObserver.attributeName;
    }
    elementMatchedAttribute(element) {
      this.tokensMatched(this.readTokensForElement(element));
    }
    elementAttributeValueChanged(element) {
      const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);
      this.tokensUnmatched(unmatchedTokens);
      this.tokensMatched(matchedTokens);
    }
    elementUnmatchedAttribute(element) {
      this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));
    }
    tokensMatched(tokens) {
      tokens.forEach((token) => this.tokenMatched(token));
    }
    tokensUnmatched(tokens) {
      tokens.forEach((token) => this.tokenUnmatched(token));
    }
    tokenMatched(token) {
      this.delegate.tokenMatched(token);
      this.tokensByElement.add(token.element, token);
    }
    tokenUnmatched(token) {
      this.delegate.tokenUnmatched(token);
      this.tokensByElement.delete(token.element, token);
    }
    refreshTokensForElement(element) {
      const previousTokens = this.tokensByElement.getValuesForKey(element);
      const currentTokens = this.readTokensForElement(element);
      const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));
      if (firstDifferingIndex == -1) {
        return [[], []];
      } else {
        return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];
      }
    }
    readTokensForElement(element) {
      const attributeName = this.attributeName;
      const tokenString = element.getAttribute(attributeName) || "";
      return parseTokenString(tokenString, element, attributeName);
    }
  };
  function parseTokenString(tokenString, element, attributeName) {
    return tokenString.trim().split(/\s+/).filter((content) => content.length).map((content, index2) => ({ element, attributeName, content, index: index2 }));
  }
  function zip(left, right) {
    const length = Math.max(left.length, right.length);
    return Array.from({ length }, (_, index2) => [left[index2], right[index2]]);
  }
  function tokensAreEqual(left, right) {
    return left && right && left.index == right.index && left.content == right.content;
  }
  var ValueListObserver = class {
    constructor(element, attributeName, delegate) {
      this.tokenListObserver = new TokenListObserver(element, attributeName, this);
      this.delegate = delegate;
      this.parseResultsByToken = /* @__PURE__ */ new WeakMap();
      this.valuesByTokenByElement = /* @__PURE__ */ new WeakMap();
    }
    get started() {
      return this.tokenListObserver.started;
    }
    start() {
      this.tokenListObserver.start();
    }
    stop() {
      this.tokenListObserver.stop();
    }
    refresh() {
      this.tokenListObserver.refresh();
    }
    get element() {
      return this.tokenListObserver.element;
    }
    get attributeName() {
      return this.tokenListObserver.attributeName;
    }
    tokenMatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).set(token, value);
        this.delegate.elementMatchedValue(element, value);
      }
    }
    tokenUnmatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).delete(token);
        this.delegate.elementUnmatchedValue(element, value);
      }
    }
    fetchParseResultForToken(token) {
      let parseResult = this.parseResultsByToken.get(token);
      if (!parseResult) {
        parseResult = this.parseToken(token);
        this.parseResultsByToken.set(token, parseResult);
      }
      return parseResult;
    }
    fetchValuesByTokenForElement(element) {
      let valuesByToken = this.valuesByTokenByElement.get(element);
      if (!valuesByToken) {
        valuesByToken = /* @__PURE__ */ new Map();
        this.valuesByTokenByElement.set(element, valuesByToken);
      }
      return valuesByToken;
    }
    parseToken(token) {
      try {
        const value = this.delegate.parseValueForToken(token);
        return { value };
      } catch (error2) {
        return { error: error2 };
      }
    }
  };
  var BindingObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.bindingsByAction = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.valueListObserver) {
        this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);
        this.valueListObserver.start();
      }
    }
    stop() {
      if (this.valueListObserver) {
        this.valueListObserver.stop();
        delete this.valueListObserver;
        this.disconnectAllActions();
      }
    }
    get element() {
      return this.context.element;
    }
    get identifier() {
      return this.context.identifier;
    }
    get actionAttribute() {
      return this.schema.actionAttribute;
    }
    get schema() {
      return this.context.schema;
    }
    get bindings() {
      return Array.from(this.bindingsByAction.values());
    }
    connectAction(action) {
      const binding = new Binding(this.context, action);
      this.bindingsByAction.set(action, binding);
      this.delegate.bindingConnected(binding);
    }
    disconnectAction(action) {
      const binding = this.bindingsByAction.get(action);
      if (binding) {
        this.bindingsByAction.delete(action);
        this.delegate.bindingDisconnected(binding);
      }
    }
    disconnectAllActions() {
      this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding, true));
      this.bindingsByAction.clear();
    }
    parseValueForToken(token) {
      const action = Action.forToken(token, this.schema);
      if (action.identifier == this.identifier) {
        return action;
      }
    }
    elementMatchedValue(element, action) {
      this.connectAction(action);
    }
    elementUnmatchedValue(element, action) {
      this.disconnectAction(action);
    }
  };
  var ValueObserver = class {
    constructor(context, receiver) {
      this.context = context;
      this.receiver = receiver;
      this.stringMapObserver = new StringMapObserver(this.element, this);
      this.valueDescriptorMap = this.controller.valueDescriptorMap;
    }
    start() {
      this.stringMapObserver.start();
      this.invokeChangedCallbacksForDefaultValues();
    }
    stop() {
      this.stringMapObserver.stop();
    }
    get element() {
      return this.context.element;
    }
    get controller() {
      return this.context.controller;
    }
    getStringMapKeyForAttribute(attributeName) {
      if (attributeName in this.valueDescriptorMap) {
        return this.valueDescriptorMap[attributeName].name;
      }
    }
    stringMapKeyAdded(key, attributeName) {
      const descriptor = this.valueDescriptorMap[attributeName];
      if (!this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));
      }
    }
    stringMapValueChanged(value, name, oldValue) {
      const descriptor = this.valueDescriptorNameMap[name];
      if (value === null)
        return;
      if (oldValue === null) {
        oldValue = descriptor.writer(descriptor.defaultValue);
      }
      this.invokeChangedCallback(name, value, oldValue);
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      const descriptor = this.valueDescriptorNameMap[key];
      if (this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);
      } else {
        this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);
      }
    }
    invokeChangedCallbacksForDefaultValues() {
      for (const { key, name, defaultValue, writer } of this.valueDescriptors) {
        if (defaultValue != void 0 && !this.controller.data.has(key)) {
          this.invokeChangedCallback(name, writer(defaultValue), void 0);
        }
      }
    }
    invokeChangedCallback(name, rawValue, rawOldValue) {
      const changedMethodName = `${name}Changed`;
      const changedMethod = this.receiver[changedMethodName];
      if (typeof changedMethod == "function") {
        const descriptor = this.valueDescriptorNameMap[name];
        try {
          const value = descriptor.reader(rawValue);
          let oldValue = rawOldValue;
          if (rawOldValue) {
            oldValue = descriptor.reader(rawOldValue);
          }
          changedMethod.call(this.receiver, value, oldValue);
        } catch (error2) {
          if (error2 instanceof TypeError) {
            error2.message = `Stimulus Value "${this.context.identifier}.${descriptor.name}" - ${error2.message}`;
          }
          throw error2;
        }
      }
    }
    get valueDescriptors() {
      const { valueDescriptorMap } = this;
      return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key]);
    }
    get valueDescriptorNameMap() {
      const descriptors = {};
      Object.keys(this.valueDescriptorMap).forEach((key) => {
        const descriptor = this.valueDescriptorMap[key];
        descriptors[descriptor.name] = descriptor;
      });
      return descriptors;
    }
    hasValue(attributeName) {
      const descriptor = this.valueDescriptorNameMap[attributeName];
      const hasMethodName = `has${capitalize(descriptor.name)}`;
      return this.receiver[hasMethodName];
    }
  };
  var TargetObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.targetsByName = new Multimap();
    }
    start() {
      if (!this.tokenListObserver) {
        this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);
        this.tokenListObserver.start();
      }
    }
    stop() {
      if (this.tokenListObserver) {
        this.disconnectAllTargets();
        this.tokenListObserver.stop();
        delete this.tokenListObserver;
      }
    }
    tokenMatched({ element, content: name }) {
      if (this.scope.containsElement(element)) {
        this.connectTarget(element, name);
      }
    }
    tokenUnmatched({ element, content: name }) {
      this.disconnectTarget(element, name);
    }
    connectTarget(element, name) {
      var _a;
      if (!this.targetsByName.has(name, element)) {
        this.targetsByName.add(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));
      }
    }
    disconnectTarget(element, name) {
      var _a;
      if (this.targetsByName.has(name, element)) {
        this.targetsByName.delete(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));
      }
    }
    disconnectAllTargets() {
      for (const name of this.targetsByName.keys) {
        for (const element of this.targetsByName.getValuesForKey(name)) {
          this.disconnectTarget(element, name);
        }
      }
    }
    get attributeName() {
      return `data-${this.context.identifier}-target`;
    }
    get element() {
      return this.context.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  function readInheritableStaticArrayValues(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return Array.from(ancestors.reduce((values, constructor2) => {
      getOwnStaticArrayValues(constructor2, propertyName).forEach((name) => values.add(name));
      return values;
    }, /* @__PURE__ */ new Set()));
  }
  function readInheritableStaticObjectPairs(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return ancestors.reduce((pairs, constructor2) => {
      pairs.push(...getOwnStaticObjectPairs(constructor2, propertyName));
      return pairs;
    }, []);
  }
  function getAncestorsForConstructor(constructor) {
    const ancestors = [];
    while (constructor) {
      ancestors.push(constructor);
      constructor = Object.getPrototypeOf(constructor);
    }
    return ancestors.reverse();
  }
  function getOwnStaticArrayValues(constructor, propertyName) {
    const definition = constructor[propertyName];
    return Array.isArray(definition) ? definition : [];
  }
  function getOwnStaticObjectPairs(constructor, propertyName) {
    const definition = constructor[propertyName];
    return definition ? Object.keys(definition).map((key) => [key, definition[key]]) : [];
  }
  var OutletObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.outletsByName = new Multimap();
      this.outletElementsByName = new Multimap();
      this.selectorObserverMap = /* @__PURE__ */ new Map();
    }
    start() {
      if (this.selectorObserverMap.size === 0) {
        this.outletDefinitions.forEach((outletName) => {
          const selector = this.selector(outletName);
          const details = { outletName };
          if (selector) {
            this.selectorObserverMap.set(outletName, new SelectorObserver(document.body, selector, this, details));
          }
        });
        this.selectorObserverMap.forEach((observer) => observer.start());
      }
      this.dependentContexts.forEach((context) => context.refresh());
    }
    stop() {
      if (this.selectorObserverMap.size > 0) {
        this.disconnectAllOutlets();
        this.selectorObserverMap.forEach((observer) => observer.stop());
        this.selectorObserverMap.clear();
      }
    }
    refresh() {
      this.selectorObserverMap.forEach((observer) => observer.refresh());
    }
    selectorMatched(element, _selector, { outletName }) {
      const outlet = this.getOutlet(element, outletName);
      if (outlet) {
        this.connectOutlet(outlet, element, outletName);
      }
    }
    selectorUnmatched(element, _selector, { outletName }) {
      const outlet = this.getOutletFromMap(element, outletName);
      if (outlet) {
        this.disconnectOutlet(outlet, element, outletName);
      }
    }
    selectorMatchElement(element, { outletName }) {
      return this.hasOutlet(element, outletName) && element.matches(`[${this.context.application.schema.controllerAttribute}~=${outletName}]`);
    }
    connectOutlet(outlet, element, outletName) {
      var _a;
      if (!this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.add(outletName, outlet);
        this.outletElementsByName.add(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletConnected(outlet, element, outletName));
      }
    }
    disconnectOutlet(outlet, element, outletName) {
      var _a;
      if (this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.delete(outletName, outlet);
        this.outletElementsByName.delete(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletDisconnected(outlet, element, outletName));
      }
    }
    disconnectAllOutlets() {
      for (const outletName of this.outletElementsByName.keys) {
        for (const element of this.outletElementsByName.getValuesForKey(outletName)) {
          for (const outlet of this.outletsByName.getValuesForKey(outletName)) {
            this.disconnectOutlet(outlet, element, outletName);
          }
        }
      }
    }
    selector(outletName) {
      return this.scope.outlets.getSelectorForOutletName(outletName);
    }
    get outletDependencies() {
      const dependencies = new Multimap();
      this.router.modules.forEach((module) => {
        const constructor = module.definition.controllerConstructor;
        const outlets = readInheritableStaticArrayValues(constructor, "outlets");
        outlets.forEach((outlet) => dependencies.add(outlet, module.identifier));
      });
      return dependencies;
    }
    get outletDefinitions() {
      return this.outletDependencies.getKeysForValue(this.identifier);
    }
    get dependentControllerIdentifiers() {
      return this.outletDependencies.getValuesForKey(this.identifier);
    }
    get dependentContexts() {
      const identifiers = this.dependentControllerIdentifiers;
      return this.router.contexts.filter((context) => identifiers.includes(context.identifier));
    }
    hasOutlet(element, outletName) {
      return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);
    }
    getOutlet(element, outletName) {
      return this.application.getControllerForElementAndIdentifier(element, outletName);
    }
    getOutletFromMap(element, outletName) {
      return this.outletsByName.getValuesForKey(outletName).find((outlet) => outlet.element === element);
    }
    get scope() {
      return this.context.scope;
    }
    get identifier() {
      return this.context.identifier;
    }
    get application() {
      return this.context.application;
    }
    get router() {
      return this.application.router;
    }
  };
  var Context = class {
    constructor(module, scope) {
      this.logDebugActivity = (functionName, detail = {}) => {
        const { identifier, controller, element } = this;
        detail = Object.assign({ identifier, controller, element }, detail);
        this.application.logDebugActivity(this.identifier, functionName, detail);
      };
      this.module = module;
      this.scope = scope;
      this.controller = new module.controllerConstructor(this);
      this.bindingObserver = new BindingObserver(this, this.dispatcher);
      this.valueObserver = new ValueObserver(this, this.controller);
      this.targetObserver = new TargetObserver(this, this);
      this.outletObserver = new OutletObserver(this, this);
      try {
        this.controller.initialize();
        this.logDebugActivity("initialize");
      } catch (error2) {
        this.handleError(error2, "initializing controller");
      }
    }
    connect() {
      this.bindingObserver.start();
      this.valueObserver.start();
      this.targetObserver.start();
      this.outletObserver.start();
      try {
        this.controller.connect();
        this.logDebugActivity("connect");
      } catch (error2) {
        this.handleError(error2, "connecting controller");
      }
    }
    refresh() {
      this.outletObserver.refresh();
    }
    disconnect() {
      try {
        this.controller.disconnect();
        this.logDebugActivity("disconnect");
      } catch (error2) {
        this.handleError(error2, "disconnecting controller");
      }
      this.outletObserver.stop();
      this.targetObserver.stop();
      this.valueObserver.stop();
      this.bindingObserver.stop();
    }
    get application() {
      return this.module.application;
    }
    get identifier() {
      return this.module.identifier;
    }
    get schema() {
      return this.application.schema;
    }
    get dispatcher() {
      return this.application.dispatcher;
    }
    get element() {
      return this.scope.element;
    }
    get parentElement() {
      return this.element.parentElement;
    }
    handleError(error2, message, detail = {}) {
      const { identifier, controller, element } = this;
      detail = Object.assign({ identifier, controller, element }, detail);
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    targetConnected(element, name) {
      this.invokeControllerMethod(`${name}TargetConnected`, element);
    }
    targetDisconnected(element, name) {
      this.invokeControllerMethod(`${name}TargetDisconnected`, element);
    }
    outletConnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element);
    }
    outletDisconnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element);
    }
    invokeControllerMethod(methodName, ...args) {
      const controller = this.controller;
      if (typeof controller[methodName] == "function") {
        controller[methodName](...args);
      }
    }
  };
  function bless(constructor) {
    return shadow(constructor, getBlessedProperties(constructor));
  }
  function shadow(constructor, properties) {
    const shadowConstructor = extend(constructor);
    const shadowProperties = getShadowProperties(constructor.prototype, properties);
    Object.defineProperties(shadowConstructor.prototype, shadowProperties);
    return shadowConstructor;
  }
  function getBlessedProperties(constructor) {
    const blessings = readInheritableStaticArrayValues(constructor, "blessings");
    return blessings.reduce((blessedProperties, blessing) => {
      const properties = blessing(constructor);
      for (const key in properties) {
        const descriptor = blessedProperties[key] || {};
        blessedProperties[key] = Object.assign(descriptor, properties[key]);
      }
      return blessedProperties;
    }, {});
  }
  function getShadowProperties(prototype, properties) {
    return getOwnKeys(properties).reduce((shadowProperties, key) => {
      const descriptor = getShadowedDescriptor(prototype, properties, key);
      if (descriptor) {
        Object.assign(shadowProperties, { [key]: descriptor });
      }
      return shadowProperties;
    }, {});
  }
  function getShadowedDescriptor(prototype, properties, key) {
    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);
    const shadowedByValue = shadowingDescriptor && "value" in shadowingDescriptor;
    if (!shadowedByValue) {
      const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;
      if (shadowingDescriptor) {
        descriptor.get = shadowingDescriptor.get || descriptor.get;
        descriptor.set = shadowingDescriptor.set || descriptor.set;
      }
      return descriptor;
    }
  }
  var getOwnKeys = (() => {
    if (typeof Object.getOwnPropertySymbols == "function") {
      return (object) => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];
    } else {
      return Object.getOwnPropertyNames;
    }
  })();
  var extend = (() => {
    function extendWithReflect(constructor) {
      function extended() {
        return Reflect.construct(constructor, arguments, new.target);
      }
      extended.prototype = Object.create(constructor.prototype, {
        constructor: { value: extended }
      });
      Reflect.setPrototypeOf(extended, constructor);
      return extended;
    }
    function testReflectExtension() {
      const a = function() {
        this.a.call(this);
      };
      const b = extendWithReflect(a);
      b.prototype.a = function() {
      };
      return new b();
    }
    try {
      testReflectExtension();
      return extendWithReflect;
    } catch (error2) {
      return (constructor) => class extended extends constructor {
      };
    }
  })();
  function blessDefinition(definition) {
    return {
      identifier: definition.identifier,
      controllerConstructor: bless(definition.controllerConstructor)
    };
  }
  var Module = class {
    constructor(application2, definition) {
      this.application = application2;
      this.definition = blessDefinition(definition);
      this.contextsByScope = /* @__PURE__ */ new WeakMap();
      this.connectedContexts = /* @__PURE__ */ new Set();
    }
    get identifier() {
      return this.definition.identifier;
    }
    get controllerConstructor() {
      return this.definition.controllerConstructor;
    }
    get contexts() {
      return Array.from(this.connectedContexts);
    }
    connectContextForScope(scope) {
      const context = this.fetchContextForScope(scope);
      this.connectedContexts.add(context);
      context.connect();
    }
    disconnectContextForScope(scope) {
      const context = this.contextsByScope.get(scope);
      if (context) {
        this.connectedContexts.delete(context);
        context.disconnect();
      }
    }
    fetchContextForScope(scope) {
      let context = this.contextsByScope.get(scope);
      if (!context) {
        context = new Context(this, scope);
        this.contextsByScope.set(scope, context);
      }
      return context;
    }
  };
  var ClassMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    has(name) {
      return this.data.has(this.getDataKey(name));
    }
    get(name) {
      return this.getAll(name)[0];
    }
    getAll(name) {
      const tokenString = this.data.get(this.getDataKey(name)) || "";
      return tokenize(tokenString);
    }
    getAttributeName(name) {
      return this.data.getAttributeNameForKey(this.getDataKey(name));
    }
    getDataKey(name) {
      return `${name}-class`;
    }
    get data() {
      return this.scope.data;
    }
  };
  var DataMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.getAttribute(name);
    }
    set(key, value) {
      const name = this.getAttributeNameForKey(key);
      this.element.setAttribute(name, value);
      return this.get(key);
    }
    has(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.hasAttribute(name);
    }
    delete(key) {
      if (this.has(key)) {
        const name = this.getAttributeNameForKey(key);
        this.element.removeAttribute(name);
        return true;
      } else {
        return false;
      }
    }
    getAttributeNameForKey(key) {
      return `data-${this.identifier}-${dasherize(key)}`;
    }
  };
  var Guide = class {
    constructor(logger) {
      this.warnedKeysByObject = /* @__PURE__ */ new WeakMap();
      this.logger = logger;
    }
    warn(object, key, message) {
      let warnedKeys = this.warnedKeysByObject.get(object);
      if (!warnedKeys) {
        warnedKeys = /* @__PURE__ */ new Set();
        this.warnedKeysByObject.set(object, warnedKeys);
      }
      if (!warnedKeys.has(key)) {
        warnedKeys.add(key);
        this.logger.warn(message, object);
      }
    }
  };
  function attributeValueContainsToken(attributeName, token) {
    return `[${attributeName}~="${token}"]`;
  }
  var TargetSet = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(targetName) {
      return this.find(targetName) != null;
    }
    find(...targetNames) {
      return targetNames.reduce((target2, targetName) => target2 || this.findTarget(targetName) || this.findLegacyTarget(targetName), void 0);
    }
    findAll(...targetNames) {
      return targetNames.reduce((targets, targetName) => [
        ...targets,
        ...this.findAllTargets(targetName),
        ...this.findAllLegacyTargets(targetName)
      ], []);
    }
    findTarget(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findElement(selector);
    }
    findAllTargets(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findAllElements(selector);
    }
    getSelectorForTargetName(targetName) {
      const attributeName = this.schema.targetAttributeForScope(this.identifier);
      return attributeValueContainsToken(attributeName, targetName);
    }
    findLegacyTarget(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.deprecate(this.scope.findElement(selector), targetName);
    }
    findAllLegacyTargets(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName));
    }
    getLegacySelectorForTargetName(targetName) {
      const targetDescriptor = `${this.identifier}.${targetName}`;
      return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);
    }
    deprecate(element, targetName) {
      if (element) {
        const { identifier } = this;
        const attributeName = this.schema.targetAttribute;
        const revisedAttributeName = this.schema.targetAttributeForScope(identifier);
        this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}="${identifier}.${targetName}" with ${revisedAttributeName}="${targetName}". The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);
      }
      return element;
    }
    get guide() {
      return this.scope.guide;
    }
  };
  var OutletSet = class {
    constructor(scope, controllerElement) {
      this.scope = scope;
      this.controllerElement = controllerElement;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(outletName) {
      return this.find(outletName) != null;
    }
    find(...outletNames) {
      return outletNames.reduce((outlet, outletName) => outlet || this.findOutlet(outletName), void 0);
    }
    findAll(...outletNames) {
      return outletNames.reduce((outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)], []);
    }
    getSelectorForOutletName(outletName) {
      const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);
      return this.controllerElement.getAttribute(attributeName);
    }
    findOutlet(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      if (selector)
        return this.findElement(selector, outletName);
    }
    findAllOutlets(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      return selector ? this.findAllElements(selector, outletName) : [];
    }
    findElement(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName))[0];
    }
    findAllElements(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName));
    }
    matchesElement(element, selector, outletName) {
      const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || "";
      return element.matches(selector) && controllerAttribute.split(" ").includes(outletName);
    }
  };
  var Scope = class {
    constructor(schema, element, identifier, logger) {
      this.targets = new TargetSet(this);
      this.classes = new ClassMap(this);
      this.data = new DataMap(this);
      this.containsElement = (element2) => {
        return element2.closest(this.controllerSelector) === this.element;
      };
      this.schema = schema;
      this.element = element;
      this.identifier = identifier;
      this.guide = new Guide(logger);
      this.outlets = new OutletSet(this.documentScope, element);
    }
    findElement(selector) {
      return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);
    }
    findAllElements(selector) {
      return [
        ...this.element.matches(selector) ? [this.element] : [],
        ...this.queryElements(selector).filter(this.containsElement)
      ];
    }
    queryElements(selector) {
      return Array.from(this.element.querySelectorAll(selector));
    }
    get controllerSelector() {
      return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);
    }
    get isDocumentScope() {
      return this.element === document.documentElement;
    }
    get documentScope() {
      return this.isDocumentScope ? this : new Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);
    }
  };
  var ScopeObserver = class {
    constructor(element, schema, delegate) {
      this.element = element;
      this.schema = schema;
      this.delegate = delegate;
      this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);
      this.scopesByIdentifierByElement = /* @__PURE__ */ new WeakMap();
      this.scopeReferenceCounts = /* @__PURE__ */ new WeakMap();
    }
    start() {
      this.valueListObserver.start();
    }
    stop() {
      this.valueListObserver.stop();
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    parseValueForToken(token) {
      const { element, content: identifier } = token;
      const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);
      let scope = scopesByIdentifier.get(identifier);
      if (!scope) {
        scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);
        scopesByIdentifier.set(identifier, scope);
      }
      return scope;
    }
    elementMatchedValue(element, value) {
      const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;
      this.scopeReferenceCounts.set(value, referenceCount);
      if (referenceCount == 1) {
        this.delegate.scopeConnected(value);
      }
    }
    elementUnmatchedValue(element, value) {
      const referenceCount = this.scopeReferenceCounts.get(value);
      if (referenceCount) {
        this.scopeReferenceCounts.set(value, referenceCount - 1);
        if (referenceCount == 1) {
          this.delegate.scopeDisconnected(value);
        }
      }
    }
    fetchScopesByIdentifierForElement(element) {
      let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);
      if (!scopesByIdentifier) {
        scopesByIdentifier = /* @__PURE__ */ new Map();
        this.scopesByIdentifierByElement.set(element, scopesByIdentifier);
      }
      return scopesByIdentifier;
    }
  };
  var Router = class {
    constructor(application2) {
      this.application = application2;
      this.scopeObserver = new ScopeObserver(this.element, this.schema, this);
      this.scopesByIdentifier = new Multimap();
      this.modulesByIdentifier = /* @__PURE__ */ new Map();
    }
    get element() {
      return this.application.element;
    }
    get schema() {
      return this.application.schema;
    }
    get logger() {
      return this.application.logger;
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    get modules() {
      return Array.from(this.modulesByIdentifier.values());
    }
    get contexts() {
      return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);
    }
    start() {
      this.scopeObserver.start();
    }
    stop() {
      this.scopeObserver.stop();
    }
    loadDefinition(definition) {
      this.unloadIdentifier(definition.identifier);
      const module = new Module(this.application, definition);
      this.connectModule(module);
      const afterLoad = definition.controllerConstructor.afterLoad;
      if (afterLoad) {
        afterLoad(definition.identifier, this.application);
      }
    }
    unloadIdentifier(identifier) {
      const module = this.modulesByIdentifier.get(identifier);
      if (module) {
        this.disconnectModule(module);
      }
    }
    getContextForElementAndIdentifier(element, identifier) {
      const module = this.modulesByIdentifier.get(identifier);
      if (module) {
        return module.contexts.find((context) => context.element == element);
      }
    }
    handleError(error2, message, detail) {
      this.application.handleError(error2, message, detail);
    }
    createScopeForElementAndIdentifier(element, identifier) {
      return new Scope(this.schema, element, identifier, this.logger);
    }
    scopeConnected(scope) {
      this.scopesByIdentifier.add(scope.identifier, scope);
      const module = this.modulesByIdentifier.get(scope.identifier);
      if (module) {
        module.connectContextForScope(scope);
      }
    }
    scopeDisconnected(scope) {
      this.scopesByIdentifier.delete(scope.identifier, scope);
      const module = this.modulesByIdentifier.get(scope.identifier);
      if (module) {
        module.disconnectContextForScope(scope);
      }
    }
    connectModule(module) {
      this.modulesByIdentifier.set(module.identifier, module);
      const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);
      scopes.forEach((scope) => module.connectContextForScope(scope));
    }
    disconnectModule(module) {
      this.modulesByIdentifier.delete(module.identifier);
      const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);
      scopes.forEach((scope) => module.disconnectContextForScope(scope));
    }
  };
  var defaultSchema = {
    controllerAttribute: "data-controller",
    actionAttribute: "data-action",
    targetAttribute: "data-target",
    targetAttributeForScope: (identifier) => `data-${identifier}-target`,
    outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,
    keyMappings: Object.assign(Object.assign({ enter: "Enter", tab: "Tab", esc: "Escape", space: " ", up: "ArrowUp", down: "ArrowDown", left: "ArrowLeft", right: "ArrowRight", home: "Home", end: "End" }, objectFromEntries("abcdefghijklmnopqrstuvwxyz".split("").map((c2) => [c2, c2]))), objectFromEntries("0123456789".split("").map((n) => [n, n])))
  };
  function objectFromEntries(array) {
    return array.reduce((memo, [k, v]) => Object.assign(Object.assign({}, memo), { [k]: v }), {});
  }
  var Application = class {
    constructor(element = document.documentElement, schema = defaultSchema) {
      this.logger = console;
      this.debug = false;
      this.logDebugActivity = (identifier, functionName, detail = {}) => {
        if (this.debug) {
          this.logFormattedMessage(identifier, functionName, detail);
        }
      };
      this.element = element;
      this.schema = schema;
      this.dispatcher = new Dispatcher(this);
      this.router = new Router(this);
      this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);
    }
    static start(element, schema) {
      const application2 = new this(element, schema);
      application2.start();
      return application2;
    }
    async start() {
      await domReady();
      this.logDebugActivity("application", "starting");
      this.dispatcher.start();
      this.router.start();
      this.logDebugActivity("application", "start");
    }
    stop() {
      this.logDebugActivity("application", "stopping");
      this.dispatcher.stop();
      this.router.stop();
      this.logDebugActivity("application", "stop");
    }
    register(identifier, controllerConstructor) {
      this.load({ identifier, controllerConstructor });
    }
    registerActionOption(name, filter) {
      this.actionDescriptorFilters[name] = filter;
    }
    load(head, ...rest) {
      const definitions = Array.isArray(head) ? head : [head, ...rest];
      definitions.forEach((definition) => {
        if (definition.controllerConstructor.shouldLoad) {
          this.router.loadDefinition(definition);
        }
      });
    }
    unload(head, ...rest) {
      const identifiers = Array.isArray(head) ? head : [head, ...rest];
      identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier));
    }
    get controllers() {
      return this.router.contexts.map((context) => context.controller);
    }
    getControllerForElementAndIdentifier(element, identifier) {
      const context = this.router.getContextForElementAndIdentifier(element, identifier);
      return context ? context.controller : null;
    }
    handleError(error2, message, detail) {
      var _a;
      this.logger.error(`%s

%o

%o`, message, error2, detail);
      (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, "", 0, 0, error2);
    }
    logFormattedMessage(identifier, functionName, detail = {}) {
      detail = Object.assign({ application: this }, detail);
      this.logger.groupCollapsed(`${identifier} #${functionName}`);
      this.logger.log("details:", Object.assign({}, detail));
      this.logger.groupEnd();
    }
  };
  function domReady() {
    return new Promise((resolve) => {
      if (document.readyState == "loading") {
        document.addEventListener("DOMContentLoaded", () => resolve());
      } else {
        resolve();
      }
    });
  }
  function ClassPropertiesBlessing(constructor) {
    const classes = readInheritableStaticArrayValues(constructor, "classes");
    return classes.reduce((properties, classDefinition) => {
      return Object.assign(properties, propertiesForClassDefinition(classDefinition));
    }, {});
  }
  function propertiesForClassDefinition(key) {
    return {
      [`${key}Class`]: {
        get() {
          const { classes } = this;
          if (classes.has(key)) {
            return classes.get(key);
          } else {
            const attribute = classes.getAttributeName(key);
            throw new Error(`Missing attribute "${attribute}"`);
          }
        }
      },
      [`${key}Classes`]: {
        get() {
          return this.classes.getAll(key);
        }
      },
      [`has${capitalize(key)}Class`]: {
        get() {
          return this.classes.has(key);
        }
      }
    };
  }
  function OutletPropertiesBlessing(constructor) {
    const outlets = readInheritableStaticArrayValues(constructor, "outlets");
    return outlets.reduce((properties, outletDefinition) => {
      return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));
    }, {});
  }
  function propertiesForOutletDefinition(name) {
    const camelizedName = namespaceCamelize(name);
    return {
      [`${camelizedName}Outlet`]: {
        get() {
          const outlet = this.outlets.find(name);
          if (outlet) {
            const outletController = this.application.getControllerForElementAndIdentifier(outlet, name);
            if (outletController) {
              return outletController;
            } else {
              throw new Error(`Missing "data-controller=${name}" attribute on outlet element for "${this.identifier}" controller`);
            }
          }
          throw new Error(`Missing outlet element "${name}" for "${this.identifier}" controller`);
        }
      },
      [`${camelizedName}Outlets`]: {
        get() {
          const outlets = this.outlets.findAll(name);
          if (outlets.length > 0) {
            return outlets.map((outlet) => {
              const controller = this.application.getControllerForElementAndIdentifier(outlet, name);
              if (controller) {
                return controller;
              } else {
                console.warn(`The provided outlet element is missing the outlet controller "${name}" for "${this.identifier}"`, outlet);
              }
            }).filter((controller) => controller);
          }
          return [];
        }
      },
      [`${camelizedName}OutletElement`]: {
        get() {
          const outlet = this.outlets.find(name);
          if (outlet) {
            return outlet;
          } else {
            throw new Error(`Missing outlet element "${name}" for "${this.identifier}" controller`);
          }
        }
      },
      [`${camelizedName}OutletElements`]: {
        get() {
          return this.outlets.findAll(name);
        }
      },
      [`has${capitalize(camelizedName)}Outlet`]: {
        get() {
          return this.outlets.has(name);
        }
      }
    };
  }
  function TargetPropertiesBlessing(constructor) {
    const targets = readInheritableStaticArrayValues(constructor, "targets");
    return targets.reduce((properties, targetDefinition) => {
      return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));
    }, {});
  }
  function propertiesForTargetDefinition(name) {
    return {
      [`${name}Target`]: {
        get() {
          const target2 = this.targets.find(name);
          if (target2) {
            return target2;
          } else {
            throw new Error(`Missing target element "${name}" for "${this.identifier}" controller`);
          }
        }
      },
      [`${name}Targets`]: {
        get() {
          return this.targets.findAll(name);
        }
      },
      [`has${capitalize(name)}Target`]: {
        get() {
          return this.targets.has(name);
        }
      }
    };
  }
  function ValuePropertiesBlessing(constructor) {
    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, "values");
    const propertyDescriptorMap = {
      valueDescriptorMap: {
        get() {
          return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {
            const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);
            const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);
            return Object.assign(result, { [attributeName]: valueDescriptor });
          }, {});
        }
      }
    };
    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {
      return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));
    }, propertyDescriptorMap);
  }
  function propertiesForValueDefinitionPair(valueDefinitionPair, controller) {
    const definition = parseValueDefinitionPair(valueDefinitionPair, controller);
    const { key, name, reader: read, writer: write } = definition;
    return {
      [name]: {
        get() {
          const value = this.data.get(key);
          if (value !== null) {
            return read(value);
          } else {
            return definition.defaultValue;
          }
        },
        set(value) {
          if (value === void 0) {
            this.data.delete(key);
          } else {
            this.data.set(key, write(value));
          }
        }
      },
      [`has${capitalize(name)}`]: {
        get() {
          return this.data.has(key) || definition.hasCustomDefaultValue;
        }
      }
    };
  }
  function parseValueDefinitionPair([token, typeDefinition], controller) {
    return valueDescriptorForTokenAndTypeDefinition({
      controller,
      token,
      typeDefinition
    });
  }
  function parseValueTypeConstant(constant) {
    switch (constant) {
      case Array:
        return "array";
      case Boolean:
        return "boolean";
      case Number:
        return "number";
      case Object:
        return "object";
      case String:
        return "string";
    }
  }
  function parseValueTypeDefault(defaultValue) {
    switch (typeof defaultValue) {
      case "boolean":
        return "boolean";
      case "number":
        return "number";
      case "string":
        return "string";
    }
    if (Array.isArray(defaultValue))
      return "array";
    if (Object.prototype.toString.call(defaultValue) === "[object Object]")
      return "object";
  }
  function parseValueTypeObject(payload) {
    const typeFromObject = parseValueTypeConstant(payload.typeObject.type);
    if (!typeFromObject)
      return;
    const defaultValueType = parseValueTypeDefault(payload.typeObject.default);
    if (typeFromObject !== defaultValueType) {
      const propertyPath = payload.controller ? `${payload.controller}.${payload.token}` : payload.token;
      throw new Error(`The specified default value for the Stimulus Value "${propertyPath}" must match the defined type "${typeFromObject}". The provided default value of "${payload.typeObject.default}" is of type "${defaultValueType}".`);
    }
    return typeFromObject;
  }
  function parseValueTypeDefinition(payload) {
    const typeFromObject = parseValueTypeObject({
      controller: payload.controller,
      token: payload.token,
      typeObject: payload.typeDefinition
    });
    const typeFromDefaultValue = parseValueTypeDefault(payload.typeDefinition);
    const typeFromConstant = parseValueTypeConstant(payload.typeDefinition);
    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;
    if (type)
      return type;
    const propertyPath = payload.controller ? `${payload.controller}.${payload.typeDefinition}` : payload.token;
    throw new Error(`Unknown value type "${propertyPath}" for "${payload.token}" value`);
  }
  function defaultValueForDefinition(typeDefinition) {
    const constant = parseValueTypeConstant(typeDefinition);
    if (constant)
      return defaultValuesByType[constant];
    const defaultValue = typeDefinition.default;
    if (defaultValue !== void 0)
      return defaultValue;
    return typeDefinition;
  }
  function valueDescriptorForTokenAndTypeDefinition(payload) {
    const key = `${dasherize(payload.token)}-value`;
    const type = parseValueTypeDefinition(payload);
    return {
      type,
      key,
      name: camelize(key),
      get defaultValue() {
        return defaultValueForDefinition(payload.typeDefinition);
      },
      get hasCustomDefaultValue() {
        return parseValueTypeDefault(payload.typeDefinition) !== void 0;
      },
      reader: readers[type],
      writer: writers[type] || writers.default
    };
  }
  var defaultValuesByType = {
    get array() {
      return [];
    },
    boolean: false,
    number: 0,
    get object() {
      return {};
    },
    string: ""
  };
  var readers = {
    array(value) {
      const array = JSON.parse(value);
      if (!Array.isArray(array)) {
        throw new TypeError(`expected value of type "array" but instead got value "${value}" of type "${parseValueTypeDefault(array)}"`);
      }
      return array;
    },
    boolean(value) {
      return !(value == "0" || String(value).toLowerCase() == "false");
    },
    number(value) {
      return Number(value);
    },
    object(value) {
      const object = JSON.parse(value);
      if (object === null || typeof object != "object" || Array.isArray(object)) {
        throw new TypeError(`expected value of type "object" but instead got value "${value}" of type "${parseValueTypeDefault(object)}"`);
      }
      return object;
    },
    string(value) {
      return value;
    }
  };
  var writers = {
    default: writeString,
    array: writeJSON,
    object: writeJSON
  };
  function writeJSON(value) {
    return JSON.stringify(value);
  }
  function writeString(value) {
    return `${value}`;
  }
  var Controller = class {
    constructor(context) {
      this.context = context;
    }
    static get shouldLoad() {
      return true;
    }
    static afterLoad(_identifier, _application) {
      return;
    }
    get application() {
      return this.context.application;
    }
    get scope() {
      return this.context.scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get targets() {
      return this.scope.targets;
    }
    get outlets() {
      return this.scope.outlets;
    }
    get classes() {
      return this.scope.classes;
    }
    get data() {
      return this.scope.data;
    }
    initialize() {
    }
    connect() {
    }
    disconnect() {
    }
    dispatch(eventName, { target: target2 = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true } = {}) {
      const type = prefix ? `${prefix}:${eventName}` : eventName;
      const event = new CustomEvent(type, { detail, bubbles, cancelable });
      target2.dispatchEvent(event);
      return event;
    }
  };
  Controller.blessings = [
    ClassPropertiesBlessing,
    TargetPropertiesBlessing,
    ValuePropertiesBlessing,
    OutletPropertiesBlessing
  ];
  Controller.targets = [];
  Controller.outlets = [];
  Controller.values = {};

  // controllers/application.js
  var application = Application.start();
  application.debug = false;
  window.Stimulus = application;

  // controllers/admin/quicksight_embed_controller.js
  var import_amazon_quicksight_embedding_sdk = __toESM(require_dist(), 1);
  var quicksight_embed_controller_default = class extends Controller {
    connect() {
      const dashboard = (0, import_amazon_quicksight_embedding_sdk.embedDashboard)(this.embedOptions());
      dashboard.on("error", (e) => {
        console.error(e);
      });
    }
    embedOptions() {
      return {
        url: this.urlValue,
        container: this.containerTarget,
        height: "AutoFit",
        loadingHeight: "80%",
        width: "100%"
      };
    }
  };
  __publicField(quicksight_embed_controller_default, "targets", ["container"]);
  __publicField(quicksight_embed_controller_default, "values", {
    url: String
  });

  // controllers/admin/recommended_content_controller.js
  var recommended_content_controller_default = class extends Controller {
    updateFormValue() {
      this.formValueTarget.value = this.contentIdsTargets.map((target2) => {
        return `${target2.name}:${target2.value}`;
      }).join("|");
    }
  };
  __publicField(recommended_content_controller_default, "targets", ["contentIds", "formValue"]);

  // controllers/all_checkbox_controller.js
  var all_checkbox_controller_default = class extends Controller {
    initialize() {
      if (this.otherTargets.some((checkbox) => checkbox.checked)) {
        this.allTarget.checked = false;
      } else {
        this.allTarget.checked = true;
      }
    }
    all() {
      if (this.allTarget.checked) {
        this.otherTargets.forEach((cbx) => {
          const checkbox = cbx;
          checkbox.checked = false;
        });
        const event = new CustomEvent("form-updated");
        window.dispatchEvent(event);
      } else {
        this.allTarget.checked = true;
      }
    }
    other() {
      if (this.otherTargets.some((checkbox) => checkbox.checked)) {
        this.allTarget.checked = false;
      } else {
        this.allTarget.checked = true;
      }
    }
  };
  __publicField(all_checkbox_controller_default, "targets", ["all", "other"]);

  // controllers/auto_dismiss_controller.js
  var auto_dismiss_controller_default = class extends Controller {
    connect() {
      setTimeout(() => this.dismiss(), 1e4);
    }
    dismiss() {
      this.element.remove();
    }
  };

  // ../../node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js
  var turbo_es2017_esm_exports = {};
  __export(turbo_es2017_esm_exports, {
    FrameElement: () => FrameElement,
    FrameLoadingStyle: () => FrameLoadingStyle,
    FrameRenderer: () => FrameRenderer,
    PageRenderer: () => PageRenderer,
    PageSnapshot: () => PageSnapshot,
    StreamActions: () => StreamActions,
    StreamElement: () => StreamElement,
    StreamSourceElement: () => StreamSourceElement,
    cache: () => cache,
    clearCache: () => clearCache,
    connectStreamSource: () => connectStreamSource,
    disconnectStreamSource: () => disconnectStreamSource,
    navigator: () => navigator$1,
    registerAdapter: () => registerAdapter,
    renderStreamMessage: () => renderStreamMessage,
    session: () => session,
    setConfirmMethod: () => setConfirmMethod,
    setFormMode: () => setFormMode,
    setProgressBarDelay: () => setProgressBarDelay,
    start: () => start,
    visit: () => visit
  });
  (function() {
    if (window.Reflect === void 0 || window.customElements === void 0 || window.customElements.polyfillWrapFlushCallback) {
      return;
    }
    const BuiltInHTMLElement = HTMLElement;
    const wrapperForTheName = {
      HTMLElement: function HTMLElement2() {
        return Reflect.construct(BuiltInHTMLElement, [], this.constructor);
      }
    };
    window.HTMLElement = wrapperForTheName["HTMLElement"];
    HTMLElement.prototype = BuiltInHTMLElement.prototype;
    HTMLElement.prototype.constructor = HTMLElement;
    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);
  })();
  (function(prototype) {
    if (typeof prototype.requestSubmit == "function")
      return;
    prototype.requestSubmit = function(submitter) {
      if (submitter) {
        validateSubmitter(submitter, this);
        submitter.click();
      } else {
        submitter = document.createElement("input");
        submitter.type = "submit";
        submitter.hidden = true;
        this.appendChild(submitter);
        submitter.click();
        this.removeChild(submitter);
      }
    };
    function validateSubmitter(submitter, form) {
      submitter instanceof HTMLElement || raise(TypeError, "parameter 1 is not of type 'HTMLElement'");
      submitter.type == "submit" || raise(TypeError, "The specified element is not a submit button");
      submitter.form == form || raise(DOMException, "The specified element is not owned by this form element", "NotFoundError");
    }
    function raise(errorConstructor, message, name) {
      throw new errorConstructor("Failed to execute 'requestSubmit' on 'HTMLFormElement': " + message + ".", name);
    }
  })(HTMLFormElement.prototype);
  var submittersByForm = /* @__PURE__ */ new WeakMap();
  function findSubmitterFromClickTarget(target2) {
    const element = target2 instanceof Element ? target2 : target2 instanceof Node ? target2.parentElement : null;
    const candidate = element ? element.closest("input, button") : null;
    return (candidate === null || candidate === void 0 ? void 0 : candidate.type) == "submit" ? candidate : null;
  }
  function clickCaptured(event) {
    const submitter = findSubmitterFromClickTarget(event.target);
    if (submitter && submitter.form) {
      submittersByForm.set(submitter.form, submitter);
    }
  }
  (function() {
    if ("submitter" in Event.prototype)
      return;
    let prototype;
    if ("SubmitEvent" in window && /Apple Computer/.test(navigator.vendor)) {
      prototype = window.SubmitEvent.prototype;
    } else if ("SubmitEvent" in window) {
      return;
    } else {
      prototype = window.Event.prototype;
    }
    addEventListener("click", clickCaptured, true);
    Object.defineProperty(prototype, "submitter", {
      get() {
        if (this.type == "submit" && this.target instanceof HTMLFormElement) {
          return submittersByForm.get(this.target);
        }
      }
    });
  })();
  var FrameLoadingStyle;
  (function(FrameLoadingStyle2) {
    FrameLoadingStyle2["eager"] = "eager";
    FrameLoadingStyle2["lazy"] = "lazy";
  })(FrameLoadingStyle || (FrameLoadingStyle = {}));
  var FrameElement = class extends HTMLElement {
    constructor() {
      super();
      this.loaded = Promise.resolve();
      this.delegate = new FrameElement.delegateConstructor(this);
    }
    static get observedAttributes() {
      return ["disabled", "complete", "loading", "src"];
    }
    connectedCallback() {
      this.delegate.connect();
    }
    disconnectedCallback() {
      this.delegate.disconnect();
    }
    reload() {
      return this.delegate.sourceURLReloaded();
    }
    attributeChangedCallback(name) {
      if (name == "loading") {
        this.delegate.loadingStyleChanged();
      } else if (name == "complete") {
        this.delegate.completeChanged();
      } else if (name == "src") {
        this.delegate.sourceURLChanged();
      } else {
        this.delegate.disabledChanged();
      }
    }
    get src() {
      return this.getAttribute("src");
    }
    set src(value) {
      if (value) {
        this.setAttribute("src", value);
      } else {
        this.removeAttribute("src");
      }
    }
    get loading() {
      return frameLoadingStyleFromString(this.getAttribute("loading") || "");
    }
    set loading(value) {
      if (value) {
        this.setAttribute("loading", value);
      } else {
        this.removeAttribute("loading");
      }
    }
    get disabled() {
      return this.hasAttribute("disabled");
    }
    set disabled(value) {
      if (value) {
        this.setAttribute("disabled", "");
      } else {
        this.removeAttribute("disabled");
      }
    }
    get autoscroll() {
      return this.hasAttribute("autoscroll");
    }
    set autoscroll(value) {
      if (value) {
        this.setAttribute("autoscroll", "");
      } else {
        this.removeAttribute("autoscroll");
      }
    }
    get complete() {
      return !this.delegate.isLoading;
    }
    get isActive() {
      return this.ownerDocument === document && !this.isPreview;
    }
    get isPreview() {
      var _a, _b;
      return (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.documentElement) === null || _b === void 0 ? void 0 : _b.hasAttribute("data-turbo-preview");
    }
  };
  function frameLoadingStyleFromString(style2) {
    switch (style2.toLowerCase()) {
      case "lazy":
        return FrameLoadingStyle.lazy;
      default:
        return FrameLoadingStyle.eager;
    }
  }
  function expandURL(locatable) {
    return new URL(locatable.toString(), document.baseURI);
  }
  function getAnchor(url) {
    let anchorMatch;
    if (url.hash) {
      return url.hash.slice(1);
    } else if (anchorMatch = url.href.match(/#(.*)$/)) {
      return anchorMatch[1];
    }
  }
  function getAction(form, submitter) {
    const action = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formaction")) || form.getAttribute("action") || form.action;
    return expandURL(action);
  }
  function getExtension(url) {
    return (getLastPathComponent(url).match(/\.[^.]*$/) || [])[0] || "";
  }
  function isHTML(url) {
    return !!getExtension(url).match(/^(?:|\.(?:htm|html|xhtml|php))$/);
  }
  function isPrefixedBy(baseURL, url) {
    const prefix = getPrefix(url);
    return baseURL.href === expandURL(prefix).href || baseURL.href.startsWith(prefix);
  }
  function locationIsVisitable(location2, rootLocation) {
    return isPrefixedBy(location2, rootLocation) && isHTML(location2);
  }
  function getRequestURL(url) {
    const anchor = getAnchor(url);
    return anchor != null ? url.href.slice(0, -(anchor.length + 1)) : url.href;
  }
  function toCacheKey(url) {
    return getRequestURL(url);
  }
  function urlsAreEqual(left, right) {
    return expandURL(left).href == expandURL(right).href;
  }
  function getPathComponents(url) {
    return url.pathname.split("/").slice(1);
  }
  function getLastPathComponent(url) {
    return getPathComponents(url).slice(-1)[0];
  }
  function getPrefix(url) {
    return addTrailingSlash(url.origin + url.pathname);
  }
  function addTrailingSlash(value) {
    return value.endsWith("/") ? value : value + "/";
  }
  var FetchResponse = class {
    constructor(response) {
      this.response = response;
    }
    get succeeded() {
      return this.response.ok;
    }
    get failed() {
      return !this.succeeded;
    }
    get clientError() {
      return this.statusCode >= 400 && this.statusCode <= 499;
    }
    get serverError() {
      return this.statusCode >= 500 && this.statusCode <= 599;
    }
    get redirected() {
      return this.response.redirected;
    }
    get location() {
      return expandURL(this.response.url);
    }
    get isHTML() {
      return this.contentType && this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/);
    }
    get statusCode() {
      return this.response.status;
    }
    get contentType() {
      return this.header("Content-Type");
    }
    get responseText() {
      return this.response.clone().text();
    }
    get responseHTML() {
      if (this.isHTML) {
        return this.response.clone().text();
      } else {
        return Promise.resolve(void 0);
      }
    }
    header(name) {
      return this.response.headers.get(name);
    }
  };
  function isAction(action) {
    return action == "advance" || action == "replace" || action == "restore";
  }
  function activateScriptElement(element) {
    if (element.getAttribute("data-turbo-eval") == "false") {
      return element;
    } else {
      const createdScriptElement = document.createElement("script");
      const cspNonce = getMetaContent("csp-nonce");
      if (cspNonce) {
        createdScriptElement.nonce = cspNonce;
      }
      createdScriptElement.textContent = element.textContent;
      createdScriptElement.async = false;
      copyElementAttributes(createdScriptElement, element);
      return createdScriptElement;
    }
  }
  function copyElementAttributes(destinationElement, sourceElement) {
    for (const { name, value } of sourceElement.attributes) {
      destinationElement.setAttribute(name, value);
    }
  }
  function createDocumentFragment(html) {
    const template = document.createElement("template");
    template.innerHTML = html;
    return template.content;
  }
  function dispatch(eventName, { target: target2, cancelable, detail } = {}) {
    const event = new CustomEvent(eventName, {
      cancelable,
      bubbles: true,
      detail
    });
    if (target2 && target2.isConnected) {
      target2.dispatchEvent(event);
    } else {
      document.documentElement.dispatchEvent(event);
    }
    return event;
  }
  function nextAnimationFrame() {
    return new Promise((resolve) => requestAnimationFrame(() => resolve()));
  }
  function nextEventLoopTick() {
    return new Promise((resolve) => setTimeout(() => resolve(), 0));
  }
  function nextMicrotask() {
    return Promise.resolve();
  }
  function parseHTMLDocument(html = "") {
    return new DOMParser().parseFromString(html, "text/html");
  }
  function unindent(strings, ...values) {
    const lines = interpolate(strings, values).replace(/^\n/, "").split("\n");
    const match = lines[0].match(/^\s+/);
    const indent = match ? match[0].length : 0;
    return lines.map((line) => line.slice(indent)).join("\n");
  }
  function interpolate(strings, values) {
    return strings.reduce((result, string, i) => {
      const value = values[i] == void 0 ? "" : values[i];
      return result + string + value;
    }, "");
  }
  function uuid() {
    return Array.from({ length: 36 }).map((_, i) => {
      if (i == 8 || i == 13 || i == 18 || i == 23) {
        return "-";
      } else if (i == 14) {
        return "4";
      } else if (i == 19) {
        return (Math.floor(Math.random() * 4) + 8).toString(16);
      } else {
        return Math.floor(Math.random() * 15).toString(16);
      }
    }).join("");
  }
  function getAttribute(attributeName, ...elements) {
    for (const value of elements.map((element) => element === null || element === void 0 ? void 0 : element.getAttribute(attributeName))) {
      if (typeof value == "string")
        return value;
    }
    return null;
  }
  function hasAttribute(attributeName, ...elements) {
    return elements.some((element) => element && element.hasAttribute(attributeName));
  }
  function markAsBusy(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.setAttribute("busy", "");
      }
      element.setAttribute("aria-busy", "true");
    }
  }
  function clearBusyState(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.removeAttribute("busy");
      }
      element.removeAttribute("aria-busy");
    }
  }
  function waitForLoad(element, timeoutInMilliseconds = 2e3) {
    return new Promise((resolve) => {
      const onComplete = () => {
        element.removeEventListener("error", onComplete);
        element.removeEventListener("load", onComplete);
        resolve();
      };
      element.addEventListener("load", onComplete, { once: true });
      element.addEventListener("error", onComplete, { once: true });
      setTimeout(resolve, timeoutInMilliseconds);
    });
  }
  function getHistoryMethodForAction(action) {
    switch (action) {
      case "replace":
        return history.replaceState;
      case "advance":
      case "restore":
        return history.pushState;
    }
  }
  function getVisitAction(...elements) {
    const action = getAttribute("data-turbo-action", ...elements);
    return isAction(action) ? action : null;
  }
  function getMetaElement(name) {
    return document.querySelector(`meta[name="${name}"]`);
  }
  function getMetaContent(name) {
    const element = getMetaElement(name);
    return element && element.content;
  }
  function setMetaContent(name, content) {
    let element = getMetaElement(name);
    if (!element) {
      element = document.createElement("meta");
      element.setAttribute("name", name);
      document.head.appendChild(element);
    }
    element.setAttribute("content", content);
    return element;
  }
  var FetchMethod;
  (function(FetchMethod2) {
    FetchMethod2[FetchMethod2["get"] = 0] = "get";
    FetchMethod2[FetchMethod2["post"] = 1] = "post";
    FetchMethod2[FetchMethod2["put"] = 2] = "put";
    FetchMethod2[FetchMethod2["patch"] = 3] = "patch";
    FetchMethod2[FetchMethod2["delete"] = 4] = "delete";
  })(FetchMethod || (FetchMethod = {}));
  function fetchMethodFromString(method) {
    switch (method.toLowerCase()) {
      case "get":
        return FetchMethod.get;
      case "post":
        return FetchMethod.post;
      case "put":
        return FetchMethod.put;
      case "patch":
        return FetchMethod.patch;
      case "delete":
        return FetchMethod.delete;
    }
  }
  var FetchRequest = class {
    constructor(delegate, method, location2, body = new URLSearchParams(), target2 = null) {
      this.abortController = new AbortController();
      this.resolveRequestPromise = (_value) => {
      };
      this.delegate = delegate;
      this.method = method;
      this.headers = this.defaultHeaders;
      this.body = body;
      this.url = location2;
      this.target = target2;
    }
    get location() {
      return this.url;
    }
    get params() {
      return this.url.searchParams;
    }
    get entries() {
      return this.body ? Array.from(this.body.entries()) : [];
    }
    cancel() {
      this.abortController.abort();
    }
    async perform() {
      var _a, _b;
      const { fetchOptions } = this;
      (_b = (_a = this.delegate).prepareHeadersForRequest) === null || _b === void 0 ? void 0 : _b.call(_a, this.headers, this);
      await this.allowRequestToBeIntercepted(fetchOptions);
      try {
        this.delegate.requestStarted(this);
        const response = await fetch(this.url.href, fetchOptions);
        return await this.receive(response);
      } catch (error2) {
        if (error2.name !== "AbortError") {
          if (this.willDelegateErrorHandling(error2)) {
            this.delegate.requestErrored(this, error2);
          }
          throw error2;
        }
      } finally {
        this.delegate.requestFinished(this);
      }
    }
    async receive(response) {
      const fetchResponse = new FetchResponse(response);
      const event = dispatch("turbo:before-fetch-response", {
        cancelable: true,
        detail: { fetchResponse },
        target: this.target
      });
      if (event.defaultPrevented) {
        this.delegate.requestPreventedHandlingResponse(this, fetchResponse);
      } else if (fetchResponse.succeeded) {
        this.delegate.requestSucceededWithResponse(this, fetchResponse);
      } else {
        this.delegate.requestFailedWithResponse(this, fetchResponse);
      }
      return fetchResponse;
    }
    get fetchOptions() {
      var _a;
      return {
        method: FetchMethod[this.method].toUpperCase(),
        credentials: "same-origin",
        headers: this.headers,
        redirect: "follow",
        body: this.isIdempotent ? null : this.body,
        signal: this.abortSignal,
        referrer: (_a = this.delegate.referrer) === null || _a === void 0 ? void 0 : _a.href
      };
    }
    get defaultHeaders() {
      return {
        Accept: "text/html, application/xhtml+xml"
      };
    }
    get isIdempotent() {
      return this.method == FetchMethod.get;
    }
    get abortSignal() {
      return this.abortController.signal;
    }
    acceptResponseType(mimeType) {
      this.headers["Accept"] = [mimeType, this.headers["Accept"]].join(", ");
    }
    async allowRequestToBeIntercepted(fetchOptions) {
      const requestInterception = new Promise((resolve) => this.resolveRequestPromise = resolve);
      const event = dispatch("turbo:before-fetch-request", {
        cancelable: true,
        detail: {
          fetchOptions,
          url: this.url,
          resume: this.resolveRequestPromise
        },
        target: this.target
      });
      if (event.defaultPrevented)
        await requestInterception;
    }
    willDelegateErrorHandling(error2) {
      const event = dispatch("turbo:fetch-request-error", {
        target: this.target,
        cancelable: true,
        detail: { request: this, error: error2 }
      });
      return !event.defaultPrevented;
    }
  };
  var AppearanceObserver = class {
    constructor(delegate, element) {
      this.started = false;
      this.intersect = (entries) => {
        const lastEntry = entries.slice(-1)[0];
        if (lastEntry === null || lastEntry === void 0 ? void 0 : lastEntry.isIntersecting) {
          this.delegate.elementAppearedInViewport(this.element);
        }
      };
      this.delegate = delegate;
      this.element = element;
      this.intersectionObserver = new IntersectionObserver(this.intersect);
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.intersectionObserver.observe(this.element);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.intersectionObserver.unobserve(this.element);
      }
    }
  };
  var StreamMessage = class {
    constructor(fragment) {
      this.fragment = importStreamElements(fragment);
    }
    static wrap(message) {
      if (typeof message == "string") {
        return new this(createDocumentFragment(message));
      } else {
        return message;
      }
    }
  };
  StreamMessage.contentType = "text/vnd.turbo-stream.html";
  function importStreamElements(fragment) {
    for (const element of fragment.querySelectorAll("turbo-stream")) {
      const streamElement = document.importNode(element, true);
      for (const inertScriptElement of streamElement.templateElement.content.querySelectorAll("script")) {
        inertScriptElement.replaceWith(activateScriptElement(inertScriptElement));
      }
      element.replaceWith(streamElement);
    }
    return fragment;
  }
  var FormSubmissionState;
  (function(FormSubmissionState2) {
    FormSubmissionState2[FormSubmissionState2["initialized"] = 0] = "initialized";
    FormSubmissionState2[FormSubmissionState2["requesting"] = 1] = "requesting";
    FormSubmissionState2[FormSubmissionState2["waiting"] = 2] = "waiting";
    FormSubmissionState2[FormSubmissionState2["receiving"] = 3] = "receiving";
    FormSubmissionState2[FormSubmissionState2["stopping"] = 4] = "stopping";
    FormSubmissionState2[FormSubmissionState2["stopped"] = 5] = "stopped";
  })(FormSubmissionState || (FormSubmissionState = {}));
  var FormEnctype;
  (function(FormEnctype2) {
    FormEnctype2["urlEncoded"] = "application/x-www-form-urlencoded";
    FormEnctype2["multipart"] = "multipart/form-data";
    FormEnctype2["plain"] = "text/plain";
  })(FormEnctype || (FormEnctype = {}));
  function formEnctypeFromString(encoding) {
    switch (encoding.toLowerCase()) {
      case FormEnctype.multipart:
        return FormEnctype.multipart;
      case FormEnctype.plain:
        return FormEnctype.plain;
      default:
        return FormEnctype.urlEncoded;
    }
  }
  var FormSubmission = class {
    constructor(delegate, formElement, submitter, mustRedirect = false) {
      this.state = FormSubmissionState.initialized;
      this.delegate = delegate;
      this.formElement = formElement;
      this.submitter = submitter;
      this.formData = buildFormData(formElement, submitter);
      this.location = expandURL(this.action);
      if (this.method == FetchMethod.get) {
        mergeFormDataEntries(this.location, [...this.body.entries()]);
      }
      this.fetchRequest = new FetchRequest(this, this.method, this.location, this.body, this.formElement);
      this.mustRedirect = mustRedirect;
    }
    static confirmMethod(message, _element, _submitter) {
      return Promise.resolve(confirm(message));
    }
    get method() {
      var _a;
      const method = ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formmethod")) || this.formElement.getAttribute("method") || "";
      return fetchMethodFromString(method.toLowerCase()) || FetchMethod.get;
    }
    get action() {
      var _a;
      const formElementAction = typeof this.formElement.action === "string" ? this.formElement.action : null;
      if ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.hasAttribute("formaction")) {
        return this.submitter.getAttribute("formaction") || "";
      } else {
        return this.formElement.getAttribute("action") || formElementAction || "";
      }
    }
    get body() {
      if (this.enctype == FormEnctype.urlEncoded || this.method == FetchMethod.get) {
        return new URLSearchParams(this.stringFormData);
      } else {
        return this.formData;
      }
    }
    get enctype() {
      var _a;
      return formEnctypeFromString(((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formenctype")) || this.formElement.enctype);
    }
    get isIdempotent() {
      return this.fetchRequest.isIdempotent;
    }
    get stringFormData() {
      return [...this.formData].reduce((entries, [name, value]) => {
        return entries.concat(typeof value == "string" ? [[name, value]] : []);
      }, []);
    }
    async start() {
      const { initialized, requesting } = FormSubmissionState;
      const confirmationMessage = getAttribute("data-turbo-confirm", this.submitter, this.formElement);
      if (typeof confirmationMessage === "string") {
        const answer = await FormSubmission.confirmMethod(confirmationMessage, this.formElement, this.submitter);
        if (!answer) {
          return;
        }
      }
      if (this.state == initialized) {
        this.state = requesting;
        return this.fetchRequest.perform();
      }
    }
    stop() {
      const { stopping, stopped } = FormSubmissionState;
      if (this.state != stopping && this.state != stopped) {
        this.state = stopping;
        this.fetchRequest.cancel();
        return true;
      }
    }
    prepareHeadersForRequest(headers, request) {
      if (!request.isIdempotent) {
        const token = getCookieValue(getMetaContent("csrf-param")) || getMetaContent("csrf-token");
        if (token) {
          headers["X-CSRF-Token"] = token;
        }
      }
      if (this.requestAcceptsTurboStreamResponse(request)) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      var _a;
      this.state = FormSubmissionState.waiting;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.setAttribute("disabled", "");
      dispatch("turbo:submit-start", {
        target: this.formElement,
        detail: { formSubmission: this }
      });
      this.delegate.formSubmissionStarted(this);
    }
    requestPreventedHandlingResponse(request, response) {
      this.result = { success: response.succeeded, fetchResponse: response };
    }
    requestSucceededWithResponse(request, response) {
      if (response.clientError || response.serverError) {
        this.delegate.formSubmissionFailedWithResponse(this, response);
      } else if (this.requestMustRedirect(request) && responseSucceededWithoutRedirect(response)) {
        const error2 = new Error("Form responses must redirect to another location");
        this.delegate.formSubmissionErrored(this, error2);
      } else {
        this.state = FormSubmissionState.receiving;
        this.result = { success: true, fetchResponse: response };
        this.delegate.formSubmissionSucceededWithResponse(this, response);
      }
    }
    requestFailedWithResponse(request, response) {
      this.result = { success: false, fetchResponse: response };
      this.delegate.formSubmissionFailedWithResponse(this, response);
    }
    requestErrored(request, error2) {
      this.result = { success: false, error: error2 };
      this.delegate.formSubmissionErrored(this, error2);
    }
    requestFinished(_request) {
      var _a;
      this.state = FormSubmissionState.stopped;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.removeAttribute("disabled");
      dispatch("turbo:submit-end", {
        target: this.formElement,
        detail: Object.assign({ formSubmission: this }, this.result)
      });
      this.delegate.formSubmissionFinished(this);
    }
    requestMustRedirect(request) {
      return !request.isIdempotent && this.mustRedirect;
    }
    requestAcceptsTurboStreamResponse(request) {
      return !request.isIdempotent || hasAttribute("data-turbo-stream", this.submitter, this.formElement);
    }
  };
  function buildFormData(formElement, submitter) {
    const formData = new FormData(formElement);
    const name = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("name");
    const value = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("value");
    if (name) {
      formData.append(name, value || "");
    }
    return formData;
  }
  function getCookieValue(cookieName) {
    if (cookieName != null) {
      const cookies = document.cookie ? document.cookie.split("; ") : [];
      const cookie = cookies.find((cookie2) => cookie2.startsWith(cookieName));
      if (cookie) {
        const value = cookie.split("=").slice(1).join("=");
        return value ? decodeURIComponent(value) : void 0;
      }
    }
  }
  function responseSucceededWithoutRedirect(response) {
    return response.statusCode == 200 && !response.redirected;
  }
  function mergeFormDataEntries(url, entries) {
    const searchParams = new URLSearchParams();
    for (const [name, value] of entries) {
      if (value instanceof File)
        continue;
      searchParams.append(name, value);
    }
    url.search = searchParams.toString();
    return url;
  }
  var Snapshot = class {
    constructor(element) {
      this.element = element;
    }
    get activeElement() {
      return this.element.ownerDocument.activeElement;
    }
    get children() {
      return [...this.element.children];
    }
    hasAnchor(anchor) {
      return this.getElementForAnchor(anchor) != null;
    }
    getElementForAnchor(anchor) {
      return anchor ? this.element.querySelector(`[id='${anchor}'], a[name='${anchor}']`) : null;
    }
    get isConnected() {
      return this.element.isConnected;
    }
    get firstAutofocusableElement() {
      const inertDisabledOrHidden = "[inert], :disabled, [hidden], details:not([open]), dialog:not([open])";
      for (const element of this.element.querySelectorAll("[autofocus]")) {
        if (element.closest(inertDisabledOrHidden) == null)
          return element;
        else
          continue;
      }
      return null;
    }
    get permanentElements() {
      return queryPermanentElementsAll(this.element);
    }
    getPermanentElementById(id) {
      return getPermanentElementById(this.element, id);
    }
    getPermanentElementMapForSnapshot(snapshot) {
      const permanentElementMap = {};
      for (const currentPermanentElement of this.permanentElements) {
        const { id } = currentPermanentElement;
        const newPermanentElement = snapshot.getPermanentElementById(id);
        if (newPermanentElement) {
          permanentElementMap[id] = [currentPermanentElement, newPermanentElement];
        }
      }
      return permanentElementMap;
    }
  };
  function getPermanentElementById(node, id) {
    return node.querySelector(`#${id}[data-turbo-permanent]`);
  }
  function queryPermanentElementsAll(node) {
    return node.querySelectorAll("[id][data-turbo-permanent]");
  }
  var FormSubmitObserver = class {
    constructor(delegate, eventTarget) {
      this.started = false;
      this.submitCaptured = () => {
        this.eventTarget.removeEventListener("submit", this.submitBubbled, false);
        this.eventTarget.addEventListener("submit", this.submitBubbled, false);
      };
      this.submitBubbled = (event) => {
        if (!event.defaultPrevented) {
          const form = event.target instanceof HTMLFormElement ? event.target : void 0;
          const submitter = event.submitter || void 0;
          if (form && submissionDoesNotDismissDialog(form, submitter) && submissionDoesNotTargetIFrame(form, submitter) && this.delegate.willSubmitForm(form, submitter)) {
            event.preventDefault();
            event.stopImmediatePropagation();
            this.delegate.formSubmitted(form, submitter);
          }
        }
      };
      this.delegate = delegate;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("submit", this.submitCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("submit", this.submitCaptured, true);
        this.started = false;
      }
    }
  };
  function submissionDoesNotDismissDialog(form, submitter) {
    const method = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formmethod")) || form.getAttribute("method");
    return method != "dialog";
  }
  function submissionDoesNotTargetIFrame(form, submitter) {
    const target2 = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formtarget")) || form.target;
    for (const element of document.getElementsByName(target2)) {
      if (element instanceof HTMLIFrameElement)
        return false;
    }
    return true;
  }
  var View = class {
    constructor(delegate, element) {
      this.resolveRenderPromise = (_value) => {
      };
      this.resolveInterceptionPromise = (_value) => {
      };
      this.delegate = delegate;
      this.element = element;
    }
    scrollToAnchor(anchor) {
      const element = this.snapshot.getElementForAnchor(anchor);
      if (element) {
        this.scrollToElement(element);
        this.focusElement(element);
      } else {
        this.scrollToPosition({ x: 0, y: 0 });
      }
    }
    scrollToAnchorFromLocation(location2) {
      this.scrollToAnchor(getAnchor(location2));
    }
    scrollToElement(element) {
      element.scrollIntoView();
    }
    focusElement(element) {
      if (element instanceof HTMLElement) {
        if (element.hasAttribute("tabindex")) {
          element.focus();
        } else {
          element.setAttribute("tabindex", "-1");
          element.focus();
          element.removeAttribute("tabindex");
        }
      }
    }
    scrollToPosition({ x, y }) {
      this.scrollRoot.scrollTo(x, y);
    }
    scrollToTop() {
      this.scrollToPosition({ x: 0, y: 0 });
    }
    get scrollRoot() {
      return window;
    }
    async render(renderer) {
      const { isPreview, shouldRender, newSnapshot: snapshot } = renderer;
      if (shouldRender) {
        try {
          this.renderPromise = new Promise((resolve) => this.resolveRenderPromise = resolve);
          this.renderer = renderer;
          await this.prepareToRenderSnapshot(renderer);
          const renderInterception = new Promise((resolve) => this.resolveInterceptionPromise = resolve);
          const options = { resume: this.resolveInterceptionPromise, render: this.renderer.renderElement };
          const immediateRender = this.delegate.allowsImmediateRender(snapshot, options);
          if (!immediateRender)
            await renderInterception;
          await this.renderSnapshot(renderer);
          this.delegate.viewRenderedSnapshot(snapshot, isPreview);
          this.delegate.preloadOnLoadLinksForView(this.element);
          this.finishRenderingSnapshot(renderer);
        } finally {
          delete this.renderer;
          this.resolveRenderPromise(void 0);
          delete this.renderPromise;
        }
      } else {
        this.invalidate(renderer.reloadReason);
      }
    }
    invalidate(reason) {
      this.delegate.viewInvalidated(reason);
    }
    async prepareToRenderSnapshot(renderer) {
      this.markAsPreview(renderer.isPreview);
      await renderer.prepareToRender();
    }
    markAsPreview(isPreview) {
      if (isPreview) {
        this.element.setAttribute("data-turbo-preview", "");
      } else {
        this.element.removeAttribute("data-turbo-preview");
      }
    }
    async renderSnapshot(renderer) {
      await renderer.render();
    }
    finishRenderingSnapshot(renderer) {
      renderer.finishRendering();
    }
  };
  var FrameView = class extends View {
    invalidate() {
      this.element.innerHTML = "";
    }
    get snapshot() {
      return new Snapshot(this.element);
    }
  };
  var LinkInterceptor = class {
    constructor(delegate, element) {
      this.clickBubbled = (event) => {
        if (this.respondsToEventTarget(event.target)) {
          this.clickEvent = event;
        } else {
          delete this.clickEvent;
        }
      };
      this.linkClicked = (event) => {
        if (this.clickEvent && this.respondsToEventTarget(event.target) && event.target instanceof Element) {
          if (this.delegate.shouldInterceptLinkClick(event.target, event.detail.url, event.detail.originalEvent)) {
            this.clickEvent.preventDefault();
            event.preventDefault();
            this.delegate.linkClickIntercepted(event.target, event.detail.url, event.detail.originalEvent);
          }
        }
        delete this.clickEvent;
      };
      this.willVisit = (_event) => {
        delete this.clickEvent;
      };
      this.delegate = delegate;
      this.element = element;
    }
    start() {
      this.element.addEventListener("click", this.clickBubbled);
      document.addEventListener("turbo:click", this.linkClicked);
      document.addEventListener("turbo:before-visit", this.willVisit);
    }
    stop() {
      this.element.removeEventListener("click", this.clickBubbled);
      document.removeEventListener("turbo:click", this.linkClicked);
      document.removeEventListener("turbo:before-visit", this.willVisit);
    }
    respondsToEventTarget(target2) {
      const element = target2 instanceof Element ? target2 : target2 instanceof Node ? target2.parentElement : null;
      return element && element.closest("turbo-frame, html") == this.element;
    }
  };
  var LinkClickObserver = class {
    constructor(delegate, eventTarget) {
      this.started = false;
      this.clickCaptured = () => {
        this.eventTarget.removeEventListener("click", this.clickBubbled, false);
        this.eventTarget.addEventListener("click", this.clickBubbled, false);
      };
      this.clickBubbled = (event) => {
        if (event instanceof MouseEvent && this.clickEventIsSignificant(event)) {
          const target2 = event.composedPath && event.composedPath()[0] || event.target;
          const link = this.findLinkFromClickTarget(target2);
          if (link && doesNotTargetIFrame(link)) {
            const location2 = this.getLocationForLink(link);
            if (this.delegate.willFollowLinkToLocation(link, location2, event)) {
              event.preventDefault();
              this.delegate.followedLinkToLocation(link, location2);
            }
          }
        }
      };
      this.delegate = delegate;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("click", this.clickCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("click", this.clickCaptured, true);
        this.started = false;
      }
    }
    clickEventIsSignificant(event) {
      return !(event.target && event.target.isContentEditable || event.defaultPrevented || event.which > 1 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey);
    }
    findLinkFromClickTarget(target2) {
      if (target2 instanceof Element) {
        return target2.closest("a[href]:not([target^=_]):not([download])");
      }
    }
    getLocationForLink(link) {
      return expandURL(link.getAttribute("href") || "");
    }
  };
  function doesNotTargetIFrame(anchor) {
    for (const element of document.getElementsByName(anchor.target)) {
      if (element instanceof HTMLIFrameElement)
        return false;
    }
    return true;
  }
  var FormLinkClickObserver = class {
    constructor(delegate, element) {
      this.delegate = delegate;
      this.linkInterceptor = new LinkClickObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
    }
    stop() {
      this.linkInterceptor.stop();
    }
    willFollowLinkToLocation(link, location2, originalEvent) {
      return this.delegate.willSubmitFormLinkToLocation(link, location2, originalEvent) && link.hasAttribute("data-turbo-method");
    }
    followedLinkToLocation(link, location2) {
      const action = location2.href;
      const form = document.createElement("form");
      form.setAttribute("data-turbo", "true");
      form.setAttribute("action", action);
      form.setAttribute("hidden", "");
      const method = link.getAttribute("data-turbo-method");
      if (method)
        form.setAttribute("method", method);
      const turboFrame = link.getAttribute("data-turbo-frame");
      if (turboFrame)
        form.setAttribute("data-turbo-frame", turboFrame);
      const turboAction = link.getAttribute("data-turbo-action");
      if (turboAction)
        form.setAttribute("data-turbo-action", turboAction);
      const turboConfirm = link.getAttribute("data-turbo-confirm");
      if (turboConfirm)
        form.setAttribute("data-turbo-confirm", turboConfirm);
      const turboStream = link.hasAttribute("data-turbo-stream");
      if (turboStream)
        form.setAttribute("data-turbo-stream", "");
      this.delegate.submittedFormLinkToLocation(link, location2, form);
      document.body.appendChild(form);
      form.addEventListener("turbo:submit-end", () => form.remove(), { once: true });
      requestAnimationFrame(() => form.requestSubmit());
    }
  };
  var Bardo = class {
    constructor(delegate, permanentElementMap) {
      this.delegate = delegate;
      this.permanentElementMap = permanentElementMap;
    }
    static preservingPermanentElements(delegate, permanentElementMap, callback) {
      const bardo = new this(delegate, permanentElementMap);
      bardo.enter();
      callback();
      bardo.leave();
    }
    enter() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement, newPermanentElement] = this.permanentElementMap[id];
        this.delegate.enteringBardo(currentPermanentElement, newPermanentElement);
        this.replaceNewPermanentElementWithPlaceholder(newPermanentElement);
      }
    }
    leave() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement] = this.permanentElementMap[id];
        this.replaceCurrentPermanentElementWithClone(currentPermanentElement);
        this.replacePlaceholderWithPermanentElement(currentPermanentElement);
        this.delegate.leavingBardo(currentPermanentElement);
      }
    }
    replaceNewPermanentElementWithPlaceholder(permanentElement) {
      const placeholder2 = createPlaceholderForPermanentElement(permanentElement);
      permanentElement.replaceWith(placeholder2);
    }
    replaceCurrentPermanentElementWithClone(permanentElement) {
      const clone = permanentElement.cloneNode(true);
      permanentElement.replaceWith(clone);
    }
    replacePlaceholderWithPermanentElement(permanentElement) {
      const placeholder2 = this.getPlaceholderById(permanentElement.id);
      placeholder2 === null || placeholder2 === void 0 ? void 0 : placeholder2.replaceWith(permanentElement);
    }
    getPlaceholderById(id) {
      return this.placeholders.find((element) => element.content == id);
    }
    get placeholders() {
      return [...document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]")];
    }
  };
  function createPlaceholderForPermanentElement(permanentElement) {
    const element = document.createElement("meta");
    element.setAttribute("name", "turbo-permanent-placeholder");
    element.setAttribute("content", permanentElement.id);
    return element;
  }
  var Renderer = class {
    constructor(currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      this.activeElement = null;
      this.currentSnapshot = currentSnapshot;
      this.newSnapshot = newSnapshot;
      this.isPreview = isPreview;
      this.willRender = willRender;
      this.renderElement = renderElement;
      this.promise = new Promise((resolve, reject) => this.resolvingFunctions = { resolve, reject });
    }
    get shouldRender() {
      return true;
    }
    get reloadReason() {
      return;
    }
    prepareToRender() {
      return;
    }
    finishRendering() {
      if (this.resolvingFunctions) {
        this.resolvingFunctions.resolve();
        delete this.resolvingFunctions;
      }
    }
    preservingPermanentElements(callback) {
      Bardo.preservingPermanentElements(this, this.permanentElementMap, callback);
    }
    focusFirstAutofocusableElement() {
      const element = this.connectedSnapshot.firstAutofocusableElement;
      if (elementIsFocusable(element)) {
        element.focus();
      }
    }
    enteringBardo(currentPermanentElement) {
      if (this.activeElement)
        return;
      if (currentPermanentElement.contains(this.currentSnapshot.activeElement)) {
        this.activeElement = this.currentSnapshot.activeElement;
      }
    }
    leavingBardo(currentPermanentElement) {
      if (currentPermanentElement.contains(this.activeElement) && this.activeElement instanceof HTMLElement) {
        this.activeElement.focus();
        this.activeElement = null;
      }
    }
    get connectedSnapshot() {
      return this.newSnapshot.isConnected ? this.newSnapshot : this.currentSnapshot;
    }
    get currentElement() {
      return this.currentSnapshot.element;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    get permanentElementMap() {
      return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot);
    }
  };
  function elementIsFocusable(element) {
    return element && typeof element.focus == "function";
  }
  var FrameRenderer = class extends Renderer {
    constructor(delegate, currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      super(currentSnapshot, newSnapshot, renderElement, isPreview, willRender);
      this.delegate = delegate;
    }
    static renderElement(currentElement, newElement) {
      var _a;
      const destinationRange = document.createRange();
      destinationRange.selectNodeContents(currentElement);
      destinationRange.deleteContents();
      const frameElement = newElement;
      const sourceRange = (_a = frameElement.ownerDocument) === null || _a === void 0 ? void 0 : _a.createRange();
      if (sourceRange) {
        sourceRange.selectNodeContents(frameElement);
        currentElement.appendChild(sourceRange.extractContents());
      }
    }
    get shouldRender() {
      return true;
    }
    async render() {
      await nextAnimationFrame();
      this.preservingPermanentElements(() => {
        this.loadFrameElement();
      });
      this.scrollFrameIntoView();
      await nextAnimationFrame();
      this.focusFirstAutofocusableElement();
      await nextAnimationFrame();
      this.activateScriptElements();
    }
    loadFrameElement() {
      this.delegate.willRenderFrame(this.currentElement, this.newElement);
      this.renderElement(this.currentElement, this.newElement);
    }
    scrollFrameIntoView() {
      if (this.currentElement.autoscroll || this.newElement.autoscroll) {
        const element = this.currentElement.firstElementChild;
        const block = readScrollLogicalPosition(this.currentElement.getAttribute("data-autoscroll-block"), "end");
        const behavior = readScrollBehavior(this.currentElement.getAttribute("data-autoscroll-behavior"), "auto");
        if (element) {
          element.scrollIntoView({ block, behavior });
          return true;
        }
      }
      return false;
    }
    activateScriptElements() {
      for (const inertScriptElement of this.newScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    get newScriptElements() {
      return this.currentElement.querySelectorAll("script");
    }
  };
  function readScrollLogicalPosition(value, defaultValue) {
    if (value == "end" || value == "start" || value == "center" || value == "nearest") {
      return value;
    } else {
      return defaultValue;
    }
  }
  function readScrollBehavior(value, defaultValue) {
    if (value == "auto" || value == "smooth") {
      return value;
    } else {
      return defaultValue;
    }
  }
  var ProgressBar = class {
    constructor() {
      this.hiding = false;
      this.value = 0;
      this.visible = false;
      this.trickle = () => {
        this.setValue(this.value + Math.random() / 100);
      };
      this.stylesheetElement = this.createStylesheetElement();
      this.progressElement = this.createProgressElement();
      this.installStylesheetElement();
      this.setValue(0);
    }
    static get defaultCSS() {
      return unindent`
      .turbo-progress-bar {
        position: fixed;
        display: block;
        top: 0;
        left: 0;
        height: 3px;
        background: #0076ff;
        z-index: 2147483647;
        transition:
          width ${ProgressBar.animationDuration}ms ease-out,
          opacity ${ProgressBar.animationDuration / 2}ms ${ProgressBar.animationDuration / 2}ms ease-in;
        transform: translate3d(0, 0, 0);
      }
    `;
    }
    show() {
      if (!this.visible) {
        this.visible = true;
        this.installProgressElement();
        this.startTrickling();
      }
    }
    hide() {
      if (this.visible && !this.hiding) {
        this.hiding = true;
        this.fadeProgressElement(() => {
          this.uninstallProgressElement();
          this.stopTrickling();
          this.visible = false;
          this.hiding = false;
        });
      }
    }
    setValue(value) {
      this.value = value;
      this.refresh();
    }
    installStylesheetElement() {
      document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
    }
    installProgressElement() {
      this.progressElement.style.width = "0";
      this.progressElement.style.opacity = "1";
      document.documentElement.insertBefore(this.progressElement, document.body);
      this.refresh();
    }
    fadeProgressElement(callback) {
      this.progressElement.style.opacity = "0";
      setTimeout(callback, ProgressBar.animationDuration * 1.5);
    }
    uninstallProgressElement() {
      if (this.progressElement.parentNode) {
        document.documentElement.removeChild(this.progressElement);
      }
    }
    startTrickling() {
      if (!this.trickleInterval) {
        this.trickleInterval = window.setInterval(this.trickle, ProgressBar.animationDuration);
      }
    }
    stopTrickling() {
      window.clearInterval(this.trickleInterval);
      delete this.trickleInterval;
    }
    refresh() {
      requestAnimationFrame(() => {
        this.progressElement.style.width = `${10 + this.value * 90}%`;
      });
    }
    createStylesheetElement() {
      const element = document.createElement("style");
      element.type = "text/css";
      element.textContent = ProgressBar.defaultCSS;
      if (this.cspNonce) {
        element.nonce = this.cspNonce;
      }
      return element;
    }
    createProgressElement() {
      const element = document.createElement("div");
      element.className = "turbo-progress-bar";
      return element;
    }
    get cspNonce() {
      return getMetaContent("csp-nonce");
    }
  };
  ProgressBar.animationDuration = 300;
  var HeadSnapshot = class extends Snapshot {
    constructor() {
      super(...arguments);
      this.detailsByOuterHTML = this.children.filter((element) => !elementIsNoscript(element)).map((element) => elementWithoutNonce(element)).reduce((result, element) => {
        const { outerHTML } = element;
        const details = outerHTML in result ? result[outerHTML] : {
          type: elementType(element),
          tracked: elementIsTracked(element),
          elements: []
        };
        return Object.assign(Object.assign({}, result), { [outerHTML]: Object.assign(Object.assign({}, details), { elements: [...details.elements, element] }) });
      }, {});
    }
    get trackedElementSignature() {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => this.detailsByOuterHTML[outerHTML].tracked).join("");
    }
    getScriptElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("script", snapshot);
    }
    getStylesheetElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("stylesheet", snapshot);
    }
    getElementsMatchingTypeNotInSnapshot(matchedType, snapshot) {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => !(outerHTML in snapshot.detailsByOuterHTML)).map((outerHTML) => this.detailsByOuterHTML[outerHTML]).filter(({ type }) => type == matchedType).map(({ elements: [element] }) => element);
    }
    get provisionalElements() {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { type, tracked, elements } = this.detailsByOuterHTML[outerHTML];
        if (type == null && !tracked) {
          return [...result, ...elements];
        } else if (elements.length > 1) {
          return [...result, ...elements.slice(1)];
        } else {
          return result;
        }
      }, []);
    }
    getMetaValue(name) {
      const element = this.findMetaElementByName(name);
      return element ? element.getAttribute("content") : null;
    }
    findMetaElementByName(name) {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { elements: [element] } = this.detailsByOuterHTML[outerHTML];
        return elementIsMetaElementWithName(element, name) ? element : result;
      }, void 0);
    }
  };
  function elementType(element) {
    if (elementIsScript(element)) {
      return "script";
    } else if (elementIsStylesheet(element)) {
      return "stylesheet";
    }
  }
  function elementIsTracked(element) {
    return element.getAttribute("data-turbo-track") == "reload";
  }
  function elementIsScript(element) {
    const tagName2 = element.localName;
    return tagName2 == "script";
  }
  function elementIsNoscript(element) {
    const tagName2 = element.localName;
    return tagName2 == "noscript";
  }
  function elementIsStylesheet(element) {
    const tagName2 = element.localName;
    return tagName2 == "style" || tagName2 == "link" && element.getAttribute("rel") == "stylesheet";
  }
  function elementIsMetaElementWithName(element, name) {
    const tagName2 = element.localName;
    return tagName2 == "meta" && element.getAttribute("name") == name;
  }
  function elementWithoutNonce(element) {
    if (element.hasAttribute("nonce")) {
      element.setAttribute("nonce", "");
    }
    return element;
  }
  var PageSnapshot = class extends Snapshot {
    constructor(element, headSnapshot) {
      super(element);
      this.headSnapshot = headSnapshot;
    }
    static fromHTMLString(html = "") {
      return this.fromDocument(parseHTMLDocument(html));
    }
    static fromElement(element) {
      return this.fromDocument(element.ownerDocument);
    }
    static fromDocument({ head, body }) {
      return new this(body, new HeadSnapshot(head));
    }
    clone() {
      const clonedElement = this.element.cloneNode(true);
      const selectElements = this.element.querySelectorAll("select");
      const clonedSelectElements = clonedElement.querySelectorAll("select");
      for (const [index2, source] of selectElements.entries()) {
        const clone = clonedSelectElements[index2];
        for (const option of clone.selectedOptions)
          option.selected = false;
        for (const option of source.selectedOptions)
          clone.options[option.index].selected = true;
      }
      for (const clonedPasswordInput of clonedElement.querySelectorAll('input[type="password"]')) {
        clonedPasswordInput.value = "";
      }
      return new PageSnapshot(clonedElement, this.headSnapshot);
    }
    get headElement() {
      return this.headSnapshot.element;
    }
    get rootLocation() {
      var _a;
      const root = (_a = this.getSetting("root")) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    get cacheControlValue() {
      return this.getSetting("cache-control");
    }
    get isPreviewable() {
      return this.cacheControlValue != "no-preview";
    }
    get isCacheable() {
      return this.cacheControlValue != "no-cache";
    }
    get isVisitable() {
      return this.getSetting("visit-control") != "reload";
    }
    getSetting(name) {
      return this.headSnapshot.getMetaValue(`turbo-${name}`);
    }
  };
  var TimingMetric;
  (function(TimingMetric2) {
    TimingMetric2["visitStart"] = "visitStart";
    TimingMetric2["requestStart"] = "requestStart";
    TimingMetric2["requestEnd"] = "requestEnd";
    TimingMetric2["visitEnd"] = "visitEnd";
  })(TimingMetric || (TimingMetric = {}));
  var VisitState;
  (function(VisitState2) {
    VisitState2["initialized"] = "initialized";
    VisitState2["started"] = "started";
    VisitState2["canceled"] = "canceled";
    VisitState2["failed"] = "failed";
    VisitState2["completed"] = "completed";
  })(VisitState || (VisitState = {}));
  var defaultOptions = {
    action: "advance",
    historyChanged: false,
    visitCachedSnapshot: () => {
    },
    willRender: true,
    updateHistory: true,
    shouldCacheSnapshot: true,
    acceptsStreamResponse: false
  };
  var SystemStatusCode;
  (function(SystemStatusCode2) {
    SystemStatusCode2[SystemStatusCode2["networkFailure"] = 0] = "networkFailure";
    SystemStatusCode2[SystemStatusCode2["timeoutFailure"] = -1] = "timeoutFailure";
    SystemStatusCode2[SystemStatusCode2["contentTypeMismatch"] = -2] = "contentTypeMismatch";
  })(SystemStatusCode || (SystemStatusCode = {}));
  var Visit = class {
    constructor(delegate, location2, restorationIdentifier, options = {}) {
      this.identifier = uuid();
      this.timingMetrics = {};
      this.followedRedirect = false;
      this.historyChanged = false;
      this.scrolled = false;
      this.shouldCacheSnapshot = true;
      this.acceptsStreamResponse = false;
      this.snapshotCached = false;
      this.state = VisitState.initialized;
      this.delegate = delegate;
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier || uuid();
      const { action, historyChanged, referrer, snapshot, snapshotHTML, response, visitCachedSnapshot, willRender, updateHistory, shouldCacheSnapshot, acceptsStreamResponse } = Object.assign(Object.assign({}, defaultOptions), options);
      this.action = action;
      this.historyChanged = historyChanged;
      this.referrer = referrer;
      this.snapshot = snapshot;
      this.snapshotHTML = snapshotHTML;
      this.response = response;
      this.isSamePage = this.delegate.locationWithActionIsSamePage(this.location, this.action);
      this.visitCachedSnapshot = visitCachedSnapshot;
      this.willRender = willRender;
      this.updateHistory = updateHistory;
      this.scrolled = !willRender;
      this.shouldCacheSnapshot = shouldCacheSnapshot;
      this.acceptsStreamResponse = acceptsStreamResponse;
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    get restorationData() {
      return this.history.getRestorationDataForIdentifier(this.restorationIdentifier);
    }
    get silent() {
      return this.isSamePage;
    }
    start() {
      if (this.state == VisitState.initialized) {
        this.recordTimingMetric(TimingMetric.visitStart);
        this.state = VisitState.started;
        this.adapter.visitStarted(this);
        this.delegate.visitStarted(this);
      }
    }
    cancel() {
      if (this.state == VisitState.started) {
        if (this.request) {
          this.request.cancel();
        }
        this.cancelRender();
        this.state = VisitState.canceled;
      }
    }
    complete() {
      if (this.state == VisitState.started) {
        this.recordTimingMetric(TimingMetric.visitEnd);
        this.state = VisitState.completed;
        this.followRedirect();
        if (!this.followedRedirect) {
          this.adapter.visitCompleted(this);
          this.delegate.visitCompleted(this);
        }
      }
    }
    fail() {
      if (this.state == VisitState.started) {
        this.state = VisitState.failed;
        this.adapter.visitFailed(this);
      }
    }
    changeHistory() {
      var _a;
      if (!this.historyChanged && this.updateHistory) {
        const actionForHistory = this.location.href === ((_a = this.referrer) === null || _a === void 0 ? void 0 : _a.href) ? "replace" : this.action;
        const method = getHistoryMethodForAction(actionForHistory);
        this.history.update(method, this.location, this.restorationIdentifier);
        this.historyChanged = true;
      }
    }
    issueRequest() {
      if (this.hasPreloadedResponse()) {
        this.simulateRequest();
      } else if (this.shouldIssueRequest() && !this.request) {
        this.request = new FetchRequest(this, FetchMethod.get, this.location);
        this.request.perform();
      }
    }
    simulateRequest() {
      if (this.response) {
        this.startRequest();
        this.recordResponse();
        this.finishRequest();
      }
    }
    startRequest() {
      this.recordTimingMetric(TimingMetric.requestStart);
      this.adapter.visitRequestStarted(this);
    }
    recordResponse(response = this.response) {
      this.response = response;
      if (response) {
        const { statusCode } = response;
        if (isSuccessful(statusCode)) {
          this.adapter.visitRequestCompleted(this);
        } else {
          this.adapter.visitRequestFailedWithStatusCode(this, statusCode);
        }
      }
    }
    finishRequest() {
      this.recordTimingMetric(TimingMetric.requestEnd);
      this.adapter.visitRequestFinished(this);
    }
    loadResponse() {
      if (this.response) {
        const { statusCode, responseHTML } = this.response;
        this.render(async () => {
          if (this.shouldCacheSnapshot)
            this.cacheSnapshot();
          if (this.view.renderPromise)
            await this.view.renderPromise;
          if (isSuccessful(statusCode) && responseHTML != null) {
            await this.view.renderPage(PageSnapshot.fromHTMLString(responseHTML), false, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            this.complete();
          } else {
            await this.view.renderError(PageSnapshot.fromHTMLString(responseHTML), this);
            this.adapter.visitRendered(this);
            this.fail();
          }
        });
      }
    }
    getCachedSnapshot() {
      const snapshot = this.view.getCachedSnapshotForLocation(this.location) || this.getPreloadedSnapshot();
      if (snapshot && (!getAnchor(this.location) || snapshot.hasAnchor(getAnchor(this.location)))) {
        if (this.action == "restore" || snapshot.isPreviewable) {
          return snapshot;
        }
      }
    }
    getPreloadedSnapshot() {
      if (this.snapshotHTML) {
        return PageSnapshot.fromHTMLString(this.snapshotHTML);
      }
    }
    hasCachedSnapshot() {
      return this.getCachedSnapshot() != null;
    }
    loadCachedSnapshot() {
      const snapshot = this.getCachedSnapshot();
      if (snapshot) {
        const isPreview = this.shouldIssueRequest();
        this.render(async () => {
          this.cacheSnapshot();
          if (this.isSamePage) {
            this.adapter.visitRendered(this);
          } else {
            if (this.view.renderPromise)
              await this.view.renderPromise;
            await this.view.renderPage(snapshot, isPreview, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            if (!isPreview) {
              this.complete();
            }
          }
        });
      }
    }
    followRedirect() {
      var _a;
      if (this.redirectedToLocation && !this.followedRedirect && ((_a = this.response) === null || _a === void 0 ? void 0 : _a.redirected)) {
        this.adapter.visitProposedToLocation(this.redirectedToLocation, {
          action: "replace",
          response: this.response
        });
        this.followedRedirect = true;
      }
    }
    goToSamePageAnchor() {
      if (this.isSamePage) {
        this.render(async () => {
          this.cacheSnapshot();
          this.performScroll();
          this.changeHistory();
          this.adapter.visitRendered(this);
        });
      }
    }
    prepareHeadersForRequest(headers, request) {
      if (this.acceptsStreamResponse) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted() {
      this.startRequest();
    }
    requestPreventedHandlingResponse(_request, _response) {
    }
    async requestSucceededWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.redirectedToLocation = response.redirected ? response.location : void 0;
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    async requestFailedWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    requestErrored(_request, _error) {
      this.recordResponse({
        statusCode: SystemStatusCode.networkFailure,
        redirected: false
      });
    }
    requestFinished() {
      this.finishRequest();
    }
    performScroll() {
      if (!this.scrolled && !this.view.forceReloaded) {
        if (this.action == "restore") {
          this.scrollToRestoredPosition() || this.scrollToAnchor() || this.view.scrollToTop();
        } else {
          this.scrollToAnchor() || this.view.scrollToTop();
        }
        if (this.isSamePage) {
          this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation, this.location);
        }
        this.scrolled = true;
      }
    }
    scrollToRestoredPosition() {
      const { scrollPosition } = this.restorationData;
      if (scrollPosition) {
        this.view.scrollToPosition(scrollPosition);
        return true;
      }
    }
    scrollToAnchor() {
      const anchor = getAnchor(this.location);
      if (anchor != null) {
        this.view.scrollToAnchor(anchor);
        return true;
      }
    }
    recordTimingMetric(metric) {
      this.timingMetrics[metric] = new Date().getTime();
    }
    getTimingMetrics() {
      return Object.assign({}, this.timingMetrics);
    }
    getHistoryMethodForAction(action) {
      switch (action) {
        case "replace":
          return history.replaceState;
        case "advance":
        case "restore":
          return history.pushState;
      }
    }
    hasPreloadedResponse() {
      return typeof this.response == "object";
    }
    shouldIssueRequest() {
      if (this.isSamePage) {
        return false;
      } else if (this.action == "restore") {
        return !this.hasCachedSnapshot();
      } else {
        return this.willRender;
      }
    }
    cacheSnapshot() {
      if (!this.snapshotCached) {
        this.view.cacheSnapshot(this.snapshot).then((snapshot) => snapshot && this.visitCachedSnapshot(snapshot));
        this.snapshotCached = true;
      }
    }
    async render(callback) {
      this.cancelRender();
      await new Promise((resolve) => {
        this.frame = requestAnimationFrame(() => resolve());
      });
      await callback();
      delete this.frame;
    }
    cancelRender() {
      if (this.frame) {
        cancelAnimationFrame(this.frame);
        delete this.frame;
      }
    }
  };
  function isSuccessful(statusCode) {
    return statusCode >= 200 && statusCode < 300;
  }
  var BrowserAdapter = class {
    constructor(session2) {
      this.progressBar = new ProgressBar();
      this.showProgressBar = () => {
        this.progressBar.show();
      };
      this.session = session2;
    }
    visitProposedToLocation(location2, options) {
      this.navigator.startVisit(location2, (options === null || options === void 0 ? void 0 : options.restorationIdentifier) || uuid(), options);
    }
    visitStarted(visit2) {
      this.location = visit2.location;
      visit2.loadCachedSnapshot();
      visit2.issueRequest();
      visit2.goToSamePageAnchor();
    }
    visitRequestStarted(visit2) {
      this.progressBar.setValue(0);
      if (visit2.hasCachedSnapshot() || visit2.action != "restore") {
        this.showVisitProgressBarAfterDelay();
      } else {
        this.showProgressBar();
      }
    }
    visitRequestCompleted(visit2) {
      visit2.loadResponse();
    }
    visitRequestFailedWithStatusCode(visit2, statusCode) {
      switch (statusCode) {
        case SystemStatusCode.networkFailure:
        case SystemStatusCode.timeoutFailure:
        case SystemStatusCode.contentTypeMismatch:
          return this.reload({
            reason: "request_failed",
            context: {
              statusCode
            }
          });
        default:
          return visit2.loadResponse();
      }
    }
    visitRequestFinished(_visit) {
      this.progressBar.setValue(1);
      this.hideVisitProgressBar();
    }
    visitCompleted(_visit) {
    }
    pageInvalidated(reason) {
      this.reload(reason);
    }
    visitFailed(_visit) {
    }
    visitRendered(_visit) {
    }
    formSubmissionStarted(_formSubmission) {
      this.progressBar.setValue(0);
      this.showFormProgressBarAfterDelay();
    }
    formSubmissionFinished(_formSubmission) {
      this.progressBar.setValue(1);
      this.hideFormProgressBar();
    }
    showVisitProgressBarAfterDelay() {
      this.visitProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
    }
    hideVisitProgressBar() {
      this.progressBar.hide();
      if (this.visitProgressBarTimeout != null) {
        window.clearTimeout(this.visitProgressBarTimeout);
        delete this.visitProgressBarTimeout;
      }
    }
    showFormProgressBarAfterDelay() {
      if (this.formProgressBarTimeout == null) {
        this.formProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
      }
    }
    hideFormProgressBar() {
      this.progressBar.hide();
      if (this.formProgressBarTimeout != null) {
        window.clearTimeout(this.formProgressBarTimeout);
        delete this.formProgressBarTimeout;
      }
    }
    reload(reason) {
      var _a;
      dispatch("turbo:reload", { detail: reason });
      window.location.href = ((_a = this.location) === null || _a === void 0 ? void 0 : _a.toString()) || window.location.href;
    }
    get navigator() {
      return this.session.navigator;
    }
  };
  var CacheObserver = class {
    constructor() {
      this.started = false;
      this.removeStaleElements = (_event) => {
        const staleElements = [...document.querySelectorAll('[data-turbo-cache="false"]')];
        for (const element of staleElements) {
          element.remove();
        }
      };
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-cache", this.removeStaleElements, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-cache", this.removeStaleElements, false);
      }
    }
  };
  var FrameRedirector = class {
    constructor(session2, element) {
      this.session = session2;
      this.element = element;
      this.linkInterceptor = new LinkInterceptor(this, element);
      this.formSubmitObserver = new FormSubmitObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
      this.formSubmitObserver.start();
    }
    stop() {
      this.linkInterceptor.stop();
      this.formSubmitObserver.stop();
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldRedirect(element);
    }
    linkClickIntercepted(element, url, event) {
      const frame = this.findFrameElement(element);
      if (frame) {
        frame.delegate.linkClickIntercepted(element, url, event);
      }
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == null && this.shouldSubmit(element, submitter) && this.shouldRedirect(element, submitter);
    }
    formSubmitted(element, submitter) {
      const frame = this.findFrameElement(element, submitter);
      if (frame) {
        frame.delegate.formSubmitted(element, submitter);
      }
    }
    shouldSubmit(form, submitter) {
      var _a;
      const action = getAction(form, submitter);
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const rootLocation = expandURL((_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/");
      return this.shouldRedirect(form, submitter) && locationIsVisitable(action, rootLocation);
    }
    shouldRedirect(element, submitter) {
      const isNavigatable = element instanceof HTMLFormElement ? this.session.submissionIsNavigatable(element, submitter) : this.session.elementIsNavigatable(element);
      if (isNavigatable) {
        const frame = this.findFrameElement(element, submitter);
        return frame ? frame != element.closest("turbo-frame") : false;
      } else {
        return false;
      }
    }
    findFrameElement(element, submitter) {
      const id = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("data-turbo-frame")) || element.getAttribute("data-turbo-frame");
      if (id && id != "_top") {
        const frame = this.element.querySelector(`#${id}:not([disabled])`);
        if (frame instanceof FrameElement) {
          return frame;
        }
      }
    }
  };
  var History = class {
    constructor(delegate) {
      this.restorationIdentifier = uuid();
      this.restorationData = {};
      this.started = false;
      this.pageLoaded = false;
      this.onPopState = (event) => {
        if (this.shouldHandlePopState()) {
          const { turbo } = event.state || {};
          if (turbo) {
            this.location = new URL(window.location.href);
            const { restorationIdentifier } = turbo;
            this.restorationIdentifier = restorationIdentifier;
            this.delegate.historyPoppedToLocationWithRestorationIdentifier(this.location, restorationIdentifier);
          }
        }
      };
      this.onPageLoad = async (_event) => {
        await nextMicrotask();
        this.pageLoaded = true;
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        addEventListener("popstate", this.onPopState, false);
        addEventListener("load", this.onPageLoad, false);
        this.started = true;
        this.replace(new URL(window.location.href));
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("popstate", this.onPopState, false);
        removeEventListener("load", this.onPageLoad, false);
        this.started = false;
      }
    }
    push(location2, restorationIdentifier) {
      this.update(history.pushState, location2, restorationIdentifier);
    }
    replace(location2, restorationIdentifier) {
      this.update(history.replaceState, location2, restorationIdentifier);
    }
    update(method, location2, restorationIdentifier = uuid()) {
      const state = { turbo: { restorationIdentifier } };
      method.call(history, state, "", location2.href);
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier;
    }
    getRestorationDataForIdentifier(restorationIdentifier) {
      return this.restorationData[restorationIdentifier] || {};
    }
    updateRestorationData(additionalData) {
      const { restorationIdentifier } = this;
      const restorationData = this.restorationData[restorationIdentifier];
      this.restorationData[restorationIdentifier] = Object.assign(Object.assign({}, restorationData), additionalData);
    }
    assumeControlOfScrollRestoration() {
      var _a;
      if (!this.previousScrollRestoration) {
        this.previousScrollRestoration = (_a = history.scrollRestoration) !== null && _a !== void 0 ? _a : "auto";
        history.scrollRestoration = "manual";
      }
    }
    relinquishControlOfScrollRestoration() {
      if (this.previousScrollRestoration) {
        history.scrollRestoration = this.previousScrollRestoration;
        delete this.previousScrollRestoration;
      }
    }
    shouldHandlePopState() {
      return this.pageIsLoaded();
    }
    pageIsLoaded() {
      return this.pageLoaded || document.readyState == "complete";
    }
  };
  var Navigator = class {
    constructor(delegate) {
      this.delegate = delegate;
    }
    proposeVisit(location2, options = {}) {
      if (this.delegate.allowsVisitingLocationWithAction(location2, options.action)) {
        if (locationIsVisitable(location2, this.view.snapshot.rootLocation)) {
          this.delegate.visitProposedToLocation(location2, options);
        } else {
          window.location.href = location2.toString();
        }
      }
    }
    startVisit(locatable, restorationIdentifier, options = {}) {
      this.stop();
      this.currentVisit = new Visit(this, expandURL(locatable), restorationIdentifier, Object.assign({ referrer: this.location }, options));
      this.currentVisit.start();
    }
    submitForm(form, submitter) {
      this.stop();
      this.formSubmission = new FormSubmission(this, form, submitter, true);
      this.formSubmission.start();
    }
    stop() {
      if (this.formSubmission) {
        this.formSubmission.stop();
        delete this.formSubmission;
      }
      if (this.currentVisit) {
        this.currentVisit.cancel();
        delete this.currentVisit;
      }
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    formSubmissionStarted(formSubmission) {
      if (typeof this.adapter.formSubmissionStarted === "function") {
        this.adapter.formSubmissionStarted(formSubmission);
      }
    }
    async formSubmissionSucceededWithResponse(formSubmission, fetchResponse) {
      if (formSubmission == this.formSubmission) {
        const responseHTML = await fetchResponse.responseHTML;
        if (responseHTML) {
          const shouldCacheSnapshot = formSubmission.method == FetchMethod.get;
          if (!shouldCacheSnapshot) {
            this.view.clearSnapshotCache();
          }
          const { statusCode, redirected } = fetchResponse;
          const action = this.getActionForFormSubmission(formSubmission);
          const visitOptions = {
            action,
            shouldCacheSnapshot,
            response: { statusCode, responseHTML, redirected }
          };
          this.proposeVisit(fetchResponse.location, visitOptions);
        }
      }
    }
    async formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      const responseHTML = await fetchResponse.responseHTML;
      if (responseHTML) {
        const snapshot = PageSnapshot.fromHTMLString(responseHTML);
        if (fetchResponse.serverError) {
          await this.view.renderError(snapshot, this.currentVisit);
        } else {
          await this.view.renderPage(snapshot, false, true, this.currentVisit);
        }
        this.view.scrollToTop();
        this.view.clearSnapshotCache();
      }
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished(formSubmission) {
      if (typeof this.adapter.formSubmissionFinished === "function") {
        this.adapter.formSubmissionFinished(formSubmission);
      }
    }
    visitStarted(visit2) {
      this.delegate.visitStarted(visit2);
    }
    visitCompleted(visit2) {
      this.delegate.visitCompleted(visit2);
    }
    locationWithActionIsSamePage(location2, action) {
      const anchor = getAnchor(location2);
      const currentAnchor = getAnchor(this.view.lastRenderedLocation);
      const isRestorationToTop = action === "restore" && typeof anchor === "undefined";
      return action !== "replace" && getRequestURL(location2) === getRequestURL(this.view.lastRenderedLocation) && (isRestorationToTop || anchor != null && anchor !== currentAnchor);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.delegate.visitScrolledToSamePageLocation(oldURL, newURL);
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    getActionForFormSubmission(formSubmission) {
      const { formElement, submitter } = formSubmission;
      const action = getAttribute("data-turbo-action", submitter, formElement);
      return isAction(action) ? action : "advance";
    }
  };
  var PageStage;
  (function(PageStage2) {
    PageStage2[PageStage2["initial"] = 0] = "initial";
    PageStage2[PageStage2["loading"] = 1] = "loading";
    PageStage2[PageStage2["interactive"] = 2] = "interactive";
    PageStage2[PageStage2["complete"] = 3] = "complete";
  })(PageStage || (PageStage = {}));
  var PageObserver = class {
    constructor(delegate) {
      this.stage = PageStage.initial;
      this.started = false;
      this.interpretReadyState = () => {
        const { readyState } = this;
        if (readyState == "interactive") {
          this.pageIsInteractive();
        } else if (readyState == "complete") {
          this.pageIsComplete();
        }
      };
      this.pageWillUnload = () => {
        this.delegate.pageWillUnload();
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        if (this.stage == PageStage.initial) {
          this.stage = PageStage.loading;
        }
        document.addEventListener("readystatechange", this.interpretReadyState, false);
        addEventListener("pagehide", this.pageWillUnload, false);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        document.removeEventListener("readystatechange", this.interpretReadyState, false);
        removeEventListener("pagehide", this.pageWillUnload, false);
        this.started = false;
      }
    }
    pageIsInteractive() {
      if (this.stage == PageStage.loading) {
        this.stage = PageStage.interactive;
        this.delegate.pageBecameInteractive();
      }
    }
    pageIsComplete() {
      this.pageIsInteractive();
      if (this.stage == PageStage.interactive) {
        this.stage = PageStage.complete;
        this.delegate.pageLoaded();
      }
    }
    get readyState() {
      return document.readyState;
    }
  };
  var ScrollObserver = class {
    constructor(delegate) {
      this.started = false;
      this.onScroll = () => {
        this.updatePosition({ x: window.pageXOffset, y: window.pageYOffset });
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        addEventListener("scroll", this.onScroll, false);
        this.onScroll();
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("scroll", this.onScroll, false);
        this.started = false;
      }
    }
    updatePosition(position) {
      this.delegate.scrollPositionChanged(position);
    }
  };
  var StreamMessageRenderer = class {
    render({ fragment }) {
      Bardo.preservingPermanentElements(this, getPermanentElementMapForFragment(fragment), () => document.documentElement.appendChild(fragment));
    }
    enteringBardo(currentPermanentElement, newPermanentElement) {
      newPermanentElement.replaceWith(currentPermanentElement.cloneNode(true));
    }
    leavingBardo() {
    }
  };
  function getPermanentElementMapForFragment(fragment) {
    const permanentElementsInDocument = queryPermanentElementsAll(document.documentElement);
    const permanentElementMap = {};
    for (const permanentElementInDocument of permanentElementsInDocument) {
      const { id } = permanentElementInDocument;
      for (const streamElement of fragment.querySelectorAll("turbo-stream")) {
        const elementInStream = getPermanentElementById(streamElement.templateElement.content, id);
        if (elementInStream) {
          permanentElementMap[id] = [permanentElementInDocument, elementInStream];
        }
      }
    }
    return permanentElementMap;
  }
  var StreamObserver = class {
    constructor(delegate) {
      this.sources = /* @__PURE__ */ new Set();
      this.started = false;
      this.inspectFetchResponse = (event) => {
        const response = fetchResponseFromEvent(event);
        if (response && fetchResponseIsStream(response)) {
          event.preventDefault();
          this.receiveMessageResponse(response);
        }
      };
      this.receiveMessageEvent = (event) => {
        if (this.started && typeof event.data == "string") {
          this.receiveMessageHTML(event.data);
        }
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    connectStreamSource(source) {
      if (!this.streamSourceIsConnected(source)) {
        this.sources.add(source);
        source.addEventListener("message", this.receiveMessageEvent, false);
      }
    }
    disconnectStreamSource(source) {
      if (this.streamSourceIsConnected(source)) {
        this.sources.delete(source);
        source.removeEventListener("message", this.receiveMessageEvent, false);
      }
    }
    streamSourceIsConnected(source) {
      return this.sources.has(source);
    }
    async receiveMessageResponse(response) {
      const html = await response.responseHTML;
      if (html) {
        this.receiveMessageHTML(html);
      }
    }
    receiveMessageHTML(html) {
      this.delegate.receivedMessageFromStream(StreamMessage.wrap(html));
    }
  };
  function fetchResponseFromEvent(event) {
    var _a;
    const fetchResponse = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.fetchResponse;
    if (fetchResponse instanceof FetchResponse) {
      return fetchResponse;
    }
  }
  function fetchResponseIsStream(response) {
    var _a;
    const contentType = (_a = response.contentType) !== null && _a !== void 0 ? _a : "";
    return contentType.startsWith(StreamMessage.contentType);
  }
  var ErrorRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      const { documentElement, body } = document;
      documentElement.replaceChild(newElement, body);
    }
    async render() {
      this.replaceHeadAndBody();
      this.activateScriptElements();
    }
    replaceHeadAndBody() {
      const { documentElement, head } = document;
      documentElement.replaceChild(this.newHead, head);
      this.renderElement(this.currentElement, this.newElement);
    }
    activateScriptElements() {
      for (const replaceableElement of this.scriptElements) {
        const parentNode2 = replaceableElement.parentNode;
        if (parentNode2) {
          const element = activateScriptElement(replaceableElement);
          parentNode2.replaceChild(element, replaceableElement);
        }
      }
    }
    get newHead() {
      return this.newSnapshot.headSnapshot.element;
    }
    get scriptElements() {
      return document.documentElement.querySelectorAll("script");
    }
  };
  var PageRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      if (document.body && newElement instanceof HTMLBodyElement) {
        document.body.replaceWith(newElement);
      } else {
        document.documentElement.appendChild(newElement);
      }
    }
    get shouldRender() {
      return this.newSnapshot.isVisitable && this.trackedElementsAreIdentical;
    }
    get reloadReason() {
      if (!this.newSnapshot.isVisitable) {
        return {
          reason: "turbo_visit_control_is_reload"
        };
      }
      if (!this.trackedElementsAreIdentical) {
        return {
          reason: "tracked_element_mismatch"
        };
      }
    }
    async prepareToRender() {
      await this.mergeHead();
    }
    async render() {
      if (this.willRender) {
        this.replaceBody();
      }
    }
    finishRendering() {
      super.finishRendering();
      if (!this.isPreview) {
        this.focusFirstAutofocusableElement();
      }
    }
    get currentHeadSnapshot() {
      return this.currentSnapshot.headSnapshot;
    }
    get newHeadSnapshot() {
      return this.newSnapshot.headSnapshot;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    async mergeHead() {
      const newStylesheetElements = this.copyNewHeadStylesheetElements();
      this.copyNewHeadScriptElements();
      this.removeCurrentHeadProvisionalElements();
      this.copyNewHeadProvisionalElements();
      await newStylesheetElements;
    }
    replaceBody() {
      this.preservingPermanentElements(() => {
        this.activateNewBody();
        this.assignNewBody();
      });
    }
    get trackedElementsAreIdentical() {
      return this.currentHeadSnapshot.trackedElementSignature == this.newHeadSnapshot.trackedElementSignature;
    }
    async copyNewHeadStylesheetElements() {
      const loadingElements = [];
      for (const element of this.newHeadStylesheetElements) {
        loadingElements.push(waitForLoad(element));
        document.head.appendChild(element);
      }
      await Promise.all(loadingElements);
    }
    copyNewHeadScriptElements() {
      for (const element of this.newHeadScriptElements) {
        document.head.appendChild(activateScriptElement(element));
      }
    }
    removeCurrentHeadProvisionalElements() {
      for (const element of this.currentHeadProvisionalElements) {
        document.head.removeChild(element);
      }
    }
    copyNewHeadProvisionalElements() {
      for (const element of this.newHeadProvisionalElements) {
        document.head.appendChild(element);
      }
    }
    activateNewBody() {
      document.adoptNode(this.newElement);
      this.activateNewBodyScriptElements();
    }
    activateNewBodyScriptElements() {
      for (const inertScriptElement of this.newBodyScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    assignNewBody() {
      this.renderElement(this.currentElement, this.newElement);
    }
    get newHeadStylesheetElements() {
      return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get newHeadScriptElements() {
      return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get currentHeadProvisionalElements() {
      return this.currentHeadSnapshot.provisionalElements;
    }
    get newHeadProvisionalElements() {
      return this.newHeadSnapshot.provisionalElements;
    }
    get newBodyScriptElements() {
      return this.newElement.querySelectorAll("script");
    }
  };
  var SnapshotCache = class {
    constructor(size) {
      this.keys = [];
      this.snapshots = {};
      this.size = size;
    }
    has(location2) {
      return toCacheKey(location2) in this.snapshots;
    }
    get(location2) {
      if (this.has(location2)) {
        const snapshot = this.read(location2);
        this.touch(location2);
        return snapshot;
      }
    }
    put(location2, snapshot) {
      this.write(location2, snapshot);
      this.touch(location2);
      return snapshot;
    }
    clear() {
      this.snapshots = {};
    }
    read(location2) {
      return this.snapshots[toCacheKey(location2)];
    }
    write(location2, snapshot) {
      this.snapshots[toCacheKey(location2)] = snapshot;
    }
    touch(location2) {
      const key = toCacheKey(location2);
      const index2 = this.keys.indexOf(key);
      if (index2 > -1)
        this.keys.splice(index2, 1);
      this.keys.unshift(key);
      this.trim();
    }
    trim() {
      for (const key of this.keys.splice(this.size)) {
        delete this.snapshots[key];
      }
    }
  };
  var PageView = class extends View {
    constructor() {
      super(...arguments);
      this.snapshotCache = new SnapshotCache(10);
      this.lastRenderedLocation = new URL(location.href);
      this.forceReloaded = false;
    }
    renderPage(snapshot, isPreview = false, willRender = true, visit2) {
      const renderer = new PageRenderer(this.snapshot, snapshot, PageRenderer.renderElement, isPreview, willRender);
      if (!renderer.shouldRender) {
        this.forceReloaded = true;
      } else {
        visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      }
      return this.render(renderer);
    }
    renderError(snapshot, visit2) {
      visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      const renderer = new ErrorRenderer(this.snapshot, snapshot, ErrorRenderer.renderElement, false);
      return this.render(renderer);
    }
    clearSnapshotCache() {
      this.snapshotCache.clear();
    }
    async cacheSnapshot(snapshot = this.snapshot) {
      if (snapshot.isCacheable) {
        this.delegate.viewWillCacheSnapshot();
        const { lastRenderedLocation: location2 } = this;
        await nextEventLoopTick();
        const cachedSnapshot = snapshot.clone();
        this.snapshotCache.put(location2, cachedSnapshot);
        return cachedSnapshot;
      }
    }
    getCachedSnapshotForLocation(location2) {
      return this.snapshotCache.get(location2);
    }
    get snapshot() {
      return PageSnapshot.fromElement(this.element);
    }
  };
  var Preloader = class {
    constructor(delegate) {
      this.selector = "a[data-turbo-preload]";
      this.delegate = delegate;
    }
    get snapshotCache() {
      return this.delegate.navigator.view.snapshotCache;
    }
    start() {
      if (document.readyState === "loading") {
        return document.addEventListener("DOMContentLoaded", () => {
          this.preloadOnLoadLinksForView(document.body);
        });
      } else {
        this.preloadOnLoadLinksForView(document.body);
      }
    }
    preloadOnLoadLinksForView(element) {
      for (const link of element.querySelectorAll(this.selector)) {
        this.preloadURL(link);
      }
    }
    async preloadURL(link) {
      const location2 = new URL(link.href);
      if (this.snapshotCache.has(location2)) {
        return;
      }
      try {
        const response = await fetch(location2.toString(), { headers: { "VND.PREFETCH": "true", Accept: "text/html" } });
        const responseText = await response.text();
        const snapshot = PageSnapshot.fromHTMLString(responseText);
        this.snapshotCache.put(location2, snapshot);
      } catch (_) {
      }
    }
  };
  var Session = class {
    constructor() {
      this.navigator = new Navigator(this);
      this.history = new History(this);
      this.preloader = new Preloader(this);
      this.view = new PageView(this, document.documentElement);
      this.adapter = new BrowserAdapter(this);
      this.pageObserver = new PageObserver(this);
      this.cacheObserver = new CacheObserver();
      this.linkClickObserver = new LinkClickObserver(this, window);
      this.formSubmitObserver = new FormSubmitObserver(this, document);
      this.scrollObserver = new ScrollObserver(this);
      this.streamObserver = new StreamObserver(this);
      this.formLinkClickObserver = new FormLinkClickObserver(this, document.documentElement);
      this.frameRedirector = new FrameRedirector(this, document.documentElement);
      this.streamMessageRenderer = new StreamMessageRenderer();
      this.drive = true;
      this.enabled = true;
      this.progressBarDelay = 500;
      this.started = false;
      this.formMode = "on";
    }
    start() {
      if (!this.started) {
        this.pageObserver.start();
        this.cacheObserver.start();
        this.formLinkClickObserver.start();
        this.linkClickObserver.start();
        this.formSubmitObserver.start();
        this.scrollObserver.start();
        this.streamObserver.start();
        this.frameRedirector.start();
        this.history.start();
        this.preloader.start();
        this.started = true;
        this.enabled = true;
      }
    }
    disable() {
      this.enabled = false;
    }
    stop() {
      if (this.started) {
        this.pageObserver.stop();
        this.cacheObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkClickObserver.stop();
        this.formSubmitObserver.stop();
        this.scrollObserver.stop();
        this.streamObserver.stop();
        this.frameRedirector.stop();
        this.history.stop();
        this.started = false;
      }
    }
    registerAdapter(adapter) {
      this.adapter = adapter;
    }
    visit(location2, options = {}) {
      const frameElement = options.frame ? document.getElementById(options.frame) : null;
      if (frameElement instanceof FrameElement) {
        frameElement.src = location2.toString();
        frameElement.loaded;
      } else {
        this.navigator.proposeVisit(expandURL(location2), options);
      }
    }
    connectStreamSource(source) {
      this.streamObserver.connectStreamSource(source);
    }
    disconnectStreamSource(source) {
      this.streamObserver.disconnectStreamSource(source);
    }
    renderStreamMessage(message) {
      this.streamMessageRenderer.render(StreamMessage.wrap(message));
    }
    clearCache() {
      this.view.clearSnapshotCache();
    }
    setProgressBarDelay(delay) {
      this.progressBarDelay = delay;
    }
    setFormMode(mode) {
      this.formMode = mode;
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    historyPoppedToLocationWithRestorationIdentifier(location2, restorationIdentifier) {
      if (this.enabled) {
        this.navigator.startVisit(location2, restorationIdentifier, {
          action: "restore",
          historyChanged: true
        });
      } else {
        this.adapter.pageInvalidated({
          reason: "turbo_disabled"
        });
      }
    }
    scrollPositionChanged(position) {
      this.history.updateRestorationData({ scrollPosition: position });
    }
    willSubmitFormLinkToLocation(link, location2) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation);
    }
    submittedFormLinkToLocation() {
    }
    willFollowLinkToLocation(link, location2, event) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation) && this.applicationAllowsFollowingLinkToLocation(link, location2, event);
    }
    followedLinkToLocation(link, location2) {
      const action = this.getActionForLink(link);
      const acceptsStreamResponse = link.hasAttribute("data-turbo-stream");
      this.visit(location2.href, { action, acceptsStreamResponse });
    }
    allowsVisitingLocationWithAction(location2, action) {
      return this.locationWithActionIsSamePage(location2, action) || this.applicationAllowsVisitingLocation(location2);
    }
    visitProposedToLocation(location2, options) {
      extendURLWithDeprecatedProperties(location2);
      this.adapter.visitProposedToLocation(location2, options);
    }
    visitStarted(visit2) {
      if (!visit2.acceptsStreamResponse) {
        markAsBusy(document.documentElement);
      }
      extendURLWithDeprecatedProperties(visit2.location);
      if (!visit2.silent) {
        this.notifyApplicationAfterVisitingLocation(visit2.location, visit2.action);
      }
    }
    visitCompleted(visit2) {
      clearBusyState(document.documentElement);
      this.notifyApplicationAfterPageLoad(visit2.getTimingMetrics());
    }
    locationWithActionIsSamePage(location2, action) {
      return this.navigator.locationWithActionIsSamePage(location2, action);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL);
    }
    willSubmitForm(form, submitter) {
      const action = getAction(form, submitter);
      return this.submissionIsNavigatable(form, submitter) && locationIsVisitable(expandURL(action), this.snapshot.rootLocation);
    }
    formSubmitted(form, submitter) {
      this.navigator.submitForm(form, submitter);
    }
    pageBecameInteractive() {
      this.view.lastRenderedLocation = this.location;
      this.notifyApplicationAfterPageLoad();
    }
    pageLoaded() {
      this.history.assumeControlOfScrollRestoration();
    }
    pageWillUnload() {
      this.history.relinquishControlOfScrollRestoration();
    }
    receivedMessageFromStream(message) {
      this.renderStreamMessage(message);
    }
    viewWillCacheSnapshot() {
      var _a;
      if (!((_a = this.navigator.currentVisit) === null || _a === void 0 ? void 0 : _a.silent)) {
        this.notifyApplicationBeforeCachingSnapshot();
      }
    }
    allowsImmediateRender({ element }, options) {
      const event = this.notifyApplicationBeforeRender(element, options);
      const { defaultPrevented, detail: { render } } = event;
      if (this.view.renderer && render) {
        this.view.renderer.renderElement = render;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
      this.view.lastRenderedLocation = this.history.location;
      this.notifyApplicationAfterRender();
    }
    preloadOnLoadLinksForView(element) {
      this.preloader.preloadOnLoadLinksForView(element);
    }
    viewInvalidated(reason) {
      this.adapter.pageInvalidated(reason);
    }
    frameLoaded(frame) {
      this.notifyApplicationAfterFrameLoad(frame);
    }
    frameRendered(fetchResponse, frame) {
      this.notifyApplicationAfterFrameRender(fetchResponse, frame);
    }
    applicationAllowsFollowingLinkToLocation(link, location2, ev) {
      const event = this.notifyApplicationAfterClickingLinkToLocation(link, location2, ev);
      return !event.defaultPrevented;
    }
    applicationAllowsVisitingLocation(location2) {
      const event = this.notifyApplicationBeforeVisitingLocation(location2);
      return !event.defaultPrevented;
    }
    notifyApplicationAfterClickingLinkToLocation(link, location2, event) {
      return dispatch("turbo:click", {
        target: link,
        detail: { url: location2.href, originalEvent: event },
        cancelable: true
      });
    }
    notifyApplicationBeforeVisitingLocation(location2) {
      return dispatch("turbo:before-visit", {
        detail: { url: location2.href },
        cancelable: true
      });
    }
    notifyApplicationAfterVisitingLocation(location2, action) {
      return dispatch("turbo:visit", { detail: { url: location2.href, action } });
    }
    notifyApplicationBeforeCachingSnapshot() {
      return dispatch("turbo:before-cache");
    }
    notifyApplicationBeforeRender(newBody, options) {
      return dispatch("turbo:before-render", {
        detail: Object.assign({ newBody }, options),
        cancelable: true
      });
    }
    notifyApplicationAfterRender() {
      return dispatch("turbo:render");
    }
    notifyApplicationAfterPageLoad(timing = {}) {
      return dispatch("turbo:load", {
        detail: { url: this.location.href, timing }
      });
    }
    notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL) {
      dispatchEvent(new HashChangeEvent("hashchange", {
        oldURL: oldURL.toString(),
        newURL: newURL.toString()
      }));
    }
    notifyApplicationAfterFrameLoad(frame) {
      return dispatch("turbo:frame-load", { target: frame });
    }
    notifyApplicationAfterFrameRender(fetchResponse, frame) {
      return dispatch("turbo:frame-render", {
        detail: { fetchResponse },
        target: frame,
        cancelable: true
      });
    }
    submissionIsNavigatable(form, submitter) {
      if (this.formMode == "off") {
        return false;
      } else {
        const submitterIsNavigatable = submitter ? this.elementIsNavigatable(submitter) : true;
        if (this.formMode == "optin") {
          return submitterIsNavigatable && form.closest('[data-turbo="true"]') != null;
        } else {
          return submitterIsNavigatable && this.elementIsNavigatable(form);
        }
      }
    }
    elementIsNavigatable(element) {
      const container = element.closest("[data-turbo]");
      const withinFrame = element.closest("turbo-frame");
      if (this.drive || withinFrame) {
        if (container) {
          return container.getAttribute("data-turbo") != "false";
        } else {
          return true;
        }
      } else {
        if (container) {
          return container.getAttribute("data-turbo") == "true";
        } else {
          return false;
        }
      }
    }
    getActionForLink(link) {
      const action = link.getAttribute("data-turbo-action");
      return isAction(action) ? action : "advance";
    }
    get snapshot() {
      return this.view.snapshot;
    }
  };
  function extendURLWithDeprecatedProperties(url) {
    Object.defineProperties(url, deprecatedLocationPropertyDescriptors);
  }
  var deprecatedLocationPropertyDescriptors = {
    absoluteURL: {
      get() {
        return this.toString();
      }
    }
  };
  var Cache = class {
    constructor(session2) {
      this.session = session2;
    }
    clear() {
      this.session.clearCache();
    }
    resetCacheControl() {
      this.setCacheControl("");
    }
    exemptPageFromCache() {
      this.setCacheControl("no-cache");
    }
    exemptPageFromPreview() {
      this.setCacheControl("no-preview");
    }
    setCacheControl(value) {
      setMetaContent("turbo-cache-control", value);
    }
  };
  var StreamActions = {
    after() {
      this.targetElements.forEach((e) => {
        var _a;
        return (_a = e.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e.nextSibling);
      });
    },
    append() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e) => e.append(this.templateContent));
    },
    before() {
      this.targetElements.forEach((e) => {
        var _a;
        return (_a = e.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e);
      });
    },
    prepend() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e) => e.prepend(this.templateContent));
    },
    remove() {
      this.targetElements.forEach((e) => e.remove());
    },
    replace() {
      this.targetElements.forEach((e) => e.replaceWith(this.templateContent));
    },
    update() {
      this.targetElements.forEach((e) => e.replaceChildren(this.templateContent));
    }
  };
  var session = new Session();
  var cache = new Cache(session);
  var { navigator: navigator$1 } = session;
  function start() {
    session.start();
  }
  function registerAdapter(adapter) {
    session.registerAdapter(adapter);
  }
  function visit(location2, options) {
    session.visit(location2, options);
  }
  function connectStreamSource(source) {
    session.connectStreamSource(source);
  }
  function disconnectStreamSource(source) {
    session.disconnectStreamSource(source);
  }
  function renderStreamMessage(message) {
    session.renderStreamMessage(message);
  }
  function clearCache() {
    console.warn("Please replace `Turbo.clearCache()` with `Turbo.cache.clear()`. The top-level function is deprecated and will be removed in a future version of Turbo.`");
    session.clearCache();
  }
  function setProgressBarDelay(delay) {
    session.setProgressBarDelay(delay);
  }
  function setConfirmMethod(confirmMethod) {
    FormSubmission.confirmMethod = confirmMethod;
  }
  function setFormMode(mode) {
    session.setFormMode(mode);
  }
  var Turbo = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    navigator: navigator$1,
    session,
    cache,
    PageRenderer,
    PageSnapshot,
    FrameRenderer,
    start,
    registerAdapter,
    visit,
    connectStreamSource,
    disconnectStreamSource,
    renderStreamMessage,
    clearCache,
    setProgressBarDelay,
    setConfirmMethod,
    setFormMode,
    StreamActions
  });
  var FrameController = class {
    constructor(element) {
      this.fetchResponseLoaded = (_fetchResponse) => {
      };
      this.currentFetchRequest = null;
      this.resolveVisitPromise = () => {
      };
      this.connected = false;
      this.hasBeenLoaded = false;
      this.ignoredAttributes = /* @__PURE__ */ new Set();
      this.action = null;
      this.visitCachedSnapshot = ({ element: element2 }) => {
        const frame = element2.querySelector("#" + this.element.id);
        if (frame && this.previousFrameElement) {
          frame.replaceChildren(...this.previousFrameElement.children);
        }
        delete this.previousFrameElement;
      };
      this.element = element;
      this.view = new FrameView(this, this.element);
      this.appearanceObserver = new AppearanceObserver(this, this.element);
      this.formLinkClickObserver = new FormLinkClickObserver(this, this.element);
      this.linkInterceptor = new LinkInterceptor(this, this.element);
      this.restorationIdentifier = uuid();
      this.formSubmitObserver = new FormSubmitObserver(this, this.element);
    }
    connect() {
      if (!this.connected) {
        this.connected = true;
        if (this.loadingStyle == FrameLoadingStyle.lazy) {
          this.appearanceObserver.start();
        } else {
          this.loadSourceURL();
        }
        this.formLinkClickObserver.start();
        this.linkInterceptor.start();
        this.formSubmitObserver.start();
      }
    }
    disconnect() {
      if (this.connected) {
        this.connected = false;
        this.appearanceObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkInterceptor.stop();
        this.formSubmitObserver.stop();
      }
    }
    disabledChanged() {
      if (this.loadingStyle == FrameLoadingStyle.eager) {
        this.loadSourceURL();
      }
    }
    sourceURLChanged() {
      if (this.isIgnoringChangesTo("src"))
        return;
      if (this.element.isConnected) {
        this.complete = false;
      }
      if (this.loadingStyle == FrameLoadingStyle.eager || this.hasBeenLoaded) {
        this.loadSourceURL();
      }
    }
    sourceURLReloaded() {
      const { src } = this.element;
      this.ignoringChangesToAttribute("complete", () => {
        this.element.removeAttribute("complete");
      });
      this.element.src = null;
      this.element.src = src;
      return this.element.loaded;
    }
    completeChanged() {
      if (this.isIgnoringChangesTo("complete"))
        return;
      this.loadSourceURL();
    }
    loadingStyleChanged() {
      if (this.loadingStyle == FrameLoadingStyle.lazy) {
        this.appearanceObserver.start();
      } else {
        this.appearanceObserver.stop();
        this.loadSourceURL();
      }
    }
    async loadSourceURL() {
      if (this.enabled && this.isActive && !this.complete && this.sourceURL) {
        this.element.loaded = this.visit(expandURL(this.sourceURL));
        this.appearanceObserver.stop();
        await this.element.loaded;
        this.hasBeenLoaded = true;
      }
    }
    async loadResponse(fetchResponse) {
      if (fetchResponse.redirected || fetchResponse.succeeded && fetchResponse.isHTML) {
        this.sourceURL = fetchResponse.response.url;
      }
      try {
        const html = await fetchResponse.responseHTML;
        if (html) {
          const { body } = parseHTMLDocument(html);
          const newFrameElement = await this.extractForeignFrameElement(body);
          if (newFrameElement) {
            const snapshot = new Snapshot(newFrameElement);
            const renderer = new FrameRenderer(this, this.view.snapshot, snapshot, FrameRenderer.renderElement, false, false);
            if (this.view.renderPromise)
              await this.view.renderPromise;
            this.changeHistory();
            await this.view.render(renderer);
            this.complete = true;
            session.frameRendered(fetchResponse, this.element);
            session.frameLoaded(this.element);
            this.fetchResponseLoaded(fetchResponse);
          } else if (this.willHandleFrameMissingFromResponse(fetchResponse)) {
            console.warn(`A matching frame for #${this.element.id} was missing from the response, transforming into full-page Visit.`);
            this.visitResponse(fetchResponse.response);
          }
        }
      } catch (error2) {
        console.error(error2);
        this.view.invalidate();
      } finally {
        this.fetchResponseLoaded = () => {
        };
      }
    }
    elementAppearedInViewport(_element) {
      this.loadSourceURL();
    }
    willSubmitFormLinkToLocation(link) {
      return this.shouldInterceptNavigation(link);
    }
    submittedFormLinkToLocation(link, _location, form) {
      const frame = this.findFrameElement(link);
      if (frame)
        form.setAttribute("data-turbo-frame", frame.id);
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldInterceptNavigation(element);
    }
    linkClickIntercepted(element, location2) {
      this.navigateFrame(element, location2);
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == this.element && this.shouldInterceptNavigation(element, submitter);
    }
    formSubmitted(element, submitter) {
      if (this.formSubmission) {
        this.formSubmission.stop();
      }
      this.formSubmission = new FormSubmission(this, element, submitter);
      const { fetchRequest } = this.formSubmission;
      this.prepareHeadersForRequest(fetchRequest.headers, fetchRequest);
      this.formSubmission.start();
    }
    prepareHeadersForRequest(headers, request) {
      var _a;
      headers["Turbo-Frame"] = this.id;
      if ((_a = this.currentNavigationElement) === null || _a === void 0 ? void 0 : _a.hasAttribute("data-turbo-stream")) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      markAsBusy(this.element);
    }
    requestPreventedHandlingResponse(_request, _response) {
      this.resolveVisitPromise();
    }
    async requestSucceededWithResponse(request, response) {
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    async requestFailedWithResponse(request, response) {
      console.error(response);
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    requestErrored(request, error2) {
      console.error(error2);
      this.resolveVisitPromise();
    }
    requestFinished(_request) {
      clearBusyState(this.element);
    }
    formSubmissionStarted({ formElement }) {
      markAsBusy(formElement, this.findFrameElement(formElement));
    }
    formSubmissionSucceededWithResponse(formSubmission, response) {
      const frame = this.findFrameElement(formSubmission.formElement, formSubmission.submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, formSubmission.formElement, formSubmission.submitter);
      frame.delegate.loadResponse(response);
    }
    formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      this.element.delegate.loadResponse(fetchResponse);
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished({ formElement }) {
      clearBusyState(formElement, this.findFrameElement(formElement));
    }
    allowsImmediateRender({ element: newFrame }, options) {
      const event = dispatch("turbo:before-frame-render", {
        target: this.element,
        detail: Object.assign({ newFrame }, options),
        cancelable: true
      });
      const { defaultPrevented, detail: { render } } = event;
      if (this.view.renderer && render) {
        this.view.renderer.renderElement = render;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
    }
    preloadOnLoadLinksForView(element) {
      session.preloadOnLoadLinksForView(element);
    }
    viewInvalidated() {
    }
    willRenderFrame(currentElement, _newElement) {
      this.previousFrameElement = currentElement.cloneNode(true);
    }
    async visit(url) {
      var _a;
      const request = new FetchRequest(this, FetchMethod.get, url, new URLSearchParams(), this.element);
      (_a = this.currentFetchRequest) === null || _a === void 0 ? void 0 : _a.cancel();
      this.currentFetchRequest = request;
      return new Promise((resolve) => {
        this.resolveVisitPromise = () => {
          this.resolveVisitPromise = () => {
          };
          this.currentFetchRequest = null;
          resolve();
        };
        request.perform();
      });
    }
    navigateFrame(element, url, submitter) {
      const frame = this.findFrameElement(element, submitter);
      this.pageSnapshot = PageSnapshot.fromElement(frame).clone();
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, element, submitter);
      this.withCurrentNavigationElement(element, () => {
        frame.src = url;
      });
    }
    proposeVisitIfNavigatedWithAction(frame, element, submitter) {
      this.action = getVisitAction(submitter, element, frame);
      if (isAction(this.action)) {
        const { visitCachedSnapshot } = frame.delegate;
        frame.delegate.fetchResponseLoaded = (fetchResponse) => {
          if (frame.src) {
            const { statusCode, redirected } = fetchResponse;
            const responseHTML = frame.ownerDocument.documentElement.outerHTML;
            const response = { statusCode, redirected, responseHTML };
            const options = {
              response,
              visitCachedSnapshot,
              willRender: false,
              updateHistory: false,
              restorationIdentifier: this.restorationIdentifier,
              snapshot: this.pageSnapshot
            };
            if (this.action)
              options.action = this.action;
            session.visit(frame.src, options);
          }
        };
      }
    }
    changeHistory() {
      if (this.action) {
        const method = getHistoryMethodForAction(this.action);
        session.history.update(method, expandURL(this.element.src || ""), this.restorationIdentifier);
      }
    }
    willHandleFrameMissingFromResponse(fetchResponse) {
      this.element.setAttribute("complete", "");
      const response = fetchResponse.response;
      const visit2 = async (url, options = {}) => {
        if (url instanceof Response) {
          this.visitResponse(url);
        } else {
          session.visit(url, options);
        }
      };
      const event = dispatch("turbo:frame-missing", {
        target: this.element,
        detail: { response, visit: visit2 },
        cancelable: true
      });
      return !event.defaultPrevented;
    }
    async visitResponse(response) {
      const wrapped = new FetchResponse(response);
      const responseHTML = await wrapped.responseHTML;
      const { location: location2, redirected, statusCode } = wrapped;
      return session.visit(location2, { response: { redirected, statusCode, responseHTML } });
    }
    findFrameElement(element, submitter) {
      var _a;
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      return (_a = getFrameElementById(id)) !== null && _a !== void 0 ? _a : this.element;
    }
    async extractForeignFrameElement(container) {
      let element;
      const id = CSS.escape(this.id);
      try {
        element = activateElement(container.querySelector(`turbo-frame#${id}`), this.sourceURL);
        if (element) {
          return element;
        }
        element = activateElement(container.querySelector(`turbo-frame[src][recurse~=${id}]`), this.sourceURL);
        if (element) {
          await element.loaded;
          return await this.extractForeignFrameElement(element);
        }
      } catch (error2) {
        console.error(error2);
        return new FrameElement();
      }
      return null;
    }
    formActionIsVisitable(form, submitter) {
      const action = getAction(form, submitter);
      return locationIsVisitable(expandURL(action), this.rootLocation);
    }
    shouldInterceptNavigation(element, submitter) {
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      if (element instanceof HTMLFormElement && !this.formActionIsVisitable(element, submitter)) {
        return false;
      }
      if (!this.enabled || id == "_top") {
        return false;
      }
      if (id) {
        const frameElement = getFrameElementById(id);
        if (frameElement) {
          return !frameElement.disabled;
        }
      }
      if (!session.elementIsNavigatable(element)) {
        return false;
      }
      if (submitter && !session.elementIsNavigatable(submitter)) {
        return false;
      }
      return true;
    }
    get id() {
      return this.element.id;
    }
    get enabled() {
      return !this.element.disabled;
    }
    get sourceURL() {
      if (this.element.src) {
        return this.element.src;
      }
    }
    set sourceURL(sourceURL) {
      this.ignoringChangesToAttribute("src", () => {
        this.element.src = sourceURL !== null && sourceURL !== void 0 ? sourceURL : null;
      });
    }
    get loadingStyle() {
      return this.element.loading;
    }
    get isLoading() {
      return this.formSubmission !== void 0 || this.resolveVisitPromise() !== void 0;
    }
    get complete() {
      return this.element.hasAttribute("complete");
    }
    set complete(value) {
      this.ignoringChangesToAttribute("complete", () => {
        if (value) {
          this.element.setAttribute("complete", "");
        } else {
          this.element.removeAttribute("complete");
        }
      });
    }
    get isActive() {
      return this.element.isActive && this.connected;
    }
    get rootLocation() {
      var _a;
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const root = (_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    isIgnoringChangesTo(attributeName) {
      return this.ignoredAttributes.has(attributeName);
    }
    ignoringChangesToAttribute(attributeName, callback) {
      this.ignoredAttributes.add(attributeName);
      callback();
      this.ignoredAttributes.delete(attributeName);
    }
    withCurrentNavigationElement(element, callback) {
      this.currentNavigationElement = element;
      callback();
      delete this.currentNavigationElement;
    }
  };
  function getFrameElementById(id) {
    if (id != null) {
      const element = document.getElementById(id);
      if (element instanceof FrameElement) {
        return element;
      }
    }
  }
  function activateElement(element, currentURL) {
    if (element) {
      const src = element.getAttribute("src");
      if (src != null && currentURL != null && urlsAreEqual(src, currentURL)) {
        throw new Error(`Matching <turbo-frame id="${element.id}"> element has a source URL which references itself`);
      }
      if (element.ownerDocument !== document) {
        element = document.importNode(element, true);
      }
      if (element instanceof FrameElement) {
        element.connectedCallback();
        element.disconnectedCallback();
        return element;
      }
    }
  }
  var StreamElement = class extends HTMLElement {
    static async renderElement(newElement) {
      await newElement.performAction();
    }
    async connectedCallback() {
      try {
        await this.render();
      } catch (error2) {
        console.error(error2);
      } finally {
        this.disconnect();
      }
    }
    async render() {
      var _a;
      return (_a = this.renderPromise) !== null && _a !== void 0 ? _a : this.renderPromise = (async () => {
        const event = this.beforeRenderEvent;
        if (this.dispatchEvent(event)) {
          await nextAnimationFrame();
          await event.detail.render(this);
        }
      })();
    }
    disconnect() {
      try {
        this.remove();
      } catch (_a) {
      }
    }
    removeDuplicateTargetChildren() {
      this.duplicateChildren.forEach((c2) => c2.remove());
    }
    get duplicateChildren() {
      var _a;
      const existingChildren = this.targetElements.flatMap((e) => [...e.children]).filter((c2) => !!c2.id);
      const newChildrenIds = [...((_a = this.templateContent) === null || _a === void 0 ? void 0 : _a.children) || []].filter((c2) => !!c2.id).map((c2) => c2.id);
      return existingChildren.filter((c2) => newChildrenIds.includes(c2.id));
    }
    get performAction() {
      if (this.action) {
        const actionFunction = StreamActions[this.action];
        if (actionFunction) {
          return actionFunction;
        }
        this.raise("unknown action");
      }
      this.raise("action attribute is missing");
    }
    get targetElements() {
      if (this.target) {
        return this.targetElementsById;
      } else if (this.targets) {
        return this.targetElementsByQuery;
      } else {
        this.raise("target or targets attribute is missing");
      }
    }
    get templateContent() {
      return this.templateElement.content.cloneNode(true);
    }
    get templateElement() {
      if (this.firstElementChild === null) {
        const template = this.ownerDocument.createElement("template");
        this.appendChild(template);
        return template;
      } else if (this.firstElementChild instanceof HTMLTemplateElement) {
        return this.firstElementChild;
      }
      this.raise("first child element must be a <template> element");
    }
    get action() {
      return this.getAttribute("action");
    }
    get target() {
      return this.getAttribute("target");
    }
    get targets() {
      return this.getAttribute("targets");
    }
    raise(message) {
      throw new Error(`${this.description}: ${message}`);
    }
    get description() {
      var _a, _b;
      return (_b = ((_a = this.outerHTML.match(/<[^>]+>/)) !== null && _a !== void 0 ? _a : [])[0]) !== null && _b !== void 0 ? _b : "<turbo-stream>";
    }
    get beforeRenderEvent() {
      return new CustomEvent("turbo:before-stream-render", {
        bubbles: true,
        cancelable: true,
        detail: { newStream: this, render: StreamElement.renderElement }
      });
    }
    get targetElementsById() {
      var _a;
      const element = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.getElementById(this.target);
      if (element !== null) {
        return [element];
      } else {
        return [];
      }
    }
    get targetElementsByQuery() {
      var _a;
      const elements = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.targets);
      if (elements.length !== 0) {
        return Array.prototype.slice.call(elements);
      } else {
        return [];
      }
    }
  };
  var StreamSourceElement = class extends HTMLElement {
    constructor() {
      super(...arguments);
      this.streamSource = null;
    }
    connectedCallback() {
      this.streamSource = this.src.match(/^ws{1,2}:/) ? new WebSocket(this.src) : new EventSource(this.src);
      connectStreamSource(this.streamSource);
    }
    disconnectedCallback() {
      if (this.streamSource) {
        disconnectStreamSource(this.streamSource);
      }
    }
    get src() {
      return this.getAttribute("src") || "";
    }
  };
  FrameElement.delegateConstructor = FrameController;
  if (customElements.get("turbo-frame") === void 0) {
    customElements.define("turbo-frame", FrameElement);
  }
  if (customElements.get("turbo-stream") === void 0) {
    customElements.define("turbo-stream", StreamElement);
  }
  if (customElements.get("turbo-stream-source") === void 0) {
    customElements.define("turbo-stream-source", StreamSourceElement);
  }
  (() => {
    let element = document.currentScript;
    if (!element)
      return;
    if (element.hasAttribute("data-turbo-suppress-warning"))
      return;
    element = element.parentElement;
    while (element) {
      if (element == document.body) {
        return console.warn(unindent`
        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!

        Load your application’s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.

        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements

        ——
        Suppress this warning by adding a "data-turbo-suppress-warning" attribute to: %s
      `, element.outerHTML);
      }
      element = element.parentElement;
    }
  })();
  window.Turbo = Turbo;
  start();

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js
  var consumer;
  async function getConsumer() {
    return consumer || setConsumer(createConsumer2().then(setConsumer));
  }
  function setConsumer(newConsumer) {
    return consumer = newConsumer;
  }
  async function createConsumer2() {
    const { createConsumer: createConsumer3 } = await Promise.resolve().then(() => (init_src(), src_exports));
    return createConsumer3();
  }
  async function subscribeTo(channel, mixin) {
    const { subscriptions } = await getConsumer();
    return subscriptions.create(channel, mixin);
  }

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/snakeize.js
  function walk(obj) {
    if (!obj || typeof obj !== "object")
      return obj;
    if (obj instanceof Date || obj instanceof RegExp)
      return obj;
    if (Array.isArray(obj))
      return obj.map(walk);
    return Object.keys(obj).reduce(function(acc, key) {
      var camel = key[0].toLowerCase() + key.slice(1).replace(/([A-Z]+)/g, function(m, x) {
        return "_" + x.toLowerCase();
      });
      acc[camel] = walk(obj[key]);
      return acc;
    }, {});
  }

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable_stream_source_element.js
  var TurboCableStreamSourceElement = class extends HTMLElement {
    async connectedCallback() {
      connectStreamSource(this);
      this.subscription = await subscribeTo(this.channel, { received: this.dispatchMessageEvent.bind(this) });
    }
    disconnectedCallback() {
      disconnectStreamSource(this);
      if (this.subscription)
        this.subscription.unsubscribe();
    }
    dispatchMessageEvent(data) {
      const event = new MessageEvent("message", { data });
      return this.dispatchEvent(event);
    }
    get channel() {
      const channel = this.getAttribute("channel");
      const signed_stream_name = this.getAttribute("signed-stream-name");
      return { channel, signed_stream_name, ...walk({ ...this.dataset }) };
    }
  };
  customElements.define("turbo-cable-stream-source", TurboCableStreamSourceElement);

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/fetch_requests.js
  function encodeMethodIntoRequestBody(event) {
    if (event.target instanceof HTMLFormElement) {
      const { target: form, detail: { fetchOptions } } = event;
      form.addEventListener("turbo:submit-start", ({ detail: { formSubmission: { submitter } } }) => {
        const method = submitter && submitter.formMethod || fetchOptions.body && fetchOptions.body.get("_method") || form.getAttribute("method");
        if (!/get/i.test(method)) {
          if (/post/i.test(method)) {
            fetchOptions.body.delete("_method");
          } else {
            fetchOptions.body.set("_method", method);
          }
          fetchOptions.method = "post";
        }
      }, { once: true });
    }
  }

  // ../../node_modules/@hotwired/turbo-rails/app/javascript/turbo/index.js
  addEventListener("turbo:before-fetch-request", encodeMethodIntoRequestBody);

  // controllers/auto_redirect_controller.js
  var auto_redirect_controller_default = class extends Controller {
    connect() {
      if (this.hasSecondsValue && this.hasUrlValue) {
        setTimeout(() => turbo_es2017_esm_exports.visit(this.urlValue), this.secondsValue * 1e3);
      }
    }
  };
  __publicField(auto_redirect_controller_default, "values", { seconds: Number, url: String });
  __publicField(auto_redirect_controller_default, "targets", ["modal"]);

  // controllers/auto_submit_controller.js
  var import_debounce = __toESM(require_debounce(), 1);
  var auto_submit_controller_default = class extends Controller {
    connect() {
      this.loadResults = (0, import_debounce.default)(() => {
        this.element.requestSubmit();
      }, 400);
    }
    submit() {
      this.loadResults();
    }
  };

  // ../../node_modules/tiny-cookie/es/util.js
  function hasOwn(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }
  function escapeRe(str) {
    return str.replace(/[.*+?^$|[\](){}\\-]/g, "\\$&");
  }
  function computeExpires(str) {
    var lastCh = str.charAt(str.length - 1);
    var value = parseInt(str, 10);
    var expires = new Date();
    switch (lastCh) {
      case "Y":
        expires.setFullYear(expires.getFullYear() + value);
        break;
      case "M":
        expires.setMonth(expires.getMonth() + value);
        break;
      case "D":
        expires.setDate(expires.getDate() + value);
        break;
      case "h":
        expires.setHours(expires.getHours() + value);
        break;
      case "m":
        expires.setMinutes(expires.getMinutes() + value);
        break;
      case "s":
        expires.setSeconds(expires.getSeconds() + value);
        break;
      default:
        expires = new Date(str);
    }
    return expires;
  }
  function convert(opts) {
    var res = "";
    for (var key in opts) {
      if (hasOwn(opts, key)) {
        if (/^expires$/i.test(key)) {
          var expires = opts[key];
          if (typeof expires !== "object") {
            expires += typeof expires === "number" ? "D" : "";
            expires = computeExpires(expires);
          }
          res += ";" + key + "=" + expires.toUTCString();
        } else if (/^secure$/.test(key)) {
          if (opts[key]) {
            res += ";" + key;
          }
        } else {
          res += ";" + key + "=" + opts[key];
        }
      }
    }
    if (!hasOwn(opts, "path")) {
      res += ";path=/";
    }
    return res;
  }

  // ../../node_modules/tiny-cookie/es/index.js
  function get(key, decoder) {
    if (decoder === void 0) {
      decoder = decodeURIComponent;
    }
    if (typeof key !== "string" || !key) {
      return null;
    }
    var reKey = new RegExp("(?:^|; )" + escapeRe(key) + "(?:=([^;]*))?(?:;|$)");
    var match = reKey.exec(document.cookie);
    if (match === null) {
      return null;
    }
    return typeof decoder === "function" ? decoder(match[1]) : match[1];
  }
  function set(key, value, encoder, options) {
    if (encoder === void 0) {
      encoder = encodeURIComponent;
    }
    if (typeof encoder === "object" && encoder !== null) {
      options = encoder;
      encoder = encodeURIComponent;
    }
    var attrsStr = convert(options || {});
    var valueStr = typeof encoder === "function" ? encoder(value) : value;
    var newCookie = key + "=" + valueStr + attrsStr;
    document.cookie = newCookie;
  }

  // controllers/banner_controller.js
  var banner_controller_default = class extends Controller {
    connect() {
      if (get(`dismiss-banner-id-${this.notificationIdValue}`) == this.notificationIdValue) {
        this.bannerTarget.classList.add(this.hideClass);
      }
    }
    close() {
      this.bannerTarget.classList.add(this.hideClass);
      if (this.hasNotificationIdValue) {
        set(`dismiss-banner-id-${this.notificationIdValue}`, this.notificationIdValue, { expires: "14D" });
      }
    }
  };
  __publicField(banner_controller_default, "targets", ["banner"]);
  __publicField(banner_controller_default, "classes", ["hide"]);
  __publicField(banner_controller_default, "values", {
    notificationId: Number
  });

  // application/lib/constructURLParams.ts
  var constructURLParams = (obj) => {
    const addArrayToURLParams = (params2, name, array) => {
      const paramName = `${name}[]`;
      array.forEach((el) => {
        params2.append(paramName, el);
      });
      return params2;
    };
    const params = new URLSearchParams();
    Object.keys(obj).forEach((prop) => {
      if (obj[prop] instanceof Array) {
        addArrayToURLParams(params, prop, obj[prop]);
      } else if (obj[prop] && obj[prop] !== "") {
        params.append(prop, obj[prop]);
      }
    });
    return params;
  };
  var constructURLParams_default = constructURLParams;

  // application/tools/access-annotator/index.ts
  var access_annotator_default = class {
    constructor() {
      this.accessCache = {};
    }
    updateDOMWithUserAccess(containingDiv = null) {
      const requiredIds = this.requiredContentIds(containingDiv);
      if (requiredIds.length != 0 && !!window.CAROLUS_ENV.USER_TOKEN) {
        this.requestAccessForContentIds(requiredIds).then((response) => this.updateCache(response)).then(() => this.updateUI(containingDiv)).catch((error2) => {
          if (error2.code !== 401) {
            console.error(error2);
          }
        });
      }
    }
    requiredContentIds(containingDiv) {
      const elementList = Array.from((containingDiv || document).querySelectorAll("[data-track-access-content-id]"));
      return elementList.map((e) => {
        this.accessCache[e.dataset.trackAccessContentId] = false;
        return e.dataset.trackAccessContentId;
      });
    }
    cacheMissContentIds(contentIds) {
      return contentIds.filter((id) => !Object.keys(this.accessCache).includes(id));
    }
    updateCache(response) {
      response.forEach((r) => {
        let access = false;
        if (r.access) {
          access = true;
        }
        this.accessCache[r.content_id.toString()] = access;
      });
    }
    updateUI(containingDiv) {
      const elementList = Array.from((containingDiv || document).querySelectorAll("[data-track-access-content-id]"));
      elementList.forEach((element) => {
        const contentId = element.dataset.trackAccessContentId;
        const accessClass = element.dataset.accessClass;
        const access = this.accessCache[contentId];
        if (access) {
          element.classList.remove(accessClass);
        } else {
          element.classList.add(accessClass);
        }
      });
    }
    requestAccessForContentIds(contentIds) {
      return new Promise((resolve, reject) => {
        Rails.ajax({
          url: "/permissions/access",
          type: "GET",
          data: constructURLParams_default({
            content_ids: contentIds
          }),
          success: (response) => {
            resolve(response);
          },
          error: (response, status, xhr) => {
            if (xhr.status === 401) {
              reject({ code: 401 });
            } else {
              reject({ code: null, payload: response });
            }
          }
        });
      });
    }
  };

  // application/tools/progress-annotator/index.ts
  var progress_annotator_default = class {
    constructor() {
      this.progressCache = {};
    }
    updateDOMWithUserProgress(containingDiv = null) {
      const requiredIds = this.requiredContentIds(containingDiv);
      if (requiredIds.length != 0 && !!window.CAROLUS_ENV.USER_TOKEN) {
        this.requestProgressForContentIds(this.cacheMissContentIds(requiredIds)).then((response) => this.updateCache(response)).then(() => this.updateUI(containingDiv)).catch((error2) => {
          if (error2.code !== 401) {
            console.error(error2);
          }
        });
      }
    }
    requiredContentIds(containingDiv) {
      const elementList = Array.from((containingDiv || document).querySelectorAll("[data-track-progress-content-id]"));
      return elementList.map((e) => e.dataset.trackProgressContentId);
    }
    cacheMissContentIds(contentIds) {
      return contentIds.filter((id) => !Object.keys(this.progressCache).includes(id));
    }
    updateCache(response) {
      response.forEach((r) => {
        let progress = 0 /* NotStarted */;
        if (r.finished) {
          progress = 2 /* Complete */;
        } else if (r.percent_complete > 0) {
          progress = 1 /* InProgress */;
        }
        this.progressCache[r.content_id.toString()] = progress;
      });
    }
    updateUI(containingDiv) {
      const elementList = Array.from((containingDiv || document).querySelectorAll("[data-track-progress-content-id]"));
      elementList.forEach((element) => {
        const contentId = element.dataset.trackProgressContentId;
        const inProgressClass = element.dataset.inProgressClass;
        const completedClass = element.dataset.completedClass;
        const progress = this.progressCache[contentId];
        switch (progress) {
          case 0 /* NotStarted */:
            element.classList.remove(inProgressClass, completedClass);
            break;
          case 1 /* InProgress */:
            element.classList.remove(completedClass);
            element.classList.add(inProgressClass);
            break;
          case 2 /* Complete */:
            element.classList.add(completedClass);
            element.classList.remove(inProgressClass);
            break;
          default:
            element.classList.remove(inProgressClass, completedClass);
        }
      });
    }
    requestProgressForContentIds(contentIds) {
      return new Promise((resolve, reject) => {
        Rails.ajax({
          url: "/progressions",
          type: "GET",
          data: constructURLParams_default({
            content_ids: contentIds
          }),
          success: (response) => {
            resolve(response);
          },
          error: (response, status, xhr) => {
            if (xhr.status === 401) {
              reject({ code: 401 });
            } else {
              reject({ code: null, payload: response });
            }
          }
        });
      });
    }
  };

  // ../../node_modules/vue/dist/vue.runtime.esm.js
  var emptyObject = Object.freeze({});
  var isArray = Array.isArray;
  function isUndef(v) {
    return v === void 0 || v === null;
  }
  function isDef(v) {
    return v !== void 0 && v !== null;
  }
  function isTrue(v) {
    return v === true;
  }
  function isFalse(v) {
    return v === false;
  }
  function isPrimitive(value) {
    return typeof value === "string" || typeof value === "number" || typeof value === "symbol" || typeof value === "boolean";
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  function isObject(obj) {
    return obj !== null && typeof obj === "object";
  }
  var _toString = Object.prototype.toString;
  function toRawType(value) {
    return _toString.call(value).slice(8, -1);
  }
  function isPlainObject(obj) {
    return _toString.call(obj) === "[object Object]";
  }
  function isRegExp(v) {
    return _toString.call(v) === "[object RegExp]";
  }
  function isValidArrayIndex(val) {
    var n = parseFloat(String(val));
    return n >= 0 && Math.floor(n) === n && isFinite(val);
  }
  function isPromise(val) {
    return isDef(val) && typeof val.then === "function" && typeof val.catch === "function";
  }
  function toString(val) {
    return val == null ? "" : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
  }
  function toNumber(val) {
    var n = parseFloat(val);
    return isNaN(n) ? val : n;
  }
  function makeMap(str, expectsLowerCase) {
    var map = /* @__PURE__ */ Object.create(null);
    var list = str.split(",");
    for (var i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }
    return expectsLowerCase ? function(val) {
      return map[val.toLowerCase()];
    } : function(val) {
      return map[val];
    };
  }
  var isBuiltInTag = makeMap("slot,component", true);
  var isReservedAttribute = makeMap("key,ref,slot,slot-scope,is");
  function remove$2(arr, item) {
    var len = arr.length;
    if (len) {
      if (item === arr[len - 1]) {
        arr.length = len - 1;
        return;
      }
      var index2 = arr.indexOf(item);
      if (index2 > -1) {
        return arr.splice(index2, 1);
      }
    }
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwn2(obj, key) {
    return hasOwnProperty.call(obj, key);
  }
  function cached(fn) {
    var cache2 = /* @__PURE__ */ Object.create(null);
    return function cachedFn(str) {
      var hit = cache2[str];
      return hit || (cache2[str] = fn(str));
    };
  }
  var camelizeRE = /-(\w)/g;
  var camelize2 = cached(function(str) {
    return str.replace(camelizeRE, function(_, c2) {
      return c2 ? c2.toUpperCase() : "";
    });
  });
  var capitalize2 = cached(function(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  });
  var hyphenateRE = /\B([A-Z])/g;
  var hyphenate = cached(function(str) {
    return str.replace(hyphenateRE, "-$1").toLowerCase();
  });
  function polyfillBind(fn, ctx) {
    function boundFn(a) {
      var l = arguments.length;
      return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
    }
    boundFn._length = fn.length;
    return boundFn;
  }
  function nativeBind(fn, ctx) {
    return fn.bind(ctx);
  }
  var bind = Function.prototype.bind ? nativeBind : polyfillBind;
  function toArray(list, start2) {
    start2 = start2 || 0;
    var i = list.length - start2;
    var ret = new Array(i);
    while (i--) {
      ret[i] = list[i + start2];
    }
    return ret;
  }
  function extend3(to, _from) {
    for (var key in _from) {
      to[key] = _from[key];
    }
    return to;
  }
  function toObject(arr) {
    var res = {};
    for (var i = 0; i < arr.length; i++) {
      if (arr[i]) {
        extend3(res, arr[i]);
      }
    }
    return res;
  }
  function noop(a, b, c2) {
  }
  var no = function(a, b, c2) {
    return false;
  };
  var identity = function(_) {
    return _;
  };
  function looseEqual(a, b) {
    if (a === b)
      return true;
    var isObjectA = isObject(a);
    var isObjectB = isObject(b);
    if (isObjectA && isObjectB) {
      try {
        var isArrayA = Array.isArray(a);
        var isArrayB = Array.isArray(b);
        if (isArrayA && isArrayB) {
          return a.length === b.length && a.every(function(e, i) {
            return looseEqual(e, b[i]);
          });
        } else if (a instanceof Date && b instanceof Date) {
          return a.getTime() === b.getTime();
        } else if (!isArrayA && !isArrayB) {
          var keysA = Object.keys(a);
          var keysB = Object.keys(b);
          return keysA.length === keysB.length && keysA.every(function(key) {
            return looseEqual(a[key], b[key]);
          });
        } else {
          return false;
        }
      } catch (e) {
        return false;
      }
    } else if (!isObjectA && !isObjectB) {
      return String(a) === String(b);
    } else {
      return false;
    }
  }
  function looseIndexOf(arr, val) {
    for (var i = 0; i < arr.length; i++) {
      if (looseEqual(arr[i], val))
        return i;
    }
    return -1;
  }
  function once(fn) {
    var called = false;
    return function() {
      if (!called) {
        called = true;
        fn.apply(this, arguments);
      }
    };
  }
  function hasChanged(x, y) {
    if (x === y) {
      return x === 0 && 1 / x !== 1 / y;
    } else {
      return x === x || y === y;
    }
  }
  var SSR_ATTR = "data-server-rendered";
  var ASSET_TYPES = ["component", "directive", "filter"];
  var LIFECYCLE_HOOKS = [
    "beforeCreate",
    "created",
    "beforeMount",
    "mounted",
    "beforeUpdate",
    "updated",
    "beforeDestroy",
    "destroyed",
    "activated",
    "deactivated",
    "errorCaptured",
    "serverPrefetch",
    "renderTracked",
    "renderTriggered"
  ];
  var config = {
    optionMergeStrategies: /* @__PURE__ */ Object.create(null),
    silent: false,
    productionTip: true,
    devtools: true,
    performance: false,
    errorHandler: null,
    warnHandler: null,
    ignoredElements: [],
    keyCodes: /* @__PURE__ */ Object.create(null),
    isReservedTag: no,
    isReservedAttr: no,
    isUnknownElement: no,
    getTagNamespace: noop,
    parsePlatformTagName: identity,
    mustUseProp: no,
    async: true,
    _lifecycleHooks: LIFECYCLE_HOOKS
  };
  var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
  function isReserved(str) {
    var c2 = (str + "").charCodeAt(0);
    return c2 === 36 || c2 === 95;
  }
  function def(obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }
  var bailRE = new RegExp("[^".concat(unicodeRegExp.source, ".$_\\d]"));
  function parsePath(path) {
    if (bailRE.test(path)) {
      return;
    }
    var segments = path.split(".");
    return function(obj) {
      for (var i = 0; i < segments.length; i++) {
        if (!obj)
          return;
        obj = obj[segments[i]];
      }
      return obj;
    };
  }
  var hasProto = "__proto__" in {};
  var inBrowser = typeof window !== "undefined";
  var UA = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIE = UA && /msie|trident/.test(UA);
  var isIE9 = UA && UA.indexOf("msie 9.0") > 0;
  var isEdge = UA && UA.indexOf("edge/") > 0;
  UA && UA.indexOf("android") > 0;
  var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
  UA && /chrome\/\d+/.test(UA) && !isEdge;
  UA && /phantomjs/.test(UA);
  var isFF = UA && UA.match(/firefox\/(\d+)/);
  var nativeWatch = {}.watch;
  var supportsPassive = false;
  if (inBrowser) {
    try {
      opts = {};
      Object.defineProperty(opts, "passive", {
        get: function() {
          supportsPassive = true;
        }
      });
      window.addEventListener("test-passive", null, opts);
    } catch (e) {
    }
  }
  var opts;
  var _isServer;
  var isServerRendering = function() {
    if (_isServer === void 0) {
      if (!inBrowser && typeof global !== "undefined") {
        _isServer = global["process"] && global["process"].env.VUE_ENV === "server";
      } else {
        _isServer = false;
      }
    }
    return _isServer;
  };
  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
  function isNative(Ctor) {
    return typeof Ctor === "function" && /native code/.test(Ctor.toString());
  }
  var hasSymbol = typeof Symbol !== "undefined" && isNative(Symbol) && typeof Reflect !== "undefined" && isNative(Reflect.ownKeys);
  var _Set;
  if (typeof Set !== "undefined" && isNative(Set)) {
    _Set = Set;
  } else {
    _Set = function() {
      function Set2() {
        this.set = /* @__PURE__ */ Object.create(null);
      }
      Set2.prototype.has = function(key) {
        return this.set[key] === true;
      };
      Set2.prototype.add = function(key) {
        this.set[key] = true;
      };
      Set2.prototype.clear = function() {
        this.set = /* @__PURE__ */ Object.create(null);
      };
      return Set2;
    }();
  }
  var currentInstance = null;
  function setCurrentInstance(vm) {
    if (vm === void 0) {
      vm = null;
    }
    if (!vm)
      currentInstance && currentInstance._scope.off();
    currentInstance = vm;
    vm && vm._scope.on();
  }
  var VNode = function() {
    function VNode2(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
      this.tag = tag;
      this.data = data;
      this.children = children;
      this.text = text;
      this.elm = elm;
      this.ns = void 0;
      this.context = context;
      this.fnContext = void 0;
      this.fnOptions = void 0;
      this.fnScopeId = void 0;
      this.key = data && data.key;
      this.componentOptions = componentOptions;
      this.componentInstance = void 0;
      this.parent = void 0;
      this.raw = false;
      this.isStatic = false;
      this.isRootInsert = true;
      this.isComment = false;
      this.isCloned = false;
      this.isOnce = false;
      this.asyncFactory = asyncFactory;
      this.asyncMeta = void 0;
      this.isAsyncPlaceholder = false;
    }
    Object.defineProperty(VNode2.prototype, "child", {
      get: function() {
        return this.componentInstance;
      },
      enumerable: false,
      configurable: true
    });
    return VNode2;
  }();
  var createEmptyVNode = function(text) {
    if (text === void 0) {
      text = "";
    }
    var node = new VNode();
    node.text = text;
    node.isComment = true;
    return node;
  };
  function createTextVNode(val) {
    return new VNode(void 0, void 0, void 0, String(val));
  }
  function cloneVNode(vnode) {
    var cloned = new VNode(
      vnode.tag,
      vnode.data,
      vnode.children && vnode.children.slice(),
      vnode.text,
      vnode.elm,
      vnode.context,
      vnode.componentOptions,
      vnode.asyncFactory
    );
    cloned.ns = vnode.ns;
    cloned.isStatic = vnode.isStatic;
    cloned.key = vnode.key;
    cloned.isComment = vnode.isComment;
    cloned.fnContext = vnode.fnContext;
    cloned.fnOptions = vnode.fnOptions;
    cloned.fnScopeId = vnode.fnScopeId;
    cloned.asyncMeta = vnode.asyncMeta;
    cloned.isCloned = true;
    return cloned;
  }
  var __assign = function() {
    __assign = Object.assign || function __assign2(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };
  var uid$2 = 0;
  var pendingCleanupDeps = [];
  var cleanupDeps = function() {
    for (var i = 0; i < pendingCleanupDeps.length; i++) {
      var dep = pendingCleanupDeps[i];
      dep.subs = dep.subs.filter(function(s) {
        return s;
      });
      dep._pending = false;
    }
    pendingCleanupDeps.length = 0;
  };
  var Dep = function() {
    function Dep2() {
      this._pending = false;
      this.id = uid$2++;
      this.subs = [];
    }
    Dep2.prototype.addSub = function(sub) {
      this.subs.push(sub);
    };
    Dep2.prototype.removeSub = function(sub) {
      this.subs[this.subs.indexOf(sub)] = null;
      if (!this._pending) {
        this._pending = true;
        pendingCleanupDeps.push(this);
      }
    };
    Dep2.prototype.depend = function(info) {
      if (Dep2.target) {
        Dep2.target.addDep(this);
        if (info && Dep2.target.onTrack) {
          Dep2.target.onTrack(__assign({ effect: Dep2.target }, info));
        }
      }
    };
    Dep2.prototype.notify = function(info) {
      var subs = this.subs.filter(function(s) {
        return s;
      });
      if (!config.async) {
        subs.sort(function(a, b) {
          return a.id - b.id;
        });
      }
      for (var i = 0, l = subs.length; i < l; i++) {
        var sub = subs[i];
        if (info) {
          sub.onTrigger && sub.onTrigger(__assign({ effect: subs[i] }, info));
        }
        sub.update();
      }
    };
    return Dep2;
  }();
  Dep.target = null;
  var targetStack = [];
  function pushTarget(target2) {
    targetStack.push(target2);
    Dep.target = target2;
  }
  function popTarget() {
    targetStack.pop();
    Dep.target = targetStack[targetStack.length - 1];
  }
  var arrayProto = Array.prototype;
  var arrayMethods = Object.create(arrayProto);
  var methodsToPatch = [
    "push",
    "pop",
    "shift",
    "unshift",
    "splice",
    "sort",
    "reverse"
  ];
  methodsToPatch.forEach(function(method) {
    var original = arrayProto[method];
    def(arrayMethods, method, function mutator() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var result = original.apply(this, args);
      var ob = this.__ob__;
      var inserted;
      switch (method) {
        case "push":
        case "unshift":
          inserted = args;
          break;
        case "splice":
          inserted = args.slice(2);
          break;
      }
      if (inserted)
        ob.observeArray(inserted);
      if (true) {
        ob.dep.notify({
          type: "array mutation",
          target: this,
          key: method
        });
      } else {
        ob.dep.notify();
      }
      return result;
    });
  });
  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
  var NO_INIITIAL_VALUE = {};
  var shouldObserve = true;
  function toggleObserving(value) {
    shouldObserve = value;
  }
  var mockDep = {
    notify: noop,
    depend: noop,
    addSub: noop,
    removeSub: noop
  };
  var Observer = function() {
    function Observer2(value, shallow, mock) {
      if (shallow === void 0) {
        shallow = false;
      }
      if (mock === void 0) {
        mock = false;
      }
      this.value = value;
      this.shallow = shallow;
      this.mock = mock;
      this.dep = mock ? mockDep : new Dep();
      this.vmCount = 0;
      def(value, "__ob__", this);
      if (isArray(value)) {
        if (!mock) {
          if (hasProto) {
            value.__proto__ = arrayMethods;
          } else {
            for (var i = 0, l = arrayKeys.length; i < l; i++) {
              var key = arrayKeys[i];
              def(value, key, arrayMethods[key]);
            }
          }
        }
        if (!shallow) {
          this.observeArray(value);
        }
      } else {
        var keys = Object.keys(value);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          defineReactive(value, key, NO_INIITIAL_VALUE, void 0, shallow, mock);
        }
      }
    }
    Observer2.prototype.observeArray = function(value) {
      for (var i = 0, l = value.length; i < l; i++) {
        observe(value[i], false, this.mock);
      }
    };
    return Observer2;
  }();
  function observe(value, shallow, ssrMockReactivity) {
    if (value && hasOwn2(value, "__ob__") && value.__ob__ instanceof Observer) {
      return value.__ob__;
    }
    if (shouldObserve && (ssrMockReactivity || !isServerRendering()) && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value.__v_skip && !isRef(value) && !(value instanceof VNode)) {
      return new Observer(value, shallow, ssrMockReactivity);
    }
  }
  function defineReactive(obj, key, val, customSetter, shallow, mock) {
    var dep = new Dep();
    var property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
      return;
    }
    var getter = property && property.get;
    var setter = property && property.set;
    if ((!getter || setter) && (val === NO_INIITIAL_VALUE || arguments.length === 2)) {
      val = obj[key];
    }
    var childOb = !shallow && observe(val, false, mock);
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: function reactiveGetter() {
        var value = getter ? getter.call(obj) : val;
        if (Dep.target) {
          if (true) {
            dep.depend({
              target: obj,
              type: "get",
              key
            });
          } else {
            dep.depend();
          }
          if (childOb) {
            childOb.dep.depend();
            if (isArray(value)) {
              dependArray(value);
            }
          }
        }
        return isRef(value) && !shallow ? value.value : value;
      },
      set: function reactiveSetter(newVal) {
        var value = getter ? getter.call(obj) : val;
        if (!hasChanged(value, newVal)) {
          return;
        }
        if (customSetter) {
          customSetter();
        }
        if (setter) {
          setter.call(obj, newVal);
        } else if (getter) {
          return;
        } else if (!shallow && isRef(value) && !isRef(newVal)) {
          value.value = newVal;
          return;
        } else {
          val = newVal;
        }
        childOb = !shallow && observe(newVal, false, mock);
        if (true) {
          dep.notify({
            type: "set",
            target: obj,
            key,
            newValue: newVal,
            oldValue: value
          });
        } else {
          dep.notify();
        }
      }
    });
    return dep;
  }
  function set2(target2, key, val) {
    if (isUndef(target2) || isPrimitive(target2)) {
      warn("Cannot set reactive property on undefined, null, or primitive value: ".concat(target2));
    }
    if (isReadonly(target2)) {
      warn('Set operation on key "'.concat(key, '" failed: target is readonly.'));
      return;
    }
    var ob = target2.__ob__;
    if (isArray(target2) && isValidArrayIndex(key)) {
      target2.length = Math.max(target2.length, key);
      target2.splice(key, 1, val);
      if (ob && !ob.shallow && ob.mock) {
        observe(val, false, true);
      }
      return val;
    }
    if (key in target2 && !(key in Object.prototype)) {
      target2[key] = val;
      return val;
    }
    if (target2._isVue || ob && ob.vmCount) {
      warn("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.");
      return val;
    }
    if (!ob) {
      target2[key] = val;
      return val;
    }
    defineReactive(ob.value, key, val, void 0, ob.shallow, ob.mock);
    if (true) {
      ob.dep.notify({
        type: "add",
        target: target2,
        key,
        newValue: val,
        oldValue: void 0
      });
    } else {
      ob.dep.notify();
    }
    return val;
  }
  function del2(target2, key) {
    if (isUndef(target2) || isPrimitive(target2)) {
      warn("Cannot delete reactive property on undefined, null, or primitive value: ".concat(target2));
    }
    if (isArray(target2) && isValidArrayIndex(key)) {
      target2.splice(key, 1);
      return;
    }
    var ob = target2.__ob__;
    if (target2._isVue || ob && ob.vmCount) {
      warn("Avoid deleting properties on a Vue instance or its root $data - just set it to null.");
      return;
    }
    if (isReadonly(target2)) {
      warn('Delete operation on key "'.concat(key, '" failed: target is readonly.'));
      return;
    }
    if (!hasOwn2(target2, key)) {
      return;
    }
    delete target2[key];
    if (!ob) {
      return;
    }
    if (true) {
      ob.dep.notify({
        type: "delete",
        target: target2,
        key
      });
    } else {
      ob.dep.notify();
    }
  }
  function dependArray(value) {
    for (var e = void 0, i = 0, l = value.length; i < l; i++) {
      e = value[i];
      if (e && e.__ob__) {
        e.__ob__.dep.depend();
      }
      if (isArray(e)) {
        dependArray(e);
      }
    }
  }
  function shallowReactive(target2) {
    makeReactive(target2, true);
    def(target2, "__v_isShallow", true);
    return target2;
  }
  function makeReactive(target2, shallow) {
    if (!isReadonly(target2)) {
      if (true) {
        if (isArray(target2)) {
          warn("Avoid using Array as root value for ".concat(shallow ? "shallowReactive()" : "reactive()", " as it cannot be tracked in watch() or watchEffect(). Use ").concat(shallow ? "shallowRef()" : "ref()", " instead. This is a Vue-2-only limitation."));
        }
        var existingOb = target2 && target2.__ob__;
        if (existingOb && existingOb.shallow !== shallow) {
          warn("Target is already a ".concat(existingOb.shallow ? "" : "non-", "shallow reactive object, and cannot be converted to ").concat(shallow ? "" : "non-", "shallow."));
        }
      }
      var ob = observe(target2, shallow, isServerRendering());
      if (!ob) {
        if (target2 == null || isPrimitive(target2)) {
          warn("value cannot be made reactive: ".concat(String(target2)));
        }
        if (isCollectionType(target2)) {
          warn("Vue 2 does not support reactive collection types such as Map or Set.");
        }
      }
    }
  }
  function isReadonly(value) {
    return !!(value && value.__v_isReadonly);
  }
  function isCollectionType(value) {
    var type = toRawType(value);
    return type === "Map" || type === "WeakMap" || type === "Set" || type === "WeakSet";
  }
  function isRef(r) {
    return !!(r && r.__v_isRef === true);
  }
  function proxyWithRefUnwrap(target2, source, key) {
    Object.defineProperty(target2, key, {
      enumerable: true,
      configurable: true,
      get: function() {
        var val = source[key];
        if (isRef(val)) {
          return val.value;
        } else {
          var ob = val && val.__ob__;
          if (ob)
            ob.dep.depend();
          return val;
        }
      },
      set: function(value) {
        var oldValue = source[key];
        if (isRef(oldValue) && !isRef(value)) {
          oldValue.value = value;
        } else {
          source[key] = value;
        }
      }
    });
  }
  var WATCHER = "watcher";
  var WATCHER_CB = "".concat(WATCHER, " callback");
  var WATCHER_GETTER = "".concat(WATCHER, " getter");
  var WATCHER_CLEANUP = "".concat(WATCHER, " cleanup");
  var activeEffectScope;
  var EffectScope = function() {
    function EffectScope2(detached) {
      if (detached === void 0) {
        detached = false;
      }
      this.detached = detached;
      this.active = true;
      this.effects = [];
      this.cleanups = [];
      this.parent = activeEffectScope;
      if (!detached && activeEffectScope) {
        this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
      }
    }
    EffectScope2.prototype.run = function(fn) {
      if (this.active) {
        var currentEffectScope = activeEffectScope;
        try {
          activeEffectScope = this;
          return fn();
        } finally {
          activeEffectScope = currentEffectScope;
        }
      } else if (true) {
        warn("cannot run an inactive effect scope.");
      }
    };
    EffectScope2.prototype.on = function() {
      activeEffectScope = this;
    };
    EffectScope2.prototype.off = function() {
      activeEffectScope = this.parent;
    };
    EffectScope2.prototype.stop = function(fromParent) {
      if (this.active) {
        var i = void 0, l = void 0;
        for (i = 0, l = this.effects.length; i < l; i++) {
          this.effects[i].teardown();
        }
        for (i = 0, l = this.cleanups.length; i < l; i++) {
          this.cleanups[i]();
        }
        if (this.scopes) {
          for (i = 0, l = this.scopes.length; i < l; i++) {
            this.scopes[i].stop(true);
          }
        }
        if (!this.detached && this.parent && !fromParent) {
          var last2 = this.parent.scopes.pop();
          if (last2 && last2 !== this) {
            this.parent.scopes[this.index] = last2;
            last2.index = this.index;
          }
        }
        this.parent = void 0;
        this.active = false;
      }
    };
    return EffectScope2;
  }();
  function recordEffectScope(effect, scope) {
    if (scope === void 0) {
      scope = activeEffectScope;
    }
    if (scope && scope.active) {
      scope.effects.push(effect);
    }
  }
  function resolveProvided(vm) {
    var existing = vm._provided;
    var parentProvides = vm.$parent && vm.$parent._provided;
    if (parentProvides === existing) {
      return vm._provided = Object.create(parentProvides);
    } else {
      return existing;
    }
  }
  var normalizeEvent = cached(function(name) {
    var passive = name.charAt(0) === "&";
    name = passive ? name.slice(1) : name;
    var once2 = name.charAt(0) === "~";
    name = once2 ? name.slice(1) : name;
    var capture = name.charAt(0) === "!";
    name = capture ? name.slice(1) : name;
    return {
      name,
      once: once2,
      capture,
      passive
    };
  });
  function createFnInvoker(fns, vm) {
    function invoker() {
      var fns2 = invoker.fns;
      if (isArray(fns2)) {
        var cloned = fns2.slice();
        for (var i = 0; i < cloned.length; i++) {
          invokeWithErrorHandling(cloned[i], null, arguments, vm, "v-on handler");
        }
      } else {
        return invokeWithErrorHandling(fns2, null, arguments, vm, "v-on handler");
      }
    }
    invoker.fns = fns;
    return invoker;
  }
  function updateListeners(on, oldOn, add3, remove2, createOnceHandler2, vm) {
    var name, cur, old, event;
    for (name in on) {
      cur = on[name];
      old = oldOn[name];
      event = normalizeEvent(name);
      if (isUndef(cur)) {
        warn('Invalid handler for event "'.concat(event.name, '": got ') + String(cur), vm);
      } else if (isUndef(old)) {
        if (isUndef(cur.fns)) {
          cur = on[name] = createFnInvoker(cur, vm);
        }
        if (isTrue(event.once)) {
          cur = on[name] = createOnceHandler2(event.name, cur, event.capture);
        }
        add3(event.name, cur, event.capture, event.passive, event.params);
      } else if (cur !== old) {
        old.fns = cur;
        on[name] = old;
      }
    }
    for (name in oldOn) {
      if (isUndef(on[name])) {
        event = normalizeEvent(name);
        remove2(event.name, oldOn[name], event.capture);
      }
    }
  }
  function mergeVNodeHook(def2, hookKey, hook) {
    if (def2 instanceof VNode) {
      def2 = def2.data.hook || (def2.data.hook = {});
    }
    var invoker;
    var oldHook = def2[hookKey];
    function wrappedHook() {
      hook.apply(this, arguments);
      remove$2(invoker.fns, wrappedHook);
    }
    if (isUndef(oldHook)) {
      invoker = createFnInvoker([wrappedHook]);
    } else {
      if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
        invoker = oldHook;
        invoker.fns.push(wrappedHook);
      } else {
        invoker = createFnInvoker([oldHook, wrappedHook]);
      }
    }
    invoker.merged = true;
    def2[hookKey] = invoker;
  }
  function extractPropsFromVNodeData(data, Ctor, tag) {
    var propOptions = Ctor.options.props;
    if (isUndef(propOptions)) {
      return;
    }
    var res = {};
    var attrs2 = data.attrs, props2 = data.props;
    if (isDef(attrs2) || isDef(props2)) {
      for (var key in propOptions) {
        var altKey = hyphenate(key);
        if (true) {
          var keyInLowerCase = key.toLowerCase();
          if (key !== keyInLowerCase && attrs2 && hasOwn2(attrs2, keyInLowerCase)) {
            tip('Prop "'.concat(keyInLowerCase, '" is passed to component ') + "".concat(formatComponentName(
              tag || Ctor
            ), ", but the declared prop name is") + ' "'.concat(key, '". ') + "Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM " + 'templates. You should probably use "'.concat(altKey, '" instead of "').concat(key, '".'));
          }
        }
        checkProp(res, props2, key, altKey, true) || checkProp(res, attrs2, key, altKey, false);
      }
    }
    return res;
  }
  function checkProp(res, hash, key, altKey, preserve) {
    if (isDef(hash)) {
      if (hasOwn2(hash, key)) {
        res[key] = hash[key];
        if (!preserve) {
          delete hash[key];
        }
        return true;
      } else if (hasOwn2(hash, altKey)) {
        res[key] = hash[altKey];
        if (!preserve) {
          delete hash[altKey];
        }
        return true;
      }
    }
    return false;
  }
  function simpleNormalizeChildren(children) {
    for (var i = 0; i < children.length; i++) {
      if (isArray(children[i])) {
        return Array.prototype.concat.apply([], children);
      }
    }
    return children;
  }
  function normalizeChildren(children) {
    return isPrimitive(children) ? [createTextVNode(children)] : isArray(children) ? normalizeArrayChildren(children) : void 0;
  }
  function isTextNode(node) {
    return isDef(node) && isDef(node.text) && isFalse(node.isComment);
  }
  function normalizeArrayChildren(children, nestedIndex) {
    var res = [];
    var i, c2, lastIndex, last2;
    for (i = 0; i < children.length; i++) {
      c2 = children[i];
      if (isUndef(c2) || typeof c2 === "boolean")
        continue;
      lastIndex = res.length - 1;
      last2 = res[lastIndex];
      if (isArray(c2)) {
        if (c2.length > 0) {
          c2 = normalizeArrayChildren(c2, "".concat(nestedIndex || "", "_").concat(i));
          if (isTextNode(c2[0]) && isTextNode(last2)) {
            res[lastIndex] = createTextVNode(last2.text + c2[0].text);
            c2.shift();
          }
          res.push.apply(res, c2);
        }
      } else if (isPrimitive(c2)) {
        if (isTextNode(last2)) {
          res[lastIndex] = createTextVNode(last2.text + c2);
        } else if (c2 !== "") {
          res.push(createTextVNode(c2));
        }
      } else {
        if (isTextNode(c2) && isTextNode(last2)) {
          res[lastIndex] = createTextVNode(last2.text + c2.text);
        } else {
          if (isTrue(children._isVList) && isDef(c2.tag) && isUndef(c2.key) && isDef(nestedIndex)) {
            c2.key = "__vlist".concat(nestedIndex, "_").concat(i, "__");
          }
          res.push(c2);
        }
      }
    }
    return res;
  }
  function renderList(val, render) {
    var ret = null, i, l, keys, key;
    if (isArray(val) || typeof val === "string") {
      ret = new Array(val.length);
      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = render(val[i], i);
      }
    } else if (typeof val === "number") {
      ret = new Array(val);
      for (i = 0; i < val; i++) {
        ret[i] = render(i + 1, i);
      }
    } else if (isObject(val)) {
      if (hasSymbol && val[Symbol.iterator]) {
        ret = [];
        var iterator = val[Symbol.iterator]();
        var result = iterator.next();
        while (!result.done) {
          ret.push(render(result.value, ret.length));
          result = iterator.next();
        }
      } else {
        keys = Object.keys(val);
        ret = new Array(keys.length);
        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          ret[i] = render(val[key], key, i);
        }
      }
    }
    if (!isDef(ret)) {
      ret = [];
    }
    ret._isVList = true;
    return ret;
  }
  function renderSlot(name, fallbackRender, props2, bindObject) {
    var scopedSlotFn = this.$scopedSlots[name];
    var nodes;
    if (scopedSlotFn) {
      props2 = props2 || {};
      if (bindObject) {
        if (!isObject(bindObject)) {
          warn("slot v-bind without argument expects an Object", this);
        }
        props2 = extend3(extend3({}, bindObject), props2);
      }
      nodes = scopedSlotFn(props2) || (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);
    } else {
      nodes = this.$slots[name] || (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);
    }
    var target2 = props2 && props2.slot;
    if (target2) {
      return this.$createElement("template", { slot: target2 }, nodes);
    } else {
      return nodes;
    }
  }
  function resolveFilter(id) {
    return resolveAsset(this.$options, "filters", id, true) || identity;
  }
  function isKeyNotMatch(expect, actual) {
    if (isArray(expect)) {
      return expect.indexOf(actual) === -1;
    } else {
      return expect !== actual;
    }
  }
  function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
    var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
    if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
      return isKeyNotMatch(builtInKeyName, eventKeyName);
    } else if (mappedKeyCode) {
      return isKeyNotMatch(mappedKeyCode, eventKeyCode);
    } else if (eventKeyName) {
      return hyphenate(eventKeyName) !== key;
    }
    return eventKeyCode === void 0;
  }
  function bindObjectProps(data, tag, value, asProp, isSync) {
    if (value) {
      if (!isObject(value)) {
        warn("v-bind without argument expects an Object or Array value", this);
      } else {
        if (isArray(value)) {
          value = toObject(value);
        }
        var hash = void 0;
        var _loop_1 = function(key2) {
          if (key2 === "class" || key2 === "style" || isReservedAttribute(key2)) {
            hash = data;
          } else {
            var type = data.attrs && data.attrs.type;
            hash = asProp || config.mustUseProp(tag, type, key2) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
          }
          var camelizedKey = camelize2(key2);
          var hyphenatedKey = hyphenate(key2);
          if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
            hash[key2] = value[key2];
            if (isSync) {
              var on = data.on || (data.on = {});
              on["update:".concat(key2)] = function($event) {
                value[key2] = $event;
              };
            }
          }
        };
        for (var key in value) {
          _loop_1(key);
        }
      }
    }
    return data;
  }
  function renderStatic(index2, isInFor) {
    var cached2 = this._staticTrees || (this._staticTrees = []);
    var tree = cached2[index2];
    if (tree && !isInFor) {
      return tree;
    }
    tree = cached2[index2] = this.$options.staticRenderFns[index2].call(
      this._renderProxy,
      this._c,
      this
    );
    markStatic(tree, "__static__".concat(index2), false);
    return tree;
  }
  function markOnce(tree, index2, key) {
    markStatic(tree, "__once__".concat(index2).concat(key ? "_".concat(key) : ""), true);
    return tree;
  }
  function markStatic(tree, key, isOnce) {
    if (isArray(tree)) {
      for (var i = 0; i < tree.length; i++) {
        if (tree[i] && typeof tree[i] !== "string") {
          markStaticNode(tree[i], "".concat(key, "_").concat(i), isOnce);
        }
      }
    } else {
      markStaticNode(tree, key, isOnce);
    }
  }
  function markStaticNode(node, key, isOnce) {
    node.isStatic = true;
    node.key = key;
    node.isOnce = isOnce;
  }
  function bindObjectListeners(data, value) {
    if (value) {
      if (!isPlainObject(value)) {
        warn("v-on without argument expects an Object value", this);
      } else {
        var on = data.on = data.on ? extend3({}, data.on) : {};
        for (var key in value) {
          var existing = on[key];
          var ours = value[key];
          on[key] = existing ? [].concat(existing, ours) : ours;
        }
      }
    }
    return data;
  }
  function resolveScopedSlots(fns, res, hasDynamicKeys, contentHashKey) {
    res = res || { $stable: !hasDynamicKeys };
    for (var i = 0; i < fns.length; i++) {
      var slot = fns[i];
      if (isArray(slot)) {
        resolveScopedSlots(slot, res, hasDynamicKeys);
      } else if (slot) {
        if (slot.proxy) {
          slot.fn.proxy = true;
        }
        res[slot.key] = slot.fn;
      }
    }
    if (contentHashKey) {
      res.$key = contentHashKey;
    }
    return res;
  }
  function bindDynamicKeys(baseObj, values) {
    for (var i = 0; i < values.length; i += 2) {
      var key = values[i];
      if (typeof key === "string" && key) {
        baseObj[values[i]] = values[i + 1];
      } else if (key !== "" && key !== null) {
        warn("Invalid value for dynamic directive argument (expected string or null): ".concat(key), this);
      }
    }
    return baseObj;
  }
  function prependModifier(value, symbol) {
    return typeof value === "string" ? symbol + value : value;
  }
  function installRenderHelpers(target2) {
    target2._o = markOnce;
    target2._n = toNumber;
    target2._s = toString;
    target2._l = renderList;
    target2._t = renderSlot;
    target2._q = looseEqual;
    target2._i = looseIndexOf;
    target2._m = renderStatic;
    target2._f = resolveFilter;
    target2._k = checkKeyCodes;
    target2._b = bindObjectProps;
    target2._v = createTextVNode;
    target2._e = createEmptyVNode;
    target2._u = resolveScopedSlots;
    target2._g = bindObjectListeners;
    target2._d = bindDynamicKeys;
    target2._p = prependModifier;
  }
  function resolveSlots(children, context) {
    if (!children || !children.length) {
      return {};
    }
    var slots = {};
    for (var i = 0, l = children.length; i < l; i++) {
      var child = children[i];
      var data = child.data;
      if (data && data.attrs && data.attrs.slot) {
        delete data.attrs.slot;
      }
      if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
        var name_1 = data.slot;
        var slot = slots[name_1] || (slots[name_1] = []);
        if (child.tag === "template") {
          slot.push.apply(slot, child.children || []);
        } else {
          slot.push(child);
        }
      } else {
        (slots.default || (slots.default = [])).push(child);
      }
    }
    for (var name_2 in slots) {
      if (slots[name_2].every(isWhitespace)) {
        delete slots[name_2];
      }
    }
    return slots;
  }
  function isWhitespace(node) {
    return node.isComment && !node.asyncFactory || node.text === " ";
  }
  function isAsyncPlaceholder(node) {
    return node.isComment && node.asyncFactory;
  }
  function normalizeScopedSlots(ownerVm, scopedSlots, normalSlots, prevScopedSlots) {
    var res;
    var hasNormalSlots = Object.keys(normalSlots).length > 0;
    var isStable = scopedSlots ? !!scopedSlots.$stable : !hasNormalSlots;
    var key = scopedSlots && scopedSlots.$key;
    if (!scopedSlots) {
      res = {};
    } else if (scopedSlots._normalized) {
      return scopedSlots._normalized;
    } else if (isStable && prevScopedSlots && prevScopedSlots !== emptyObject && key === prevScopedSlots.$key && !hasNormalSlots && !prevScopedSlots.$hasNormal) {
      return prevScopedSlots;
    } else {
      res = {};
      for (var key_1 in scopedSlots) {
        if (scopedSlots[key_1] && key_1[0] !== "$") {
          res[key_1] = normalizeScopedSlot(ownerVm, normalSlots, key_1, scopedSlots[key_1]);
        }
      }
    }
    for (var key_2 in normalSlots) {
      if (!(key_2 in res)) {
        res[key_2] = proxyNormalSlot(normalSlots, key_2);
      }
    }
    if (scopedSlots && Object.isExtensible(scopedSlots)) {
      scopedSlots._normalized = res;
    }
    def(res, "$stable", isStable);
    def(res, "$key", key);
    def(res, "$hasNormal", hasNormalSlots);
    return res;
  }
  function normalizeScopedSlot(vm, normalSlots, key, fn) {
    var normalized = function() {
      var cur = currentInstance;
      setCurrentInstance(vm);
      var res = arguments.length ? fn.apply(null, arguments) : fn({});
      res = res && typeof res === "object" && !isArray(res) ? [res] : normalizeChildren(res);
      var vnode = res && res[0];
      setCurrentInstance(cur);
      return res && (!vnode || res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) ? void 0 : res;
    };
    if (fn.proxy) {
      Object.defineProperty(normalSlots, key, {
        get: normalized,
        enumerable: true,
        configurable: true
      });
    }
    return normalized;
  }
  function proxyNormalSlot(slots, key) {
    return function() {
      return slots[key];
    };
  }
  function initSetup(vm) {
    var options = vm.$options;
    var setup = options.setup;
    if (setup) {
      var ctx = vm._setupContext = createSetupContext(vm);
      setCurrentInstance(vm);
      pushTarget();
      var setupResult = invokeWithErrorHandling(setup, null, [vm._props || shallowReactive({}), ctx], vm, "setup");
      popTarget();
      setCurrentInstance();
      if (isFunction(setupResult)) {
        options.render = setupResult;
      } else if (isObject(setupResult)) {
        if (setupResult instanceof VNode) {
          warn("setup() should not return VNodes directly - return a render function instead.");
        }
        vm._setupState = setupResult;
        if (!setupResult.__sfc) {
          for (var key in setupResult) {
            if (!isReserved(key)) {
              proxyWithRefUnwrap(vm, setupResult, key);
            } else if (true) {
              warn("Avoid using variables that start with _ or $ in setup().");
            }
          }
        } else {
          var proxy2 = vm._setupProxy = {};
          for (var key in setupResult) {
            if (key !== "__sfc") {
              proxyWithRefUnwrap(proxy2, setupResult, key);
            }
          }
        }
      } else if (setupResult !== void 0) {
        warn("setup() should return an object. Received: ".concat(setupResult === null ? "null" : typeof setupResult));
      }
    }
  }
  function createSetupContext(vm) {
    var exposeCalled = false;
    return {
      get attrs() {
        if (!vm._attrsProxy) {
          var proxy2 = vm._attrsProxy = {};
          def(proxy2, "_v_attr_proxy", true);
          syncSetupProxy(proxy2, vm.$attrs, emptyObject, vm, "$attrs");
        }
        return vm._attrsProxy;
      },
      get listeners() {
        if (!vm._listenersProxy) {
          var proxy2 = vm._listenersProxy = {};
          syncSetupProxy(proxy2, vm.$listeners, emptyObject, vm, "$listeners");
        }
        return vm._listenersProxy;
      },
      get slots() {
        return initSlotsProxy(vm);
      },
      emit: bind(vm.$emit, vm),
      expose: function(exposed) {
        if (true) {
          if (exposeCalled) {
            warn("expose() should be called only once per setup().", vm);
          }
          exposeCalled = true;
        }
        if (exposed) {
          Object.keys(exposed).forEach(function(key) {
            return proxyWithRefUnwrap(vm, exposed, key);
          });
        }
      }
    };
  }
  function syncSetupProxy(to, from, prev, instance, type) {
    var changed = false;
    for (var key in from) {
      if (!(key in to)) {
        changed = true;
        defineProxyAttr(to, key, instance, type);
      } else if (from[key] !== prev[key]) {
        changed = true;
      }
    }
    for (var key in to) {
      if (!(key in from)) {
        changed = true;
        delete to[key];
      }
    }
    return changed;
  }
  function defineProxyAttr(proxy2, key, instance, type) {
    Object.defineProperty(proxy2, key, {
      enumerable: true,
      configurable: true,
      get: function() {
        return instance[type][key];
      }
    });
  }
  function initSlotsProxy(vm) {
    if (!vm._slotsProxy) {
      syncSetupSlots(vm._slotsProxy = {}, vm.$scopedSlots);
    }
    return vm._slotsProxy;
  }
  function syncSetupSlots(to, from) {
    for (var key in from) {
      to[key] = from[key];
    }
    for (var key in to) {
      if (!(key in from)) {
        delete to[key];
      }
    }
  }
  function initRender(vm) {
    vm._vnode = null;
    vm._staticTrees = null;
    var options = vm.$options;
    var parentVnode = vm.$vnode = options._parentVnode;
    var renderContext = parentVnode && parentVnode.context;
    vm.$slots = resolveSlots(options._renderChildren, renderContext);
    vm.$scopedSlots = parentVnode ? normalizeScopedSlots(vm.$parent, parentVnode.data.scopedSlots, vm.$slots) : emptyObject;
    vm._c = function(a, b, c2, d) {
      return createElement$1(vm, a, b, c2, d, false);
    };
    vm.$createElement = function(a, b, c2, d) {
      return createElement$1(vm, a, b, c2, d, true);
    };
    var parentData = parentVnode && parentVnode.data;
    if (true) {
      defineReactive(vm, "$attrs", parentData && parentData.attrs || emptyObject, function() {
        !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
      }, true);
      defineReactive(vm, "$listeners", options._parentListeners || emptyObject, function() {
        !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
      }, true);
    } else {
      defineReactive(vm, "$attrs", parentData && parentData.attrs || emptyObject, null, true);
      defineReactive(vm, "$listeners", options._parentListeners || emptyObject, null, true);
    }
  }
  var currentRenderingInstance = null;
  function renderMixin(Vue2) {
    installRenderHelpers(Vue2.prototype);
    Vue2.prototype.$nextTick = function(fn) {
      return nextTick(fn, this);
    };
    Vue2.prototype._render = function() {
      var vm = this;
      var _a = vm.$options, render = _a.render, _parentVnode = _a._parentVnode;
      if (_parentVnode && vm._isMounted) {
        vm.$scopedSlots = normalizeScopedSlots(vm.$parent, _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
        if (vm._slotsProxy) {
          syncSetupSlots(vm._slotsProxy, vm.$scopedSlots);
        }
      }
      vm.$vnode = _parentVnode;
      var vnode;
      try {
        setCurrentInstance(vm);
        currentRenderingInstance = vm;
        vnode = render.call(vm._renderProxy, vm.$createElement);
      } catch (e) {
        handleError(e, vm, "render");
        if (vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e2) {
            handleError(e2, vm, "renderError");
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      } finally {
        currentRenderingInstance = null;
        setCurrentInstance();
      }
      if (isArray(vnode) && vnode.length === 1) {
        vnode = vnode[0];
      }
      if (!(vnode instanceof VNode)) {
        if (isArray(vnode)) {
          warn("Multiple root nodes returned from render function. Render function should return a single root node.", vm);
        }
        vnode = createEmptyVNode();
      }
      vnode.parent = _parentVnode;
      return vnode;
    };
  }
  function ensureCtor(comp, base) {
    if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === "Module") {
      comp = comp.default;
    }
    return isObject(comp) ? base.extend(comp) : comp;
  }
  function createAsyncPlaceholder(factory, data, context, children, tag) {
    var node = createEmptyVNode();
    node.asyncFactory = factory;
    node.asyncMeta = { data, context, children, tag };
    return node;
  }
  function resolveAsyncComponent(factory, baseCtor) {
    if (isTrue(factory.error) && isDef(factory.errorComp)) {
      return factory.errorComp;
    }
    if (isDef(factory.resolved)) {
      return factory.resolved;
    }
    var owner = currentRenderingInstance;
    if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
      factory.owners.push(owner);
    }
    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
      return factory.loadingComp;
    }
    if (owner && !isDef(factory.owners)) {
      var owners_1 = factory.owners = [owner];
      var sync_1 = true;
      var timerLoading_1 = null;
      var timerTimeout_1 = null;
      owner.$on("hook:destroyed", function() {
        return remove$2(owners_1, owner);
      });
      var forceRender_1 = function(renderCompleted) {
        for (var i = 0, l = owners_1.length; i < l; i++) {
          owners_1[i].$forceUpdate();
        }
        if (renderCompleted) {
          owners_1.length = 0;
          if (timerLoading_1 !== null) {
            clearTimeout(timerLoading_1);
            timerLoading_1 = null;
          }
          if (timerTimeout_1 !== null) {
            clearTimeout(timerTimeout_1);
            timerTimeout_1 = null;
          }
        }
      };
      var resolve = once(function(res) {
        factory.resolved = ensureCtor(res, baseCtor);
        if (!sync_1) {
          forceRender_1(true);
        } else {
          owners_1.length = 0;
        }
      });
      var reject_1 = once(function(reason) {
        warn("Failed to resolve async component: ".concat(String(factory)) + (reason ? "\nReason: ".concat(reason) : ""));
        if (isDef(factory.errorComp)) {
          factory.error = true;
          forceRender_1(true);
        }
      });
      var res_1 = factory(resolve, reject_1);
      if (isObject(res_1)) {
        if (isPromise(res_1)) {
          if (isUndef(factory.resolved)) {
            res_1.then(resolve, reject_1);
          }
        } else if (isPromise(res_1.component)) {
          res_1.component.then(resolve, reject_1);
          if (isDef(res_1.error)) {
            factory.errorComp = ensureCtor(res_1.error, baseCtor);
          }
          if (isDef(res_1.loading)) {
            factory.loadingComp = ensureCtor(res_1.loading, baseCtor);
            if (res_1.delay === 0) {
              factory.loading = true;
            } else {
              timerLoading_1 = setTimeout(function() {
                timerLoading_1 = null;
                if (isUndef(factory.resolved) && isUndef(factory.error)) {
                  factory.loading = true;
                  forceRender_1(false);
                }
              }, res_1.delay || 200);
            }
          }
          if (isDef(res_1.timeout)) {
            timerTimeout_1 = setTimeout(function() {
              timerTimeout_1 = null;
              if (isUndef(factory.resolved)) {
                reject_1(true ? "timeout (".concat(res_1.timeout, "ms)") : null);
              }
            }, res_1.timeout);
          }
        }
      }
      sync_1 = false;
      return factory.loading ? factory.loadingComp : factory.resolved;
    }
  }
  function getFirstComponentChild(children) {
    if (isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var c2 = children[i];
        if (isDef(c2) && (isDef(c2.componentOptions) || isAsyncPlaceholder(c2))) {
          return c2;
        }
      }
    }
  }
  var SIMPLE_NORMALIZE = 1;
  var ALWAYS_NORMALIZE = 2;
  function createElement$1(context, tag, data, children, normalizationType, alwaysNormalize) {
    if (isArray(data) || isPrimitive(data)) {
      normalizationType = children;
      children = data;
      data = void 0;
    }
    if (isTrue(alwaysNormalize)) {
      normalizationType = ALWAYS_NORMALIZE;
    }
    return _createElement(context, tag, data, children, normalizationType);
  }
  function _createElement(context, tag, data, children, normalizationType) {
    if (isDef(data) && isDef(data.__ob__)) {
      warn("Avoid using observed data object as vnode data: ".concat(JSON.stringify(data), "\n") + "Always create fresh vnode data objects in each render!", context);
      return createEmptyVNode();
    }
    if (isDef(data) && isDef(data.is)) {
      tag = data.is;
    }
    if (!tag) {
      return createEmptyVNode();
    }
    if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
      warn("Avoid using non-primitive value as key, use string/number value instead.", context);
    }
    if (isArray(children) && isFunction(children[0])) {
      data = data || {};
      data.scopedSlots = { default: children[0] };
      children.length = 0;
    }
    if (normalizationType === ALWAYS_NORMALIZE) {
      children = normalizeChildren(children);
    } else if (normalizationType === SIMPLE_NORMALIZE) {
      children = simpleNormalizeChildren(children);
    }
    var vnode, ns;
    if (typeof tag === "string") {
      var Ctor = void 0;
      ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);
      if (config.isReservedTag(tag)) {
        if (isDef(data) && isDef(data.nativeOn) && data.tag !== "component") {
          warn("The .native modifier for v-on is only valid on components but it was used on <".concat(tag, ">."), context);
        }
        vnode = new VNode(config.parsePlatformTagName(tag), data, children, void 0, void 0, context);
      } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, "components", tag))) {
        vnode = createComponent(Ctor, data, context, children, tag);
      } else {
        vnode = new VNode(tag, data, children, void 0, void 0, context);
      }
    } else {
      vnode = createComponent(tag, data, context, children);
    }
    if (isArray(vnode)) {
      return vnode;
    } else if (isDef(vnode)) {
      if (isDef(ns))
        applyNS(vnode, ns);
      if (isDef(data))
        registerDeepBindings(data);
      return vnode;
    } else {
      return createEmptyVNode();
    }
  }
  function applyNS(vnode, ns, force) {
    vnode.ns = ns;
    if (vnode.tag === "foreignObject") {
      ns = void 0;
      force = true;
    }
    if (isDef(vnode.children)) {
      for (var i = 0, l = vnode.children.length; i < l; i++) {
        var child = vnode.children[i];
        if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== "svg")) {
          applyNS(child, ns, force);
        }
      }
    }
  }
  function registerDeepBindings(data) {
    if (isObject(data.style)) {
      traverse(data.style);
    }
    if (isObject(data.class)) {
      traverse(data.class);
    }
  }
  function handleError(err, vm, info) {
    pushTarget();
    try {
      if (vm) {
        var cur = vm;
        while (cur = cur.$parent) {
          var hooks2 = cur.$options.errorCaptured;
          if (hooks2) {
            for (var i = 0; i < hooks2.length; i++) {
              try {
                var capture = hooks2[i].call(cur, err, vm, info) === false;
                if (capture)
                  return;
              } catch (e) {
                globalHandleError(e, cur, "errorCaptured hook");
              }
            }
          }
        }
      }
      globalHandleError(err, vm, info);
    } finally {
      popTarget();
    }
  }
  function invokeWithErrorHandling(handler, context, args, vm, info) {
    var res;
    try {
      res = args ? handler.apply(context, args) : handler.call(context);
      if (res && !res._isVue && isPromise(res) && !res._handled) {
        res.catch(function(e) {
          return handleError(e, vm, info + " (Promise/async)");
        });
        res._handled = true;
      }
    } catch (e) {
      handleError(e, vm, info);
    }
    return res;
  }
  function globalHandleError(err, vm, info) {
    if (config.errorHandler) {
      try {
        return config.errorHandler.call(null, err, vm, info);
      } catch (e) {
        if (e !== err) {
          logError(e, null, "config.errorHandler");
        }
      }
    }
    logError(err, vm, info);
  }
  function logError(err, vm, info) {
    if (true) {
      warn("Error in ".concat(info, ': "').concat(err.toString(), '"'), vm);
    }
    if (inBrowser && typeof console !== "undefined") {
      console.error(err);
    } else {
      throw err;
    }
  }
  var isUsingMicroTask = false;
  var callbacks = [];
  var pending = false;
  function flushCallbacks() {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }
  var timerFunc;
  if (typeof Promise !== "undefined" && isNative(Promise)) {
    p_1 = Promise.resolve();
    timerFunc = function() {
      p_1.then(flushCallbacks);
      if (isIOS)
        setTimeout(noop);
    };
    isUsingMicroTask = true;
  } else if (!isIE && typeof MutationObserver !== "undefined" && (isNative(MutationObserver) || MutationObserver.toString() === "[object MutationObserverConstructor]")) {
    counter_1 = 1;
    observer = new MutationObserver(flushCallbacks);
    textNode_1 = document.createTextNode(String(counter_1));
    observer.observe(textNode_1, {
      characterData: true
    });
    timerFunc = function() {
      counter_1 = (counter_1 + 1) % 2;
      textNode_1.data = String(counter_1);
    };
    isUsingMicroTask = true;
  } else if (typeof setImmediate !== "undefined" && isNative(setImmediate)) {
    timerFunc = function() {
      setImmediate(flushCallbacks);
    };
  } else {
    timerFunc = function() {
      setTimeout(flushCallbacks, 0);
    };
  }
  var p_1;
  var counter_1;
  var observer;
  var textNode_1;
  function nextTick(cb, ctx) {
    var _resolve;
    callbacks.push(function() {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, "nextTick");
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });
    if (!pending) {
      pending = true;
      timerFunc();
    }
    if (!cb && typeof Promise !== "undefined") {
      return new Promise(function(resolve) {
        _resolve = resolve;
      });
    }
  }
  function createLifeCycle(hookName) {
    return function(fn, target2) {
      if (target2 === void 0) {
        target2 = currentInstance;
      }
      if (!target2) {
        warn("".concat(formatName(hookName), " is called when there is no active component instance to be ") + "associated with. Lifecycle injection APIs can only be used during execution of setup().");
        return;
      }
      return injectHook(target2, hookName, fn);
    };
  }
  function formatName(name) {
    if (name === "beforeDestroy") {
      name = "beforeUnmount";
    } else if (name === "destroyed") {
      name = "unmounted";
    }
    return "on".concat(name[0].toUpperCase() + name.slice(1));
  }
  function injectHook(instance, hookName, fn) {
    var options = instance.$options;
    options[hookName] = mergeLifecycleHook(options[hookName], fn);
  }
  var onBeforeMount = createLifeCycle("beforeMount");
  var onMounted = createLifeCycle("mounted");
  var onBeforeUpdate = createLifeCycle("beforeUpdate");
  var onUpdated = createLifeCycle("updated");
  var onBeforeUnmount = createLifeCycle("beforeDestroy");
  var onUnmounted = createLifeCycle("destroyed");
  var onActivated = createLifeCycle("activated");
  var onDeactivated = createLifeCycle("deactivated");
  var onServerPrefetch = createLifeCycle("serverPrefetch");
  var onRenderTracked = createLifeCycle("renderTracked");
  var onRenderTriggered = createLifeCycle("renderTriggered");
  var injectErrorCapturedHook = createLifeCycle("errorCaptured");
  var version = "2.7.14";
  var seenObjects = new _Set();
  function traverse(val) {
    _traverse(val, seenObjects);
    seenObjects.clear();
    return val;
  }
  function _traverse(val, seen) {
    var i, keys;
    var isA = isArray(val);
    if (!isA && !isObject(val) || val.__v_skip || Object.isFrozen(val) || val instanceof VNode) {
      return;
    }
    if (val.__ob__) {
      var depId = val.__ob__.dep.id;
      if (seen.has(depId)) {
        return;
      }
      seen.add(depId);
    }
    if (isA) {
      i = val.length;
      while (i--)
        _traverse(val[i], seen);
    } else if (isRef(val)) {
      _traverse(val.value, seen);
    } else {
      keys = Object.keys(val);
      i = keys.length;
      while (i--)
        _traverse(val[keys[i]], seen);
    }
  }
  var uid$1 = 0;
  var Watcher = function() {
    function Watcher2(vm, expOrFn, cb, options, isRenderWatcher) {
      recordEffectScope(
        this,
        activeEffectScope && !activeEffectScope._vm ? activeEffectScope : vm ? vm._scope : void 0
      );
      if ((this.vm = vm) && isRenderWatcher) {
        vm._watcher = this;
      }
      if (options) {
        this.deep = !!options.deep;
        this.user = !!options.user;
        this.lazy = !!options.lazy;
        this.sync = !!options.sync;
        this.before = options.before;
        if (true) {
          this.onTrack = options.onTrack;
          this.onTrigger = options.onTrigger;
        }
      } else {
        this.deep = this.user = this.lazy = this.sync = false;
      }
      this.cb = cb;
      this.id = ++uid$1;
      this.active = true;
      this.post = false;
      this.dirty = this.lazy;
      this.deps = [];
      this.newDeps = [];
      this.depIds = new _Set();
      this.newDepIds = new _Set();
      this.expression = true ? expOrFn.toString() : "";
      if (isFunction(expOrFn)) {
        this.getter = expOrFn;
      } else {
        this.getter = parsePath(expOrFn);
        if (!this.getter) {
          this.getter = noop;
          warn('Failed watching path: "'.concat(expOrFn, '" ') + "Watcher only accepts simple dot-delimited paths. For full control, use a function instead.", vm);
        }
      }
      this.value = this.lazy ? void 0 : this.get();
    }
    Watcher2.prototype.get = function() {
      pushTarget(this);
      var value;
      var vm = this.vm;
      try {
        value = this.getter.call(vm, vm);
      } catch (e) {
        if (this.user) {
          handleError(e, vm, 'getter for watcher "'.concat(this.expression, '"'));
        } else {
          throw e;
        }
      } finally {
        if (this.deep) {
          traverse(value);
        }
        popTarget();
        this.cleanupDeps();
      }
      return value;
    };
    Watcher2.prototype.addDep = function(dep) {
      var id = dep.id;
      if (!this.newDepIds.has(id)) {
        this.newDepIds.add(id);
        this.newDeps.push(dep);
        if (!this.depIds.has(id)) {
          dep.addSub(this);
        }
      }
    };
    Watcher2.prototype.cleanupDeps = function() {
      var i = this.deps.length;
      while (i--) {
        var dep = this.deps[i];
        if (!this.newDepIds.has(dep.id)) {
          dep.removeSub(this);
        }
      }
      var tmp = this.depIds;
      this.depIds = this.newDepIds;
      this.newDepIds = tmp;
      this.newDepIds.clear();
      tmp = this.deps;
      this.deps = this.newDeps;
      this.newDeps = tmp;
      this.newDeps.length = 0;
    };
    Watcher2.prototype.update = function() {
      if (this.lazy) {
        this.dirty = true;
      } else if (this.sync) {
        this.run();
      } else {
        queueWatcher(this);
      }
    };
    Watcher2.prototype.run = function() {
      if (this.active) {
        var value = this.get();
        if (value !== this.value || isObject(value) || this.deep) {
          var oldValue = this.value;
          this.value = value;
          if (this.user) {
            var info = 'callback for watcher "'.concat(this.expression, '"');
            invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
          } else {
            this.cb.call(this.vm, value, oldValue);
          }
        }
      }
    };
    Watcher2.prototype.evaluate = function() {
      this.value = this.get();
      this.dirty = false;
    };
    Watcher2.prototype.depend = function() {
      var i = this.deps.length;
      while (i--) {
        this.deps[i].depend();
      }
    };
    Watcher2.prototype.teardown = function() {
      if (this.vm && !this.vm._isBeingDestroyed) {
        remove$2(this.vm._scope.effects, this);
      }
      if (this.active) {
        var i = this.deps.length;
        while (i--) {
          this.deps[i].removeSub(this);
        }
        this.active = false;
        if (this.onStop) {
          this.onStop();
        }
      }
    };
    return Watcher2;
  }();
  var mark;
  var measure;
  if (true) {
    perf_1 = inBrowser && window.performance;
    if (perf_1 && perf_1.mark && perf_1.measure && perf_1.clearMarks && perf_1.clearMeasures) {
      mark = function(tag) {
        return perf_1.mark(tag);
      };
      measure = function(name, startTag, endTag) {
        perf_1.measure(name, startTag, endTag);
        perf_1.clearMarks(startTag);
        perf_1.clearMarks(endTag);
      };
    }
  }
  var perf_1;
  function initEvents(vm) {
    vm._events = /* @__PURE__ */ Object.create(null);
    vm._hasHookEvent = false;
    var listeners = vm.$options._parentListeners;
    if (listeners) {
      updateComponentListeners(vm, listeners);
    }
  }
  var target$1;
  function add$1(event, fn) {
    target$1.$on(event, fn);
  }
  function remove$1(event, fn) {
    target$1.$off(event, fn);
  }
  function createOnceHandler$1(event, fn) {
    var _target = target$1;
    return function onceHandler() {
      var res = fn.apply(null, arguments);
      if (res !== null) {
        _target.$off(event, onceHandler);
      }
    };
  }
  function updateComponentListeners(vm, listeners, oldListeners) {
    target$1 = vm;
    updateListeners(listeners, oldListeners || {}, add$1, remove$1, createOnceHandler$1, vm);
    target$1 = void 0;
  }
  function eventsMixin(Vue2) {
    var hookRE = /^hook:/;
    Vue2.prototype.$on = function(event, fn) {
      var vm = this;
      if (isArray(event)) {
        for (var i = 0, l = event.length; i < l; i++) {
          vm.$on(event[i], fn);
        }
      } else {
        (vm._events[event] || (vm._events[event] = [])).push(fn);
        if (hookRE.test(event)) {
          vm._hasHookEvent = true;
        }
      }
      return vm;
    };
    Vue2.prototype.$once = function(event, fn) {
      var vm = this;
      function on() {
        vm.$off(event, on);
        fn.apply(vm, arguments);
      }
      on.fn = fn;
      vm.$on(event, on);
      return vm;
    };
    Vue2.prototype.$off = function(event, fn) {
      var vm = this;
      if (!arguments.length) {
        vm._events = /* @__PURE__ */ Object.create(null);
        return vm;
      }
      if (isArray(event)) {
        for (var i_1 = 0, l = event.length; i_1 < l; i_1++) {
          vm.$off(event[i_1], fn);
        }
        return vm;
      }
      var cbs = vm._events[event];
      if (!cbs) {
        return vm;
      }
      if (!fn) {
        vm._events[event] = null;
        return vm;
      }
      var cb;
      var i = cbs.length;
      while (i--) {
        cb = cbs[i];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i, 1);
          break;
        }
      }
      return vm;
    };
    Vue2.prototype.$emit = function(event) {
      var vm = this;
      if (true) {
        var lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
          tip('Event "'.concat(lowerCaseEvent, '" is emitted in component ') + "".concat(formatComponentName(vm), ' but the handler is registered for "').concat(event, '". ') + "Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. " + 'You should probably use "'.concat(hyphenate(event), '" instead of "').concat(event, '".'));
        }
      }
      var cbs = vm._events[event];
      if (cbs) {
        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
        var args = toArray(arguments, 1);
        var info = 'event handler for "'.concat(event, '"');
        for (var i = 0, l = cbs.length; i < l; i++) {
          invokeWithErrorHandling(cbs[i], vm, args, vm, info);
        }
      }
      return vm;
    };
  }
  var activeInstance = null;
  var isUpdatingChildComponent = false;
  function setActiveInstance(vm) {
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    return function() {
      activeInstance = prevActiveInstance;
    };
  }
  function initLifecycle(vm) {
    var options = vm.$options;
    var parent = options.parent;
    if (parent && !options.abstract) {
      while (parent.$options.abstract && parent.$parent) {
        parent = parent.$parent;
      }
      parent.$children.push(vm);
    }
    vm.$parent = parent;
    vm.$root = parent ? parent.$root : vm;
    vm.$children = [];
    vm.$refs = {};
    vm._provided = parent ? parent._provided : /* @__PURE__ */ Object.create(null);
    vm._watcher = null;
    vm._inactive = null;
    vm._directInactive = false;
    vm._isMounted = false;
    vm._isDestroyed = false;
    vm._isBeingDestroyed = false;
  }
  function lifecycleMixin(Vue2) {
    Vue2.prototype._update = function(vnode, hydrating) {
      var vm = this;
      var prevEl = vm.$el;
      var prevVnode = vm._vnode;
      var restoreActiveInstance = setActiveInstance(vm);
      vm._vnode = vnode;
      if (!prevVnode) {
        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false);
      } else {
        vm.$el = vm.__patch__(prevVnode, vnode);
      }
      restoreActiveInstance();
      if (prevEl) {
        prevEl.__vue__ = null;
      }
      if (vm.$el) {
        vm.$el.__vue__ = vm;
      }
      var wrapper = vm;
      while (wrapper && wrapper.$vnode && wrapper.$parent && wrapper.$vnode === wrapper.$parent._vnode) {
        wrapper.$parent.$el = wrapper.$el;
        wrapper = wrapper.$parent;
      }
    };
    Vue2.prototype.$forceUpdate = function() {
      var vm = this;
      if (vm._watcher) {
        vm._watcher.update();
      }
    };
    Vue2.prototype.$destroy = function() {
      var vm = this;
      if (vm._isBeingDestroyed) {
        return;
      }
      callHook$1(vm, "beforeDestroy");
      vm._isBeingDestroyed = true;
      var parent = vm.$parent;
      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
        remove$2(parent.$children, vm);
      }
      vm._scope.stop();
      if (vm._data.__ob__) {
        vm._data.__ob__.vmCount--;
      }
      vm._isDestroyed = true;
      vm.__patch__(vm._vnode, null);
      callHook$1(vm, "destroyed");
      vm.$off();
      if (vm.$el) {
        vm.$el.__vue__ = null;
      }
      if (vm.$vnode) {
        vm.$vnode.parent = null;
      }
    };
  }
  function mountComponent(vm, el, hydrating) {
    vm.$el = el;
    if (!vm.$options.render) {
      vm.$options.render = createEmptyVNode;
      if (true) {
        if (vm.$options.template && vm.$options.template.charAt(0) !== "#" || vm.$options.el || el) {
          warn("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.", vm);
        } else {
          warn("Failed to mount component: template or render function not defined.", vm);
        }
      }
    }
    callHook$1(vm, "beforeMount");
    var updateComponent;
    if (config.performance && mark) {
      updateComponent = function() {
        var name = vm._name;
        var id = vm._uid;
        var startTag = "vue-perf-start:".concat(id);
        var endTag = "vue-perf-end:".concat(id);
        mark(startTag);
        var vnode = vm._render();
        mark(endTag);
        measure("vue ".concat(name, " render"), startTag, endTag);
        mark(startTag);
        vm._update(vnode, hydrating);
        mark(endTag);
        measure("vue ".concat(name, " patch"), startTag, endTag);
      };
    } else {
      updateComponent = function() {
        vm._update(vm._render(), hydrating);
      };
    }
    var watcherOptions = {
      before: function() {
        if (vm._isMounted && !vm._isDestroyed) {
          callHook$1(vm, "beforeUpdate");
        }
      }
    };
    if (true) {
      watcherOptions.onTrack = function(e) {
        return callHook$1(vm, "renderTracked", [e]);
      };
      watcherOptions.onTrigger = function(e) {
        return callHook$1(vm, "renderTriggered", [e]);
      };
    }
    new Watcher(vm, updateComponent, noop, watcherOptions, true);
    hydrating = false;
    var preWatchers = vm._preWatchers;
    if (preWatchers) {
      for (var i = 0; i < preWatchers.length; i++) {
        preWatchers[i].run();
      }
    }
    if (vm.$vnode == null) {
      vm._isMounted = true;
      callHook$1(vm, "mounted");
    }
    return vm;
  }
  function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
    if (true) {
      isUpdatingChildComponent = true;
    }
    var newScopedSlots = parentVnode.data.scopedSlots;
    var oldScopedSlots = vm.$scopedSlots;
    var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key || !newScopedSlots && vm.$scopedSlots.$key);
    var needsForceUpdate = !!(renderChildren || vm.$options._renderChildren || hasDynamicScopedSlot);
    var prevVNode = vm.$vnode;
    vm.$options._parentVnode = parentVnode;
    vm.$vnode = parentVnode;
    if (vm._vnode) {
      vm._vnode.parent = parentVnode;
    }
    vm.$options._renderChildren = renderChildren;
    var attrs2 = parentVnode.data.attrs || emptyObject;
    if (vm._attrsProxy) {
      if (syncSetupProxy(vm._attrsProxy, attrs2, prevVNode.data && prevVNode.data.attrs || emptyObject, vm, "$attrs")) {
        needsForceUpdate = true;
      }
    }
    vm.$attrs = attrs2;
    listeners = listeners || emptyObject;
    var prevListeners = vm.$options._parentListeners;
    if (vm._listenersProxy) {
      syncSetupProxy(vm._listenersProxy, listeners, prevListeners || emptyObject, vm, "$listeners");
    }
    vm.$listeners = vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, prevListeners);
    if (propsData && vm.$options.props) {
      toggleObserving(false);
      var props2 = vm._props;
      var propKeys = vm.$options._propKeys || [];
      for (var i = 0; i < propKeys.length; i++) {
        var key = propKeys[i];
        var propOptions = vm.$options.props;
        props2[key] = validateProp(key, propOptions, propsData, vm);
      }
      toggleObserving(true);
      vm.$options.propsData = propsData;
    }
    if (needsForceUpdate) {
      vm.$slots = resolveSlots(renderChildren, parentVnode.context);
      vm.$forceUpdate();
    }
    if (true) {
      isUpdatingChildComponent = false;
    }
  }
  function isInInactiveTree(vm) {
    while (vm && (vm = vm.$parent)) {
      if (vm._inactive)
        return true;
    }
    return false;
  }
  function activateChildComponent(vm, direct) {
    if (direct) {
      vm._directInactive = false;
      if (isInInactiveTree(vm)) {
        return;
      }
    } else if (vm._directInactive) {
      return;
    }
    if (vm._inactive || vm._inactive === null) {
      vm._inactive = false;
      for (var i = 0; i < vm.$children.length; i++) {
        activateChildComponent(vm.$children[i]);
      }
      callHook$1(vm, "activated");
    }
  }
  function deactivateChildComponent(vm, direct) {
    if (direct) {
      vm._directInactive = true;
      if (isInInactiveTree(vm)) {
        return;
      }
    }
    if (!vm._inactive) {
      vm._inactive = true;
      for (var i = 0; i < vm.$children.length; i++) {
        deactivateChildComponent(vm.$children[i]);
      }
      callHook$1(vm, "deactivated");
    }
  }
  function callHook$1(vm, hook, args, setContext) {
    if (setContext === void 0) {
      setContext = true;
    }
    pushTarget();
    var prev = currentInstance;
    setContext && setCurrentInstance(vm);
    var handlers = vm.$options[hook];
    var info = "".concat(hook, " hook");
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        invokeWithErrorHandling(handlers[i], vm, args || null, vm, info);
      }
    }
    if (vm._hasHookEvent) {
      vm.$emit("hook:" + hook);
    }
    setContext && setCurrentInstance(prev);
    popTarget();
  }
  var MAX_UPDATE_COUNT = 100;
  var queue = [];
  var activatedChildren = [];
  var has = {};
  var circular = {};
  var waiting = false;
  var flushing = false;
  var index = 0;
  function resetSchedulerState() {
    index = queue.length = activatedChildren.length = 0;
    has = {};
    if (true) {
      circular = {};
    }
    waiting = flushing = false;
  }
  var currentFlushTimestamp = 0;
  var getNow = Date.now;
  if (inBrowser && !isIE) {
    performance_1 = window.performance;
    if (performance_1 && typeof performance_1.now === "function" && getNow() > document.createEvent("Event").timeStamp) {
      getNow = function() {
        return performance_1.now();
      };
    }
  }
  var performance_1;
  var sortCompareFn = function(a, b) {
    if (a.post) {
      if (!b.post)
        return 1;
    } else if (b.post) {
      return -1;
    }
    return a.id - b.id;
  };
  function flushSchedulerQueue() {
    currentFlushTimestamp = getNow();
    flushing = true;
    var watcher, id;
    queue.sort(sortCompareFn);
    for (index = 0; index < queue.length; index++) {
      watcher = queue[index];
      if (watcher.before) {
        watcher.before();
      }
      id = watcher.id;
      has[id] = null;
      watcher.run();
      if (has[id] != null) {
        circular[id] = (circular[id] || 0) + 1;
        if (circular[id] > MAX_UPDATE_COUNT) {
          warn("You may have an infinite update loop " + (watcher.user ? 'in watcher with expression "'.concat(watcher.expression, '"') : "in a component render function."), watcher.vm);
          break;
        }
      }
    }
    var activatedQueue = activatedChildren.slice();
    var updatedQueue = queue.slice();
    resetSchedulerState();
    callActivatedHooks(activatedQueue);
    callUpdatedHooks(updatedQueue);
    cleanupDeps();
    if (devtools && config.devtools) {
      devtools.emit("flush");
    }
  }
  function callUpdatedHooks(queue2) {
    var i = queue2.length;
    while (i--) {
      var watcher = queue2[i];
      var vm = watcher.vm;
      if (vm && vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
        callHook$1(vm, "updated");
      }
    }
  }
  function queueActivatedComponent(vm) {
    vm._inactive = false;
    activatedChildren.push(vm);
  }
  function callActivatedHooks(queue2) {
    for (var i = 0; i < queue2.length; i++) {
      queue2[i]._inactive = true;
      activateChildComponent(queue2[i], true);
    }
  }
  function queueWatcher(watcher) {
    var id = watcher.id;
    if (has[id] != null) {
      return;
    }
    if (watcher === Dep.target && watcher.noRecurse) {
      return;
    }
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    if (!waiting) {
      waiting = true;
      if (!config.async) {
        flushSchedulerQueue();
        return;
      }
      nextTick(flushSchedulerQueue);
    }
  }
  function initProvide(vm) {
    var provideOption = vm.$options.provide;
    if (provideOption) {
      var provided = isFunction(provideOption) ? provideOption.call(vm) : provideOption;
      if (!isObject(provided)) {
        return;
      }
      var source = resolveProvided(vm);
      var keys = hasSymbol ? Reflect.ownKeys(provided) : Object.keys(provided);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        Object.defineProperty(source, key, Object.getOwnPropertyDescriptor(provided, key));
      }
    }
  }
  function initInjections(vm) {
    var result = resolveInject(vm.$options.inject, vm);
    if (result) {
      toggleObserving(false);
      Object.keys(result).forEach(function(key) {
        if (true) {
          defineReactive(vm, key, result[key], function() {
            warn("Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. " + 'injection being mutated: "'.concat(key, '"'), vm);
          });
        } else {
          defineReactive(vm, key, result[key]);
        }
      });
      toggleObserving(true);
    }
  }
  function resolveInject(inject, vm) {
    if (inject) {
      var result = /* @__PURE__ */ Object.create(null);
      var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key === "__ob__")
          continue;
        var provideKey = inject[key].from;
        if (provideKey in vm._provided) {
          result[key] = vm._provided[provideKey];
        } else if ("default" in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = isFunction(provideDefault) ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn('Injection "'.concat(key, '" not found'), vm);
        }
      }
      return result;
    }
  }
  function FunctionalRenderContext(data, props2, children, parent, Ctor) {
    var _this = this;
    var options = Ctor.options;
    var contextVm;
    if (hasOwn2(parent, "_uid")) {
      contextVm = Object.create(parent);
      contextVm._original = parent;
    } else {
      contextVm = parent;
      parent = parent._original;
    }
    var isCompiled = isTrue(options._compiled);
    var needNormalization = !isCompiled;
    this.data = data;
    this.props = props2;
    this.children = children;
    this.parent = parent;
    this.listeners = data.on || emptyObject;
    this.injections = resolveInject(options.inject, parent);
    this.slots = function() {
      if (!_this.$slots) {
        normalizeScopedSlots(parent, data.scopedSlots, _this.$slots = resolveSlots(children, parent));
      }
      return _this.$slots;
    };
    Object.defineProperty(this, "scopedSlots", {
      enumerable: true,
      get: function() {
        return normalizeScopedSlots(parent, data.scopedSlots, this.slots());
      }
    });
    if (isCompiled) {
      this.$options = options;
      this.$slots = this.slots();
      this.$scopedSlots = normalizeScopedSlots(parent, data.scopedSlots, this.$slots);
    }
    if (options._scopeId) {
      this._c = function(a, b, c2, d) {
        var vnode = createElement$1(contextVm, a, b, c2, d, needNormalization);
        if (vnode && !isArray(vnode)) {
          vnode.fnScopeId = options._scopeId;
          vnode.fnContext = parent;
        }
        return vnode;
      };
    } else {
      this._c = function(a, b, c2, d) {
        return createElement$1(contextVm, a, b, c2, d, needNormalization);
      };
    }
  }
  installRenderHelpers(FunctionalRenderContext.prototype);
  function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
    var options = Ctor.options;
    var props2 = {};
    var propOptions = options.props;
    if (isDef(propOptions)) {
      for (var key in propOptions) {
        props2[key] = validateProp(key, propOptions, propsData || emptyObject);
      }
    } else {
      if (isDef(data.attrs))
        mergeProps(props2, data.attrs);
      if (isDef(data.props))
        mergeProps(props2, data.props);
    }
    var renderContext = new FunctionalRenderContext(data, props2, children, contextVm, Ctor);
    var vnode = options.render.call(null, renderContext._c, renderContext);
    if (vnode instanceof VNode) {
      return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
    } else if (isArray(vnode)) {
      var vnodes = normalizeChildren(vnode) || [];
      var res = new Array(vnodes.length);
      for (var i = 0; i < vnodes.length; i++) {
        res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
      }
      return res;
    }
  }
  function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
    var clone = cloneVNode(vnode);
    clone.fnContext = contextVm;
    clone.fnOptions = options;
    if (true) {
      (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
    }
    if (data.slot) {
      (clone.data || (clone.data = {})).slot = data.slot;
    }
    return clone;
  }
  function mergeProps(to, from) {
    for (var key in from) {
      to[camelize2(key)] = from[key];
    }
  }
  function getComponentName(options) {
    return options.name || options.__name || options._componentTag;
  }
  var componentVNodeHooks = {
    init: function(vnode, hydrating) {
      if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
        var mountedNode = vnode;
        componentVNodeHooks.prepatch(mountedNode, mountedNode);
      } else {
        var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
        child.$mount(hydrating ? vnode.elm : void 0, hydrating);
      }
    },
    prepatch: function(oldVnode, vnode) {
      var options = vnode.componentOptions;
      var child = vnode.componentInstance = oldVnode.componentInstance;
      updateChildComponent(
        child,
        options.propsData,
        options.listeners,
        vnode,
        options.children
      );
    },
    insert: function(vnode) {
      var context = vnode.context, componentInstance = vnode.componentInstance;
      if (!componentInstance._isMounted) {
        componentInstance._isMounted = true;
        callHook$1(componentInstance, "mounted");
      }
      if (vnode.data.keepAlive) {
        if (context._isMounted) {
          queueActivatedComponent(componentInstance);
        } else {
          activateChildComponent(componentInstance, true);
        }
      }
    },
    destroy: function(vnode) {
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isDestroyed) {
        if (!vnode.data.keepAlive) {
          componentInstance.$destroy();
        } else {
          deactivateChildComponent(componentInstance, true);
        }
      }
    }
  };
  var hooksToMerge = Object.keys(componentVNodeHooks);
  function createComponent(Ctor, data, context, children, tag) {
    if (isUndef(Ctor)) {
      return;
    }
    var baseCtor = context.$options._base;
    if (isObject(Ctor)) {
      Ctor = baseCtor.extend(Ctor);
    }
    if (typeof Ctor !== "function") {
      if (true) {
        warn("Invalid Component definition: ".concat(String(Ctor)), context);
      }
      return;
    }
    var asyncFactory;
    if (isUndef(Ctor.cid)) {
      asyncFactory = Ctor;
      Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
      if (Ctor === void 0) {
        return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
      }
    }
    data = data || {};
    resolveConstructorOptions(Ctor);
    if (isDef(data.model)) {
      transformModel(Ctor.options, data);
    }
    var propsData = extractPropsFromVNodeData(data, Ctor, tag);
    if (isTrue(Ctor.options.functional)) {
      return createFunctionalComponent(Ctor, propsData, data, context, children);
    }
    var listeners = data.on;
    data.on = data.nativeOn;
    if (isTrue(Ctor.options.abstract)) {
      var slot = data.slot;
      data = {};
      if (slot) {
        data.slot = slot;
      }
    }
    installComponentHooks(data);
    var name = getComponentName(Ctor.options) || tag;
    var vnode = new VNode(
      "vue-component-".concat(Ctor.cid).concat(name ? "-".concat(name) : ""),
      data,
      void 0,
      void 0,
      void 0,
      context,
      { Ctor, propsData, listeners, tag, children },
      asyncFactory
    );
    return vnode;
  }
  function createComponentInstanceForVnode(vnode, parent) {
    var options = {
      _isComponent: true,
      _parentVnode: vnode,
      parent
    };
    var inlineTemplate = vnode.data.inlineTemplate;
    if (isDef(inlineTemplate)) {
      options.render = inlineTemplate.render;
      options.staticRenderFns = inlineTemplate.staticRenderFns;
    }
    return new vnode.componentOptions.Ctor(options);
  }
  function installComponentHooks(data) {
    var hooks2 = data.hook || (data.hook = {});
    for (var i = 0; i < hooksToMerge.length; i++) {
      var key = hooksToMerge[i];
      var existing = hooks2[key];
      var toMerge = componentVNodeHooks[key];
      if (existing !== toMerge && !(existing && existing._merged)) {
        hooks2[key] = existing ? mergeHook(toMerge, existing) : toMerge;
      }
    }
  }
  function mergeHook(f1, f2) {
    var merged = function(a, b) {
      f1(a, b);
      f2(a, b);
    };
    merged._merged = true;
    return merged;
  }
  function transformModel(options, data) {
    var prop = options.model && options.model.prop || "value";
    var event = options.model && options.model.event || "input";
    (data.attrs || (data.attrs = {}))[prop] = data.model.value;
    var on = data.on || (data.on = {});
    var existing = on[event];
    var callback = data.model.callback;
    if (isDef(existing)) {
      if (isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
        on[event] = [callback].concat(existing);
      }
    } else {
      on[event] = callback;
    }
  }
  var warn = noop;
  var tip = noop;
  var generateComponentTrace;
  var formatComponentName;
  if (true) {
    hasConsole_1 = typeof console !== "undefined";
    classifyRE_1 = /(?:^|[-_])(\w)/g;
    classify_1 = function(str) {
      return str.replace(classifyRE_1, function(c2) {
        return c2.toUpperCase();
      }).replace(/[-_]/g, "");
    };
    warn = function(msg, vm) {
      if (vm === void 0) {
        vm = currentInstance;
      }
      var trace = vm ? generateComponentTrace(vm) : "";
      if (config.warnHandler) {
        config.warnHandler.call(null, msg, vm, trace);
      } else if (hasConsole_1 && !config.silent) {
        console.error("[Vue warn]: ".concat(msg).concat(trace));
      }
    };
    tip = function(msg, vm) {
      if (hasConsole_1 && !config.silent) {
        console.warn("[Vue tip]: ".concat(msg) + (vm ? generateComponentTrace(vm) : ""));
      }
    };
    formatComponentName = function(vm, includeFile) {
      if (vm.$root === vm) {
        return "<Root>";
      }
      var options = isFunction(vm) && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
      var name = getComponentName(options);
      var file = options.__file;
      if (!name && file) {
        var match = file.match(/([^/\\]+)\.vue$/);
        name = match && match[1];
      }
      return (name ? "<".concat(classify_1(name), ">") : "<Anonymous>") + (file && includeFile !== false ? " at ".concat(file) : "");
    };
    repeat_1 = function(str, n) {
      var res = "";
      while (n) {
        if (n % 2 === 1)
          res += str;
        if (n > 1)
          str += str;
        n >>= 1;
      }
      return res;
    };
    generateComponentTrace = function(vm) {
      if (vm._isVue && vm.$parent) {
        var tree = [];
        var currentRecursiveSequence = 0;
        while (vm) {
          if (tree.length > 0) {
            var last2 = tree[tree.length - 1];
            if (last2.constructor === vm.constructor) {
              currentRecursiveSequence++;
              vm = vm.$parent;
              continue;
            } else if (currentRecursiveSequence > 0) {
              tree[tree.length - 1] = [last2, currentRecursiveSequence];
              currentRecursiveSequence = 0;
            }
          }
          tree.push(vm);
          vm = vm.$parent;
        }
        return "\n\nfound in\n\n" + tree.map(function(vm2, i) {
          return "".concat(i === 0 ? "---> " : repeat_1(" ", 5 + i * 2)).concat(isArray(vm2) ? "".concat(formatComponentName(vm2[0]), "... (").concat(vm2[1], " recursive calls)") : formatComponentName(vm2));
        }).join("\n");
      } else {
        return "\n\n(found in ".concat(formatComponentName(vm), ")");
      }
    };
  }
  var hasConsole_1;
  var classifyRE_1;
  var classify_1;
  var repeat_1;
  var strats = config.optionMergeStrategies;
  if (true) {
    strats.el = strats.propsData = function(parent, child, vm, key) {
      if (!vm) {
        warn('option "'.concat(key, '" can only be used during instance ') + "creation with the `new` keyword.");
      }
      return defaultStrat(parent, child);
    };
  }
  function mergeData(to, from, recursive) {
    if (recursive === void 0) {
      recursive = true;
    }
    if (!from)
      return to;
    var key, toVal, fromVal;
    var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      key = keys[i];
      if (key === "__ob__")
        continue;
      toVal = to[key];
      fromVal = from[key];
      if (!recursive || !hasOwn2(to, key)) {
        set2(to, key, fromVal);
      } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
        mergeData(toVal, fromVal);
      }
    }
    return to;
  }
  function mergeDataOrFn(parentVal, childVal, vm) {
    if (!vm) {
      if (!childVal) {
        return parentVal;
      }
      if (!parentVal) {
        return childVal;
      }
      return function mergedDataFn() {
        return mergeData(isFunction(childVal) ? childVal.call(this, this) : childVal, isFunction(parentVal) ? parentVal.call(this, this) : parentVal);
      };
    } else {
      return function mergedInstanceDataFn() {
        var instanceData = isFunction(childVal) ? childVal.call(vm, vm) : childVal;
        var defaultData = isFunction(parentVal) ? parentVal.call(vm, vm) : parentVal;
        if (instanceData) {
          return mergeData(instanceData, defaultData);
        } else {
          return defaultData;
        }
      };
    }
  }
  strats.data = function(parentVal, childVal, vm) {
    if (!vm) {
      if (childVal && typeof childVal !== "function") {
        warn('The "data" option should be a function that returns a per-instance value in component definitions.', vm);
        return parentVal;
      }
      return mergeDataOrFn(parentVal, childVal);
    }
    return mergeDataOrFn(parentVal, childVal, vm);
  };
  function mergeLifecycleHook(parentVal, childVal) {
    var res = childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
    return res ? dedupeHooks(res) : res;
  }
  function dedupeHooks(hooks2) {
    var res = [];
    for (var i = 0; i < hooks2.length; i++) {
      if (res.indexOf(hooks2[i]) === -1) {
        res.push(hooks2[i]);
      }
    }
    return res;
  }
  LIFECYCLE_HOOKS.forEach(function(hook) {
    strats[hook] = mergeLifecycleHook;
  });
  function mergeAssets(parentVal, childVal, vm, key) {
    var res = Object.create(parentVal || null);
    if (childVal) {
      assertObjectType(key, childVal, vm);
      return extend3(res, childVal);
    } else {
      return res;
    }
  }
  ASSET_TYPES.forEach(function(type) {
    strats[type + "s"] = mergeAssets;
  });
  strats.watch = function(parentVal, childVal, vm, key) {
    if (parentVal === nativeWatch)
      parentVal = void 0;
    if (childVal === nativeWatch)
      childVal = void 0;
    if (!childVal)
      return Object.create(parentVal || null);
    if (true) {
      assertObjectType(key, childVal, vm);
    }
    if (!parentVal)
      return childVal;
    var ret = {};
    extend3(ret, parentVal);
    for (var key_1 in childVal) {
      var parent_1 = ret[key_1];
      var child = childVal[key_1];
      if (parent_1 && !isArray(parent_1)) {
        parent_1 = [parent_1];
      }
      ret[key_1] = parent_1 ? parent_1.concat(child) : isArray(child) ? child : [child];
    }
    return ret;
  };
  strats.props = strats.methods = strats.inject = strats.computed = function(parentVal, childVal, vm, key) {
    if (childVal && true) {
      assertObjectType(key, childVal, vm);
    }
    if (!parentVal)
      return childVal;
    var ret = /* @__PURE__ */ Object.create(null);
    extend3(ret, parentVal);
    if (childVal)
      extend3(ret, childVal);
    return ret;
  };
  strats.provide = function(parentVal, childVal) {
    if (!parentVal)
      return childVal;
    return function() {
      var ret = /* @__PURE__ */ Object.create(null);
      mergeData(ret, isFunction(parentVal) ? parentVal.call(this) : parentVal);
      if (childVal) {
        mergeData(
          ret,
          isFunction(childVal) ? childVal.call(this) : childVal,
          false
        );
      }
      return ret;
    };
  };
  var defaultStrat = function(parentVal, childVal) {
    return childVal === void 0 ? parentVal : childVal;
  };
  function checkComponents(options) {
    for (var key in options.components) {
      validateComponentName(key);
    }
  }
  function validateComponentName(name) {
    if (!new RegExp("^[a-zA-Z][\\-\\.0-9_".concat(unicodeRegExp.source, "]*$")).test(name)) {
      warn('Invalid component name: "' + name + '". Component names should conform to valid custom element name in html5 specification.');
    }
    if (isBuiltInTag(name) || config.isReservedTag(name)) {
      warn("Do not use built-in or reserved HTML elements as component id: " + name);
    }
  }
  function normalizeProps(options, vm) {
    var props2 = options.props;
    if (!props2)
      return;
    var res = {};
    var i, val, name;
    if (isArray(props2)) {
      i = props2.length;
      while (i--) {
        val = props2[i];
        if (typeof val === "string") {
          name = camelize2(val);
          res[name] = { type: null };
        } else if (true) {
          warn("props must be strings when using array syntax.");
        }
      }
    } else if (isPlainObject(props2)) {
      for (var key in props2) {
        val = props2[key];
        name = camelize2(key);
        res[name] = isPlainObject(val) ? val : { type: val };
      }
    } else if (true) {
      warn('Invalid value for option "props": expected an Array or an Object, ' + "but got ".concat(toRawType(props2), "."), vm);
    }
    options.props = res;
  }
  function normalizeInject(options, vm) {
    var inject = options.inject;
    if (!inject)
      return;
    var normalized = options.inject = {};
    if (isArray(inject)) {
      for (var i = 0; i < inject.length; i++) {
        normalized[inject[i]] = { from: inject[i] };
      }
    } else if (isPlainObject(inject)) {
      for (var key in inject) {
        var val = inject[key];
        normalized[key] = isPlainObject(val) ? extend3({ from: key }, val) : { from: val };
      }
    } else if (true) {
      warn('Invalid value for option "inject": expected an Array or an Object, ' + "but got ".concat(toRawType(inject), "."), vm);
    }
  }
  function normalizeDirectives$1(options) {
    var dirs = options.directives;
    if (dirs) {
      for (var key in dirs) {
        var def2 = dirs[key];
        if (isFunction(def2)) {
          dirs[key] = { bind: def2, update: def2 };
        }
      }
    }
  }
  function assertObjectType(name, value, vm) {
    if (!isPlainObject(value)) {
      warn('Invalid value for option "'.concat(name, '": expected an Object, ') + "but got ".concat(toRawType(value), "."), vm);
    }
  }
  function mergeOptions(parent, child, vm) {
    if (true) {
      checkComponents(child);
    }
    if (isFunction(child)) {
      child = child.options;
    }
    normalizeProps(child, vm);
    normalizeInject(child, vm);
    normalizeDirectives$1(child);
    if (!child._base) {
      if (child.extends) {
        parent = mergeOptions(parent, child.extends, vm);
      }
      if (child.mixins) {
        for (var i = 0, l = child.mixins.length; i < l; i++) {
          parent = mergeOptions(parent, child.mixins[i], vm);
        }
      }
    }
    var options = {};
    var key;
    for (key in parent) {
      mergeField(key);
    }
    for (key in child) {
      if (!hasOwn2(parent, key)) {
        mergeField(key);
      }
    }
    function mergeField(key2) {
      var strat = strats[key2] || defaultStrat;
      options[key2] = strat(parent[key2], child[key2], vm, key2);
    }
    return options;
  }
  function resolveAsset(options, type, id, warnMissing) {
    if (typeof id !== "string") {
      return;
    }
    var assets = options[type];
    if (hasOwn2(assets, id))
      return assets[id];
    var camelizedId = camelize2(id);
    if (hasOwn2(assets, camelizedId))
      return assets[camelizedId];
    var PascalCaseId = capitalize2(camelizedId);
    if (hasOwn2(assets, PascalCaseId))
      return assets[PascalCaseId];
    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
    if (warnMissing && !res) {
      warn("Failed to resolve " + type.slice(0, -1) + ": " + id);
    }
    return res;
  }
  function validateProp(key, propOptions, propsData, vm) {
    var prop = propOptions[key];
    var absent = !hasOwn2(propsData, key);
    var value = propsData[key];
    var booleanIndex = getTypeIndex(Boolean, prop.type);
    if (booleanIndex > -1) {
      if (absent && !hasOwn2(prop, "default")) {
        value = false;
      } else if (value === "" || value === hyphenate(key)) {
        var stringIndex = getTypeIndex(String, prop.type);
        if (stringIndex < 0 || booleanIndex < stringIndex) {
          value = true;
        }
      }
    }
    if (value === void 0) {
      value = getPropDefaultValue(vm, prop, key);
      var prevShouldObserve = shouldObserve;
      toggleObserving(true);
      observe(value);
      toggleObserving(prevShouldObserve);
    }
    if (true) {
      assertProp(prop, key, value, vm, absent);
    }
    return value;
  }
  function getPropDefaultValue(vm, prop, key) {
    if (!hasOwn2(prop, "default")) {
      return void 0;
    }
    var def2 = prop.default;
    if (isObject(def2)) {
      warn('Invalid default value for prop "' + key + '": Props with type Object/Array must use a factory function to return the default value.', vm);
    }
    if (vm && vm.$options.propsData && vm.$options.propsData[key] === void 0 && vm._props[key] !== void 0) {
      return vm._props[key];
    }
    return isFunction(def2) && getType(prop.type) !== "Function" ? def2.call(vm) : def2;
  }
  function assertProp(prop, name, value, vm, absent) {
    if (prop.required && absent) {
      warn('Missing required prop: "' + name + '"', vm);
      return;
    }
    if (value == null && !prop.required) {
      return;
    }
    var type = prop.type;
    var valid = !type || type === true;
    var expectedTypes = [];
    if (type) {
      if (!isArray(type)) {
        type = [type];
      }
      for (var i = 0; i < type.length && !valid; i++) {
        var assertedType = assertType(value, type[i], vm);
        expectedTypes.push(assertedType.expectedType || "");
        valid = assertedType.valid;
      }
    }
    var haveExpectedTypes = expectedTypes.some(function(t) {
      return t;
    });
    if (!valid && haveExpectedTypes) {
      warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
      return;
    }
    var validator = prop.validator;
    if (validator) {
      if (!validator(value)) {
        warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
      }
    }
  }
  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;
  function assertType(value, type, vm) {
    var valid;
    var expectedType = getType(type);
    if (simpleCheckRE.test(expectedType)) {
      var t = typeof value;
      valid = t === expectedType.toLowerCase();
      if (!valid && t === "object") {
        valid = value instanceof type;
      }
    } else if (expectedType === "Object") {
      valid = isPlainObject(value);
    } else if (expectedType === "Array") {
      valid = isArray(value);
    } else {
      try {
        valid = value instanceof type;
      } catch (e) {
        warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
        valid = false;
      }
    }
    return {
      valid,
      expectedType
    };
  }
  var functionTypeCheckRE = /^\s*function (\w+)/;
  function getType(fn) {
    var match = fn && fn.toString().match(functionTypeCheckRE);
    return match ? match[1] : "";
  }
  function isSameType(a, b) {
    return getType(a) === getType(b);
  }
  function getTypeIndex(type, expectedTypes) {
    if (!isArray(expectedTypes)) {
      return isSameType(expectedTypes, type) ? 0 : -1;
    }
    for (var i = 0, len = expectedTypes.length; i < len; i++) {
      if (isSameType(expectedTypes[i], type)) {
        return i;
      }
    }
    return -1;
  }
  function getInvalidTypeMessage(name, value, expectedTypes) {
    var message = 'Invalid prop: type check failed for prop "'.concat(name, '".') + " Expected ".concat(expectedTypes.map(capitalize2).join(", "));
    var expectedType = expectedTypes[0];
    var receivedType = toRawType(value);
    if (expectedTypes.length === 1 && isExplicable(expectedType) && isExplicable(typeof value) && !isBoolean(expectedType, receivedType)) {
      message += " with value ".concat(styleValue(value, expectedType));
    }
    message += ", got ".concat(receivedType, " ");
    if (isExplicable(receivedType)) {
      message += "with value ".concat(styleValue(value, receivedType), ".");
    }
    return message;
  }
  function styleValue(value, type) {
    if (type === "String") {
      return '"'.concat(value, '"');
    } else if (type === "Number") {
      return "".concat(Number(value));
    } else {
      return "".concat(value);
    }
  }
  var EXPLICABLE_TYPES = ["string", "number", "boolean"];
  function isExplicable(value) {
    return EXPLICABLE_TYPES.some(function(elem) {
      return value.toLowerCase() === elem;
    });
  }
  function isBoolean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return args.some(function(elem) {
      return elem.toLowerCase() === "boolean";
    });
  }
  var initProxy;
  if (true) {
    allowedGlobals_1 = makeMap(
      "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,require"
    );
    warnNonPresent_1 = function(target2, key) {
      warn('Property or method "'.concat(key, '" is not defined on the instance but ') + "referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://v2.vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.", target2);
    };
    warnReservedPrefix_1 = function(target2, key) {
      warn('Property "'.concat(key, '" must be accessed with "$data.').concat(key, '" because ') + 'properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://v2.vuejs.org/v2/api/#data', target2);
    };
    hasProxy_1 = typeof Proxy !== "undefined" && isNative(Proxy);
    if (hasProxy_1) {
      isBuiltInModifier_1 = makeMap("stop,prevent,self,ctrl,shift,alt,meta,exact");
      config.keyCodes = new Proxy(config.keyCodes, {
        set: function(target2, key, value) {
          if (isBuiltInModifier_1(key)) {
            warn("Avoid overwriting built-in modifier in config.keyCodes: .".concat(key));
            return false;
          } else {
            target2[key] = value;
            return true;
          }
        }
      });
    }
    hasHandler_1 = {
      has: function(target2, key) {
        var has2 = key in target2;
        var isAllowed = allowedGlobals_1(key) || typeof key === "string" && key.charAt(0) === "_" && !(key in target2.$data);
        if (!has2 && !isAllowed) {
          if (key in target2.$data)
            warnReservedPrefix_1(target2, key);
          else
            warnNonPresent_1(target2, key);
        }
        return has2 || !isAllowed;
      }
    };
    getHandler_1 = {
      get: function(target2, key) {
        if (typeof key === "string" && !(key in target2)) {
          if (key in target2.$data)
            warnReservedPrefix_1(target2, key);
          else
            warnNonPresent_1(target2, key);
        }
        return target2[key];
      }
    };
    initProxy = function initProxy2(vm) {
      if (hasProxy_1) {
        var options = vm.$options;
        var handlers = options.render && options.render._withStripped ? getHandler_1 : hasHandler_1;
        vm._renderProxy = new Proxy(vm, handlers);
      } else {
        vm._renderProxy = vm;
      }
    };
  }
  var allowedGlobals_1;
  var warnNonPresent_1;
  var warnReservedPrefix_1;
  var hasProxy_1;
  var isBuiltInModifier_1;
  var hasHandler_1;
  var getHandler_1;
  var sharedPropertyDefinition = {
    enumerable: true,
    configurable: true,
    get: noop,
    set: noop
  };
  function proxy(target2, sourceKey, key) {
    sharedPropertyDefinition.get = function proxyGetter() {
      return this[sourceKey][key];
    };
    sharedPropertyDefinition.set = function proxySetter(val) {
      this[sourceKey][key] = val;
    };
    Object.defineProperty(target2, key, sharedPropertyDefinition);
  }
  function initState(vm) {
    var opts = vm.$options;
    if (opts.props)
      initProps$1(vm, opts.props);
    initSetup(vm);
    if (opts.methods)
      initMethods(vm, opts.methods);
    if (opts.data) {
      initData(vm);
    } else {
      var ob = observe(vm._data = {});
      ob && ob.vmCount++;
    }
    if (opts.computed)
      initComputed$1(vm, opts.computed);
    if (opts.watch && opts.watch !== nativeWatch) {
      initWatch(vm, opts.watch);
    }
  }
  function initProps$1(vm, propsOptions) {
    var propsData = vm.$options.propsData || {};
    var props2 = vm._props = shallowReactive({});
    var keys = vm.$options._propKeys = [];
    var isRoot = !vm.$parent;
    if (!isRoot) {
      toggleObserving(false);
    }
    var _loop_1 = function(key2) {
      keys.push(key2);
      var value = validateProp(key2, propsOptions, propsData, vm);
      if (true) {
        var hyphenatedKey = hyphenate(key2);
        if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
          warn('"'.concat(hyphenatedKey, '" is a reserved attribute and cannot be used as component prop.'), vm);
        }
        defineReactive(props2, key2, value, function() {
          if (!isRoot && !isUpdatingChildComponent) {
            warn("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's " + 'value. Prop being mutated: "'.concat(key2, '"'), vm);
          }
        });
      } else {
        defineReactive(props2, key2, value);
      }
      if (!(key2 in vm)) {
        proxy(vm, "_props", key2);
      }
    };
    for (var key in propsOptions) {
      _loop_1(key);
    }
    toggleObserving(true);
  }
  function initData(vm) {
    var data = vm.$options.data;
    data = vm._data = isFunction(data) ? getData(data, vm) : data || {};
    if (!isPlainObject(data)) {
      data = {};
      warn("data functions should return an object:\nhttps://v2.vuejs.org/v2/guide/components.html#data-Must-Be-a-Function", vm);
    }
    var keys = Object.keys(data);
    var props2 = vm.$options.props;
    var methods = vm.$options.methods;
    var i = keys.length;
    while (i--) {
      var key = keys[i];
      if (true) {
        if (methods && hasOwn2(methods, key)) {
          warn('Method "'.concat(key, '" has already been defined as a data property.'), vm);
        }
      }
      if (props2 && hasOwn2(props2, key)) {
        warn('The data property "'.concat(key, '" is already declared as a prop. ') + "Use prop default value instead.", vm);
      } else if (!isReserved(key)) {
        proxy(vm, "_data", key);
      }
    }
    var ob = observe(data);
    ob && ob.vmCount++;
  }
  function getData(data, vm) {
    pushTarget();
    try {
      return data.call(vm, vm);
    } catch (e) {
      handleError(e, vm, "data()");
      return {};
    } finally {
      popTarget();
    }
  }
  var computedWatcherOptions = { lazy: true };
  function initComputed$1(vm, computed) {
    var watchers = vm._computedWatchers = /* @__PURE__ */ Object.create(null);
    var isSSR = isServerRendering();
    for (var key in computed) {
      var userDef = computed[key];
      var getter = isFunction(userDef) ? userDef : userDef.get;
      if (getter == null) {
        warn('Getter is missing for computed property "'.concat(key, '".'), vm);
      }
      if (!isSSR) {
        watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
      }
      if (!(key in vm)) {
        defineComputed(vm, key, userDef);
      } else if (true) {
        if (key in vm.$data) {
          warn('The computed property "'.concat(key, '" is already defined in data.'), vm);
        } else if (vm.$options.props && key in vm.$options.props) {
          warn('The computed property "'.concat(key, '" is already defined as a prop.'), vm);
        } else if (vm.$options.methods && key in vm.$options.methods) {
          warn('The computed property "'.concat(key, '" is already defined as a method.'), vm);
        }
      }
    }
  }
  function defineComputed(target2, key, userDef) {
    var shouldCache = !isServerRendering();
    if (isFunction(userDef)) {
      sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
      sharedPropertyDefinition.set = noop;
    } else {
      sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
      sharedPropertyDefinition.set = userDef.set || noop;
    }
    if (sharedPropertyDefinition.set === noop) {
      sharedPropertyDefinition.set = function() {
        warn('Computed property "'.concat(key, '" was assigned to but it has no setter.'), this);
      };
    }
    Object.defineProperty(target2, key, sharedPropertyDefinition);
  }
  function createComputedGetter(key) {
    return function computedGetter() {
      var watcher = this._computedWatchers && this._computedWatchers[key];
      if (watcher) {
        if (watcher.dirty) {
          watcher.evaluate();
        }
        if (Dep.target) {
          if (Dep.target.onTrack) {
            Dep.target.onTrack({
              effect: Dep.target,
              target: this,
              type: "get",
              key
            });
          }
          watcher.depend();
        }
        return watcher.value;
      }
    };
  }
  function createGetterInvoker(fn) {
    return function computedGetter() {
      return fn.call(this, this);
    };
  }
  function initMethods(vm, methods) {
    var props2 = vm.$options.props;
    for (var key in methods) {
      if (true) {
        if (typeof methods[key] !== "function") {
          warn('Method "'.concat(key, '" has type "').concat(typeof methods[key], '" in the component definition. ') + "Did you reference the function correctly?", vm);
        }
        if (props2 && hasOwn2(props2, key)) {
          warn('Method "'.concat(key, '" has already been defined as a prop.'), vm);
        }
        if (key in vm && isReserved(key)) {
          warn('Method "'.concat(key, '" conflicts with an existing Vue instance method. ') + "Avoid defining component methods that start with _ or $.");
        }
      }
      vm[key] = typeof methods[key] !== "function" ? noop : bind(methods[key], vm);
    }
  }
  function initWatch(vm, watch) {
    for (var key in watch) {
      var handler = watch[key];
      if (isArray(handler)) {
        for (var i = 0; i < handler.length; i++) {
          createWatcher(vm, key, handler[i]);
        }
      } else {
        createWatcher(vm, key, handler);
      }
    }
  }
  function createWatcher(vm, expOrFn, handler, options) {
    if (isPlainObject(handler)) {
      options = handler;
      handler = handler.handler;
    }
    if (typeof handler === "string") {
      handler = vm[handler];
    }
    return vm.$watch(expOrFn, handler, options);
  }
  function stateMixin(Vue2) {
    var dataDef = {};
    dataDef.get = function() {
      return this._data;
    };
    var propsDef = {};
    propsDef.get = function() {
      return this._props;
    };
    if (true) {
      dataDef.set = function() {
        warn("Avoid replacing instance root $data. Use nested data properties instead.", this);
      };
      propsDef.set = function() {
        warn("$props is readonly.", this);
      };
    }
    Object.defineProperty(Vue2.prototype, "$data", dataDef);
    Object.defineProperty(Vue2.prototype, "$props", propsDef);
    Vue2.prototype.$set = set2;
    Vue2.prototype.$delete = del2;
    Vue2.prototype.$watch = function(expOrFn, cb, options) {
      var vm = this;
      if (isPlainObject(cb)) {
        return createWatcher(vm, expOrFn, cb, options);
      }
      options = options || {};
      options.user = true;
      var watcher = new Watcher(vm, expOrFn, cb, options);
      if (options.immediate) {
        var info = 'callback for immediate watcher "'.concat(watcher.expression, '"');
        pushTarget();
        invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
        popTarget();
      }
      return function unwatchFn() {
        watcher.teardown();
      };
    };
  }
  var uid = 0;
  function initMixin$1(Vue2) {
    Vue2.prototype._init = function(options) {
      var vm = this;
      vm._uid = uid++;
      var startTag, endTag;
      if (config.performance && mark) {
        startTag = "vue-perf-start:".concat(vm._uid);
        endTag = "vue-perf-end:".concat(vm._uid);
        mark(startTag);
      }
      vm._isVue = true;
      vm.__v_skip = true;
      vm._scope = new EffectScope(true);
      vm._scope._vm = true;
      if (options && options._isComponent) {
        initInternalComponent(vm, options);
      } else {
        vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
      }
      if (true) {
        initProxy(vm);
      } else {
        vm._renderProxy = vm;
      }
      vm._self = vm;
      initLifecycle(vm);
      initEvents(vm);
      initRender(vm);
      callHook$1(vm, "beforeCreate", void 0, false);
      initInjections(vm);
      initState(vm);
      initProvide(vm);
      callHook$1(vm, "created");
      if (config.performance && mark) {
        vm._name = formatComponentName(vm, false);
        mark(endTag);
        measure("vue ".concat(vm._name, " init"), startTag, endTag);
      }
      if (vm.$options.el) {
        vm.$mount(vm.$options.el);
      }
    };
  }
  function initInternalComponent(vm, options) {
    var opts = vm.$options = Object.create(vm.constructor.options);
    var parentVnode = options._parentVnode;
    opts.parent = options.parent;
    opts._parentVnode = parentVnode;
    var vnodeComponentOptions = parentVnode.componentOptions;
    opts.propsData = vnodeComponentOptions.propsData;
    opts._parentListeners = vnodeComponentOptions.listeners;
    opts._renderChildren = vnodeComponentOptions.children;
    opts._componentTag = vnodeComponentOptions.tag;
    if (options.render) {
      opts.render = options.render;
      opts.staticRenderFns = options.staticRenderFns;
    }
  }
  function resolveConstructorOptions(Ctor) {
    var options = Ctor.options;
    if (Ctor.super) {
      var superOptions = resolveConstructorOptions(Ctor.super);
      var cachedSuperOptions = Ctor.superOptions;
      if (superOptions !== cachedSuperOptions) {
        Ctor.superOptions = superOptions;
        var modifiedOptions = resolveModifiedOptions(Ctor);
        if (modifiedOptions) {
          extend3(Ctor.extendOptions, modifiedOptions);
        }
        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
        if (options.name) {
          options.components[options.name] = Ctor;
        }
      }
    }
    return options;
  }
  function resolveModifiedOptions(Ctor) {
    var modified;
    var latest = Ctor.options;
    var sealed = Ctor.sealedOptions;
    for (var key in latest) {
      if (latest[key] !== sealed[key]) {
        if (!modified)
          modified = {};
        modified[key] = latest[key];
      }
    }
    return modified;
  }
  function Vue(options) {
    if (!(this instanceof Vue)) {
      warn("Vue is a constructor and should be called with the `new` keyword");
    }
    this._init(options);
  }
  initMixin$1(Vue);
  stateMixin(Vue);
  eventsMixin(Vue);
  lifecycleMixin(Vue);
  renderMixin(Vue);
  function initUse(Vue2) {
    Vue2.use = function(plugin2) {
      var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
      if (installedPlugins.indexOf(plugin2) > -1) {
        return this;
      }
      var args = toArray(arguments, 1);
      args.unshift(this);
      if (isFunction(plugin2.install)) {
        plugin2.install.apply(plugin2, args);
      } else if (isFunction(plugin2)) {
        plugin2.apply(null, args);
      }
      installedPlugins.push(plugin2);
      return this;
    };
  }
  function initMixin(Vue2) {
    Vue2.mixin = function(mixin) {
      this.options = mergeOptions(this.options, mixin);
      return this;
    };
  }
  function initExtend(Vue2) {
    Vue2.cid = 0;
    var cid = 1;
    Vue2.extend = function(extendOptions) {
      extendOptions = extendOptions || {};
      var Super = this;
      var SuperId = Super.cid;
      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
      if (cachedCtors[SuperId]) {
        return cachedCtors[SuperId];
      }
      var name = getComponentName(extendOptions) || getComponentName(Super.options);
      if (name) {
        validateComponentName(name);
      }
      var Sub = function VueComponent(options) {
        this._init(options);
      };
      Sub.prototype = Object.create(Super.prototype);
      Sub.prototype.constructor = Sub;
      Sub.cid = cid++;
      Sub.options = mergeOptions(Super.options, extendOptions);
      Sub["super"] = Super;
      if (Sub.options.props) {
        initProps(Sub);
      }
      if (Sub.options.computed) {
        initComputed(Sub);
      }
      Sub.extend = Super.extend;
      Sub.mixin = Super.mixin;
      Sub.use = Super.use;
      ASSET_TYPES.forEach(function(type) {
        Sub[type] = Super[type];
      });
      if (name) {
        Sub.options.components[name] = Sub;
      }
      Sub.superOptions = Super.options;
      Sub.extendOptions = extendOptions;
      Sub.sealedOptions = extend3({}, Sub.options);
      cachedCtors[SuperId] = Sub;
      return Sub;
    };
  }
  function initProps(Comp) {
    var props2 = Comp.options.props;
    for (var key in props2) {
      proxy(Comp.prototype, "_props", key);
    }
  }
  function initComputed(Comp) {
    var computed = Comp.options.computed;
    for (var key in computed) {
      defineComputed(Comp.prototype, key, computed[key]);
    }
  }
  function initAssetRegisters(Vue2) {
    ASSET_TYPES.forEach(function(type) {
      Vue2[type] = function(id, definition) {
        if (!definition) {
          return this.options[type + "s"][id];
        } else {
          if (type === "component") {
            validateComponentName(id);
          }
          if (type === "component" && isPlainObject(definition)) {
            definition.name = definition.name || id;
            definition = this.options._base.extend(definition);
          }
          if (type === "directive" && isFunction(definition)) {
            definition = { bind: definition, update: definition };
          }
          this.options[type + "s"][id] = definition;
          return definition;
        }
      };
    });
  }
  function _getComponentName(opts) {
    return opts && (getComponentName(opts.Ctor.options) || opts.tag);
  }
  function matches(pattern, name) {
    if (isArray(pattern)) {
      return pattern.indexOf(name) > -1;
    } else if (typeof pattern === "string") {
      return pattern.split(",").indexOf(name) > -1;
    } else if (isRegExp(pattern)) {
      return pattern.test(name);
    }
    return false;
  }
  function pruneCache(keepAliveInstance, filter) {
    var cache2 = keepAliveInstance.cache, keys = keepAliveInstance.keys, _vnode = keepAliveInstance._vnode;
    for (var key in cache2) {
      var entry = cache2[key];
      if (entry) {
        var name_1 = entry.name;
        if (name_1 && !filter(name_1)) {
          pruneCacheEntry(cache2, key, keys, _vnode);
        }
      }
    }
  }
  function pruneCacheEntry(cache2, key, keys, current) {
    var entry = cache2[key];
    if (entry && (!current || entry.tag !== current.tag)) {
      entry.componentInstance.$destroy();
    }
    cache2[key] = null;
    remove$2(keys, key);
  }
  var patternTypes = [String, RegExp, Array];
  var KeepAlive = {
    name: "keep-alive",
    abstract: true,
    props: {
      include: patternTypes,
      exclude: patternTypes,
      max: [String, Number]
    },
    methods: {
      cacheVNode: function() {
        var _a = this, cache2 = _a.cache, keys = _a.keys, vnodeToCache = _a.vnodeToCache, keyToCache = _a.keyToCache;
        if (vnodeToCache) {
          var tag = vnodeToCache.tag, componentInstance = vnodeToCache.componentInstance, componentOptions = vnodeToCache.componentOptions;
          cache2[keyToCache] = {
            name: _getComponentName(componentOptions),
            tag,
            componentInstance
          };
          keys.push(keyToCache);
          if (this.max && keys.length > parseInt(this.max)) {
            pruneCacheEntry(cache2, keys[0], keys, this._vnode);
          }
          this.vnodeToCache = null;
        }
      }
    },
    created: function() {
      this.cache = /* @__PURE__ */ Object.create(null);
      this.keys = [];
    },
    destroyed: function() {
      for (var key in this.cache) {
        pruneCacheEntry(this.cache, key, this.keys);
      }
    },
    mounted: function() {
      var _this = this;
      this.cacheVNode();
      this.$watch("include", function(val) {
        pruneCache(_this, function(name) {
          return matches(val, name);
        });
      });
      this.$watch("exclude", function(val) {
        pruneCache(_this, function(name) {
          return !matches(val, name);
        });
      });
    },
    updated: function() {
      this.cacheVNode();
    },
    render: function() {
      var slot = this.$slots.default;
      var vnode = getFirstComponentChild(slot);
      var componentOptions = vnode && vnode.componentOptions;
      if (componentOptions) {
        var name_2 = _getComponentName(componentOptions);
        var _a = this, include = _a.include, exclude = _a.exclude;
        if (include && (!name_2 || !matches(include, name_2)) || exclude && name_2 && matches(exclude, name_2)) {
          return vnode;
        }
        var _b = this, cache2 = _b.cache, keys = _b.keys;
        var key = vnode.key == null ? componentOptions.Ctor.cid + (componentOptions.tag ? "::".concat(componentOptions.tag) : "") : vnode.key;
        if (cache2[key]) {
          vnode.componentInstance = cache2[key].componentInstance;
          remove$2(keys, key);
          keys.push(key);
        } else {
          this.vnodeToCache = vnode;
          this.keyToCache = key;
        }
        vnode.data.keepAlive = true;
      }
      return vnode || slot && slot[0];
    }
  };
  var builtInComponents = {
    KeepAlive
  };
  function initGlobalAPI(Vue2) {
    var configDef = {};
    configDef.get = function() {
      return config;
    };
    if (true) {
      configDef.set = function() {
        warn("Do not replace the Vue.config object, set individual fields instead.");
      };
    }
    Object.defineProperty(Vue2, "config", configDef);
    Vue2.util = {
      warn,
      extend: extend3,
      mergeOptions,
      defineReactive
    };
    Vue2.set = set2;
    Vue2.delete = del2;
    Vue2.nextTick = nextTick;
    Vue2.observable = function(obj) {
      observe(obj);
      return obj;
    };
    Vue2.options = /* @__PURE__ */ Object.create(null);
    ASSET_TYPES.forEach(function(type) {
      Vue2.options[type + "s"] = /* @__PURE__ */ Object.create(null);
    });
    Vue2.options._base = Vue2;
    extend3(Vue2.options.components, builtInComponents);
    initUse(Vue2);
    initMixin(Vue2);
    initExtend(Vue2);
    initAssetRegisters(Vue2);
  }
  initGlobalAPI(Vue);
  Object.defineProperty(Vue.prototype, "$isServer", {
    get: isServerRendering
  });
  Object.defineProperty(Vue.prototype, "$ssrContext", {
    get: function() {
      return this.$vnode && this.$vnode.ssrContext;
    }
  });
  Object.defineProperty(Vue, "FunctionalRenderContext", {
    value: FunctionalRenderContext
  });
  Vue.version = version;
  var isReservedAttr = makeMap("style,class");
  var acceptValue = makeMap("input,textarea,option,select,progress");
  var mustUseProp = function(tag, type, attr) {
    return attr === "value" && acceptValue(tag) && type !== "button" || attr === "selected" && tag === "option" || attr === "checked" && tag === "input" || attr === "muted" && tag === "video";
  };
  var isEnumeratedAttr = makeMap("contenteditable,draggable,spellcheck");
  var isValidContentEditableValue = makeMap("events,caret,typing,plaintext-only");
  var convertEnumeratedValue = function(key, value) {
    return isFalsyAttrValue(value) || value === "false" ? "false" : key === "contenteditable" && isValidContentEditableValue(value) ? value : "true";
  };
  var isBooleanAttr = makeMap("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible");
  var xlinkNS = "http://www.w3.org/1999/xlink";
  var isXlink = function(name) {
    return name.charAt(5) === ":" && name.slice(0, 5) === "xlink";
  };
  var getXlinkProp = function(name) {
    return isXlink(name) ? name.slice(6, name.length) : "";
  };
  var isFalsyAttrValue = function(val) {
    return val == null || val === false;
  };
  function genClassForVnode(vnode) {
    var data = vnode.data;
    var parentNode2 = vnode;
    var childNode = vnode;
    while (isDef(childNode.componentInstance)) {
      childNode = childNode.componentInstance._vnode;
      if (childNode && childNode.data) {
        data = mergeClassData(childNode.data, data);
      }
    }
    while (isDef(parentNode2 = parentNode2.parent)) {
      if (parentNode2 && parentNode2.data) {
        data = mergeClassData(data, parentNode2.data);
      }
    }
    return renderClass(data.staticClass, data.class);
  }
  function mergeClassData(child, parent) {
    return {
      staticClass: concat(child.staticClass, parent.staticClass),
      class: isDef(child.class) ? [child.class, parent.class] : parent.class
    };
  }
  function renderClass(staticClass, dynamicClass) {
    if (isDef(staticClass) || isDef(dynamicClass)) {
      return concat(staticClass, stringifyClass(dynamicClass));
    }
    return "";
  }
  function concat(a, b) {
    return a ? b ? a + " " + b : a : b || "";
  }
  function stringifyClass(value) {
    if (Array.isArray(value)) {
      return stringifyArray(value);
    }
    if (isObject(value)) {
      return stringifyObject(value);
    }
    if (typeof value === "string") {
      return value;
    }
    return "";
  }
  function stringifyArray(value) {
    var res = "";
    var stringified;
    for (var i = 0, l = value.length; i < l; i++) {
      if (isDef(stringified = stringifyClass(value[i])) && stringified !== "") {
        if (res)
          res += " ";
        res += stringified;
      }
    }
    return res;
  }
  function stringifyObject(value) {
    var res = "";
    for (var key in value) {
      if (value[key]) {
        if (res)
          res += " ";
        res += key;
      }
    }
    return res;
  }
  var namespaceMap = {
    svg: "http://www.w3.org/2000/svg",
    math: "http://www.w3.org/1998/Math/MathML"
  };
  var isHTMLTag = makeMap("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot");
  var isSVG = makeMap("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view", true);
  var isReservedTag = function(tag) {
    return isHTMLTag(tag) || isSVG(tag);
  };
  function getTagNamespace(tag) {
    if (isSVG(tag)) {
      return "svg";
    }
    if (tag === "math") {
      return "math";
    }
  }
  var unknownElementCache = /* @__PURE__ */ Object.create(null);
  function isUnknownElement(tag) {
    if (!inBrowser) {
      return true;
    }
    if (isReservedTag(tag)) {
      return false;
    }
    tag = tag.toLowerCase();
    if (unknownElementCache[tag] != null) {
      return unknownElementCache[tag];
    }
    var el = document.createElement(tag);
    if (tag.indexOf("-") > -1) {
      return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
    } else {
      return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
    }
  }
  var isTextInputType = makeMap("text,number,password,search,email,tel,url");
  function query(el) {
    if (typeof el === "string") {
      var selected = document.querySelector(el);
      if (!selected) {
        warn("Cannot find element: " + el);
        return document.createElement("div");
      }
      return selected;
    } else {
      return el;
    }
  }
  function createElement(tagName2, vnode) {
    var elm = document.createElement(tagName2);
    if (tagName2 !== "select") {
      return elm;
    }
    if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== void 0) {
      elm.setAttribute("multiple", "multiple");
    }
    return elm;
  }
  function createElementNS(namespace, tagName2) {
    return document.createElementNS(namespaceMap[namespace], tagName2);
  }
  function createTextNode(text) {
    return document.createTextNode(text);
  }
  function createComment(text) {
    return document.createComment(text);
  }
  function insertBefore(parentNode2, newNode, referenceNode) {
    parentNode2.insertBefore(newNode, referenceNode);
  }
  function removeChild(node, child) {
    node.removeChild(child);
  }
  function appendChild(node, child) {
    node.appendChild(child);
  }
  function parentNode(node) {
    return node.parentNode;
  }
  function nextSibling(node) {
    return node.nextSibling;
  }
  function tagName(node) {
    return node.tagName;
  }
  function setTextContent(node, text) {
    node.textContent = text;
  }
  function setStyleScope(node, scopeId) {
    node.setAttribute(scopeId, "");
  }
  var nodeOps = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    createElement,
    createElementNS,
    createTextNode,
    createComment,
    insertBefore,
    removeChild,
    appendChild,
    parentNode,
    nextSibling,
    tagName,
    setTextContent,
    setStyleScope
  });
  var ref = {
    create: function(_, vnode) {
      registerRef(vnode);
    },
    update: function(oldVnode, vnode) {
      if (oldVnode.data.ref !== vnode.data.ref) {
        registerRef(oldVnode, true);
        registerRef(vnode);
      }
    },
    destroy: function(vnode) {
      registerRef(vnode, true);
    }
  };
  function registerRef(vnode, isRemoval) {
    var ref2 = vnode.data.ref;
    if (!isDef(ref2))
      return;
    var vm = vnode.context;
    var refValue = vnode.componentInstance || vnode.elm;
    var value = isRemoval ? null : refValue;
    var $refsValue = isRemoval ? void 0 : refValue;
    if (isFunction(ref2)) {
      invokeWithErrorHandling(ref2, vm, [value], vm, "template ref function");
      return;
    }
    var isFor = vnode.data.refInFor;
    var _isString = typeof ref2 === "string" || typeof ref2 === "number";
    var _isRef = isRef(ref2);
    var refs = vm.$refs;
    if (_isString || _isRef) {
      if (isFor) {
        var existing = _isString ? refs[ref2] : ref2.value;
        if (isRemoval) {
          isArray(existing) && remove$2(existing, refValue);
        } else {
          if (!isArray(existing)) {
            if (_isString) {
              refs[ref2] = [refValue];
              setSetupRef(vm, ref2, refs[ref2]);
            } else {
              ref2.value = [refValue];
            }
          } else if (!existing.includes(refValue)) {
            existing.push(refValue);
          }
        }
      } else if (_isString) {
        if (isRemoval && refs[ref2] !== refValue) {
          return;
        }
        refs[ref2] = $refsValue;
        setSetupRef(vm, ref2, value);
      } else if (_isRef) {
        if (isRemoval && ref2.value !== refValue) {
          return;
        }
        ref2.value = value;
      } else if (true) {
        warn("Invalid template ref type: ".concat(typeof ref2));
      }
    }
  }
  function setSetupRef(_a, key, val) {
    var _setupState = _a._setupState;
    if (_setupState && hasOwn2(_setupState, key)) {
      if (isRef(_setupState[key])) {
        _setupState[key].value = val;
      } else {
        _setupState[key] = val;
      }
    }
  }
  var emptyNode = new VNode("", {}, []);
  var hooks = ["create", "activate", "update", "remove", "destroy"];
  function sameVnode(a, b) {
    return a.key === b.key && a.asyncFactory === b.asyncFactory && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error));
  }
  function sameInputType(a, b) {
    if (a.tag !== "input")
      return true;
    var i;
    var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
    var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
    return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
  }
  function createKeyToOldIdx(children, beginIdx, endIdx) {
    var i, key;
    var map = {};
    for (i = beginIdx; i <= endIdx; ++i) {
      key = children[i].key;
      if (isDef(key))
        map[key] = i;
    }
    return map;
  }
  function createPatchFunction(backend) {
    var i, j;
    var cbs = {};
    var modules2 = backend.modules, nodeOps2 = backend.nodeOps;
    for (i = 0; i < hooks.length; ++i) {
      cbs[hooks[i]] = [];
      for (j = 0; j < modules2.length; ++j) {
        if (isDef(modules2[j][hooks[i]])) {
          cbs[hooks[i]].push(modules2[j][hooks[i]]);
        }
      }
    }
    function emptyNodeAt(elm) {
      return new VNode(nodeOps2.tagName(elm).toLowerCase(), {}, [], void 0, elm);
    }
    function createRmCb(childElm, listeners) {
      function remove2() {
        if (--remove2.listeners === 0) {
          removeNode(childElm);
        }
      }
      remove2.listeners = listeners;
      return remove2;
    }
    function removeNode(el) {
      var parent = nodeOps2.parentNode(el);
      if (isDef(parent)) {
        nodeOps2.removeChild(parent, el);
      }
    }
    function isUnknownElement2(vnode, inVPre) {
      return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function(ignore) {
        return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
      })) && config.isUnknownElement(vnode.tag);
    }
    var creatingElmInVPre = 0;
    function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index2) {
      if (isDef(vnode.elm) && isDef(ownerArray)) {
        vnode = ownerArray[index2] = cloneVNode(vnode);
      }
      vnode.isRootInsert = !nested;
      if (createComponent2(vnode, insertedVnodeQueue, parentElm, refElm)) {
        return;
      }
      var data = vnode.data;
      var children = vnode.children;
      var tag = vnode.tag;
      if (isDef(tag)) {
        if (true) {
          if (data && data.pre) {
            creatingElmInVPre++;
          }
          if (isUnknownElement2(vnode, creatingElmInVPre)) {
            warn("Unknown custom element: <" + tag + '> - did you register the component correctly? For recursive components, make sure to provide the "name" option.', vnode.context);
          }
        }
        vnode.elm = vnode.ns ? nodeOps2.createElementNS(vnode.ns, tag) : nodeOps2.createElement(tag, vnode);
        setScope(vnode);
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
        if (data && data.pre) {
          creatingElmInVPre--;
        }
      } else if (isTrue(vnode.isComment)) {
        vnode.elm = nodeOps2.createComment(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      } else {
        vnode.elm = nodeOps2.createTextNode(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      }
    }
    function createComponent2(vnode, insertedVnodeQueue, parentElm, refElm) {
      var i2 = vnode.data;
      if (isDef(i2)) {
        var isReactivated = isDef(vnode.componentInstance) && i2.keepAlive;
        if (isDef(i2 = i2.hook) && isDef(i2 = i2.init)) {
          i2(vnode, false);
        }
        if (isDef(vnode.componentInstance)) {
          initComponent(vnode, insertedVnodeQueue);
          insert(parentElm, vnode.elm, refElm);
          if (isTrue(isReactivated)) {
            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
          }
          return true;
        }
      }
    }
    function initComponent(vnode, insertedVnodeQueue) {
      if (isDef(vnode.data.pendingInsert)) {
        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
        vnode.data.pendingInsert = null;
      }
      vnode.elm = vnode.componentInstance.$el;
      if (isPatchable(vnode)) {
        invokeCreateHooks(vnode, insertedVnodeQueue);
        setScope(vnode);
      } else {
        registerRef(vnode);
        insertedVnodeQueue.push(vnode);
      }
    }
    function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
      var i2;
      var innerNode = vnode;
      while (innerNode.componentInstance) {
        innerNode = innerNode.componentInstance._vnode;
        if (isDef(i2 = innerNode.data) && isDef(i2 = i2.transition)) {
          for (i2 = 0; i2 < cbs.activate.length; ++i2) {
            cbs.activate[i2](emptyNode, innerNode);
          }
          insertedVnodeQueue.push(innerNode);
          break;
        }
      }
      insert(parentElm, vnode.elm, refElm);
    }
    function insert(parent, elm, ref2) {
      if (isDef(parent)) {
        if (isDef(ref2)) {
          if (nodeOps2.parentNode(ref2) === parent) {
            nodeOps2.insertBefore(parent, elm, ref2);
          }
        } else {
          nodeOps2.appendChild(parent, elm);
        }
      }
    }
    function createChildren(vnode, children, insertedVnodeQueue) {
      if (isArray(children)) {
        if (true) {
          checkDuplicateKeys(children);
        }
        for (var i_1 = 0; i_1 < children.length; ++i_1) {
          createElm(children[i_1], insertedVnodeQueue, vnode.elm, null, true, children, i_1);
        }
      } else if (isPrimitive(vnode.text)) {
        nodeOps2.appendChild(vnode.elm, nodeOps2.createTextNode(String(vnode.text)));
      }
    }
    function isPatchable(vnode) {
      while (vnode.componentInstance) {
        vnode = vnode.componentInstance._vnode;
      }
      return isDef(vnode.tag);
    }
    function invokeCreateHooks(vnode, insertedVnodeQueue) {
      for (var i_2 = 0; i_2 < cbs.create.length; ++i_2) {
        cbs.create[i_2](emptyNode, vnode);
      }
      i = vnode.data.hook;
      if (isDef(i)) {
        if (isDef(i.create))
          i.create(emptyNode, vnode);
        if (isDef(i.insert))
          insertedVnodeQueue.push(vnode);
      }
    }
    function setScope(vnode) {
      var i2;
      if (isDef(i2 = vnode.fnScopeId)) {
        nodeOps2.setStyleScope(vnode.elm, i2);
      } else {
        var ancestor = vnode;
        while (ancestor) {
          if (isDef(i2 = ancestor.context) && isDef(i2 = i2.$options._scopeId)) {
            nodeOps2.setStyleScope(vnode.elm, i2);
          }
          ancestor = ancestor.parent;
        }
      }
      if (isDef(i2 = activeInstance) && i2 !== vnode.context && i2 !== vnode.fnContext && isDef(i2 = i2.$options._scopeId)) {
        nodeOps2.setStyleScope(vnode.elm, i2);
      }
    }
    function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
      for (; startIdx <= endIdx; ++startIdx) {
        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
      }
    }
    function invokeDestroyHook(vnode) {
      var i2, j2;
      var data = vnode.data;
      if (isDef(data)) {
        if (isDef(i2 = data.hook) && isDef(i2 = i2.destroy))
          i2(vnode);
        for (i2 = 0; i2 < cbs.destroy.length; ++i2)
          cbs.destroy[i2](vnode);
      }
      if (isDef(i2 = vnode.children)) {
        for (j2 = 0; j2 < vnode.children.length; ++j2) {
          invokeDestroyHook(vnode.children[j2]);
        }
      }
    }
    function removeVnodes(vnodes, startIdx, endIdx) {
      for (; startIdx <= endIdx; ++startIdx) {
        var ch = vnodes[startIdx];
        if (isDef(ch)) {
          if (isDef(ch.tag)) {
            removeAndInvokeRemoveHook(ch);
            invokeDestroyHook(ch);
          } else {
            removeNode(ch.elm);
          }
        }
      }
    }
    function removeAndInvokeRemoveHook(vnode, rm) {
      if (isDef(rm) || isDef(vnode.data)) {
        var i_3;
        var listeners = cbs.remove.length + 1;
        if (isDef(rm)) {
          rm.listeners += listeners;
        } else {
          rm = createRmCb(vnode.elm, listeners);
        }
        if (isDef(i_3 = vnode.componentInstance) && isDef(i_3 = i_3._vnode) && isDef(i_3.data)) {
          removeAndInvokeRemoveHook(i_3, rm);
        }
        for (i_3 = 0; i_3 < cbs.remove.length; ++i_3) {
          cbs.remove[i_3](vnode, rm);
        }
        if (isDef(i_3 = vnode.data.hook) && isDef(i_3 = i_3.remove)) {
          i_3(vnode, rm);
        } else {
          rm();
        }
      } else {
        removeNode(vnode.elm);
      }
    }
    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
      var oldStartIdx = 0;
      var newStartIdx = 0;
      var oldEndIdx = oldCh.length - 1;
      var oldStartVnode = oldCh[0];
      var oldEndVnode = oldCh[oldEndIdx];
      var newEndIdx = newCh.length - 1;
      var newStartVnode = newCh[0];
      var newEndVnode = newCh[newEndIdx];
      var oldKeyToIdx, idxInOld, vnodeToMove, refElm;
      var canMove = !removeOnly;
      if (true) {
        checkDuplicateKeys(newCh);
      }
      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (isUndef(oldStartVnode)) {
          oldStartVnode = oldCh[++oldStartIdx];
        } else if (isUndef(oldEndVnode)) {
          oldEndVnode = oldCh[--oldEndIdx];
        } else if (sameVnode(oldStartVnode, newStartVnode)) {
          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
          oldStartVnode = oldCh[++oldStartIdx];
          newStartVnode = newCh[++newStartIdx];
        } else if (sameVnode(oldEndVnode, newEndVnode)) {
          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
          oldEndVnode = oldCh[--oldEndIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldStartVnode, newEndVnode)) {
          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
          canMove && nodeOps2.insertBefore(parentElm, oldStartVnode.elm, nodeOps2.nextSibling(oldEndVnode.elm));
          oldStartVnode = oldCh[++oldStartIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldEndVnode, newStartVnode)) {
          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
          canMove && nodeOps2.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
          oldEndVnode = oldCh[--oldEndIdx];
          newStartVnode = newCh[++newStartIdx];
        } else {
          if (isUndef(oldKeyToIdx))
            oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
          idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
          if (isUndef(idxInOld)) {
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          } else {
            vnodeToMove = oldCh[idxInOld];
            if (sameVnode(vnodeToMove, newStartVnode)) {
              patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
              oldCh[idxInOld] = void 0;
              canMove && nodeOps2.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
            } else {
              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
            }
          }
          newStartVnode = newCh[++newStartIdx];
        }
      }
      if (oldStartIdx > oldEndIdx) {
        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
      } else if (newStartIdx > newEndIdx) {
        removeVnodes(oldCh, oldStartIdx, oldEndIdx);
      }
    }
    function checkDuplicateKeys(children) {
      var seenKeys = {};
      for (var i_4 = 0; i_4 < children.length; i_4++) {
        var vnode = children[i_4];
        var key = vnode.key;
        if (isDef(key)) {
          if (seenKeys[key]) {
            warn("Duplicate keys detected: '".concat(key, "'. This may cause an update error."), vnode.context);
          } else {
            seenKeys[key] = true;
          }
        }
      }
    }
    function findIdxInOld(node, oldCh, start2, end) {
      for (var i_5 = start2; i_5 < end; i_5++) {
        var c2 = oldCh[i_5];
        if (isDef(c2) && sameVnode(node, c2))
          return i_5;
      }
    }
    function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index2, removeOnly) {
      if (oldVnode === vnode) {
        return;
      }
      if (isDef(vnode.elm) && isDef(ownerArray)) {
        vnode = ownerArray[index2] = cloneVNode(vnode);
      }
      var elm = vnode.elm = oldVnode.elm;
      if (isTrue(oldVnode.isAsyncPlaceholder)) {
        if (isDef(vnode.asyncFactory.resolved)) {
          hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
        } else {
          vnode.isAsyncPlaceholder = true;
        }
        return;
      }
      if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
        vnode.componentInstance = oldVnode.componentInstance;
        return;
      }
      var i2;
      var data = vnode.data;
      if (isDef(data) && isDef(i2 = data.hook) && isDef(i2 = i2.prepatch)) {
        i2(oldVnode, vnode);
      }
      var oldCh = oldVnode.children;
      var ch = vnode.children;
      if (isDef(data) && isPatchable(vnode)) {
        for (i2 = 0; i2 < cbs.update.length; ++i2)
          cbs.update[i2](oldVnode, vnode);
        if (isDef(i2 = data.hook) && isDef(i2 = i2.update))
          i2(oldVnode, vnode);
      }
      if (isUndef(vnode.text)) {
        if (isDef(oldCh) && isDef(ch)) {
          if (oldCh !== ch)
            updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        } else if (isDef(ch)) {
          if (true) {
            checkDuplicateKeys(ch);
          }
          if (isDef(oldVnode.text))
            nodeOps2.setTextContent(elm, "");
          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
        } else if (isDef(oldCh)) {
          removeVnodes(oldCh, 0, oldCh.length - 1);
        } else if (isDef(oldVnode.text)) {
          nodeOps2.setTextContent(elm, "");
        }
      } else if (oldVnode.text !== vnode.text) {
        nodeOps2.setTextContent(elm, vnode.text);
      }
      if (isDef(data)) {
        if (isDef(i2 = data.hook) && isDef(i2 = i2.postpatch))
          i2(oldVnode, vnode);
      }
    }
    function invokeInsertHook(vnode, queue2, initial) {
      if (isTrue(initial) && isDef(vnode.parent)) {
        vnode.parent.data.pendingInsert = queue2;
      } else {
        for (var i_6 = 0; i_6 < queue2.length; ++i_6) {
          queue2[i_6].data.hook.insert(queue2[i_6]);
        }
      }
    }
    var hydrationBailed = false;
    var isRenderedModule = makeMap("attrs,class,staticClass,staticStyle,key");
    function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
      var i2;
      var tag = vnode.tag, data = vnode.data, children = vnode.children;
      inVPre = inVPre || data && data.pre;
      vnode.elm = elm;
      if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
        vnode.isAsyncPlaceholder = true;
        return true;
      }
      if (true) {
        if (!assertNodeMatch(elm, vnode, inVPre)) {
          return false;
        }
      }
      if (isDef(data)) {
        if (isDef(i2 = data.hook) && isDef(i2 = i2.init))
          i2(vnode, true);
        if (isDef(i2 = vnode.componentInstance)) {
          initComponent(vnode, insertedVnodeQueue);
          return true;
        }
      }
      if (isDef(tag)) {
        if (isDef(children)) {
          if (!elm.hasChildNodes()) {
            createChildren(vnode, children, insertedVnodeQueue);
          } else {
            if (isDef(i2 = data) && isDef(i2 = i2.domProps) && isDef(i2 = i2.innerHTML)) {
              if (i2 !== elm.innerHTML) {
                if (typeof console !== "undefined" && !hydrationBailed) {
                  hydrationBailed = true;
                  console.warn("Parent: ", elm);
                  console.warn("server innerHTML: ", i2);
                  console.warn("client innerHTML: ", elm.innerHTML);
                }
                return false;
              }
            } else {
              var childrenMatch = true;
              var childNode = elm.firstChild;
              for (var i_7 = 0; i_7 < children.length; i_7++) {
                if (!childNode || !hydrate(childNode, children[i_7], insertedVnodeQueue, inVPre)) {
                  childrenMatch = false;
                  break;
                }
                childNode = childNode.nextSibling;
              }
              if (!childrenMatch || childNode) {
                if (typeof console !== "undefined" && !hydrationBailed) {
                  hydrationBailed = true;
                  console.warn("Parent: ", elm);
                  console.warn("Mismatching childNodes vs. VNodes: ", elm.childNodes, children);
                }
                return false;
              }
            }
          }
        }
        if (isDef(data)) {
          var fullInvoke = false;
          for (var key in data) {
            if (!isRenderedModule(key)) {
              fullInvoke = true;
              invokeCreateHooks(vnode, insertedVnodeQueue);
              break;
            }
          }
          if (!fullInvoke && data["class"]) {
            traverse(data["class"]);
          }
        }
      } else if (elm.data !== vnode.text) {
        elm.data = vnode.text;
      }
      return true;
    }
    function assertNodeMatch(node, vnode, inVPre) {
      if (isDef(vnode.tag)) {
        return vnode.tag.indexOf("vue-component") === 0 || !isUnknownElement2(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
      } else {
        return node.nodeType === (vnode.isComment ? 8 : 3);
      }
    }
    return function patch2(oldVnode, vnode, hydrating, removeOnly) {
      if (isUndef(vnode)) {
        if (isDef(oldVnode))
          invokeDestroyHook(oldVnode);
        return;
      }
      var isInitialPatch = false;
      var insertedVnodeQueue = [];
      if (isUndef(oldVnode)) {
        isInitialPatch = true;
        createElm(vnode, insertedVnodeQueue);
      } else {
        var isRealElement = isDef(oldVnode.nodeType);
        if (!isRealElement && sameVnode(oldVnode, vnode)) {
          patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
        } else {
          if (isRealElement) {
            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
              oldVnode.removeAttribute(SSR_ATTR);
              hydrating = true;
            }
            if (isTrue(hydrating)) {
              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                invokeInsertHook(vnode, insertedVnodeQueue, true);
                return oldVnode;
              } else if (true) {
                warn("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.");
              }
            }
            oldVnode = emptyNodeAt(oldVnode);
          }
          var oldElm = oldVnode.elm;
          var parentElm = nodeOps2.parentNode(oldElm);
          createElm(
            vnode,
            insertedVnodeQueue,
            oldElm._leaveCb ? null : parentElm,
            nodeOps2.nextSibling(oldElm)
          );
          if (isDef(vnode.parent)) {
            var ancestor = vnode.parent;
            var patchable = isPatchable(vnode);
            while (ancestor) {
              for (var i_8 = 0; i_8 < cbs.destroy.length; ++i_8) {
                cbs.destroy[i_8](ancestor);
              }
              ancestor.elm = vnode.elm;
              if (patchable) {
                for (var i_9 = 0; i_9 < cbs.create.length; ++i_9) {
                  cbs.create[i_9](emptyNode, ancestor);
                }
                var insert_1 = ancestor.data.hook.insert;
                if (insert_1.merged) {
                  for (var i_10 = 1; i_10 < insert_1.fns.length; i_10++) {
                    insert_1.fns[i_10]();
                  }
                }
              } else {
                registerRef(ancestor);
              }
              ancestor = ancestor.parent;
            }
          }
          if (isDef(parentElm)) {
            removeVnodes([oldVnode], 0, 0);
          } else if (isDef(oldVnode.tag)) {
            invokeDestroyHook(oldVnode);
          }
        }
      }
      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
      return vnode.elm;
    };
  }
  var directives = {
    create: updateDirectives,
    update: updateDirectives,
    destroy: function unbindDirectives(vnode) {
      updateDirectives(vnode, emptyNode);
    }
  };
  function updateDirectives(oldVnode, vnode) {
    if (oldVnode.data.directives || vnode.data.directives) {
      _update(oldVnode, vnode);
    }
  }
  function _update(oldVnode, vnode) {
    var isCreate = oldVnode === emptyNode;
    var isDestroy = vnode === emptyNode;
    var oldDirs = normalizeDirectives(oldVnode.data.directives, oldVnode.context);
    var newDirs = normalizeDirectives(vnode.data.directives, vnode.context);
    var dirsWithInsert = [];
    var dirsWithPostpatch = [];
    var key, oldDir, dir;
    for (key in newDirs) {
      oldDir = oldDirs[key];
      dir = newDirs[key];
      if (!oldDir) {
        callHook(dir, "bind", vnode, oldVnode);
        if (dir.def && dir.def.inserted) {
          dirsWithInsert.push(dir);
        }
      } else {
        dir.oldValue = oldDir.value;
        dir.oldArg = oldDir.arg;
        callHook(dir, "update", vnode, oldVnode);
        if (dir.def && dir.def.componentUpdated) {
          dirsWithPostpatch.push(dir);
        }
      }
    }
    if (dirsWithInsert.length) {
      var callInsert = function() {
        for (var i = 0; i < dirsWithInsert.length; i++) {
          callHook(dirsWithInsert[i], "inserted", vnode, oldVnode);
        }
      };
      if (isCreate) {
        mergeVNodeHook(vnode, "insert", callInsert);
      } else {
        callInsert();
      }
    }
    if (dirsWithPostpatch.length) {
      mergeVNodeHook(vnode, "postpatch", function() {
        for (var i = 0; i < dirsWithPostpatch.length; i++) {
          callHook(dirsWithPostpatch[i], "componentUpdated", vnode, oldVnode);
        }
      });
    }
    if (!isCreate) {
      for (key in oldDirs) {
        if (!newDirs[key]) {
          callHook(oldDirs[key], "unbind", oldVnode, oldVnode, isDestroy);
        }
      }
    }
  }
  var emptyModifiers = /* @__PURE__ */ Object.create(null);
  function normalizeDirectives(dirs, vm) {
    var res = /* @__PURE__ */ Object.create(null);
    if (!dirs) {
      return res;
    }
    var i, dir;
    for (i = 0; i < dirs.length; i++) {
      dir = dirs[i];
      if (!dir.modifiers) {
        dir.modifiers = emptyModifiers;
      }
      res[getRawDirName(dir)] = dir;
      if (vm._setupState && vm._setupState.__sfc) {
        var setupDef = dir.def || resolveAsset(vm, "_setupState", "v-" + dir.name);
        if (typeof setupDef === "function") {
          dir.def = {
            bind: setupDef,
            update: setupDef
          };
        } else {
          dir.def = setupDef;
        }
      }
      dir.def = dir.def || resolveAsset(vm.$options, "directives", dir.name, true);
    }
    return res;
  }
  function getRawDirName(dir) {
    return dir.rawName || "".concat(dir.name, ".").concat(Object.keys(dir.modifiers || {}).join("."));
  }
  function callHook(dir, hook, vnode, oldVnode, isDestroy) {
    var fn = dir.def && dir.def[hook];
    if (fn) {
      try {
        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
      } catch (e) {
        handleError(e, vnode.context, "directive ".concat(dir.name, " ").concat(hook, " hook"));
      }
    }
  }
  var baseModules = [ref, directives];
  function updateAttrs(oldVnode, vnode) {
    var opts = vnode.componentOptions;
    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
      return;
    }
    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
      return;
    }
    var key, cur, old;
    var elm = vnode.elm;
    var oldAttrs = oldVnode.data.attrs || {};
    var attrs2 = vnode.data.attrs || {};
    if (isDef(attrs2.__ob__) || isTrue(attrs2._v_attr_proxy)) {
      attrs2 = vnode.data.attrs = extend3({}, attrs2);
    }
    for (key in attrs2) {
      cur = attrs2[key];
      old = oldAttrs[key];
      if (old !== cur) {
        setAttr(elm, key, cur, vnode.data.pre);
      }
    }
    if ((isIE || isEdge) && attrs2.value !== oldAttrs.value) {
      setAttr(elm, "value", attrs2.value);
    }
    for (key in oldAttrs) {
      if (isUndef(attrs2[key])) {
        if (isXlink(key)) {
          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
        } else if (!isEnumeratedAttr(key)) {
          elm.removeAttribute(key);
        }
      }
    }
  }
  function setAttr(el, key, value, isInPre) {
    if (isInPre || el.tagName.indexOf("-") > -1) {
      baseSetAttr(el, key, value);
    } else if (isBooleanAttr(key)) {
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        value = key === "allowfullscreen" && el.tagName === "EMBED" ? "true" : key;
        el.setAttribute(key, value);
      }
    } else if (isEnumeratedAttr(key)) {
      el.setAttribute(key, convertEnumeratedValue(key, value));
    } else if (isXlink(key)) {
      if (isFalsyAttrValue(value)) {
        el.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else {
        el.setAttributeNS(xlinkNS, key, value);
      }
    } else {
      baseSetAttr(el, key, value);
    }
  }
  function baseSetAttr(el, key, value) {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      if (isIE && !isIE9 && el.tagName === "TEXTAREA" && key === "placeholder" && value !== "" && !el.__ieph) {
        var blocker_1 = function(e) {
          e.stopImmediatePropagation();
          el.removeEventListener("input", blocker_1);
        };
        el.addEventListener("input", blocker_1);
        el.__ieph = true;
      }
      el.setAttribute(key, value);
    }
  }
  var attrs = {
    create: updateAttrs,
    update: updateAttrs
  };
  function updateClass(oldVnode, vnode) {
    var el = vnode.elm;
    var data = vnode.data;
    var oldData = oldVnode.data;
    if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
      return;
    }
    var cls = genClassForVnode(vnode);
    var transitionClass = el._transitionClasses;
    if (isDef(transitionClass)) {
      cls = concat(cls, stringifyClass(transitionClass));
    }
    if (cls !== el._prevClass) {
      el.setAttribute("class", cls);
      el._prevClass = cls;
    }
  }
  var klass = {
    create: updateClass,
    update: updateClass
  };
  var RANGE_TOKEN = "__r";
  var CHECKBOX_RADIO_TOKEN = "__c";
  function normalizeEvents(on) {
    if (isDef(on[RANGE_TOKEN])) {
      var event_1 = isIE ? "change" : "input";
      on[event_1] = [].concat(on[RANGE_TOKEN], on[event_1] || []);
      delete on[RANGE_TOKEN];
    }
    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
      on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
      delete on[CHECKBOX_RADIO_TOKEN];
    }
  }
  var target;
  function createOnceHandler(event, handler, capture) {
    var _target = target;
    return function onceHandler() {
      var res = handler.apply(null, arguments);
      if (res !== null) {
        remove(event, onceHandler, capture, _target);
      }
    };
  }
  var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);
  function add2(name, handler, capture, passive) {
    if (useMicrotaskFix) {
      var attachedTimestamp_1 = currentFlushTimestamp;
      var original_1 = handler;
      handler = original_1._wrapper = function(e) {
        if (e.target === e.currentTarget || e.timeStamp >= attachedTimestamp_1 || e.timeStamp <= 0 || e.target.ownerDocument !== document) {
          return original_1.apply(this, arguments);
        }
      };
    }
    target.addEventListener(name, handler, supportsPassive ? { capture, passive } : capture);
  }
  function remove(name, handler, capture, _target) {
    (_target || target).removeEventListener(
      name,
      handler._wrapper || handler,
      capture
    );
  }
  function updateDOMListeners(oldVnode, vnode) {
    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
      return;
    }
    var on = vnode.data.on || {};
    var oldOn = oldVnode.data.on || {};
    target = vnode.elm || oldVnode.elm;
    normalizeEvents(on);
    updateListeners(on, oldOn, add2, remove, createOnceHandler, vnode.context);
    target = void 0;
  }
  var events = {
    create: updateDOMListeners,
    update: updateDOMListeners,
    destroy: function(vnode) {
      return updateDOMListeners(vnode, emptyNode);
    }
  };
  var svgContainer;
  function updateDOMProps(oldVnode, vnode) {
    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
      return;
    }
    var key, cur;
    var elm = vnode.elm;
    var oldProps = oldVnode.data.domProps || {};
    var props2 = vnode.data.domProps || {};
    if (isDef(props2.__ob__) || isTrue(props2._v_attr_proxy)) {
      props2 = vnode.data.domProps = extend3({}, props2);
    }
    for (key in oldProps) {
      if (!(key in props2)) {
        elm[key] = "";
      }
    }
    for (key in props2) {
      cur = props2[key];
      if (key === "textContent" || key === "innerHTML") {
        if (vnode.children)
          vnode.children.length = 0;
        if (cur === oldProps[key])
          continue;
        if (elm.childNodes.length === 1) {
          elm.removeChild(elm.childNodes[0]);
        }
      }
      if (key === "value" && elm.tagName !== "PROGRESS") {
        elm._value = cur;
        var strCur = isUndef(cur) ? "" : String(cur);
        if (shouldUpdateValue(elm, strCur)) {
          elm.value = strCur;
        }
      } else if (key === "innerHTML" && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
        svgContainer = svgContainer || document.createElement("div");
        svgContainer.innerHTML = "<svg>".concat(cur, "</svg>");
        var svg = svgContainer.firstChild;
        while (elm.firstChild) {
          elm.removeChild(elm.firstChild);
        }
        while (svg.firstChild) {
          elm.appendChild(svg.firstChild);
        }
      } else if (cur !== oldProps[key]) {
        try {
          elm[key] = cur;
        } catch (e) {
        }
      }
    }
  }
  function shouldUpdateValue(elm, checkVal) {
    return !elm.composing && (elm.tagName === "OPTION" || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
  }
  function isNotInFocusAndDirty(elm, checkVal) {
    var notInFocus = true;
    try {
      notInFocus = document.activeElement !== elm;
    } catch (e) {
    }
    return notInFocus && elm.value !== checkVal;
  }
  function isDirtyWithModifiers(elm, newVal) {
    var value = elm.value;
    var modifiers = elm._vModifiers;
    if (isDef(modifiers)) {
      if (modifiers.number) {
        return toNumber(value) !== toNumber(newVal);
      }
      if (modifiers.trim) {
        return value.trim() !== newVal.trim();
      }
    }
    return value !== newVal;
  }
  var domProps = {
    create: updateDOMProps,
    update: updateDOMProps
  };
  var parseStyleText = cached(function(cssText) {
    var res = {};
    var listDelimiter = /;(?![^(]*\))/g;
    var propertyDelimiter = /:(.+)/;
    cssText.split(listDelimiter).forEach(function(item) {
      if (item) {
        var tmp = item.split(propertyDelimiter);
        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
      }
    });
    return res;
  });
  function normalizeStyleData(data) {
    var style2 = normalizeStyleBinding(data.style);
    return data.staticStyle ? extend3(data.staticStyle, style2) : style2;
  }
  function normalizeStyleBinding(bindingStyle) {
    if (Array.isArray(bindingStyle)) {
      return toObject(bindingStyle);
    }
    if (typeof bindingStyle === "string") {
      return parseStyleText(bindingStyle);
    }
    return bindingStyle;
  }
  function getStyle(vnode, checkChild) {
    var res = {};
    var styleData;
    if (checkChild) {
      var childNode = vnode;
      while (childNode.componentInstance) {
        childNode = childNode.componentInstance._vnode;
        if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
          extend3(res, styleData);
        }
      }
    }
    if (styleData = normalizeStyleData(vnode.data)) {
      extend3(res, styleData);
    }
    var parentNode2 = vnode;
    while (parentNode2 = parentNode2.parent) {
      if (parentNode2.data && (styleData = normalizeStyleData(parentNode2.data))) {
        extend3(res, styleData);
      }
    }
    return res;
  }
  var cssVarRE = /^--/;
  var importantRE = /\s*!important$/;
  var setProp = function(el, name, val) {
    if (cssVarRE.test(name)) {
      el.style.setProperty(name, val);
    } else if (importantRE.test(val)) {
      el.style.setProperty(hyphenate(name), val.replace(importantRE, ""), "important");
    } else {
      var normalizedName = normalize(name);
      if (Array.isArray(val)) {
        for (var i = 0, len = val.length; i < len; i++) {
          el.style[normalizedName] = val[i];
        }
      } else {
        el.style[normalizedName] = val;
      }
    }
  };
  var vendorNames = ["Webkit", "Moz", "ms"];
  var emptyStyle;
  var normalize = cached(function(prop) {
    emptyStyle = emptyStyle || document.createElement("div").style;
    prop = camelize2(prop);
    if (prop !== "filter" && prop in emptyStyle) {
      return prop;
    }
    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
    for (var i = 0; i < vendorNames.length; i++) {
      var name_1 = vendorNames[i] + capName;
      if (name_1 in emptyStyle) {
        return name_1;
      }
    }
  });
  function updateStyle(oldVnode, vnode) {
    var data = vnode.data;
    var oldData = oldVnode.data;
    if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
      return;
    }
    var cur, name;
    var el = vnode.elm;
    var oldStaticStyle = oldData.staticStyle;
    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
    var oldStyle = oldStaticStyle || oldStyleBinding;
    var style2 = normalizeStyleBinding(vnode.data.style) || {};
    vnode.data.normalizedStyle = isDef(style2.__ob__) ? extend3({}, style2) : style2;
    var newStyle = getStyle(vnode, true);
    for (name in oldStyle) {
      if (isUndef(newStyle[name])) {
        setProp(el, name, "");
      }
    }
    for (name in newStyle) {
      cur = newStyle[name];
      if (cur !== oldStyle[name]) {
        setProp(el, name, cur == null ? "" : cur);
      }
    }
  }
  var style = {
    create: updateStyle,
    update: updateStyle
  };
  var whitespaceRE = /\s+/;
  function addClass(el, cls) {
    if (!cls || !(cls = cls.trim())) {
      return;
    }
    if (el.classList) {
      if (cls.indexOf(" ") > -1) {
        cls.split(whitespaceRE).forEach(function(c2) {
          return el.classList.add(c2);
        });
      } else {
        el.classList.add(cls);
      }
    } else {
      var cur = " ".concat(el.getAttribute("class") || "", " ");
      if (cur.indexOf(" " + cls + " ") < 0) {
        el.setAttribute("class", (cur + cls).trim());
      }
    }
  }
  function removeClass(el, cls) {
    if (!cls || !(cls = cls.trim())) {
      return;
    }
    if (el.classList) {
      if (cls.indexOf(" ") > -1) {
        cls.split(whitespaceRE).forEach(function(c2) {
          return el.classList.remove(c2);
        });
      } else {
        el.classList.remove(cls);
      }
      if (!el.classList.length) {
        el.removeAttribute("class");
      }
    } else {
      var cur = " ".concat(el.getAttribute("class") || "", " ");
      var tar = " " + cls + " ";
      while (cur.indexOf(tar) >= 0) {
        cur = cur.replace(tar, " ");
      }
      cur = cur.trim();
      if (cur) {
        el.setAttribute("class", cur);
      } else {
        el.removeAttribute("class");
      }
    }
  }
  function resolveTransition(def2) {
    if (!def2) {
      return;
    }
    if (typeof def2 === "object") {
      var res = {};
      if (def2.css !== false) {
        extend3(res, autoCssTransition(def2.name || "v"));
      }
      extend3(res, def2);
      return res;
    } else if (typeof def2 === "string") {
      return autoCssTransition(def2);
    }
  }
  var autoCssTransition = cached(function(name) {
    return {
      enterClass: "".concat(name, "-enter"),
      enterToClass: "".concat(name, "-enter-to"),
      enterActiveClass: "".concat(name, "-enter-active"),
      leaveClass: "".concat(name, "-leave"),
      leaveToClass: "".concat(name, "-leave-to"),
      leaveActiveClass: "".concat(name, "-leave-active")
    };
  });
  var hasTransition = inBrowser && !isIE9;
  var TRANSITION = "transition";
  var ANIMATION = "animation";
  var transitionProp = "transition";
  var transitionEndEvent = "transitionend";
  var animationProp = "animation";
  var animationEndEvent = "animationend";
  if (hasTransition) {
    if (window.ontransitionend === void 0 && window.onwebkittransitionend !== void 0) {
      transitionProp = "WebkitTransition";
      transitionEndEvent = "webkitTransitionEnd";
    }
    if (window.onanimationend === void 0 && window.onwebkitanimationend !== void 0) {
      animationProp = "WebkitAnimation";
      animationEndEvent = "webkitAnimationEnd";
    }
  }
  var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : function(fn) {
    return fn();
  };
  function nextFrame(fn) {
    raf(function() {
      raf(fn);
    });
  }
  function addTransitionClass(el, cls) {
    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
    if (transitionClasses.indexOf(cls) < 0) {
      transitionClasses.push(cls);
      addClass(el, cls);
    }
  }
  function removeTransitionClass(el, cls) {
    if (el._transitionClasses) {
      remove$2(el._transitionClasses, cls);
    }
    removeClass(el, cls);
  }
  function whenTransitionEnds(el, expectedType, cb) {
    var _a = getTransitionInfo(el, expectedType), type = _a.type, timeout = _a.timeout, propCount = _a.propCount;
    if (!type)
      return cb();
    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
    var ended = 0;
    var end = function() {
      el.removeEventListener(event, onEnd);
      cb();
    };
    var onEnd = function(e) {
      if (e.target === el) {
        if (++ended >= propCount) {
          end();
        }
      }
    };
    setTimeout(function() {
      if (ended < propCount) {
        end();
      }
    }, timeout + 1);
    el.addEventListener(event, onEnd);
  }
  var transformRE = /\b(transform|all)(,|$)/;
  function getTransitionInfo(el, expectedType) {
    var styles = window.getComputedStyle(el);
    var transitionDelays = (styles[transitionProp + "Delay"] || "").split(", ");
    var transitionDurations = (styles[transitionProp + "Duration"] || "").split(", ");
    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    var animationDelays = (styles[animationProp + "Delay"] || "").split(", ");
    var animationDurations = (styles[animationProp + "Duration"] || "").split(", ");
    var animationTimeout = getTimeout(animationDelays, animationDurations);
    var type;
    var timeout = 0;
    var propCount = 0;
    if (expectedType === TRANSITION) {
      if (transitionTimeout > 0) {
        type = TRANSITION;
        timeout = transitionTimeout;
        propCount = transitionDurations.length;
      }
    } else if (expectedType === ANIMATION) {
      if (animationTimeout > 0) {
        type = ANIMATION;
        timeout = animationTimeout;
        propCount = animationDurations.length;
      }
    } else {
      timeout = Math.max(transitionTimeout, animationTimeout);
      type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
      propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + "Property"]);
    return {
      type,
      timeout,
      propCount,
      hasTransform
    };
  }
  function getTimeout(delays, durations) {
    while (delays.length < durations.length) {
      delays = delays.concat(delays);
    }
    return Math.max.apply(null, durations.map(function(d, i) {
      return toMs(d) + toMs(delays[i]);
    }));
  }
  function toMs(s) {
    return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
  }
  function enter(vnode, toggleDisplay) {
    var el = vnode.elm;
    if (isDef(el._leaveCb)) {
      el._leaveCb.cancelled = true;
      el._leaveCb();
    }
    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
      return;
    }
    if (isDef(el._enterCb) || el.nodeType !== 1) {
      return;
    }
    var css2 = data.css, type = data.type, enterClass = data.enterClass, enterToClass = data.enterToClass, enterActiveClass = data.enterActiveClass, appearClass = data.appearClass, appearToClass = data.appearToClass, appearActiveClass = data.appearActiveClass, beforeEnter = data.beforeEnter, enter2 = data.enter, afterEnter = data.afterEnter, enterCancelled = data.enterCancelled, beforeAppear = data.beforeAppear, appear = data.appear, afterAppear = data.afterAppear, appearCancelled = data.appearCancelled, duration = data.duration;
    var context = activeInstance;
    var transitionNode = activeInstance.$vnode;
    while (transitionNode && transitionNode.parent) {
      context = transitionNode.context;
      transitionNode = transitionNode.parent;
    }
    var isAppear = !context._isMounted || !vnode.isRootInsert;
    if (isAppear && !appear && appear !== "") {
      return;
    }
    var startClass = isAppear && appearClass ? appearClass : enterClass;
    var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
    var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
    var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
    var enterHook = isAppear ? isFunction(appear) ? appear : enter2 : enter2;
    var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
    var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
    var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);
    if (explicitEnterDuration != null) {
      checkDuration(explicitEnterDuration, "enter", vnode);
    }
    var expectsCSS = css2 !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(enterHook);
    var cb = el._enterCb = once(function() {
      if (expectsCSS) {
        removeTransitionClass(el, toClass);
        removeTransitionClass(el, activeClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, startClass);
        }
        enterCancelledHook && enterCancelledHook(el);
      } else {
        afterEnterHook && afterEnterHook(el);
      }
      el._enterCb = null;
    });
    if (!vnode.data.show) {
      mergeVNodeHook(vnode, "insert", function() {
        var parent = el.parentNode;
        var pendingNode = parent && parent._pending && parent._pending[vnode.key];
        if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
          pendingNode.elm._leaveCb();
        }
        enterHook && enterHook(el, cb);
      });
    }
    beforeEnterHook && beforeEnterHook(el);
    if (expectsCSS) {
      addTransitionClass(el, startClass);
      addTransitionClass(el, activeClass);
      nextFrame(function() {
        removeTransitionClass(el, startClass);
        if (!cb.cancelled) {
          addTransitionClass(el, toClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitEnterDuration)) {
              setTimeout(cb, explicitEnterDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    if (vnode.data.show) {
      toggleDisplay && toggleDisplay();
      enterHook && enterHook(el, cb);
    }
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
  function leave(vnode, rm) {
    var el = vnode.elm;
    if (isDef(el._enterCb)) {
      el._enterCb.cancelled = true;
      el._enterCb();
    }
    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data) || el.nodeType !== 1) {
      return rm();
    }
    if (isDef(el._leaveCb)) {
      return;
    }
    var css2 = data.css, type = data.type, leaveClass = data.leaveClass, leaveToClass = data.leaveToClass, leaveActiveClass = data.leaveActiveClass, beforeLeave = data.beforeLeave, leave2 = data.leave, afterLeave = data.afterLeave, leaveCancelled = data.leaveCancelled, delayLeave = data.delayLeave, duration = data.duration;
    var expectsCSS = css2 !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(leave2);
    var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);
    if (isDef(explicitLeaveDuration)) {
      checkDuration(explicitLeaveDuration, "leave", vnode);
    }
    var cb = el._leaveCb = once(function() {
      if (el.parentNode && el.parentNode._pending) {
        el.parentNode._pending[vnode.key] = null;
      }
      if (expectsCSS) {
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, leaveClass);
        }
        leaveCancelled && leaveCancelled(el);
      } else {
        rm();
        afterLeave && afterLeave(el);
      }
      el._leaveCb = null;
    });
    if (delayLeave) {
      delayLeave(performLeave);
    } else {
      performLeave();
    }
    function performLeave() {
      if (cb.cancelled) {
        return;
      }
      if (!vnode.data.show && el.parentNode) {
        (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
      }
      beforeLeave && beforeLeave(el);
      if (expectsCSS) {
        addTransitionClass(el, leaveClass);
        addTransitionClass(el, leaveActiveClass);
        nextFrame(function() {
          removeTransitionClass(el, leaveClass);
          if (!cb.cancelled) {
            addTransitionClass(el, leaveToClass);
            if (!userWantsControl) {
              if (isValidDuration(explicitLeaveDuration)) {
                setTimeout(cb, explicitLeaveDuration);
              } else {
                whenTransitionEnds(el, type, cb);
              }
            }
          }
        });
      }
      leave2 && leave2(el, cb);
      if (!expectsCSS && !userWantsControl) {
        cb();
      }
    }
  }
  function checkDuration(val, name, vnode) {
    if (typeof val !== "number") {
      warn("<transition> explicit ".concat(name, " duration is not a valid number - ") + "got ".concat(JSON.stringify(val), "."), vnode.context);
    } else if (isNaN(val)) {
      warn("<transition> explicit ".concat(name, " duration is NaN - ") + "the duration expression might be incorrect.", vnode.context);
    }
  }
  function isValidDuration(val) {
    return typeof val === "number" && !isNaN(val);
  }
  function getHookArgumentsLength(fn) {
    if (isUndef(fn)) {
      return false;
    }
    var invokerFns = fn.fns;
    if (isDef(invokerFns)) {
      return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
    } else {
      return (fn._length || fn.length) > 1;
    }
  }
  function _enter(_, vnode) {
    if (vnode.data.show !== true) {
      enter(vnode);
    }
  }
  var transition = inBrowser ? {
    create: _enter,
    activate: _enter,
    remove: function(vnode, rm) {
      if (vnode.data.show !== true) {
        leave(vnode, rm);
      } else {
        rm();
      }
    }
  } : {};
  var platformModules = [attrs, klass, events, domProps, style, transition];
  var modules = platformModules.concat(baseModules);
  var patch = createPatchFunction({ nodeOps, modules });
  if (isIE9) {
    document.addEventListener("selectionchange", function() {
      var el = document.activeElement;
      if (el && el.vmodel) {
        trigger(el, "input");
      }
    });
  }
  var directive = {
    inserted: function(el, binding, vnode, oldVnode) {
      if (vnode.tag === "select") {
        if (oldVnode.elm && !oldVnode.elm._vOptions) {
          mergeVNodeHook(vnode, "postpatch", function() {
            directive.componentUpdated(el, binding, vnode);
          });
        } else {
          setSelected(el, binding, vnode.context);
        }
        el._vOptions = [].map.call(el.options, getValue);
      } else if (vnode.tag === "textarea" || isTextInputType(el.type)) {
        el._vModifiers = binding.modifiers;
        if (!binding.modifiers.lazy) {
          el.addEventListener("compositionstart", onCompositionStart);
          el.addEventListener("compositionend", onCompositionEnd);
          el.addEventListener("change", onCompositionEnd);
          if (isIE9) {
            el.vmodel = true;
          }
        }
      }
    },
    componentUpdated: function(el, binding, vnode) {
      if (vnode.tag === "select") {
        setSelected(el, binding, vnode.context);
        var prevOptions_1 = el._vOptions;
        var curOptions_1 = el._vOptions = [].map.call(el.options, getValue);
        if (curOptions_1.some(function(o, i) {
          return !looseEqual(o, prevOptions_1[i]);
        })) {
          var needReset = el.multiple ? binding.value.some(function(v) {
            return hasNoMatchingOption(v, curOptions_1);
          }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions_1);
          if (needReset) {
            trigger(el, "change");
          }
        }
      }
    }
  };
  function setSelected(el, binding, vm) {
    actuallySetSelected(el, binding, vm);
    if (isIE || isEdge) {
      setTimeout(function() {
        actuallySetSelected(el, binding, vm);
      }, 0);
    }
  }
  function actuallySetSelected(el, binding, vm) {
    var value = binding.value;
    var isMultiple = el.multiple;
    if (isMultiple && !Array.isArray(value)) {
      warn('<select multiple v-model="'.concat(binding.expression, '"> ') + "expects an Array value for its binding, but got ".concat(Object.prototype.toString.call(value).slice(8, -1)), vm);
      return;
    }
    var selected, option;
    for (var i = 0, l = el.options.length; i < l; i++) {
      option = el.options[i];
      if (isMultiple) {
        selected = looseIndexOf(value, getValue(option)) > -1;
        if (option.selected !== selected) {
          option.selected = selected;
        }
      } else {
        if (looseEqual(getValue(option), value)) {
          if (el.selectedIndex !== i) {
            el.selectedIndex = i;
          }
          return;
        }
      }
    }
    if (!isMultiple) {
      el.selectedIndex = -1;
    }
  }
  function hasNoMatchingOption(value, options) {
    return options.every(function(o) {
      return !looseEqual(o, value);
    });
  }
  function getValue(option) {
    return "_value" in option ? option._value : option.value;
  }
  function onCompositionStart(e) {
    e.target.composing = true;
  }
  function onCompositionEnd(e) {
    if (!e.target.composing)
      return;
    e.target.composing = false;
    trigger(e.target, "input");
  }
  function trigger(el, type) {
    var e = document.createEvent("HTMLEvents");
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
  }
  function locateNode(vnode) {
    return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
  }
  var show = {
    bind: function(el, _a, vnode) {
      var value = _a.value;
      vnode = locateNode(vnode);
      var transition2 = vnode.data && vnode.data.transition;
      var originalDisplay = el.__vOriginalDisplay = el.style.display === "none" ? "" : el.style.display;
      if (value && transition2) {
        vnode.data.show = true;
        enter(vnode, function() {
          el.style.display = originalDisplay;
        });
      } else {
        el.style.display = value ? originalDisplay : "none";
      }
    },
    update: function(el, _a, vnode) {
      var value = _a.value, oldValue = _a.oldValue;
      if (!value === !oldValue)
        return;
      vnode = locateNode(vnode);
      var transition2 = vnode.data && vnode.data.transition;
      if (transition2) {
        vnode.data.show = true;
        if (value) {
          enter(vnode, function() {
            el.style.display = el.__vOriginalDisplay;
          });
        } else {
          leave(vnode, function() {
            el.style.display = "none";
          });
        }
      } else {
        el.style.display = value ? el.__vOriginalDisplay : "none";
      }
    },
    unbind: function(el, binding, vnode, oldVnode, isDestroy) {
      if (!isDestroy) {
        el.style.display = el.__vOriginalDisplay;
      }
    }
  };
  var platformDirectives = {
    model: directive,
    show
  };
  var transitionProps = {
    name: String,
    appear: Boolean,
    css: Boolean,
    mode: String,
    type: String,
    enterClass: String,
    leaveClass: String,
    enterToClass: String,
    leaveToClass: String,
    enterActiveClass: String,
    leaveActiveClass: String,
    appearClass: String,
    appearActiveClass: String,
    appearToClass: String,
    duration: [Number, String, Object]
  };
  function getRealChild(vnode) {
    var compOptions = vnode && vnode.componentOptions;
    if (compOptions && compOptions.Ctor.options.abstract) {
      return getRealChild(getFirstComponentChild(compOptions.children));
    } else {
      return vnode;
    }
  }
  function extractTransitionData(comp) {
    var data = {};
    var options = comp.$options;
    for (var key in options.propsData) {
      data[key] = comp[key];
    }
    var listeners = options._parentListeners;
    for (var key in listeners) {
      data[camelize2(key)] = listeners[key];
    }
    return data;
  }
  function placeholder(h, rawChild) {
    if (/\d-keep-alive$/.test(rawChild.tag)) {
      return h("keep-alive", {
        props: rawChild.componentOptions.propsData
      });
    }
  }
  function hasParentTransition(vnode) {
    while (vnode = vnode.parent) {
      if (vnode.data.transition) {
        return true;
      }
    }
  }
  function isSameChild(child, oldChild) {
    return oldChild.key === child.key && oldChild.tag === child.tag;
  }
  var isNotTextNode = function(c2) {
    return c2.tag || isAsyncPlaceholder(c2);
  };
  var isVShowDirective = function(d) {
    return d.name === "show";
  };
  var Transition = {
    name: "transition",
    props: transitionProps,
    abstract: true,
    render: function(h) {
      var _this = this;
      var children = this.$slots.default;
      if (!children) {
        return;
      }
      children = children.filter(isNotTextNode);
      if (!children.length) {
        return;
      }
      if (children.length > 1) {
        warn("<transition> can only be used on a single element. Use <transition-group> for lists.", this.$parent);
      }
      var mode = this.mode;
      if (mode && mode !== "in-out" && mode !== "out-in") {
        warn("invalid <transition> mode: " + mode, this.$parent);
      }
      var rawChild = children[0];
      if (hasParentTransition(this.$vnode)) {
        return rawChild;
      }
      var child = getRealChild(rawChild);
      if (!child) {
        return rawChild;
      }
      if (this._leaving) {
        return placeholder(h, rawChild);
      }
      var id = "__transition-".concat(this._uid, "-");
      child.key = child.key == null ? child.isComment ? id + "comment" : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
      var oldRawChild = this._vnode;
      var oldChild = getRealChild(oldRawChild);
      if (child.data.directives && child.data.directives.some(isVShowDirective)) {
        child.data.show = true;
      }
      if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
        var oldData = oldChild.data.transition = extend3({}, data);
        if (mode === "out-in") {
          this._leaving = true;
          mergeVNodeHook(oldData, "afterLeave", function() {
            _this._leaving = false;
            _this.$forceUpdate();
          });
          return placeholder(h, rawChild);
        } else if (mode === "in-out") {
          if (isAsyncPlaceholder(child)) {
            return oldRawChild;
          }
          var delayedLeave_1;
          var performLeave = function() {
            delayedLeave_1();
          };
          mergeVNodeHook(data, "afterEnter", performLeave);
          mergeVNodeHook(data, "enterCancelled", performLeave);
          mergeVNodeHook(oldData, "delayLeave", function(leave2) {
            delayedLeave_1 = leave2;
          });
        }
      }
      return rawChild;
    }
  };
  var props = extend3({
    tag: String,
    moveClass: String
  }, transitionProps);
  delete props.mode;
  var TransitionGroup = {
    props,
    beforeMount: function() {
      var _this = this;
      var update = this._update;
      this._update = function(vnode, hydrating) {
        var restoreActiveInstance = setActiveInstance(_this);
        _this.__patch__(
          _this._vnode,
          _this.kept,
          false,
          true
        );
        _this._vnode = _this.kept;
        restoreActiveInstance();
        update.call(_this, vnode, hydrating);
      };
    },
    render: function(h) {
      var tag = this.tag || this.$vnode.data.tag || "span";
      var map = /* @__PURE__ */ Object.create(null);
      var prevChildren = this.prevChildren = this.children;
      var rawChildren = this.$slots.default || [];
      var children = this.children = [];
      var transitionData = extractTransitionData(this);
      for (var i = 0; i < rawChildren.length; i++) {
        var c2 = rawChildren[i];
        if (c2.tag) {
          if (c2.key != null && String(c2.key).indexOf("__vlist") !== 0) {
            children.push(c2);
            map[c2.key] = c2;
            (c2.data || (c2.data = {})).transition = transitionData;
          } else if (true) {
            var opts = c2.componentOptions;
            var name_1 = opts ? getComponentName(opts.Ctor.options) || opts.tag || "" : c2.tag;
            warn("<transition-group> children must be keyed: <".concat(name_1, ">"));
          }
        }
      }
      if (prevChildren) {
        var kept = [];
        var removed = [];
        for (var i = 0; i < prevChildren.length; i++) {
          var c2 = prevChildren[i];
          c2.data.transition = transitionData;
          c2.data.pos = c2.elm.getBoundingClientRect();
          if (map[c2.key]) {
            kept.push(c2);
          } else {
            removed.push(c2);
          }
        }
        this.kept = h(tag, null, kept);
        this.removed = removed;
      }
      return h(tag, null, children);
    },
    updated: function() {
      var children = this.prevChildren;
      var moveClass = this.moveClass || (this.name || "v") + "-move";
      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
        return;
      }
      children.forEach(callPendingCbs);
      children.forEach(recordPosition);
      children.forEach(applyTranslation);
      this._reflow = document.body.offsetHeight;
      children.forEach(function(c2) {
        if (c2.data.moved) {
          var el_1 = c2.elm;
          var s = el_1.style;
          addTransitionClass(el_1, moveClass);
          s.transform = s.WebkitTransform = s.transitionDuration = "";
          el_1.addEventListener(transitionEndEvent, el_1._moveCb = function cb(e) {
            if (e && e.target !== el_1) {
              return;
            }
            if (!e || /transform$/.test(e.propertyName)) {
              el_1.removeEventListener(transitionEndEvent, cb);
              el_1._moveCb = null;
              removeTransitionClass(el_1, moveClass);
            }
          });
        }
      });
    },
    methods: {
      hasMove: function(el, moveClass) {
        if (!hasTransition) {
          return false;
        }
        if (this._hasMove) {
          return this._hasMove;
        }
        var clone = el.cloneNode();
        if (el._transitionClasses) {
          el._transitionClasses.forEach(function(cls) {
            removeClass(clone, cls);
          });
        }
        addClass(clone, moveClass);
        clone.style.display = "none";
        this.$el.appendChild(clone);
        var info = getTransitionInfo(clone);
        this.$el.removeChild(clone);
        return this._hasMove = info.hasTransform;
      }
    }
  };
  function callPendingCbs(c2) {
    if (c2.elm._moveCb) {
      c2.elm._moveCb();
    }
    if (c2.elm._enterCb) {
      c2.elm._enterCb();
    }
  }
  function recordPosition(c2) {
    c2.data.newPos = c2.elm.getBoundingClientRect();
  }
  function applyTranslation(c2) {
    var oldPos = c2.data.pos;
    var newPos = c2.data.newPos;
    var dx = oldPos.left - newPos.left;
    var dy = oldPos.top - newPos.top;
    if (dx || dy) {
      c2.data.moved = true;
      var s = c2.elm.style;
      s.transform = s.WebkitTransform = "translate(".concat(dx, "px,").concat(dy, "px)");
      s.transitionDuration = "0s";
    }
  }
  var platformComponents = {
    Transition,
    TransitionGroup
  };
  Vue.config.mustUseProp = mustUseProp;
  Vue.config.isReservedTag = isReservedTag;
  Vue.config.isReservedAttr = isReservedAttr;
  Vue.config.getTagNamespace = getTagNamespace;
  Vue.config.isUnknownElement = isUnknownElement;
  extend3(Vue.options.directives, platformDirectives);
  extend3(Vue.options.components, platformComponents);
  Vue.prototype.__patch__ = inBrowser ? patch : noop;
  Vue.prototype.$mount = function(el, hydrating) {
    el = el && inBrowser ? query(el) : void 0;
    return mountComponent(this, el, hydrating);
  };
  if (inBrowser) {
    setTimeout(function() {
      if (config.devtools) {
        if (devtools) {
          devtools.emit("init", Vue);
        } else if (true) {
          console[console.info ? "info" : "log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools");
        }
      }
      if (config.productionTip !== false && typeof console !== "undefined") {
        console[console.info ? "info" : "log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html");
      }
    }, 0);
  }

  // application/tools/bookmarks-loader/index.ts
  var import_ujs = __toESM(require_rails_ujs(), 1);

  // application/components/paywall/Modal.vue
  var __vue_script__ = Vue.extend({
    name: "Modal",
    props: {
      wrapperClass: {
        required: false,
        type: String
      }
    }
  });
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _c("div", { staticClass: "modal" }, [
        _c("div", { class: "modal-wrapper " + this.wrapperClass }, [
          _c(
            "button",
            {
              staticClass: "btn-icon",
              on: {
                click: function($event) {
                  return _vm.$emit("closeModal");
                }
              }
            },
            [_c("svg", [_c("use", { attrs: { "xlink:href": "#cross" } })])]
          ),
          _vm._v(" "),
          _c("div", {}, [
            _c("h4", { staticClass: "modal-title fs-24" }, [_vm._t("title")], 2),
            _vm._v(" "),
            _c("div", { staticClass: "mt-24" }, [_vm._t("content")], 2),
            _vm._v(" "),
            _c("div", { staticClass: "mt-24" }, [_vm._t("footer")], 2)
          ])
        ])
      ])
    ]);
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;
  var __vue_inject_styles__ = void 0;
  var __vue_scope_id__ = void 0;
  var __vue_module_identifier__ = void 0;
  var __vue_is_functional_template__ = false;
  function __vue_normalize__(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/paywall/Modal.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__ = /* @__PURE__ */ __vue_normalize__(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    void 0,
    void 0,
    void 0
  );
  var Modal_default = __vue_component__;

  // application/tools/event-tracking/index.ts
  function event_tracking_default(container = document) {
    const elements = Array.from(container.querySelectorAll("[data-event-category]"));
    elements.forEach((element) => {
      const el = element;
      const category = el.dataset.eventCategory;
      const action = el.dataset.eventAction;
      if (!category || !action) {
        return;
      }
      el.addEventListener("click", (e) => {
        const { target: target2 } = e;
        if (target2 instanceof HTMLAnchorElement) {
          const targetUrl = target2.href;
          const turboDisable = target2.getAttribute("data-turbo") == "false";
          e.preventDefault();
          triggerEvent(category, action, targetUrl, turboDisable);
        }
        triggerEvent(category, action);
      });
    });
  }
  function triggerEvent(eventCategory, eventAction, url = null, turboDisable = false) {
    let data = {
      eventCategory,
      eventAction,
      event: "carolusInteraction"
    };
    if (url && url !== "") {
      data = __spreadProps(__spreadValues({}, data), {
        eventCallback: () => {
          if (turboDisable) {
            window.location.href = url;
          } else {
            turbo_es2017_esm_exports.visit(url);
          }
        },
        eventTimeout: 1e3
      });
    }
    if (typeof window.google_tag_manager !== "undefined" && typeof dataLayer !== "undefined") {
      dataLayer.push(data);
    } else if (data.eventCallback) {
      data.eventCallback();
    }
  }

  // application/lib/newSessionPath.ts
  var newSessionPath = ({ signup = false }) => {
    const params = new URLSearchParams();
    if (signup) {
      params.set("mode", "signup");
    }
    params.set("return_path", document.location.pathname);
    return `/sessions/new?${params.toString()}`;
  };
  var newSessionPath_default = newSessionPath;

  // application/images/artwork/create-account-scene.svg
  var create_account_scene_default = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 151.49 267.43"><defs><style>.a{fill:#333;opacity:0.15;isolation:isolate;}.b{fill:#b3b3b3;}.c{fill:#e5811f;}.d{fill:#fbb03b;}.e{fill:#fabe78;stroke:#fabe78;stroke-miterlimit:10;}.f{fill:#fff;}.g{fill:#ccc;}</style></defs><title>create-account-scene</title><ellipse class="a" cx="77.65" cy="259.43" rx="44.24" ry="8"/><path class="b" d="M100.59,98.8H52.15a4.52,4.52,0,0,0-4.52,4.52h0v14.85a4.52,4.52,0,0,0,4.52,4.52h3v58.76h6.44v12.49H55.15v15.75h6.44v19a14.73,14.73,0,0,0,29.46,0v-19h6.44V193.94H91.15V181.46h6.44V122.69h3a4.52,4.52,0,0,0,4.52-4.52V103.32A4.52,4.52,0,0,0,100.59,98.8Z" transform="translate(-0.01 0)"/><path d="M100.59,99.45c-3.36,0-6.71-.07-10.07,0s-6.71.1-10.07.27c-6.71.45-13.42.24-20.14.28H52.15a3.53,3.53,0,0,0-.46,0,3,3,0,0,0-.88.25,3.3,3.3,0,0,0-2,2.9v15a3.35,3.35,0,0,0,1.91,3,3,3,0,0,0,.88.28h3.6a1.15,1.15,0,0,1,1.14,1.15L56.24,152v29.38l-1.09-1h6.44a1.11,1.11,0,0,1,1.12,1.1h0L62.79,194a1.19,1.19,0,0,1-1.18,1.2H55.17l1.24-1.24.1,15.75-1.36-1.33h6.44A1.38,1.38,0,0,1,63,209.72h0l.07,10.53v9.14a7.73,7.73,0,0,0,.11,1.18,13,13,0,0,0,4.42,8.13,14.36,14.36,0,0,0,8.67,3.57,13.51,13.51,0,0,0,9-3.33,13.34,13.34,0,0,0,4.51-8.33,7,7,0,0,0,.11-1.2V209.69a1.21,1.21,0,0,1,1.21-1.21h6.44L96.3,209.7V194l1.24,1.24H91.15A1.25,1.25,0,0,1,89.91,194h0V181.46a1.25,1.25,0,0,1,1.26-1.26h6.44l-1.26,1.26c0-4.9,0-9.79.08-14.69s.09-9.79,0-14.69l-.15-29.38a1.28,1.28,0,0,1,1.27-1.29h3a3.53,3.53,0,0,0,.72-.08,3.28,3.28,0,0,0,2.2-1.69,3.33,3.33,0,0,0,.36-1.38v-2c0-1.34,0-2.67.07-4,0-2.67.19-5.35.28-8v-1a3.73,3.73,0,0,0-.07-.82,3.46,3.46,0,0,0-.67-1.5A3.87,3.87,0,0,0,100.59,99.45Zm0-1.29a5.27,5.27,0,0,1,4.08,1.84,5.68,5.68,0,0,1,1.09,2.06,5.11,5.11,0,0,1,.19,1.17v1c.1,2.67.24,5.35.28,8,0,1.34.07,2.67.07,4v2a5.78,5.78,0,0,1-4.55,5.54,6,6,0,0,1-1.27.13h-3l1.29-1.29L98.62,152v14.69c0,4.9.1,9.79.08,14.69h0a1.27,1.27,0,0,1-1.26,1.25H91.15l1.25-1.25v12.57l-1.25-1.24h6.44a1.25,1.25,0,0,1,1.24,1.24v15.75a1.22,1.22,0,0,1-1.22,1.22H91.15l1.21-1.21v19.81a8.65,8.65,0,0,1-.21,1.43,15.7,15.7,0,0,1-5.32,9.78A16.18,16.18,0,0,1,82,243.61a17.56,17.56,0,0,1-11.21.21,14.32,14.32,0,0,1-5-2.85,16,16,0,0,1-5.41-10,10,10,0,0,1-.13-1.44v-9.29l.07-10.53,1.39,1.39H55.24a1.34,1.34,0,0,1-1.33-1.33h0L54,194h0a1.23,1.23,0,0,1,1.24-1.22h6.44l-1.2,1.2.08-12.49,1.12,1.12H55.25a1.07,1.07,0,0,1-1.07-1.07h0V152.08l-.1-29.38,1.07,1.14H52a5.27,5.27,0,0,1-.79-.07,5.38,5.38,0,0,1-1.51-.46,5.7,5.7,0,0,1-3.28-5V103.1a5.71,5.71,0,0,1,3.38-5,5.47,5.47,0,0,1,1.53-.44,5.25,5.25,0,0,1,.79-.06h8.18c6.71,0,13.42-.17,20.14.28,3.36.18,6.71.22,10.07.27S97.24,98.19,100.59,98.16Z" transform="translate(-0.01 0)"/><path d="M76.37,126.47a3.47,3.47,0,0,0-3.47,3.47h0c1.43,14.74,2.4,30.58,2.66,47.41A587.32,587.32,0,0,1,72.9,243a14.1,14.1,0,0,0,1.7.31,14.72,14.72,0,0,0,1.76.11,14.53,14.53,0,0,0,3.47-.43c-1.13-21.36-1.68-43.88-1.44-67.46q.24-23.57,1.44-45.61C79.45,127.94,78,126.47,76.37,126.47Z" transform="translate(-0.01 0)"/><path d="M76.37,126.94a3,3,0,0,0-3,3h0q1.5,14.1,2.45,28.24c.63,9.43,1,18.88,1.17,28.34q.08,7.09-.07,14.19t-.57,14.18c-.61,9.44-1.63,18.85-2.79,28.23l-.52-.73,1.64.34,1.67.14a13.93,13.93,0,0,0,3.34-.34l-.41.56-1.13-28.33c-.34-9.42-.72-18.86-.74-28.29,0-4.72,0-9.44.07-14.15s.2-9.43.42-14.15c.39-9.43,1-18.84,1.47-28.26V130a4.43,4.43,0,0,0-1-2.12A2.79,2.79,0,0,0,76.37,126.94Zm0-.92A3.71,3.71,0,0,1,79,127.29a5.32,5.32,0,0,1,1.26,2.57V130c-.49,9.41-.67,18.83-.78,28.25l-.25,28.26c0,9.42-.14,18.84,0,28.26s.47,18.84,1.1,28.24a.52.52,0,0,1-.4.55h0a15.55,15.55,0,0,1-3.59.51L74.53,244l-1.81-.29a.63.63,0,0,1-.53-.66v-.07c.65-9.41,1-18.83,1.3-28.24s.61-18.82.73-28.23.09-18.84-.2-28.26-.78-18.84-1.64-28.23h0a3.93,3.93,0,0,1,4-3.92h0Z" transform="translate(-0.01 0)"/><path class="c" d="M76.37,25.7a31,31,0,0,1,31,31h-62a31,31,0,0,1,31-31m0-20.76A51.8,51.8,0,0,0,24.63,56.68v53.46a4.78,4.78,0,0,0,4.78,4.78h93.93a4.78,4.78,0,0,0,4.81-4.75V56.68A51.79,51.79,0,0,0,76.37,4.94Z" transform="translate(-0.01 0)"/><path d="M76.37,25.24a30.66,30.66,0,0,1,12.21,2,31.78,31.78,0,0,1,10.57,6.7,31.21,31.21,0,0,1,7.16,10.36,31.8,31.8,0,0,1,2.55,12.39v1.47h-1.51c-5.16,0-10.33,0-15.49-.22l-15.49-.65c-5.16-.17-10.33-.19-15.49-.14s-10.33.2-15.49.31h-.76v-.8A30.43,30.43,0,0,1,46.9,44.44a31.25,31.25,0,0,1,7-10.33,30.83,30.83,0,0,1,10.4-6.78,30.22,30.22,0,0,1,12.15-2.11v.92A32.13,32.13,0,0,0,64.9,28.76a31.54,31.54,0,0,0-9.75,6.68,31.05,31.05,0,0,0-6.48,9.76,31.74,31.74,0,0,0-2.52,11.48l-.79-.79c5.16.12,10.33.25,15.49.31s10.33,0,15.49-.14l15.49-.65c5.16-.21,10.33-.26,15.49-.22l-1.48,1.48a30.46,30.46,0,0,0-2.18-11.31,31.21,31.21,0,0,0-6.28-9.73,30.73,30.73,0,0,0-9.55-6.72,31.5,31.5,0,0,0-11.49-2.77Z" transform="translate(-0.01 0)"/><path d="M76.37,5.4a51.6,51.6,0,0,0-22.54,5.46,52.24,52.24,0,0,0-9.77,6.34c-.73.64-1.43,1.32-2.14,2l-1.07,1-.53.5-.48.55-1.93,2.18c-.31.37-.66.71-.95,1.1l-.86,1.18a51.36,51.36,0,0,0-9.35,21l-.4,2.86A21.36,21.36,0,0,0,26,52.44l-.11,2.89-.06,1.44v1.48L26,70.07l.1,23.65v16.8a2.77,2.77,0,0,0,.1.5,3.34,3.34,0,0,0,3,2.49l47.2.81c15.75.21,31.56.17,47.26.06a4.2,4.2,0,0,0,3.74-3.13,4.46,4.46,0,0,0,.14-1.31v-4.48l-.11-11.82-.12-11.82L127.15,70V56.73l-.07-1.45-.13-2.9a21.35,21.35,0,0,0-.34-2.88l-.43-2.87c-.2-.94-.47-1.88-.7-2.82a22.75,22.75,0,0,0-.77-2.8l-1-2.73-.49-1.37-.62-1.31-1.23-2.66c-.39-.89-1-1.68-1.43-2.53s-1-1.69-1.51-2.49l-1.72-2.35-.86-1.18a11.3,11.3,0,0,0-1-1.1l-1.94-2.18-.48-.55-.53-.5-1.07-1c-.72-.66-1.42-1.34-2.15-2a53,53,0,0,0-9.77-6.38A51.35,51.35,0,0,0,76.37,5.4Zm0-.92a53,53,0,0,1,23,5.36,54.59,54.59,0,0,1,10.11,6.33c.77.64,1.49,1.32,2.24,2l1.12,1,.56.5.51.55,2,2.2c.33.37.7.72,1,1.11l.91,1.19a52,52,0,0,1,10.1,21.57l.47,3a23.19,23.19,0,0,1,.37,3l.17,3,.08,1.5v13.3l0,11.82-.12,11.82-.11,11.82v4.39a5.9,5.9,0,0,1-.2,1.62,5.34,5.34,0,0,1-4.82,3.9c-15.84,0-31.55-.13-47.33.09L52.73,116l-11.82.21-5.91.1H29a6.25,6.25,0,0,1-5.79-5.49V93.64L23.3,70l.11-11.82V56.69l.09-1.51.19-3a23.24,23.24,0,0,1,.4-3l.49-3A53.08,53.08,0,0,1,76.39,4.43Z" transform="translate(-0.01 0)"/><path class="d" d="M76.37,21.53a31,31,0,0,1,30.36,24.78,5.17,5.17,0,0,1-4,6.1,5.35,5.35,0,0,1-1,.11H51.08A5.15,5.15,0,0,1,46,46.31,31,31,0,0,1,76.37,21.53m0-20.76A51.8,51.8,0,0,0,24.63,52.51v53.43a4.78,4.78,0,0,0,4.78,4.78h93.93a4.78,4.78,0,0,0,4.81-4.75V52.51A51.79,51.79,0,0,0,76.37.77Z" transform="translate(-0.01 0)"/><path d="M76.37,20.76a30.61,30.61,0,0,1,19.1,5A31.85,31.85,0,0,1,103,32.67a33.36,33.36,0,0,1,5,9l.44,1.22c.12.41.22.83.33,1.25a13.84,13.84,0,0,1,.57,2.85,7.64,7.64,0,0,1-5.95,7.8,8.4,8.4,0,0,1-1.73.18h-1.2c-1.6,0-3.2,0-4.8-.14-6.4-.24-12.81-1-19.21-1.33s-12.81-.34-19.21-.12l-4.8.18h-1.2a7.75,7.75,0,0,1-1.44-.1,6.24,6.24,0,0,1-2.69-1.2A6.58,6.58,0,0,1,44.53,47,14.21,14.21,0,0,1,45,44.32c.1-.41.18-.82.29-1.23l.38-1.2A31.09,31.09,0,0,1,57.58,26a32.26,32.26,0,0,1,9-4.24,29.89,29.89,0,0,1,9.82-1.1v1.53a32,32,0,0,0-17.12,6.25A30.82,30.82,0,0,0,48.62,42.93L48.22,44c-.12.36-.21.73-.31,1.1a13.57,13.57,0,0,0-.49,2,3.85,3.85,0,0,0,2.83,4,5,5,0,0,0,.94.14h1.2l4.8.18c6.4.22,12.81.22,19.21-.12S89.21,50.26,95.61,50c1.6-.08,3.2-.13,4.8-.14h1.2a4.93,4.93,0,0,0,.66-.07,2.53,2.53,0,0,0,1.11-.52,2.68,2.68,0,0,0,1-2.19,11.56,11.56,0,0,0-.38-1.84c-.09-.36-.17-.72-.27-1.07l-.34-1A30.12,30.12,0,0,0,93.27,28.75a32.16,32.16,0,0,0-16.89-6.58Z" transform="translate(-0.01 0)"/><path d="M76.37,1.53c-15.53.11-30.87,7.75-39.83,20.3a50.77,50.77,0,0,0-9.06,20.81l-.37,2.82a20.72,20.72,0,0,0-.29,2.83l-.09,2.84V54c.06,3.94.17,7.88.2,11.82.1,7.88.18,15.76.18,23.65v16.77c0,.12,0,.24.07.35a2.4,2.4,0,0,0,2.08,1.8l5.75.12,5.91.17,11.82.35c7.88.23,15.76.53,23.65.7,3.94.09,7.88.17,11.82.19s7.88.08,11.82.07h23.63a3.82,3.82,0,0,0,3.39-2.87,4,4,0,0,0,.11-1.2v-4.48L127,89.65l-.2-11.82L126.65,66V52.71l-.07-1.43-.13-2.86a21,21,0,0,0-.34-2.84l-.42-2.83c-.2-.93-.45-1.85-.67-2.78a22.18,22.18,0,0,0-.74-2.77l-1-2.7-.48-1.35-.6-1.3L121,29.24c-.38-.88-.94-1.67-1.4-2.51s-.94-1.68-1.48-2.47l-1.69-2.34A49.73,49.73,0,0,0,76.37,1.53Zm0-1.53,3,.15,1.5.08a10.58,10.58,0,0,1,1.49.14l3,.45,1.48.23c.49.1,1,.24,1.46.36a44.09,44.09,0,0,1,5.76,1.66l2.83,1,2.72,1.27a54.5,54.5,0,0,1,10.22,6.31c.78.64,1.52,1.32,2.28,2l1.13,1,.57.5.52.55,2.07,2.2a13.13,13.13,0,0,1,1,1.12l.93,1.19a52.35,52.35,0,0,1,10.32,21.73l.47,3a23.21,23.21,0,0,1,.38,3l.17,3,.08,1.52v13.3l-.12,11.82-.2,11.82-.28,11.92v4.48a5.9,5.9,0,0,1-.23,1.72,5.7,5.7,0,0,1-5.17,4.16c-15.88-.18-31.56-.21-47.35.14-7.88.17-15.76.47-23.65.7l-11.82.35L35,113l-3,0h-3.1a7.13,7.13,0,0,1-6.48-5.22,8.24,8.24,0,0,1-.22-1.1,6.58,6.58,0,0,1,0-1V89.47c0-7.88.09-15.76.18-23.65,0-3.94.14-7.88.2-11.82V52.52L22.7,51l.21-3.06a25.17,25.17,0,0,1,.42-3l.52-3A53.78,53.78,0,0,1,76.4,0Z" transform="translate(-0.01 0)"/><path class="e" d="M32.36,63.37c-2.56,1.12-2.21,9-1.5,24.75.11,2.49.25,4.82.4,7a7.9,7.9,0,0,0,7.82,7.35l73.9.63a7.92,7.92,0,0,0,7.9-6.82c4.06-28.8,2.09-36.2-.77-37.13-3.11-1-6.23,6-16,14.25-3.71,3.14-23.82,20.16-41.25,16.5C44.53,86,37.56,61.1,32.36,63.37Z" transform="translate(-0.01 0)"/><rect class="f" x="6.87" y="126.51" width="138.98" height="97.93" rx="13.67"/><path d="M132.15,225.36c-18.76.12-37.53.32-56.29.76l-28.15.56L33.64,227l-7,.13-3.52.07h-3.7a16.38,16.38,0,0,1-8-2.6,16.67,16.67,0,0,1-5.66-6.22,16.26,16.26,0,0,1-1.46-4c-.14-.7-.25-1.4-.32-2.11s-.09-1.48-.08-2V189.15c0-4.69,0-9.38.15-14.07.13-9.38.45-18.76.75-28.15.08-2.37.13-4.64.24-7.08a15.3,15.3,0,0,1,8.11-12.78,15.6,15.6,0,0,1,7.42-1.79c18.76.4,37.53.4,56.29.15L105,125l14.07-.23,7-.08h7.17a15.46,15.46,0,0,1,7.53,2.51,15.73,15.73,0,0,1,5.31,5.91,15.51,15.51,0,0,1,1.35,3.78,19.27,19.27,0,0,1,.29,2c0,.66.08,1.37.06,1.92v7l-.15,14.07-.27,14.07-.47,28.15-.09,7.06a14.8,14.8,0,0,1-7.44,12.3A14.84,14.84,0,0,1,132.15,225.36Zm0-1.83a12.92,12.92,0,0,0,6.28-1.66,12.78,12.78,0,0,0,4.64-4.54,12.57,12.57,0,0,0,1.76-6.23c0-2.3,0-4.68-.05-7l-.43-28.16-.2-14.07L144,147.8v-7a13.14,13.14,0,0,0-.06-1.59c-.06-.51-.13-1-.23-1.49a12.3,12.3,0,0,0-1-2.82,11.88,11.88,0,0,0-4-4.47,11.72,11.72,0,0,0-5.66-1.93l-56.16-.86c-18.76-.26-37.53-.26-56.29.15A12.09,12.09,0,0,0,10.29,134a11.78,11.78,0,0,0-1.49,5.89c0,2.25.14,4.66.21,7,.3,9.38.62,18.76.75,28.15.1,4.69.12,9.38.15,14.07s0,9.38,0,14.07v8.51a6.65,6.65,0,0,0,.2,1.37,11.47,11.47,0,0,0,.91,2.6,10.77,10.77,0,0,0,8.83,6L76,222.79c18.72.41,37.48.61,56.2.73Z" transform="translate(-0.01 0)"/><path class="b" d="M7.22,135.52a14.75,14.75,0,0,1,7.37,4.25c.61.66,5.82,6.32,3.31,10.68-1.58,2.74-5.69,4.06-9.94,3a9.35,9.35,0,0,1-.75-17.87Z" transform="translate(-0.01 0)"/><path d="M7.15,135.06a5.2,5.2,0,0,1,1,.13c.27,0,.59.11.89.18a13.5,13.5,0,0,1,1.74.55,14,14,0,0,1,3.25,1.8,17.35,17.35,0,0,1,4.77,5.69A10.46,10.46,0,0,1,20,147.23a6.15,6.15,0,0,1-1.07,4.18,6.69,6.69,0,0,1-3.33,2.4,11.58,11.58,0,0,1-3.74.56,14.24,14.24,0,0,1-7-1.76,10,10,0,0,1-4.47-5.67,9.65,9.65,0,0,1,3.42-10.2,9.34,9.34,0,0,1,2.42-1.37A9.78,9.78,0,0,1,7.15,135.06Zm0,.92-.59.37a6.62,6.62,0,0,0-.69.44,9.11,9.11,0,0,0-1.23,1,9.27,9.27,0,0,0-.08,13.12,8.07,8.07,0,0,0,.87.78,7.72,7.72,0,0,0,3,1.33,8.29,8.29,0,0,0,3.29.09,7.59,7.59,0,0,0,2.93-1.19,6,6,0,0,0,1.86-2.06,4.86,4.86,0,0,0,.48-2.43,7.92,7.92,0,0,0-.79-2.78,19.12,19.12,0,0,0-3.65-5.21,14.44,14.44,0,0,0-2.54-2q-.7-.44-1.44-.81l-.76-.36a3.16,3.16,0,0,1-.56-.33Z" transform="translate(-0.01 0)"/><path class="b" d="M144.31,135.52a14.75,14.75,0,0,0-7.37,4.25c-.61.66-5.82,6.32-3.31,10.68,1.58,2.74,5.69,4.06,9.94,3a9.35,9.35,0,0,0,.75-17.87Z" transform="translate(-0.01 0)"/><path d="M144.29,135.94a3,3,0,0,1-.65.32l-.76.36a14.16,14.16,0,0,0-1.44.81,14.44,14.44,0,0,0-2.54,2,19.12,19.12,0,0,0-3.65,5.21,7.92,7.92,0,0,0-.79,2.78,4.86,4.86,0,0,0,.48,2.43,6,6,0,0,0,1.86,2.06,7.59,7.59,0,0,0,2.93,1.19A8.29,8.29,0,0,0,143,153a7.72,7.72,0,0,0,3-1.33,9.21,9.21,0,0,0,1.65-12.93,8,8,0,0,0-.86-1,9.11,9.11,0,0,0-1.23-1,8.09,8.09,0,0,0-.69-.44A4.81,4.81,0,0,1,144.29,135.94Zm0-.92a8.78,8.78,0,0,1,1,.29,7.91,7.91,0,0,1,.84.37,9,9,0,0,1,1.58,1,9.73,9.73,0,0,1,3.44,10.26,9.9,9.9,0,0,1-4.58,5.71,14.24,14.24,0,0,1-7,1.76,11.58,11.58,0,0,1-3.74-.56,6.69,6.69,0,0,1-3.33-2.4,6.15,6.15,0,0,1-1.07-4.18,10.46,10.46,0,0,1,1.16-3.82,17.35,17.35,0,0,1,4.77-5.69,14,14,0,0,1,3.25-1.8,13.5,13.5,0,0,1,1.74-.55,8.76,8.76,0,0,1,.89-.18c.3,0,.63-.13,1.1-.17Z" transform="translate(-0.01 0)"/><rect class="g" x="26.75" y="168.88" width="99.21" height="25.03" rx="3.67"/><path d="M122.31,194.37c-20.18.07-40.37.63-60.55.91-10.09.11-20.18.18-30.27,0h-.95a5.28,5.28,0,0,1-1.25-.15,4.93,4.93,0,0,1-3.79-4.65v-1l.21-7.57.22-7.57.06-1.91a4.38,4.38,0,0,1,4.42-4.18c10.09.2,20.18.2,30.27.07l15.14-.22,7.57-.12,7.57-.05H106.1c5,0,10.09.08,15.14.18h1a4.53,4.53,0,0,1,1.1.13,4.33,4.33,0,0,1,3.32,4v1l-.11,7.57-.06,7.57v1.9a4.25,4.25,0,0,1-4.13,4.1Zm0-.92a3.21,3.21,0,0,0,3.2-3.14v-1.87l-.06-7.57-.11-7.57v-.91a3,3,0,0,0-1-2,2.89,2.89,0,0,0-1.35-.68,3.42,3.42,0,0,0-.78-.06h-.95c-5,.09-10.09.16-15.14.18H91l-7.57-.05-7.57-.12-15.14-.22c-10.09-.13-20.18-.13-30.27.07A3,3,0,0,0,27.89,171a2.92,2.92,0,0,0-.36,1.45l0,1.88.22,7.57.21,7.57v.43a2.81,2.81,0,0,0,0,.41,2.47,2.47,0,0,0,.13.6,2.4,2.4,0,0,0,.69,1,2.31,2.31,0,0,0,1.05.52,2.22,2.22,0,0,0,.63,0h.95c10.09-.14,20.18-.08,30.27,0,20.21.36,40.42.92,60.58,1Z" transform="translate(-0.01 0)"/><rect class="b" x="26.75" y="137.27" width="99.21" height="25.03" rx="3.67"/><path d="M122.31,162.76c-20.18.07-40.37.63-60.55.91-10.09.11-20.18.18-30.27,0h-.95a5.28,5.28,0,0,1-1.25-.15,4.93,4.93,0,0,1-3.79-4.65v-1l.21-7.57.22-7.57.06-1.91a4.38,4.38,0,0,1,4.42-4.18c10.09.2,20.18.2,30.27.07l15.14-.22,7.57-.12,7.57-.05H106.1c5,0,10.09.08,15.14.18h1a4.53,4.53,0,0,1,1.1.13,4.33,4.33,0,0,1,3.32,4v1l-.11,7.57-.06,7.57v1.9a4.25,4.25,0,0,1-4.13,4.1Zm0-.92a3.2,3.2,0,0,0,2.75-1.56,3.24,3.24,0,0,0,.45-1.57v-1.88l-.06-7.57-.11-7.57v-.91a3,3,0,0,0-1-2,2.89,2.89,0,0,0-1.35-.68,3.42,3.42,0,0,0-.78-.06h-.95c-5,.09-10.09.16-15.14.18H91l-7.57-.05-7.57-.12-15.14-.22c-10.09-.13-20.18-.13-30.27.07a3,3,0,0,0-2.54,1.53,2.92,2.92,0,0,0-.36,1.45l0,1.88.22,7.57L28,157.9v.47a2.81,2.81,0,0,0,0,.41,2.47,2.47,0,0,0,.13.6,2.4,2.4,0,0,0,.69,1,2.31,2.31,0,0,0,1.05.52,2.22,2.22,0,0,0,.63,0h.95c10.09-.14,20.18-.08,30.27,0C81.94,161.21,102.15,161.77,122.31,161.84Z" transform="translate(-0.01 0)"/><circle cx="36.69" cy="180.84" r="3.87"/><path d="M40.87,180.85a4.83,4.83,0,0,1-1,3.13,4.42,4.42,0,0,1-3.13,1.65,4.17,4.17,0,0,1-3.4-1.38,4.37,4.37,0,0,1-.87-3.4,5.56,5.56,0,0,1,1.29-3,4.22,4.22,0,0,1,3-1.51,3.77,3.77,0,0,1,3.09,1.41A5.08,5.08,0,0,1,40.87,180.85Zm-.61,0a2.93,2.93,0,0,0-1.18-2.38,4.35,4.35,0,0,0-2.38-.85,3.52,3.52,0,0,0-2.48.75,2.75,2.75,0,0,0-1,2.48,3.25,3.25,0,0,0,1.39,2.07,4,4,0,0,0,2.07.88,3.3,3.3,0,0,0,2.34-.61A3,3,0,0,0,40.26,180.85Z" transform="translate(-0.01 0)"/><circle cx="51.04" cy="180.84" r="3.87"/><path d="M55.23,180.85a4.83,4.83,0,0,1-1,3.13,4.42,4.42,0,0,1-3.13,1.65,4.17,4.17,0,0,1-3.4-1.38,4.37,4.37,0,0,1-.87-3.4,5.56,5.56,0,0,1,1.29-3,4.22,4.22,0,0,1,3-1.51,3.77,3.77,0,0,1,3.09,1.41A5.08,5.08,0,0,1,55.23,180.85Zm-.61,0a2.93,2.93,0,0,0-1.18-2.38,4.35,4.35,0,0,0-2.38-.85,3.52,3.52,0,0,0-2.48.75,2.75,2.75,0,0,0-1,2.48A3.25,3.25,0,0,0,49,182.92a4,4,0,0,0,2.07.88,3.3,3.3,0,0,0,2.34-.61A3,3,0,0,0,54.62,180.85Z" transform="translate(-0.01 0)"/><circle cx="64.3" cy="180.84" r="3.87"/><path d="M68.48,180.85a4.83,4.83,0,0,1-1,3.13,4.42,4.42,0,0,1-3.13,1.65,4.17,4.17,0,0,1-3.4-1.38,4.37,4.37,0,0,1-.87-3.4,5.56,5.56,0,0,1,1.29-3,4.22,4.22,0,0,1,3-1.51,3.77,3.77,0,0,1,3.09,1.41A5.08,5.08,0,0,1,68.48,180.85Zm-.61,0a2.93,2.93,0,0,0-1.18-2.38,4.35,4.35,0,0,0-2.38-.85,3.52,3.52,0,0,0-2.48.75,2.75,2.75,0,0,0-1,2.48,3.25,3.25,0,0,0,1.39,2.07,4,4,0,0,0,2.07.88,3.3,3.3,0,0,0,2.34-.61A3,3,0,0,0,67.87,180.85Z" transform="translate(-0.01 0)"/><circle cx="77.55" cy="180.84" r="3.87"/><path d="M81.73,180.85a4.83,4.83,0,0,1-1,3.13,4.42,4.42,0,0,1-3.13,1.65,4.17,4.17,0,0,1-3.4-1.38,4.37,4.37,0,0,1-.87-3.4,5.56,5.56,0,0,1,1.29-3,4.22,4.22,0,0,1,3-1.51,3.77,3.77,0,0,1,3.09,1.41A5.08,5.08,0,0,1,81.73,180.85Zm-.61,0a2.93,2.93,0,0,0-1.18-2.38,4.35,4.35,0,0,0-2.38-.85,3.52,3.52,0,0,0-2.48.75,2.75,2.75,0,0,0-1,2.48,3.25,3.25,0,0,0,1.39,2.07,4,4,0,0,0,2.07.88,3.3,3.3,0,0,0,2.34-.61,3,3,0,0,0,1.27-2.34Z" transform="translate(-0.01 0)"/><circle cx="90.8" cy="180.84" r="3.87"/><path d="M95,180.85A4.83,4.83,0,0,1,94,184a4.42,4.42,0,0,1-3.13,1.65,4.17,4.17,0,0,1-3.4-1.38,4.37,4.37,0,0,1-.87-3.4,5.56,5.56,0,0,1,1.29-3,4.22,4.22,0,0,1,3-1.51A3.77,3.77,0,0,1,94,177.75,5.08,5.08,0,0,1,95,180.85Zm-.61,0a2.93,2.93,0,0,0-1.18-2.38,4.35,4.35,0,0,0-2.38-.85,3.52,3.52,0,0,0-2.48.75,2.75,2.75,0,0,0-1,2.48,3.26,3.26,0,0,0,1.41,2.09,4,4,0,0,0,2.07.88,3.3,3.3,0,0,0,2.34-.61A3,3,0,0,0,94.38,180.85Z" transform="translate(-0.01 0)"/><path class="c" d="M60.22,209.38l28.55-.48-7.44-6,.48,12.71,7-6.72" transform="translate(-0.01 0)"/><path class="c" d="M60.2,208.62a66.15,66.15,0,0,1,7.12-1.21c2.37-.3,4.75-.5,7.13-.64s4.75-.25,7.14-.2a48,48,0,0,1,7.16,1l-.8,2.31a28,28,0,0,0-3.38-3.42,38.18,38.18,0,0,0-3.82-2.88l1.49-.75c.26,2.11.65,4.22.85,6.33.12,1.06.18,2.12.22,3.17s.06,2.12.07,3.18l-2.67-1.08c1.19-1.08,2.41-2.15,3.65-3.18s2.52-2,3.87-3a.78.78,0,0,1,1.08.16.77.77,0,0,1,0,.94c-1,1.31-2,2.55-3.09,3.76s-2.18,2.39-3.3,3.54a1.55,1.55,0,0,1-2.66-1v-.1c-.07-1.06-.11-2.12-.17-3.18a28.11,28.11,0,0,1,0-3.18c0-2.12.27-4.25.37-6.38v-.17a.87.87,0,0,1,1.48-.58,39.91,39.91,0,0,0,3.62,3.12,27.31,27.31,0,0,0,4.06,2.58,1.19,1.19,0,0,1-.3,2.21l-.5.1a49.19,49.19,0,0,1-7.12,1.28c-2.38.12-4.76.08-7.14,0s-4.76-.18-7.15-.4a66.1,66.1,0,0,1-7.15-1,.78.78,0,0,1,0-1.53Z" transform="translate(-0.01 0)"/><path d="M33.41,141.06c.17,1.35.25,2.7.32,4s.09,2.7.1,4a64.45,64.45,0,0,1-.42,8.1.58.58,0,0,1-1.16,0,64.45,64.45,0,0,1-.42-8.1c0-1.35,0-2.7.1-4s.15-2.7.32-4a.58.58,0,1,1,1.16,0Z" transform="translate(-0.01 0)"/><path d="M68.12,89.31a8.36,8.36,0,0,0,4.49,2.62,20.8,20.8,0,0,0,5,.64,22.71,22.71,0,0,0,5-.49,10.18,10.18,0,0,0,4.73-2.29h0a.31.31,0,0,1,.44,0A.32.32,0,0,1,88,90a5.48,5.48,0,0,1-1.14,3.24,8.45,8.45,0,0,1-2.66,2.32,12.34,12.34,0,0,1-6.6,1.52,13.2,13.2,0,0,1-6.48-1.92,8.7,8.7,0,0,1-2.53-2.42,5.25,5.25,0,0,1-1-3.29.3.3,0,0,1,.33-.28.33.33,0,0,1,.21.11Z" transform="translate(-0.01 0)"/><path d="M39.49,75.4A9.34,9.34,0,0,1,42,72.13,14,14,0,0,1,45.31,70a17.43,17.43,0,0,1,7.37-1.49A15.76,15.76,0,0,1,60,70.37a10.83,10.83,0,0,1,3.12,2.52,7.69,7.69,0,0,1,1.77,3.79.56.56,0,0,1-.41.62.44.44,0,0,1-.41-.14l0,0a9,9,0,0,0-2.55-2,13.79,13.79,0,0,0-2.85-1.07,26,26,0,0,0-6.13-.77,32.13,32.13,0,0,0-6.26.51,20.81,20.81,0,0,0-3.08.8,13.61,13.61,0,0,0-3,1.42h0a.46.46,0,0,1-.66-.19A.6.6,0,0,1,39.49,75.4Z" transform="translate(-0.01 0)"/><path d="M89.49,75.4A9.34,9.34,0,0,1,92,72.13,14,14,0,0,1,95.31,70a17.43,17.43,0,0,1,7.37-1.49A15.76,15.76,0,0,1,110,70.37a10.83,10.83,0,0,1,3.12,2.52,7.69,7.69,0,0,1,1.77,3.79.56.56,0,0,1-.41.62.44.44,0,0,1-.41-.14l0,0a9,9,0,0,0-2.55-2,13.79,13.79,0,0,0-2.85-1.07,26,26,0,0,0-6.13-.77,32.13,32.13,0,0,0-6.26.51,20.81,20.81,0,0,0-3.08.8,13.61,13.61,0,0,0-3,1.42h0a.46.46,0,0,1-.66-.19A.6.6,0,0,1,89.49,75.4Z" transform="translate(-0.01 0)"/></svg>';

  // application/components/paywall/LoginRequiredButton.vue
  var __vue_script__2 = Vue.extend({
    name: "LoginRequired",
    props: {
      buttonClass: String,
      buttonContent: String,
      signUpPath: {
        default: newSessionPath_default({ signup: true }),
        type: String
      },
      signInPath: {
        default: newSessionPath_default({ signup: false }),
        type: String
      },
      eventCategory: {
        required: false,
        type: String
      },
      eventAction: {
        required: false,
        type: String
      },
      autoClick: {
        default: false,
        type: Boolean
      }
    },
    data() {
      return {
        createAccountSceneImage: create_account_scene_default,
        showModal: false
      };
    },
    methods: {
      recordAccountSignupEvent() {
        triggerEvent("global_modal_createAccount", "createAccount");
      },
      handleButtonClick() {
        this.showModal = true;
        if (this.eventCategory && this.eventAction) {
          triggerEvent(this.eventCategory, this.eventAction);
        }
      }
    },
    components: {
      Modal: Modal_default
    },
    mounted() {
      if (this.autoClick) {
        this.handleButtonClick();
      }
    }
  });
  var __vue_render__2 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _vm.showModal ? _c("Modal", {
          attrs: { wrapperClass: "modal-tight" },
          on: {
            closeModal: function($event) {
              _vm.showModal = false;
            }
          },
          scopedSlots: _vm._u(
            [
              {
                key: "title",
                fn: function() {
                  return [_vm._v("Sign up/Sign in")];
                },
                proxy: true
              },
              {
                key: "content",
                fn: function() {
                  return [
                    _c("p", [
                      _vm._v("With a "),
                      _c("strong", [_vm._v("free")]),
                      _vm._v(
                        " Kodeco account you can download source code, track your progress,\n        bookmark, personalise your learner profile and more!"
                      )
                    ]),
                    _vm._v(" "),
                    _c(
                      "a",
                      {
                        staticClass: "btn-normalw bg-black-night fc-white modal-action mt-16",
                        attrs: { href: _vm.signUpPath },
                        on: { click: _vm.recordAccountSignupEvent }
                      },
                      [_c("span", {}, [_vm._v("Create account")])]
                    )
                  ];
                },
                proxy: true
              },
              {
                key: "footer",
                fn: function() {
                  return [
                    _c("p", [
                      _vm._v("Already a member of Kodeco? "),
                      _c(
                        "a",
                        {
                          staticClass: "fc-orange-determination",
                          attrs: { href: _vm.signInPath }
                        },
                        [_vm._v("Sign in")]
                      )
                    ])
                  ];
                },
                proxy: true
              }
            ],
            null,
            false,
            798075098
          )
        }) : _vm._e(),
        _vm._v(" "),
        _vm.buttonContent ? _c("button", {
          class: _vm.buttonClass,
          domProps: { innerHTML: _vm._s(_vm.buttonContent) },
          on: { click: _vm.handleButtonClick }
        }) : _c(
          "button",
          { class: _vm.buttonClass, on: { click: _vm.handleButtonClick } },
          [_vm._t("default")],
          2
        )
      ],
      1
    );
  };
  var __vue_staticRenderFns__2 = [];
  __vue_render__2._withStripped = true;
  var __vue_inject_styles__2 = void 0;
  var __vue_scope_id__2 = void 0;
  var __vue_module_identifier__2 = void 0;
  var __vue_is_functional_template__2 = false;
  function __vue_normalize__2(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/paywall/LoginRequiredButton.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__2 = /* @__PURE__ */ __vue_normalize__2(
    { render: __vue_render__2, staticRenderFns: __vue_staticRenderFns__2 },
    __vue_inject_styles__2,
    __vue_script__2,
    __vue_scope_id__2,
    __vue_is_functional_template__2,
    __vue_module_identifier__2,
    false,
    void 0,
    void 0,
    void 0
  );
  var LoginRequiredButton_default = __vue_component__2;

  // application/components/elements/ButtonContent.vue
  var __vue_script__3 = Vue.extend({
    props: {
      text: {
        type: String,
        required: true
      },
      checked: {
        type: Boolean,
        default: false
      },
      saving: {
        type: Boolean,
        default: false
      },
      iconInputClass: {
        type: String,
        default: ""
      },
      svgCheckedClass: {
        type: String,
        default: ""
      },
      svgCheckedHref: {
        type: String,
        default: "#"
      },
      svgUncheckedClass: {
        type: String,
        default: ""
      },
      svgUncheckedHref: {
        type: String,
        default: "#"
      }
    }
  });
  var __vue_render__3 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _vm.saving ? _c("span", [_vm._m(0)]) : _c("span", [
      _vm.checked && _vm.svgCheckedHref !== "" ? _c("i", [
        _c("svg", { class: _vm.svgCheckedClass }, [
          _c("use", { attrs: { "xlink:href": _vm.svgCheckedHref } })
        ])
      ]) : !_vm.checked && _vm.svgUncheckedHref !== "" ? _c("i", { class: [_vm.iconInputClass] }, [
        _c("svg", { class: _vm.svgUncheckedClass }, [
          _c("use", { attrs: { "xlink:href": _vm.svgUncheckedHref } })
        ])
      ]) : _vm._e(),
      _vm._v(" "),
      _c("span", [_vm._v(_vm._s(_vm.text))])
    ]);
  };
  var __vue_staticRenderFns__3 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("span", [
        _vm._v("Saving"),
        _c("span", { staticClass: "dot-loader" }, [
          _c("span", { staticClass: "a-dot-loader--1" }, [_vm._v(".")]),
          _c("span", { staticClass: "a-dot-loader--2" }, [_vm._v(".")]),
          _c("span", { staticClass: "a-dot-loader--3" }, [_vm._v(".")])
        ])
      ]);
    }
  ];
  __vue_render__3._withStripped = true;
  var __vue_inject_styles__3 = function(inject) {
    if (!inject)
      return;
    inject("data-v-1396bcaa_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "ButtonContent.vue" }, media: void 0 });
  };
  var __vue_scope_id__3 = void 0;
  var __vue_module_identifier__3 = void 0;
  var __vue_is_functional_template__3 = false;
  function __vue_normalize__3(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/ButtonContent.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__() {
    const styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__3 = /* @__PURE__ */ __vue_normalize__3(
    { render: __vue_render__3, staticRenderFns: __vue_staticRenderFns__3 },
    __vue_inject_styles__3,
    __vue_script__3,
    __vue_scope_id__3,
    __vue_is_functional_template__3,
    __vue_module_identifier__3,
    false,
    __vue_create_injector__,
    void 0,
    void 0
  );
  var ButtonContent_default = __vue_component__3;

  // application/components/elements/IconButtonContent.vue
  var __vue_script__4 = Vue.extend({
    props: {
      checked: {
        type: Boolean,
        default: false
      },
      saving: {
        type: Boolean,
        default: false
      },
      iconInputClass: {
        type: String,
        default: "o-button__icon--input"
      },
      checkedIconInputClass: {
        type: String,
        default: ""
      },
      svgCheckedClass: {
        type: String,
        default: ""
      },
      svgCheckedHref: {
        type: String,
        default: "#"
      },
      svgUncheckedClass: {
        type: String,
        default: ""
      },
      svgUncheckedHref: {
        type: String,
        default: "#"
      }
    }
  });
  var __vue_render__4 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("span", { staticClass: "o-button__wrapper" }, [
      (_vm.checked || _vm.saving && !_vm.checked) && _vm.svgCheckedHref !== "" ? _c("i", { class: [_vm.checkedIconInputClass, "o-button__icon"] }, [
        _c(
          "svg",
          { staticClass: "o-button__svg", class: _vm.svgCheckedClass },
          [_c("use", { attrs: { "xlink:href": _vm.svgCheckedHref } })]
        )
      ]) : (!_vm.checked || _vm.saving && _vm.checked) && _vm.svgUncheckedHref !== "" ? _c("i", { class: [_vm.iconInputClass, "o-button__icon"] }, [
        _c(
          "svg",
          { staticClass: "o-button__svg", class: _vm.svgUncheckedClass },
          [_c("use", { attrs: { "xlink:href": _vm.svgUncheckedHref } })]
        )
      ]) : _vm._e()
    ]);
  };
  var __vue_staticRenderFns__4 = [];
  __vue_render__4._withStripped = true;
  var __vue_inject_styles__4 = function(inject) {
    if (!inject)
      return;
    inject("data-v-185e2fa6_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "IconButtonContent.vue" }, media: void 0 });
  };
  var __vue_scope_id__4 = void 0;
  var __vue_module_identifier__4 = void 0;
  var __vue_is_functional_template__4 = false;
  function __vue_normalize__4(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/IconButtonContent.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__2() {
    const styles = __vue_create_injector__2.styles || (__vue_create_injector__2.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__4 = /* @__PURE__ */ __vue_normalize__4(
    { render: __vue_render__4, staticRenderFns: __vue_staticRenderFns__4 },
    __vue_inject_styles__4,
    __vue_script__4,
    __vue_scope_id__4,
    __vue_is_functional_template__4,
    __vue_module_identifier__4,
    false,
    __vue_create_injector__2,
    void 0,
    void 0
  );
  var IconButtonContent_default = __vue_component__4;

  // application/lib/EventBus.ts
  var EventBus = new Vue();

  // application/lib/Events.ts
  var FRAGMENT_SELECTED = "FRAGMENT_SELECTED";
  var FRAGMENT_ANNOTATION_UPDATED = "FRAGMENT_ANNOTATION_UPDATED";
  var FRAGMENT_ANNOTATION_REMOVED = "FRAGMENT_ANNOTATION_REMOVED";
  var FLASH_ERROR = "FLASH_ERROR";
  var FLASH_WARNING = "FLASH_WARNING";
  var FLASH_SUCCESS = "FLASH_SUCCESS";
  var FLASH_CLEAR = "FLASH_CLEAR";
  var BOOKMARK_TOGGLED = "BOOKMARK_TOGGLED";
  var NIGHT_MODE_TOGGLED = "NIGHT_MODE_TOGGLED";
  var CONTENT_MARK_COMPLETE = "CONTENT_MARK_COMPLETE";
  var CONTENT_MARK_INCOMPLETE = "CONTENT_MARK_INCOMPLETE";
  var SHOW_MODAL = "SHOW_MODAL";
  var VIDEO_SET_CURRENT_TIME = "VIDEO_SET_CURRENT_TIME";
  var VIDEO_PLAYBACK_TIME_CHANGE = "VIDEO_PLAYBACK_TIME_CHANGE";

  // application/lib/deconstructURLParams.js
  function deconstructURLParams(urlParams) {
    const params = {};
    for (const pair of urlParams.entries()) {
      const key = pair[0];
      const value = pair[1];
      if (key.endsWith("[]")) {
        const newKey = key.replace("[]", "");
        if (params[newKey]) {
          params[newKey] = params[newKey].concat(value);
        } else {
          params[newKey] = [value];
        }
      } else {
        params[key] = value;
      }
    }
    return params;
  }

  // application/components/bookmark/ToggleButton.vue
  var NIGHT_MODE_COOKIE_NAME = "night-mode-on";
  var __vue_script__5 = Vue.extend({
    name: "BookmarkToggleButton",
    props: {
      content: {
        required: true,
        type: Object
      },
      initialBookmark: {
        type: Object
      },
      eventLocation: {
        required: false,
        type: String
      },
      iconOnly: {
        default: false,
        type: Boolean
      },
      autoBookmark: {
        default: false,
        type: Boolean
      },
      svgLink: {
        required: false,
        default: {},
        type: Object
      },
      prefixIconStyle: {
        default: false,
        required: false,
        type: Boolean
      },
      prefixIconClass: {
        required: false,
        type: String
      }
    },
    data() {
      return {
        bookmark: this.initialBookmark,
        loggedIn: !!window.CAROLUS_ENV.USER_TOKEN,
        networkOperationInProgress: false,
        nightModeActive: get(NIGHT_MODE_COOKIE_NAME) === "true"
      };
    },
    computed: {
      eventCategory() {
        const contentType = this.content["video?"] ? "video" : "article";
        const attempt = this.loggedIn ? "" : "Attempt";
        const eventLocation = this.eventLocation ? `${this.eventLocation}_` : "";
        return `${contentType}_${eventLocation}bookmark${attempt}`;
      },
      bookmarked() {
        return !!this.bookmark && !!this.bookmark.id;
      },
      buttonText() {
        return this.bookmarked ? "Bookmarked" : "Bookmark";
      },
      buttonClass() {
        if (this.svgLink) {
          return "btn-icon";
        }
        if (this.iconOnly) {
          return "o-button--bookmark";
        }
        return this.bookmarked ? "o-button--green" : "o-button--dark";
      },
      svgUncheckedHref() {
        if (this.svgLink) {
          return this.svgLink["unchecked"];
        }
        if (this.iconOnly) {
          return "#bookmark";
        }
        return "#bookmark--dark";
      },
      svgCheckedHref() {
        if (this.svgLink) {
          return this.svgLink["checked"];
        }
        if (this.iconOnly) {
          return "#bookmark--green";
        }
        return "#bookmark--dark";
      },
      svgUncheckedClass() {
        if (this.iconOnly && this.nightModeActive) {
          return "o-button__svg--grey-chateau l-button__svg-bookmark-icon";
        }
        if (this.iconOnly) {
          return "o-button__svg--medium-grey l-button__svg-bookmark-icon";
        }
        return "o-button__svg--black l-button__svg-plus";
      },
      svgCheckedClass() {
        if (this.iconOnly) {
          return "o-button__svg--green l-button__svg-bookmark-icon";
        }
        return "o-button__svg--green l-button__svg-checkmark";
      },
      iconInputClass() {
        if (this.iconOnly) {
          return "";
        }
        return "o-button__icon--white";
      },
      autoClick() {
        const paramsFromLocation = new URLSearchParams(window.location.search);
        const params = deconstructURLParams(paramsFromLocation);
        return this.autoBookmark && params.bookmark === "true";
      },
      prefixIconSvgHref() {
        if (this.bookmarked) {
          return this.svgCheckedHref;
        } else {
          return this.svgUncheckedHref;
        }
      },
      prefixIconText() {
        if (this.networkOperationInProgress) {
          return "Saving...";
        } else if (this.bookmarked) {
          return "Bookmarked";
        } else {
          return "Save for later";
        }
      }
    },
    methods: {
      handleClick(e) {
        e.stopPropagation();
        if (this.bookmarked) {
          this.remove();
        } else {
          this.add();
        }
      },
      add() {
        this.networkOperationInProgress = true;
        const data = new FormData();
        data.append("bookmark[content_id]", this.content.id);
        Rails.ajax({
          url: "/bookmarks",
          type: "POST",
          data,
          success: (data2) => {
            this.bookmark = data2;
            this.networkOperationInProgress = false;
            this.emitToggleNotification();
          }
        });
      },
      remove() {
        this.networkOperationInProgress = true;
        Rails.ajax({
          url: `/bookmarks/${this.bookmark.id}`,
          type: "DELETE",
          success: () => {
            this.bookmark = null;
            this.networkOperationInProgress = false;
            this.emitToggleNotification();
          }
        });
      },
      emitToggleNotification() {
        EventBus.$emit(BOOKMARK_TOGGLED, this.content.id, this.bookmark);
        if (this.bookmarked) {
          EventBus.$emit(FLASH_SUCCESS, `You have bookmarked ${this.content.name}.`, true);
          triggerEvent(this.eventCategory, "bookmark");
        } else {
          EventBus.$emit(FLASH_SUCCESS, `You have removed the bookmark for ${this.content.name}.`, true);
        }
      }
    },
    created() {
      EventBus.$on(BOOKMARK_TOGGLED, (content_id, bookmark) => {
        if (this.content.id === content_id) {
          this.bookmark = bookmark;
        }
      });
      EventBus.$on(NIGHT_MODE_TOGGLED, (active) => {
        this.nightModeActive = active;
      });
    },
    mounted() {
      if (this.autoClick) {
        this.add();
      }
    },
    components: {
      ButtonContent: ButtonContent_default,
      IconButtonContent: IconButtonContent_default,
      LoginRequiredButton: LoginRequiredButton_default
    }
  });
  var __vue_render__5 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return !_vm.loggedIn ? _c(
      "LoginRequiredButton",
      {
        attrs: {
          buttonClass: _vm.buttonClass,
          eventCategory: _vm.eventCategory,
          eventAction: "bookmark",
          autoClick: _vm.autoClick
        }
      },
      [
        _vm.iconOnly ? _c("IconButtonContent", {
          attrs: {
            iconInputClass: _vm.iconInputClass,
            svgUncheckedClass: _vm.svgUncheckedClass,
            svgUncheckedHref: _vm.svgUncheckedHref
          }
        }) : _c("ButtonContent", {
          attrs: {
            text: _vm.buttonText,
            iconInputClass: _vm.iconInputClass,
            svgUncheckedClass: _vm.svgUncheckedClass,
            svgUncheckedHref: _vm.svgUncheckedHref
          }
        })
      ],
      1
    ) : _vm.prefixIconStyle ? _c(
      "a",
      {
        staticClass: "icon-prefix",
        class: _vm.prefixIconClass,
        on: { click: _vm.handleClick }
      },
      [
        _c("svg", [
          _c("use", { attrs: { "xlink:href": _vm.prefixIconSvgHref } })
        ]),
        _vm._v(" "),
        _c("span", { staticClass: "text-decoration-underline" }, [
          _vm._v("\n  " + _vm._s(this.prefixIconText) + "\n  ")
        ])
      ]
    ) : _c(
      "button",
      {
        class: _vm.buttonClass,
        on: {
          click: function($event) {
            return _vm.handleClick($event);
          }
        }
      },
      [
        _vm.iconOnly ? _c("IconButtonContent", {
          attrs: {
            checked: _vm.bookmarked,
            saving: _vm.networkOperationInProgress,
            disabled: _vm.networkOperationInProgress,
            iconInputClass: _vm.iconInputClass,
            svgUncheckedClass: _vm.svgUncheckedClass,
            svgUncheckedHref: _vm.svgUncheckedHref,
            svgCheckedClass: _vm.svgCheckedClass,
            svgCheckedHref: _vm.svgCheckedHref
          }
        }) : _c("ButtonContent", {
          attrs: {
            text: _vm.buttonText,
            checked: _vm.bookmarked,
            saving: _vm.networkOperationInProgress,
            disabled: _vm.networkOperationInProgress,
            iconInputClass: _vm.iconInputClass,
            svgUncheckedClass: _vm.svgUncheckedClass,
            svgUncheckedHref: _vm.svgUncheckedHref,
            svgCheckedClass: _vm.svgCheckedClass,
            svgCheckedHref: _vm.svgCheckedHref
          }
        })
      ],
      1
    );
  };
  var __vue_staticRenderFns__5 = [];
  __vue_render__5._withStripped = true;
  var __vue_inject_styles__5 = void 0;
  var __vue_scope_id__5 = void 0;
  var __vue_module_identifier__5 = void 0;
  var __vue_is_functional_template__5 = false;
  function __vue_normalize__5(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/bookmark/ToggleButton.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__5 = /* @__PURE__ */ __vue_normalize__5(
    { render: __vue_render__5, staticRenderFns: __vue_staticRenderFns__5 },
    __vue_inject_styles__5,
    __vue_script__5,
    __vue_scope_id__5,
    __vue_is_functional_template__5,
    __vue_module_identifier__5,
    false,
    void 0,
    void 0,
    void 0
  );
  var ToggleButton_default = __vue_component__5;

  // application/components/bookmark/RemoveLink.vue
  var __vue_script__6 = Vue.extend({
    name: "BookmarkRemoveLink",
    props: {
      content: {
        required: true,
        type: Object
      },
      initialBookmark: {
        type: Object
      }
    },
    data() {
      return {
        bookmark: this.initialBookmark
      };
    },
    computed: {
      bookmarked() {
        return !!this.bookmark && !!this.bookmark.id;
      },
      contentElementId() {
        return `content-item-${this.content.id}`;
      }
    },
    methods: {
      handleClick(e) {
        e.stopPropagation();
        if (this.bookmarked) {
          this.remove();
        }
      },
      remove() {
        Rails.ajax({
          url: `/bookmarks/${this.bookmark.id}`,
          type: "DELETE",
          success: () => {
            this.bookmark = null;
            this.emitToggleNotification();
            const elem = document.getElementById(this.contentElementId);
            elem.addEventListener("animationend", () => {
              elem.parentNode.removeChild(elem);
            });
            elem.style.animationName = "a-fade-out";
          }
        });
      },
      emitToggleNotification() {
        EventBus.$emit(BOOKMARK_TOGGLED, this.content.id, this.bookmark);
        EventBus.$emit(FLASH_SUCCESS, `You have removed the bookmark for ${this.content.name}.`, true);
      }
    }
  });
  var __vue_render__6 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("span", [
      _vm.bookmark ? _c(
        "a",
        {
          staticClass: "o-link--bookmark-remove l-margin-15 btn-small bg-white fc-black-night",
          on: {
            click: function($event) {
              return _vm.handleClick($event);
            }
          }
        },
        [_vm._v("\n    Remove\n  ")]
      ) : _vm._e()
    ]);
  };
  var __vue_staticRenderFns__6 = [];
  __vue_render__6._withStripped = true;
  var __vue_inject_styles__6 = void 0;
  var __vue_scope_id__6 = void 0;
  var __vue_module_identifier__6 = void 0;
  var __vue_is_functional_template__6 = false;
  function __vue_normalize__6(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/bookmark/RemoveLink.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__6 = /* @__PURE__ */ __vue_normalize__6(
    { render: __vue_render__6, staticRenderFns: __vue_staticRenderFns__6 },
    __vue_inject_styles__6,
    __vue_script__6,
    __vue_scope_id__6,
    __vue_is_functional_template__6,
    __vue_module_identifier__6,
    false,
    void 0,
    void 0,
    void 0
  );
  var RemoveLink_default = __vue_component__6;

  // application/components/stickyOptionsBanner/App.vue
  var import_throttle = __toESM(require_throttle(), 1);

  // application/components/elements/FacebookShare.vue
  var __vue_script__7 = Vue.extend({
    name: "FacebookShare",
    methods: {
      click() {
        const url = encodeURIComponent(window.location.href);
        const windowOptions = "toolbar=no,location=no,status=no,menubar=no,scrollbars=,resizable=yes,width=640,height=500";
        window.open(`https://www.facebook.com/sharer/sharer.php?u=${url}&display=popup`, "facebookShare", windowOptions);
      }
    }
  });
  var __vue_render__7 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "button",
      {
        staticClass: "o-button--share",
        on: {
          click: function($event) {
            return _vm.click();
          }
        }
      },
      [
        _c(
          "i",
          {
            staticClass: "o-button__icon o-button__icon--large o-button__icon--medium-grey"
          },
          [
            _c(
              "svg",
              {
                staticClass: "l-button__svg-facebook-share o-button__svg--white"
              },
              [_c("use", { attrs: { "xlink:href": "#facebook-icon--white" } })]
            )
          ]
        )
      ]
    );
  };
  var __vue_staticRenderFns__7 = [];
  __vue_render__7._withStripped = true;
  var __vue_inject_styles__7 = void 0;
  var __vue_scope_id__7 = void 0;
  var __vue_module_identifier__7 = void 0;
  var __vue_is_functional_template__7 = false;
  function __vue_normalize__7(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/FacebookShare.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__7 = /* @__PURE__ */ __vue_normalize__7(
    { render: __vue_render__7, staticRenderFns: __vue_staticRenderFns__7 },
    __vue_inject_styles__7,
    __vue_script__7,
    __vue_scope_id__7,
    __vue_is_functional_template__7,
    __vue_module_identifier__7,
    false,
    void 0,
    void 0,
    void 0
  );
  var FacebookShare_default = __vue_component__7;

  // application/components/elements/TwitterShare.vue
  var __vue_script__8 = Vue.extend({
    name: "TwitterShare",
    props: {
      content: {
        type: Object,
        required: true
      }
    },
    methods: {
      click() {
        const text = encodeURIComponent(this.content.name);
        const byLine = encodeURIComponent(this.content.author_twitter_handle ? ` by @${this.content.author_twitter_handle}` : "");
        const via = "kodecodev";
        const url = encodeURIComponent(window.location.href);
        const windowOptions = "toolbar=no,location=no,status=no,menubar=no,scrollbars=,resizable=yes,width=640,height=240";
        window.open(`https://twitter.com/intent/tweet?text=${text}${byLine}&url=${url}&via=${via}`, "twitterShare", windowOptions);
      }
    }
  });
  var __vue_render__8 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "button",
      {
        staticClass: "o-button--share",
        on: {
          click: function($event) {
            return _vm.click();
          }
        }
      },
      [
        _c(
          "i",
          {
            staticClass: "o-button__icon o-button__icon--large o-button__icon--medium-grey"
          },
          [
            _c(
              "svg",
              { staticClass: "l-button__svg-twitter-share o-button__svg--white" },
              [_c("use", { attrs: { "xlink:href": "#twitter-icon--white" } })]
            )
          ]
        )
      ]
    );
  };
  var __vue_staticRenderFns__8 = [];
  __vue_render__8._withStripped = true;
  var __vue_inject_styles__8 = void 0;
  var __vue_scope_id__8 = void 0;
  var __vue_module_identifier__8 = void 0;
  var __vue_is_functional_template__8 = false;
  function __vue_normalize__8(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/TwitterShare.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__8 = /* @__PURE__ */ __vue_normalize__8(
    { render: __vue_render__8, staticRenderFns: __vue_staticRenderFns__8 },
    __vue_inject_styles__8,
    __vue_script__8,
    __vue_scope_id__8,
    __vue_is_functional_template__8,
    __vue_module_identifier__8,
    false,
    void 0,
    void 0,
    void 0
  );
  var TwitterShare_default = __vue_component__8;

  // application/lib/passive-polyfill.ts
  var supportsPassive2 = false;
  try {
    const opts = Object.defineProperty({}, "passive", {
      get() {
        supportsPassive2 = true;
        return true;
      }
    });
    window.addEventListener("testPassive", () => {
    }, opts);
    window.removeEventListener("testPassive", () => {
    }, opts);
  } catch (e) {
    supportsPassive2 = false;
  }
  function setPassive(passive) {
    return supportsPassive2 ? { passive } : false;
  }

  // application/components/stickyOptionsBanner/App.vue
  var __vue_script__9 = Vue.extend({
    name: "StickyOptionsBanner",
    props: {
      scrollDistanceToDisplay: {
        type: Number,
        default: 750
      },
      content: {
        required: true,
        type: Object
      },
      initialBookmark: {
        type: Object
      }
    },
    data() {
      return {
        bookmark: this.initialBookmark,
        loggedIn: !!window.CAROLUS_ENV.USER_TOKEN,
        showForScroll: false,
        articleSection: document.getElementsByClassName("c-written-tutorial")[0]
      };
    },
    methods: {
      scrollHandler: (0, import_throttle.default)(function() {
        this.showForScroll = window.scrollY > this.scrollDistanceToDisplay && !this.atBottomOfArticle();
      }, 100),
      atBottomOfArticle() {
        if (!this.articleSection) {
          return false;
        }
        const topOffset = this.articleSection.getBoundingClientRect().bottom;
        const viewportHeight = window.innerHeight;
        return topOffset < viewportHeight;
      }
    },
    created() {
      EventBus.$on(BOOKMARK_TOGGLED, (content_id, bookmark) => {
        if (this.content.id === content_id) {
          this.bookmark = bookmark;
        }
      });
    },
    mounted() {
      window.addEventListener("scroll", this.scrollHandler, setPassive(true));
    },
    destroyed() {
      window.removeEventListener("scroll", this.scrollHandler);
    },
    components: {
      BookmarkToggleButton: ToggleButton_default,
      FacebookShare: FacebookShare_default,
      TwitterShare: TwitterShare_default
    }
  });
  var __vue_render__9 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("transition", [
      _vm.showForScroll ? _c(
        "div",
        { staticClass: "c-sticky-options-banner" },
        [
          _c("FacebookShare", { attrs: { content: _vm.content } }),
          _vm._v(" "),
          _c("TwitterShare", { attrs: { content: _vm.content } }),
          _vm._v(" "),
          _c("BookmarkToggleButton", {
            attrs: {
              eventLocation: "sidebar",
              initialBookmark: _vm.bookmark,
              content: _vm.content,
              iconOnly: true,
              svgLink: _vm.svgLink
            }
          })
        ],
        1
      ) : _vm._e()
    ]);
  };
  var __vue_staticRenderFns__9 = [];
  __vue_render__9._withStripped = true;
  var __vue_inject_styles__9 = void 0;
  var __vue_scope_id__9 = void 0;
  var __vue_module_identifier__9 = void 0;
  var __vue_is_functional_template__9 = false;
  function __vue_normalize__9(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/stickyOptionsBanner/App.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__9 = /* @__PURE__ */ __vue_normalize__9(
    { render: __vue_render__9, staticRenderFns: __vue_staticRenderFns__9 },
    __vue_inject_styles__9,
    __vue_script__9,
    __vue_scope_id__9,
    __vue_is_functional_template__9,
    __vue_module_identifier__9,
    false,
    void 0,
    void 0,
    void 0
  );
  var App_default = __vue_component__9;

  // application/tools/bookmarks-loader/index.ts
  var bookmarks_loader_default = class {
    constructor() {
      this.bookmarkCache = {};
    }
    updateDOMWithBookmarks(containingDiv = null) {
      const requiredIds = this.requiredContentIds(containingDiv);
      if (requiredIds.length != 0 && !!window.CAROLUS_ENV.USER_TOKEN) {
        this.requestBookmarksForContentIds(this.cacheMissContentIds(requiredIds)).then((response) => this.updateCache(response)).then(() => this.mountBookmarks(containingDiv)).catch((error2) => {
          if (error2.code !== 401) {
            console.error(error2);
          }
        });
      } else {
        this.mountBookmarks(containingDiv);
      }
    }
    requiredContentIds(containingDiv) {
      const elementList = Array.from((containingDiv || document).querySelectorAll("[data-track-bookmark-content-id]"));
      return elementList.map((e) => e.dataset.trackBookmarkContentId);
    }
    cacheMissContentIds(contentIds) {
      return contentIds.filter((id) => !Object.keys(this.bookmarkCache).includes(id));
    }
    updateCache(response) {
      response.forEach((r) => {
        this.bookmarkCache[r.content_id.toString()] = r;
      });
    }
    mountBookmarks(containingDiv) {
      const bookmarkButtons = Array.from((containingDiv || document).querySelectorAll("[data-track-bookmark-content-id]"));
      bookmarkButtons.forEach((bookmarkButton) => {
        const contentId = bookmarkButton.dataset.trackBookmarkContentId;
        const bookmark = this.bookmarkCache[contentId];
        if (bookmarkButton.classList.contains("vue-bookmark-remove-link")) {
          new Vue({
            el: bookmarkButton,
            render: (h) => h(RemoveLink_default, {
              props: {
                initialBookmark: bookmark,
                content: JSON.parse(bookmarkButton.dataset.content.toString())
              }
            })
          });
        } else {
          new Vue({
            el: bookmarkButton,
            render: (h) => h(ToggleButton_default, {
              props: {
                initialBookmark: bookmark,
                content: JSON.parse(bookmarkButton.dataset.content.toString()),
                eventLocation: bookmarkButton.dataset.eventLocation,
                iconOnly: JSON.parse(bookmarkButton.dataset.iconOnly.toString()),
                autoBookmark: JSON.parse(bookmarkButton.dataset.autoBookmark.toString()),
                svgLink: bookmarkButton.dataset.svgLink ? JSON.parse(bookmarkButton.dataset.svgLink.toString()) : null,
                prefixIconStyle: bookmarkButton.dataset.prefixIconStyle ? JSON.parse(bookmarkButton.dataset.prefixIconStyle) : false,
                prefixIconClass: bookmarkButton.dataset.prefixIconClass
              }
            })
          });
        }
      });
      const bookmarkBanners = Array.from((containingDiv || document).querySelectorAll("[data-track-bookmark-banner-content-id]"));
      bookmarkBanners.forEach((bookmarkBanner) => {
        const contentId = bookmarkBanner.dataset.trackBookmarkBannerContentId;
        const bookmark = this.bookmarkCache[contentId];
        new Vue({
          el: bookmarkBanner,
          render: (h) => h(App_default, {
            props: {
              initialBookmark: bookmark,
              content: JSON.parse(bookmarkBanner.dataset.content.toString())
            }
          })
        });
      });
    }
    requestBookmarksForContentIds(contentIds) {
      return new Promise((resolve, reject) => {
        import_ujs.default.ajax({
          url: "/bookmarks",
          type: "GET",
          dataType: "json",
          accept: "json",
          data: constructURLParams_default({
            content_ids: contentIds
          }),
          success: (response) => {
            resolve(response);
          },
          error: (response, status, xhr) => {
            if (xhr.status === 401) {
              reject({ code: 401 });
            } else {
              reject({ code: null, payload: response });
            }
          }
        });
      });
    }
  };

  // application/tools/fragments-loader/index.ts
  var import_ujs2 = __toESM(require_rails_ujs(), 1);

  // application/components/fragments/Fragment.vue
  var import_serialize_selection = __toESM(require_serialize_selection(), 1);

  // application/components/fragments/Context.vue
  var import_insert_tag = __toESM(require_lib(), 1);

  // application/tools/code-formatting/index.js
  var import_core = __toESM(require_core(), 1);
  var import_clipboard = __toESM(require_clipboard(), 1);
  var import_bash = __toESM(require_bash(), 1);
  var import_c = __toESM(require_c(), 1);
  var import_cpp = __toESM(require_cpp(), 1);
  var import_csharp = __toESM(require_csharp(), 1);
  var import_css = __toESM(require_css(), 1);
  var import_dart = __toESM(require_dart(), 1);
  var import_dockerfile = __toESM(require_dockerfile(), 1);
  var import_gradle = __toESM(require_gradle(), 1);
  var import_java = __toESM(require_java(), 1);
  var import_javascript = __toESM(require_javascript(), 1);
  var import_json = __toESM(require_json(), 1);
  var import_kotlin = __toESM(require_kotlin(), 1);
  var import_markdown = __toESM(require_markdown(), 1);
  var import_objectivec = __toESM(require_objectivec(), 1);
  var import_ruby = __toESM(require_ruby(), 1);
  var import_sql = __toESM(require_sql(), 1);
  var import_swift = __toESM(require_swift(), 1);
  var import_xml = __toESM(require_xml(), 1);
  var import_yaml = __toESM(require_yaml(), 1);

  // application/tools/code-formatting/alerts.js
  var alerts_default = {
    clear() {
      EventBus.$emit(FLASH_CLEAR);
    },
    show(message, state = "success") {
      if (state === "success") {
        EventBus.$emit(FLASH_SUCCESS, message, true);
      } else {
        EventBus.$emit(FLASH_WARNING, message, false);
      }
    },
    fallbackMessage(action) {
      let actionMsg = "";
      const actionKey = action === "cut" ? "X" : "C";
      if (/iPhone|iPad/i.test(navigator.userAgent)) {
        actionMsg = "No support :(";
      } else if (/Mac/i.test(navigator.userAgent)) {
        actionMsg = `Press \u2318-${actionKey} to ${action}`;
      } else {
        actionMsg = `Press Ctrl-${actionKey} to ${action}`;
      }
      return actionMsg;
    }
  };

  // application/tools/code-formatting/index.js
  import_core.default.registerLanguage("bash", import_bash.default);
  import_core.default.registerLanguage("c", import_c.default);
  import_core.default.registerLanguage("cpp", import_cpp.default);
  import_core.default.registerLanguage("csharp", import_csharp.default);
  import_core.default.registerLanguage("css", import_css.default);
  import_core.default.registerLanguage("dart", import_dart.default);
  import_core.default.registerLanguage("dockerfile", import_dockerfile.default);
  import_core.default.registerLanguage("gradle", import_gradle.default);
  import_core.default.registerLanguage("java", import_java.default);
  import_core.default.registerLanguage("javascript", import_javascript.default);
  import_core.default.registerLanguage("json", import_json.default);
  import_core.default.registerLanguage("kotlin", import_kotlin.default);
  import_core.default.registerLanguage("markdown", import_markdown.default);
  import_core.default.registerLanguage("objectivec", import_objectivec.default);
  import_core.default.registerLanguage("ruby", import_ruby.default);
  import_core.default.registerLanguage("sql", import_sql.default);
  import_core.default.registerLanguage("swift", import_swift.default);
  import_core.default.registerLanguage("xml", import_xml.default);
  import_core.default.registerLanguage("yaml", import_yaml.default);
  var configureSyntaxHighlighting = () => {
    [...document.getElementsByTagName("pre")].forEach((element) => {
      try {
        if (element.attributes.lang) {
          const language = element.attributes.lang.value;
          if (language) {
            element.classList.add(`language-${language}`);
          }
        }
        const codeBlocks = element.getElementsByTagName("code");
        if (codeBlocks.length > 0) {
          [...codeBlocks].forEach(import_core.default.highlightElement);
        } else {
          import_core.default.highlightElement(element);
        }
      } catch (error2) {
        console.error(error2);
      }
    });
  };
  var addPasteboardButtons = () => {
    [...document.getElementsByTagName("pre")].forEach((element) => {
      const copyButton = document.createElement("button");
      copyButton.setAttribute("class", "o-button-copy");
      element.appendChild(copyButton);
    });
  };
  var configurePasteboardButtons = () => {
    const pasteboard = new import_clipboard.default(".o-button-copy", {
      target(trigger2) {
        return trigger2.parentNode;
      }
    });
    pasteboard.on("success", (e) => {
      alerts_default.show("Copied!", "success");
      e.clearSelection();
    });
    pasteboard.on("error", (e) => {
      alerts_default.show(alerts_default.fallbackMessage(e.action), "warning");
    });
  };
  var colourContainers = () => {
    const articles = document.querySelectorAll("article.c-written-tutorial");
    if (articles.length > 0) {
      return { containers: articles, colourClass: "l-written-tutorial--light" };
    }
    const videoNotes = document.querySelectorAll(".c-video-player__notes");
    if (videoNotes.length > 0) {
      return { containers: videoNotes, colourClass: "c-video-player__notes--light" };
    }
    return { containers: null, colourClass: null };
  };
  var toggleColourScheme = () => {
    const { containers, colourClass } = colourContainers();
    if (!containers) {
      return;
    }
    let isLightMode;
    [...containers].forEach((container) => {
      isLightMode = container.classList.toggle(colourClass);
    });
    set("codeblock-light-ui", isLightMode, { expires: "10Y" });
  };
  var applySavedColourSchemePreference = () => {
    const { containers, colourClass } = colourContainers();
    if (!containers) {
      return;
    }
    const isLightMode = get("codeblock-light-ui") === "true";
    if (isLightMode) {
      [...containers].forEach((container) => {
        container.classList.add(colourClass);
      });
    }
  };
  var addColourButtons = () => {
    [...document.getElementsByTagName("pre")].forEach((element) => {
      const colourButton = document.createElement("button");
      colourButton.classList.add("o-button-code", "o-button-code--light");
      element.appendChild(colourButton);
      colourButton.addEventListener("click", toggleColourScheme);
    });
  };
  function configureCodeFormatting() {
    try {
      configureSyntaxHighlighting();
      if (import_clipboard.default.isSupported()) {
        addPasteboardButtons();
        configurePasteboardButtons();
      }
      applySavedColourSchemePreference();
      addColourButtons();
    } catch (error2) {
      console.error(error2);
    }
  }
  function reconfigureColourButtons(container) {
    try {
      [...container.getElementsByClassName("o-button-code")].forEach((colourButton) => {
        colourButton.addEventListener("click", toggleColourScheme);
      });
    } catch (error2) {
      console.error(error2);
    }
  }

  // application/components/fragments/Context.vue
  var insertTag = import_insert_tag.default.default;
  var __vue_script__10 = {
    name: "Context",
    props: {
      text: {
        required: true,
        type: String
      },
      annotations: {
        required: true,
        type: Array
      }
    },
    data() {
      return {
        html: this.text
      };
    },
    watch: {
      annotations: {
        handler() {
          this.redrawAnnotations();
        },
        deep: true
      }
    },
    mounted() {
      this.redrawAnnotations();
    },
    methods: {
      click(event) {
        const markElement = event.target.closest("mark.o-fragment--annotation");
        if (markElement) {
          this.$emit("open", parseInt(markElement.dataset.annotationId));
        }
      },
      redrawAnnotations() {
        this.html = this.text;
        this.annotations.forEach((annotation) => {
          this.addAnnotationElement(annotation);
        });
        this.$nextTick(() => reconfigureColourButtons(this.$refs.context));
      },
      addAnnotationElement(annotation) {
        const startString = this.$refs.context.innerText.substring(0, annotation.start);
        const startLine = startString.split("\n").length - 1;
        const startIndex = annotation.start - startString.lastIndexOf("\n") - 1;
        const endString = this.$refs.context.innerText.substring(0, annotation.end);
        const endLine = endString.split("\n").length - 1;
        const endIndex = annotation.end - endString.lastIndexOf("\n") - 1;
        const baseClass = "o-fragment--annotation";
        const colourClass = `o-fragment--highlighter-${annotation.colour}`;
        const noteClass = annotation.note != null ? "o-fragment--annotation-note" : "";
        const annotationClass = [baseClass, colourClass, noteClass].join(" ");
        this.html = insertTag(this.html, `<mark data-annotation-id="${annotation.id}" class="${annotationClass}">`, [startLine, startIndex, endLine, endIndex]);
      }
    }
  };
  var __vue_render__10 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("span", {
      ref: "context",
      staticClass: "o-fragment--context",
      domProps: { innerHTML: _vm._s(_vm.html) },
      on: { mouseup: _vm.click }
    });
  };
  var __vue_staticRenderFns__10 = [];
  __vue_render__10._withStripped = true;
  var __vue_inject_styles__10 = function(inject) {
    if (!inject)
      return;
    inject("data-v-57f71f5e_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "Context.vue" }, media: void 0 });
  };
  var __vue_scope_id__10 = void 0;
  var __vue_module_identifier__10 = void 0;
  var __vue_is_functional_template__10 = false;
  function __vue_normalize__10(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/fragments/Context.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__3() {
    const styles = __vue_create_injector__3.styles || (__vue_create_injector__3.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__10 = /* @__PURE__ */ __vue_normalize__10(
    { render: __vue_render__10, staticRenderFns: __vue_staticRenderFns__10 },
    __vue_inject_styles__10,
    __vue_script__10,
    __vue_scope_id__10,
    __vue_is_functional_template__10,
    __vue_module_identifier__10,
    false,
    __vue_create_injector__3,
    void 0,
    void 0
  );
  var Context_default = __vue_component__10;

  // application/components/fragments/Tooltip.vue
  var colours = ["yellow", "orange", "red", "purple", "blue", "green"];
  var __vue_script__11 = Vue.extend({
    name: "Tooltip",
    props: {
      annotation: {
        type: Object
      },
      colours: {
        type: Array,
        default: () => colours
      }
    },
    data() {
      return {
        note: this.annotation ? this.annotation.note : null,
        showNoteEditor: false
      };
    },
    watch: {
      annotation: {
        handler() {
          if (this.annotation) {
            this.note = this.annotation.note;
          } else {
            this.note = null;
          }
        },
        deep: true
      }
    },
    computed: {
      annotationState() {
        if (this.note) {
          return "note";
        }
        if (this.annotation && this.annotation.persisted) {
          return "highlight";
        }
        if (this.annotation) {
          return "none";
        }
        return "hidden";
      },
      annotationStateHidden() {
        return this.annotationState === "hidden";
      },
      annotationStateNone() {
        return this.annotationState === "none";
      },
      annotationStateHighlight() {
        return this.annotationState === "highlight";
      },
      annotationStateNote() {
        return this.annotationState === "note";
      },
      dirty() {
        return this.annotation.note !== this.note;
      },
      tooltipClass() {
        return {
          "o-fragment--tooltip-with-note": this.showNoteEditor,
          "o-fragment--tooltip": !this.showNoteEditor
        };
      },
      tooltipStyle() {
        if (this.annotationStateHidden) {
          return "";
        }
        let annotationRect = null;
        const offset = this.showNoteEditor ? 190 : 60;
        let annotationElement = null;
        if (this.annotation && this.annotation.id) {
          annotationElement = document.querySelector(`[data-annotation-id="${this.annotation.id}"]`);
        }
        if (annotationElement) {
          annotationRect = annotationElement.getBoundingClientRect();
        } else {
          const selection = document.getSelection();
          if (selection && selection.toString().length > 0) {
            annotationRect = selection.getRangeAt(0).getBoundingClientRect();
          }
        }
        if (annotationRect) {
          const contextElementRect = this.$parent.$el.getBoundingClientRect();
          const top = annotationRect.y - contextElementRect.y - offset;
          const left = annotationRect.x - contextElementRect.x + annotationRect.width / 2;
          const style2 = `top: ${top}px; left: ${left}px;`;
          return style2;
        }
        return "";
      },
      noteActionClass() {
        if (!this.annotationStateNote) {
          return "l-button__svg-22 o-button__svg--white";
        }
        return `l-button__svg-22 o-button__svg--highlighter-${this.annotation.colour}`;
      }
    },
    methods: {
      classesForColour(colour) {
        return {
          "o-tooltip__color": true,
          [`o-tooltip__color--${colour}`]: true,
          "o-tooltip__color--selected": this.annotation.colour === colour
        };
      },
      handleColourClick(colour) {
        if (this.annotationStateNone) {
          this.createAnnotation(colour);
        } else if (this.annotationStateHighlight && this.annotation.colour === colour) {
          this.removeAnnotation();
        } else if (this.annotation.colour !== colour) {
          this.updateAnnotationColour(colour);
        }
      },
      toggleShowNoteEditor() {
        this.showNoteEditor = !this.showNoteEditor;
        if (this.showNoteEditor && this.annotation.note === null) {
          this.$emit("addNote");
        }
      },
      createAnnotation(colour) {
        this.$emit("createAnnotation", colour);
      },
      updateAnnotationColour(colour) {
        this.$emit("updateAnnotationColour", colour);
      },
      removeAnnotation() {
        this.$emit("removeAnnotation");
      },
      updateNote() {
        this.$emit("updateNote", this.note);
      },
      removeNote() {
        this.$emit("updateNote", null);
        this.showNoteEditor = false;
      }
    }
  });
  var __vue_render__11 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return !_vm.annotationStateHidden ? _c("span", { class: _vm.tooltipClass, style: _vm.tooltipStyle }, [
      _vm.showNoteEditor ? _c("span", [
        _c("textarea", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.note,
              expression: "note"
            }
          ],
          staticClass: "o-fragment--tooltip-textarea",
          attrs: { placeholder: "Type your note here..." },
          domProps: { value: _vm.note },
          on: {
            input: function($event) {
              if ($event.target.composing) {
                return;
              }
              _vm.note = $event.target.value;
            }
          }
        }),
        _vm._v(" "),
        _c("div", { staticClass: "o-fragment__actions" }, [
          _c(
            "span",
            {
              staticClass: "o-fragment__action o-fragment--tooltip-remove",
              on: {
                click: function($event) {
                  return _vm.removeNote();
                }
              }
            },
            [_vm._v("Remove")]
          ),
          _vm._v(" "),
          _vm.dirty ? _c(
            "span",
            {
              staticClass: "o-fragment__action o-fragment--tooltip-save",
              on: {
                click: function($event) {
                  return _vm.updateNote();
                }
              }
            },
            [_vm._v("Save")]
          ) : _c(
            "span",
            {
              staticClass: "o-fragment__action o-fragment--tooltip-save",
              on: {
                click: function($event) {
                  return _vm.toggleShowNoteEditor();
                }
              }
            },
            [_vm._v("Close")]
          )
        ])
      ]) : _c(
        "span",
        [
          _vm._l(_vm.colours, function(colour) {
            return _c(
              "span",
              {
                key: colour,
                on: {
                  click: function($event) {
                    return _vm.handleColourClick(colour);
                  }
                }
              },
              [_c("span", { class: _vm.classesForColour(colour) })]
            );
          }),
          _vm._v(" "),
          _vm.annotationStateHighlight || _vm.annotationStateNote ? _c(
            "span",
            {
              staticClass: "o-tooltip__svg o-tooltip__svg--delete",
              on: {
                click: function($event) {
                  return _vm.removeAnnotation();
                }
              }
            },
            [
              _c("span", [
                _c("svg", { staticClass: "o-button__svg--white" }, [
                  _c("title", [_vm._v("Remove")]),
                  _c("use", { attrs: { "xlink:href": "#delete" } })
                ])
              ])
            ]
          ) : _vm._e(),
          _vm._v(" "),
          _vm.annotationStateHighlight || _vm.annotationStateNote ? _c(
            "span",
            {
              staticClass: "o-tooltip__svg o-tooltip__svg--note",
              on: {
                click: function($event) {
                  return _vm.toggleShowNoteEditor();
                }
              }
            },
            [
              _c("svg", { class: _vm.noteActionClass }, [
                _c("title", [_vm._v("Add Note")]),
                _c("use", { attrs: { "xlink:href": "#pencil" } })
              ])
            ]
          ) : _vm._e()
        ],
        2
      )
    ]) : _vm._e();
  };
  var __vue_staticRenderFns__11 = [];
  __vue_render__11._withStripped = true;
  var __vue_inject_styles__11 = function(inject) {
    if (!inject)
      return;
    inject("data-v-6ad26eb7_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "Tooltip.vue" }, media: void 0 });
  };
  var __vue_scope_id__11 = void 0;
  var __vue_module_identifier__11 = void 0;
  var __vue_is_functional_template__11 = false;
  function __vue_normalize__11(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/fragments/Tooltip.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__4() {
    const styles = __vue_create_injector__4.styles || (__vue_create_injector__4.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__11 = /* @__PURE__ */ __vue_normalize__11(
    { render: __vue_render__11, staticRenderFns: __vue_staticRenderFns__11 },
    __vue_inject_styles__11,
    __vue_script__11,
    __vue_scope_id__11,
    __vue_is_functional_template__11,
    __vue_module_identifier__11,
    false,
    __vue_create_injector__4,
    void 0,
    void 0
  );
  var Tooltip_default = __vue_component__11;

  // application/components/fragments/Fragment.vue
  var __vue_script__12 = Vue.extend({
    name: "Fragment",
    props: {
      elementId: {
        type: String
      },
      elementName: {
        required: true,
        type: String
      },
      text: {
        required: true,
        type: String
      },
      contentId: {
        required: true,
        type: String
      },
      fragmentId: {
        required: true,
        type: String
      },
      fragmentIndex: {
        required: true,
        type: String
      },
      initialAnnotations: {
        required: true,
        type: Array
      },
      annotationEnabled: {
        required: true,
        type: Boolean
      }
    },
    data() {
      return {
        annotations: this.parseInitialAnnotations(),
        selectedAnnotation: null,
        networkOperationInProgress: false
      };
    },
    mounted() {
      EventBus.$on(FRAGMENT_SELECTED, (fragmentId) => {
        if (this.fragmentId === fragmentId) {
          const selectState = import_serialize_selection.default.save(this.$refs.context.$el);
          if (selectState && selectState.content.length > 0) {
            this.select(selectState);
          }
        } else if (this.fragmentId !== fragmentId) {
          this.selectedAnnotation = null;
        }
      });
      EventBus.$on(FRAGMENT_ANNOTATION_UPDATED, (source, fragmentId, annotation) => {
        if (source === this) {
          return;
        }
        if (this.fragmentId === fragmentId) {
          const localAnnotation = this.annotations.find((h) => h.id === annotation.id);
          localAnnotation.note = annotation.note;
        }
      });
      EventBus.$on(FRAGMENT_ANNOTATION_REMOVED, (source, fragmentId, annotationId) => {
        if (source === this) {
          return;
        }
        if (this.fragmentId === fragmentId) {
          if (this.selectedAnnotation && this.selectedAnnotation.id === annotationId) {
            this.selectedAnnotation = null;
          }
          this.annotations = this.annotations.filter((h) => h.id !== annotationId);
        }
      });
    },
    methods: {
      parseInitialAnnotations() {
        return this.initialAnnotations.map((annotation) => ({
          id: annotation.id,
          start: annotation.start_index,
          end: annotation.end_index,
          text: annotation.text,
          note: annotation.note,
          persisted: true,
          colour: annotation.colour
        }));
      },
      select(selectState) {
        const annotation = {
          start: selectState.start,
          end: selectState.end,
          text: selectState.content,
          note: null,
          persisted: false,
          colour: null
        };
        this.selectedAnnotation = annotation;
      },
      open(annotationId) {
        this.selectedAnnotation = this.annotations.find((h) => h.id === annotationId);
      },
      checkInteractionAllowed() {
        if (this.annotationEnabled) {
          return true;
        }
        EventBus.$emit(SHOW_MODAL, "highlighting-notes-paywall");
        return false;
      },
      createAnnotation(colour) {
        if (!this.checkInteractionAllowed()) {
          return;
        }
        if (this.networkOperationInProgress) {
          return;
        }
        this.networkOperationInProgress = true;
        const selectState = import_serialize_selection.default.save(this.$refs.context.$el);
        this.select(selectState);
        const data = new FormData();
        data.append("annotation[content_id]", this.contentId);
        data.append("annotation[fragment_id]", this.fragmentId);
        data.append("annotation[fragment_index]", this.fragmentIndex);
        data.append("annotation[start_index]", this.selectedAnnotation.start);
        data.append("annotation[end_index]", this.selectedAnnotation.end);
        data.append("annotation[text]", this.selectedAnnotation.text);
        data.append("annotation[context]", this.text);
        data.append("annotation[colour]", colour);
        Rails.ajax({
          url: "/annotations",
          type: "POST",
          data,
          complete: () => {
            this.networkOperationInProgress = false;
          },
          success: (data2) => {
            this.selectedAnnotation.id = data2.id;
            this.selectedAnnotation.persisted = true;
            this.selectedAnnotation.colour = data2.colour;
            this.annotations.push(this.selectedAnnotation);
          }
        });
      },
      updateAnnotation(note, colour) {
        if (!this.checkInteractionAllowed()) {
          return;
        }
        if (this.networkOperationInProgress) {
          return;
        }
        this.networkOperationInProgress = true;
        const changingColour = colour !== this.selectedAnnotation.colour;
        const data = new FormData();
        data.append("annotation[content_id]", this.contentId);
        if (note != null) {
          data.append("annotation[note]", note);
        }
        if (colour != null) {
          data.append("annotation[colour]", colour);
        }
        Rails.ajax({
          url: `/annotations/${this.selectedAnnotation.id}`,
          type: "PUT",
          data,
          complete: () => {
            this.networkOperationInProgress = false;
          },
          success: (data2) => {
            this.selectedAnnotation.note = note;
            this.selectedAnnotation.colour = data2.colour;
            if (changingColour) {
              return;
            }
            if (note === null) {
              EventBus.$emit(FLASH_SUCCESS, "Your note has been removed.", true);
            } else {
              EventBus.$emit(FLASH_SUCCESS, "Your note has been updated.", true);
            }
            EventBus.$emit(FRAGMENT_ANNOTATION_UPDATED, this, this.selectedAnnotation.fragment_id, this.selectedAnnotation);
          }
        });
      },
      removeAnnotation() {
        if (!this.checkInteractionAllowed()) {
          return;
        }
        if (this.networkOperationInProgress) {
          return;
        }
        this.networkOperationInProgress = true;
        Rails.ajax({
          url: `/annotations/${this.selectedAnnotation.id}`,
          type: "DELETE",
          complete: () => {
            this.networkOperationInProgress = false;
          },
          success: () => {
            this.annotations = this.annotations.filter((h) => h.id !== this.selectedAnnotation.id);
            EventBus.$emit(FRAGMENT_ANNOTATION_REMOVED, this, this.selectedAnnotation.fragment_id, this.selectedAnnotation.id);
            this.selectedAnnotation = null;
          }
        });
      },
      addNote() {
        if (!this.checkInteractionAllowed()) {
          return;
        }
        this.selectedAnnotation.note = "";
      },
      updateNote(note) {
        if (!this.checkInteractionAllowed()) {
          return;
        }
        this.updateAnnotation(note, this.selectedAnnotation.colour);
      },
      updateAnnotationColour(colour) {
        if (!this.checkInteractionAllowed()) {
          return;
        }
        this.updateAnnotation(this.selectedAnnotation.note, colour);
      }
    },
    components: {
      Context: Context_default,
      Tooltip: Tooltip_default
    }
  });
  var __vue_render__12 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      _vm.elementName,
      {
        tag: "component",
        staticClass: "o-fragment",
        attrs: { id: _vm.elementId, "data-fragment-id": _vm.fragmentId }
      },
      [
        _c("Tooltip", {
          attrs: { annotation: _vm.selectedAnnotation },
          on: {
            createAnnotation: _vm.createAnnotation,
            updateAnnotationColour: _vm.updateAnnotationColour,
            removeAnnotation: _vm.removeAnnotation,
            addNote: _vm.addNote,
            updateNote: _vm.updateNote
          }
        }),
        _c("Context", {
          ref: "context",
          attrs: { text: _vm.text, annotations: _vm.annotations },
          on: { open: _vm.open }
        })
      ],
      1
    );
  };
  var __vue_staticRenderFns__12 = [];
  __vue_render__12._withStripped = true;
  var __vue_inject_styles__12 = function(inject) {
    if (!inject)
      return;
    inject("data-v-d7bd1076_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "Fragment.vue" }, media: void 0 });
  };
  var __vue_scope_id__12 = void 0;
  var __vue_module_identifier__12 = void 0;
  var __vue_is_functional_template__12 = false;
  function __vue_normalize__12(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/fragments/Fragment.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__5() {
    const styles = __vue_create_injector__5.styles || (__vue_create_injector__5.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__12 = /* @__PURE__ */ __vue_normalize__12(
    { render: __vue_render__12, staticRenderFns: __vue_staticRenderFns__12 },
    __vue_inject_styles__12,
    __vue_script__12,
    __vue_scope_id__12,
    __vue_is_functional_template__12,
    __vue_module_identifier__12,
    false,
    __vue_create_injector__5,
    void 0,
    void 0
  );
  var Fragment_default = __vue_component__12;

  // application/tools/fragments-loader/index.ts
  var fragments_loader_default = class {
    constructor() {
      this.annotationCache = {};
    }
    updateDOMWithFragments(containingDiv = null) {
      const requiredId = this.requiredContentId(containingDiv);
      if (requiredId) {
        if (window.CAROLUS_ENV.USER_TOKEN) {
          this.requestAnnotationsForContentId(requiredId).then(() => this.mountFragments(containingDiv));
        } else {
          this.mountFragments(containingDiv, false);
        }
        this.setSelectionChangeListener();
      }
    }
    setSelectionChangeListener() {
      let withinTooltip = false;
      document.addEventListener("mouseup", (event) => {
        if (event.target) {
          const target2 = event.target;
          withinTooltip = !!target2.closest(".o-fragment--tooltip") || !!target2.closest(".o-fragment--tooltip-with-note");
        }
        let selectedFragment = this.findSelectedFragment();
        if (selectedFragment) {
          EventBus.$emit(FRAGMENT_SELECTED, selectedFragment.dataset.fragmentId);
        }
      });
      document.addEventListener("selectionchange", () => {
        let checkFragment = this.findSelectedFragment();
        if (checkFragment == null && !withinTooltip) {
          EventBus.$emit(FRAGMENT_SELECTED, null);
        }
      });
    }
    findSelectedFragment() {
      const selection = document.getSelection();
      if (selection && selection.type !== "Caret" && selection.toString().length > 0) {
        const anchorNode = selection.anchorNode;
        const focusNode = selection.focusNode;
        if (anchorNode && focusNode) {
          const anchorFragment = this.findFragment(anchorNode);
          const focusFragment = this.findFragment(focusNode);
          if (anchorFragment === focusFragment) {
            return anchorFragment;
          }
        }
      }
      return null;
    }
    findFragment(node) {
      if (node.nodeType === 1) {
        return node.closest(".o-fragment");
      }
      if (node.parentElement) {
        return node.parentElement.closest(".o-fragment");
      }
      return null;
    }
    requiredContentId(containingDiv) {
      const element = (containingDiv || document).querySelector("[data-fragments-content-id]");
      if (element) {
        return element.dataset.fragmentsContentId;
      }
      return null;
    }
    updateCache(response) {
      response.forEach((r) => {
        if (this.annotationCache[r.fragment_id.toString()] == null) {
          this.annotationCache[r.fragment_id.toString()] = [];
        }
        this.annotationCache[r.fragment_id.toString()].push(r);
      });
    }
    mountFragments(containingDiv, annotationEnabled = true) {
      const fragmentElements = Array.from((containingDiv || document).querySelectorAll("[data-fragment-id]"));
      fragmentElements.forEach((fragmentElement) => {
        const { fragmentId } = fragmentElement.dataset;
        const annotations = this.annotationCache[fragmentId] || [];
        new Vue({
          el: fragmentElement,
          render: (h) => h(Fragment_default, {
            props: {
              elementId: fragmentElement.id,
              elementName: fragmentElement.localName,
              text: fragmentElement.innerHTML.trim(),
              contentId: fragmentElement.dataset.contentId,
              fragmentId: fragmentElement.dataset.fragmentId,
              fragmentIndex: fragmentElement.dataset.fragmentIndex,
              initialAnnotations: annotations,
              annotationEnabled
            }
          })
        });
      });
    }
    requestAnnotationsForContentId(contentId) {
      return new Promise((resolve, reject) => {
        import_ujs2.default.ajax({
          url: "/annotations",
          type: "GET",
          dataType: "json",
          accept: "json",
          data: constructURLParams_default({
            content_id: contentId
          }),
          complete: () => {
            resolve();
          },
          success: (response) => {
            this.updateCache(response);
          }
        });
      });
    }
  };

  // controllers/content_annotator_controller.js
  var content_annotator_controller_default = class extends Controller {
    connect() {
      const accessAnnotator = new access_annotator_default();
      const progressAnnotator4 = new progress_annotator_default();
      const bookmarksLoader4 = new bookmarks_loader_default();
      const fragmentsLoader = new fragments_loader_default();
      accessAnnotator.updateDOMWithUserAccess(this.element);
      progressAnnotator4.updateDOMWithUserProgress(this.element);
      bookmarksLoader4.updateDOMWithBookmarks(this.element);
      fragmentsLoader.updateDOMWithFragments(this.element);
    }
  };

  // controllers/css_toggle_controller.js
  var css_toggle_controller_default = class extends Controller {
    toggle(event) {
      if (this.hasContainerTarget) {
        this.containerTarget.classList.toggle(this.hideClass);
        event.currentTarget.classList.toggle("o-button-disclose--rotate");
      }
    }
  };
  __publicField(css_toggle_controller_default, "classes", ["hide"]);
  __publicField(css_toggle_controller_default, "targets", ["container"]);

  // controllers/discussion_controller.js
  var discussion_controller_default = class extends Controller {
    initialize() {
      this.loaded = false;
    }
    load() {
      if (!this.loaded && this.hasContainerTarget && this.hasButtonTarget) {
        window.DiscourseEmbed = this.buttonTarget.dataset;
        this.containerTarget.innerHTML = "";
        const d = document.createElement("script");
        d.type = "text/javascript";
        d.async = true;
        d.src = `${window.DiscourseEmbed.discourseUrl}javascripts/embed.js`;
        document.getElementsByTagName("head")[0].appendChild(d);
        this.loaded = true;
      }
    }
  };
  __publicField(discussion_controller_default, "targets", ["container", "button"]);

  // controllers/dismisser_controller.js
  var dismisser_controller_default = class extends Controller {
    dismiss() {
      this.element.classList.add(this.hideClass);
      if (this.hasCookieKeyValue) {
        set(this.cookieKeyValue, true, { expires: "10Y" });
      }
    }
  };
  __publicField(dismisser_controller_default, "classes", ["hide"]);
  __publicField(dismisser_controller_default, "values", {
    cookieKey: String
  });

  // controllers/filter_toggle_controller.js
  var filter_toggle_controller_default = class extends Controller {
    connect() {
      this.showFilter = get("library-show-filter") === null || get("library-show-filter") === "true";
      if (this.showFilter) {
        this.element.classList.add("c-library-filters--open");
      } else {
        this.element.classList.remove("c-library-filters--open");
      }
    }
    toggle() {
      set("library-show-filter", !this.showFilter, { expires: "10Y" });
      this.element.classList.toggle("c-library-filters--open");
    }
    toggleMobile() {
      this.element.classList.toggle("c-library-filters--mobile-open");
    }
  };

  // controllers/flash_controller.js
  var flash_controller_default = class extends Controller {
    connect() {
      EventBus.$emit(FLASH_SUCCESS, this.messageValue, true);
    }
  };
  __publicField(flash_controller_default, "values", {
    message: String
  });

  // controllers/highlighter_controller.js
  var highlighter_controller_default = class extends Controller {
    connect() {
      this.element.innerHTML = this.highlightTerm(this.element.innerHTML);
    }
    highlightTerm(text) {
      if (!this.hasTermValue || this.termValue.length < 2) {
        return text;
      }
      const replacement = '$1<mark class="highlight">$2</mark>$3';
      let newText = text;
      this.termValue.split(" ").forEach((term) => {
        if (term && term.length >= 2) {
          const regex = new RegExp(`(<.+>.*)(${term})(.*</.+>)`, "gi");
          newText = newText.replace(regex, replacement);
        }
      });
      return newText;
    }
  };
  __publicField(highlighter_controller_default, "values", { term: String });

  // controllers/max_options_controller.js
  var max_options_controller_default = class extends Controller {
    connect() {
      this.tally();
    }
    tally() {
      this.toggleOptions();
      this.toggleSubmit();
    }
    currentNumberOfSelectedOptions() {
      return this.optionTargets.filter((option) => option.checked).length;
    }
    toggleSubmit() {
      if (this.currentNumberOfSelectedOptions() > 0) {
        this.submitTarget.disabled = false;
        this.submitTarget.classList.add("o-button--black");
        this.submitTarget.classList.remove("o-button--disabled-svg");
      } else {
        this.submitTarget.disabled = true;
        this.submitTarget.classList.remove("o-button--black");
        this.submitTarget.classList.add("o-button--disabled-svg");
      }
    }
    toggleOptions() {
      if (this.currentNumberOfSelectedOptions() < this.maximumValue) {
        this.optionTargets.forEach((option) => option.removeAttribute("disabled"));
      } else {
        this.optionTargets.filter((option) => !option.checked).forEach((option) => option.setAttribute("disabled", "disabled"));
      }
    }
  };
  __publicField(max_options_controller_default, "targets", ["option", "submit"]);
  __publicField(max_options_controller_default, "values", {
    maximum: Number
  });

  // controllers/modal_controller.js
  var modal_controller_default = class extends Controller {
    initialize() {
      this.originalModalContent = this.modalTarget.innerHTML;
    }
    connect() {
      if (this.autoshowValue) {
        this.show();
      }
    }
    show() {
      this.modalTarget.classList.remove("hidden");
    }
    close() {
      this.modalTarget.classList.add("hidden");
      if (!this.cacheValue) {
        this.modalTarget.innerHTML = this.originalModalContent;
      }
      let parent = this.getParentControllerForIdentifier("modal");
      if (parent) {
        parent.close();
      }
    }
    showDynamic(event) {
      this.titleTarget.textContent = event.currentTarget.dataset.modalTitle;
      this.frameTarget.src = event.currentTarget.dataset.modalSrc;
      this.show();
    }
    getParentControllerForIdentifier(identifier) {
      return this.application.controllers.find((controller) => {
        return controller.context.identifier === identifier && controller.element.contains(this.element) && controller.element !== this.element;
      });
    }
  };
  __publicField(modal_controller_default, "values", { autoshow: Boolean, cache: Boolean });
  __publicField(modal_controller_default, "targets", ["modal", "title", "frame"]);

  // controllers/new_content_controller.js
  var new_content_controller_default = class extends Controller {
    connect() {
      if (this.countValue > 0) {
        this.element.classList.add(this.highlightedClass);
        this.counterTarget.innerText = this.countValue;
      }
    }
    clearCount() {
      this.element.classList.remove(this.highlightedClass);
      this.counterTarget.innerText = "";
    }
  };
  __publicField(new_content_controller_default, "targets", ["counter"]);
  __publicField(new_content_controller_default, "classes", ["highlighted"]);
  __publicField(new_content_controller_default, "values", {
    count: Number
  });

  // controllers/paywall_obfuscation_controller.js
  var paywall_obfuscation_controller_default = class extends Controller {
    connect() {
      if (this.hasAllTargets()) {
        let count = 0;
        this.fragmentTargets.forEach((fragment) => {
          if (count % 10 === 0) {
            this.containerTarget.insertBefore(this.template(), this.templateChildContaining(fragment));
          }
          count += 1;
        });
      }
    }
    template() {
      return this.templateTarget.children[0].cloneNode(true);
    }
    hasAllTargets() {
      return this.hasContainerTarget && this.hasFragmentTarget && this.hasTemplateTarget;
    }
    templateChildContaining(fragment) {
      return [...this.containerTarget.children].find((child) => child.contains(fragment));
    }
  };
  __publicField(paywall_obfuscation_controller_default, "targets", ["container", "fragment", "template"]);

  // controllers/player_cinema_mode_controller.js
  var player_cinema_mode_controller_default = class extends Controller {
    connect() {
      this.cinemaModeSettingKey = "video-player-cinema-mode";
      this.cinemaMode = localStorage.getItem(this.cinemaModeSettingKey) === "true";
      this.setCinemaMode();
    }
    setCinemaMode() {
      if (this.cinemaMode) {
        this.cinemaModeOn();
      } else {
        this.cinemaModeOff();
      }
    }
    toggleCinemaMode() {
      this.cinemaMode = !this.cinemaMode;
      localStorage.setItem(this.cinemaModeSettingKey, this.cinemaMode);
      this.setCinemaMode();
    }
    cinemaModeOn() {
      this.outerContainerTarget.classList.add(this.enabledClass);
      this.innerContainerTarget.classList.remove("c-video-player__wrapper");
      this.innerContainerTarget.classList.remove("l-block");
      this.innerContainerTarget.classList.remove("l-block--1080");
    }
    cinemaModeOff() {
      this.outerContainerTarget.classList.remove(this.enabledClass);
      this.innerContainerTarget.classList.add("c-video-player__wrapper");
      this.innerContainerTarget.classList.add("l-block");
      this.innerContainerTarget.classList.add("l-block--1080");
    }
  };
  __publicField(player_cinema_mode_controller_default, "targets", ["outerContainer", "innerContainer"]);
  __publicField(player_cinema_mode_controller_default, "classes", ["enabled"]);

  // ../../node_modules/@vimeo/player/dist/player.es.js
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target2, props2) {
    for (var i = 0; i < props2.length; i++) {
      var descriptor = props2[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target2, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  var isNode = typeof global !== "undefined" && {}.toString.call(global) === "[object global]";
  function getMethodName(prop, type) {
    if (prop.indexOf(type.toLowerCase()) === 0) {
      return prop;
    }
    return "".concat(type.toLowerCase()).concat(prop.substr(0, 1).toUpperCase()).concat(prop.substr(1));
  }
  function isDomElement(element) {
    return Boolean(element && element.nodeType === 1 && "nodeName" in element && element.ownerDocument && element.ownerDocument.defaultView);
  }
  function isInteger(value) {
    return !isNaN(parseFloat(value)) && isFinite(value) && Math.floor(value) == value;
  }
  function isVimeoUrl(url) {
    return /^(https?:)?\/\/((player|www)\.)?vimeo\.com(?=$|\/)/.test(url);
  }
  function isVimeoEmbed(url) {
    var expr = /^https:\/\/player\.vimeo\.com\/video\/\d+/;
    return expr.test(url);
  }
  function getVimeoUrl() {
    var oEmbedParameters2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var id = oEmbedParameters2.id;
    var url = oEmbedParameters2.url;
    var idOrUrl = id || url;
    if (!idOrUrl) {
      throw new Error("An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.");
    }
    if (isInteger(idOrUrl)) {
      return "https://vimeo.com/".concat(idOrUrl);
    }
    if (isVimeoUrl(idOrUrl)) {
      return idOrUrl.replace("http:", "https:");
    }
    if (id) {
      throw new TypeError("\u201C".concat(id, "\u201D is not a valid video id."));
    }
    throw new TypeError("\u201C".concat(idOrUrl, "\u201D is not a vimeo.com url."));
  }
  var arrayIndexOfSupport = typeof Array.prototype.indexOf !== "undefined";
  var postMessageSupport = typeof window !== "undefined" && typeof window.postMessage !== "undefined";
  if (!isNode && (!arrayIndexOfSupport || !postMessageSupport)) {
    throw new Error("Sorry, the Vimeo Player API is not available in this browser.");
  }
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function createCommonjsModule(fn, module) {
    return module = { exports: {} }, fn(module, module.exports), module.exports;
  }
  (function(self2) {
    if (self2.WeakMap) {
      return;
    }
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var hasDefine = Object.defineProperty && function() {
      try {
        return Object.defineProperty({}, "x", {
          value: 1
        }).x === 1;
      } catch (e) {
      }
    }();
    var defineProperty = function(object, name, value) {
      if (hasDefine) {
        Object.defineProperty(object, name, {
          configurable: true,
          writable: true,
          value
        });
      } else {
        object[name] = value;
      }
    };
    self2.WeakMap = function() {
      function WeakMap2() {
        if (this === void 0) {
          throw new TypeError("Constructor WeakMap requires 'new'");
        }
        defineProperty(this, "_id", genId("_WeakMap"));
        if (arguments.length > 0) {
          throw new TypeError("WeakMap iterable is not supported");
        }
      }
      defineProperty(WeakMap2.prototype, "delete", function(key) {
        checkInstance(this, "delete");
        if (!isObject2(key)) {
          return false;
        }
        var entry = key[this._id];
        if (entry && entry[0] === key) {
          delete key[this._id];
          return true;
        }
        return false;
      });
      defineProperty(WeakMap2.prototype, "get", function(key) {
        checkInstance(this, "get");
        if (!isObject2(key)) {
          return void 0;
        }
        var entry = key[this._id];
        if (entry && entry[0] === key) {
          return entry[1];
        }
        return void 0;
      });
      defineProperty(WeakMap2.prototype, "has", function(key) {
        checkInstance(this, "has");
        if (!isObject2(key)) {
          return false;
        }
        var entry = key[this._id];
        if (entry && entry[0] === key) {
          return true;
        }
        return false;
      });
      defineProperty(WeakMap2.prototype, "set", function(key, value) {
        checkInstance(this, "set");
        if (!isObject2(key)) {
          throw new TypeError("Invalid value used as weak map key");
        }
        var entry = key[this._id];
        if (entry && entry[0] === key) {
          entry[1] = value;
          return this;
        }
        defineProperty(key, this._id, [key, value]);
        return this;
      });
      function checkInstance(x, methodName) {
        if (!isObject2(x) || !hasOwnProperty2.call(x, "_id")) {
          throw new TypeError(methodName + " method called on incompatible receiver " + typeof x);
        }
      }
      function genId(prefix) {
        return prefix + "_" + rand() + "." + rand();
      }
      function rand() {
        return Math.random().toString().substring(2);
      }
      defineProperty(WeakMap2, "_polyfill", true);
      return WeakMap2;
    }();
    function isObject2(x) {
      return Object(x) === x;
    }
  })(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof commonjsGlobal !== "undefined" ? commonjsGlobal : commonjsGlobal);
  var npo_src = createCommonjsModule(function(module) {
    (function UMD(name, context, definition) {
      context[name] = context[name] || definition();
      if (module.exports) {
        module.exports = context[name];
      }
    })("Promise", typeof commonjsGlobal != "undefined" ? commonjsGlobal : commonjsGlobal, function DEF() {
      var builtInProp, cycle, scheduling_queue, ToString = Object.prototype.toString, timer = typeof setImmediate != "undefined" ? function timer2(fn) {
        return setImmediate(fn);
      } : setTimeout;
      try {
        Object.defineProperty({}, "x", {});
        builtInProp = function builtInProp2(obj, name, val, config2) {
          return Object.defineProperty(obj, name, {
            value: val,
            writable: true,
            configurable: config2 !== false
          });
        };
      } catch (err) {
        builtInProp = function builtInProp2(obj, name, val) {
          obj[name] = val;
          return obj;
        };
      }
      scheduling_queue = function Queue() {
        var first, last2, item;
        function Item(fn, self2) {
          this.fn = fn;
          this.self = self2;
          this.next = void 0;
        }
        return {
          add: function add3(fn, self2) {
            item = new Item(fn, self2);
            if (last2) {
              last2.next = item;
            } else {
              first = item;
            }
            last2 = item;
            item = void 0;
          },
          drain: function drain() {
            var f = first;
            first = last2 = cycle = void 0;
            while (f) {
              f.fn.call(f.self);
              f = f.next;
            }
          }
        };
      }();
      function schedule(fn, self2) {
        scheduling_queue.add(fn, self2);
        if (!cycle) {
          cycle = timer(scheduling_queue.drain);
        }
      }
      function isThenable(o) {
        var _then, o_type = typeof o;
        if (o != null && (o_type == "object" || o_type == "function")) {
          _then = o.then;
        }
        return typeof _then == "function" ? _then : false;
      }
      function notify() {
        for (var i = 0; i < this.chain.length; i++) {
          notifyIsolated(this, this.state === 1 ? this.chain[i].success : this.chain[i].failure, this.chain[i]);
        }
        this.chain.length = 0;
      }
      function notifyIsolated(self2, cb, chain) {
        var ret, _then;
        try {
          if (cb === false) {
            chain.reject(self2.msg);
          } else {
            if (cb === true) {
              ret = self2.msg;
            } else {
              ret = cb.call(void 0, self2.msg);
            }
            if (ret === chain.promise) {
              chain.reject(TypeError("Promise-chain cycle"));
            } else if (_then = isThenable(ret)) {
              _then.call(ret, chain.resolve, chain.reject);
            } else {
              chain.resolve(ret);
            }
          }
        } catch (err) {
          chain.reject(err);
        }
      }
      function resolve(msg) {
        var _then, self2 = this;
        if (self2.triggered) {
          return;
        }
        self2.triggered = true;
        if (self2.def) {
          self2 = self2.def;
        }
        try {
          if (_then = isThenable(msg)) {
            schedule(function() {
              var def_wrapper = new MakeDefWrapper(self2);
              try {
                _then.call(msg, function $resolve$() {
                  resolve.apply(def_wrapper, arguments);
                }, function $reject$() {
                  reject.apply(def_wrapper, arguments);
                });
              } catch (err) {
                reject.call(def_wrapper, err);
              }
            });
          } else {
            self2.msg = msg;
            self2.state = 1;
            if (self2.chain.length > 0) {
              schedule(notify, self2);
            }
          }
        } catch (err) {
          reject.call(new MakeDefWrapper(self2), err);
        }
      }
      function reject(msg) {
        var self2 = this;
        if (self2.triggered) {
          return;
        }
        self2.triggered = true;
        if (self2.def) {
          self2 = self2.def;
        }
        self2.msg = msg;
        self2.state = 2;
        if (self2.chain.length > 0) {
          schedule(notify, self2);
        }
      }
      function iteratePromises(Constructor, arr, resolver, rejecter) {
        for (var idx = 0; idx < arr.length; idx++) {
          (function IIFE(idx2) {
            Constructor.resolve(arr[idx2]).then(function $resolver$(msg) {
              resolver(idx2, msg);
            }, rejecter);
          })(idx);
        }
      }
      function MakeDefWrapper(self2) {
        this.def = self2;
        this.triggered = false;
      }
      function MakeDef(self2) {
        this.promise = self2;
        this.state = 0;
        this.triggered = false;
        this.chain = [];
        this.msg = void 0;
      }
      function Promise2(executor) {
        if (typeof executor != "function") {
          throw TypeError("Not a function");
        }
        if (this.__NPO__ !== 0) {
          throw TypeError("Not a promise");
        }
        this.__NPO__ = 1;
        var def2 = new MakeDef(this);
        this["then"] = function then(success, failure) {
          var o = {
            success: typeof success == "function" ? success : true,
            failure: typeof failure == "function" ? failure : false
          };
          o.promise = new this.constructor(function extractChain(resolve2, reject2) {
            if (typeof resolve2 != "function" || typeof reject2 != "function") {
              throw TypeError("Not a function");
            }
            o.resolve = resolve2;
            o.reject = reject2;
          });
          def2.chain.push(o);
          if (def2.state !== 0) {
            schedule(notify, def2);
          }
          return o.promise;
        };
        this["catch"] = function $catch$(failure) {
          return this.then(void 0, failure);
        };
        try {
          executor.call(void 0, function publicResolve(msg) {
            resolve.call(def2, msg);
          }, function publicReject(msg) {
            reject.call(def2, msg);
          });
        } catch (err) {
          reject.call(def2, err);
        }
      }
      var PromisePrototype = builtInProp(
        {},
        "constructor",
        Promise2,
        false
      );
      Promise2.prototype = PromisePrototype;
      builtInProp(
        PromisePrototype,
        "__NPO__",
        0,
        false
      );
      builtInProp(Promise2, "resolve", function Promise$resolve(msg) {
        var Constructor = this;
        if (msg && typeof msg == "object" && msg.__NPO__ === 1) {
          return msg;
        }
        return new Constructor(function executor(resolve2, reject2) {
          if (typeof resolve2 != "function" || typeof reject2 != "function") {
            throw TypeError("Not a function");
          }
          resolve2(msg);
        });
      });
      builtInProp(Promise2, "reject", function Promise$reject(msg) {
        return new this(function executor(resolve2, reject2) {
          if (typeof resolve2 != "function" || typeof reject2 != "function") {
            throw TypeError("Not a function");
          }
          reject2(msg);
        });
      });
      builtInProp(Promise2, "all", function Promise$all(arr) {
        var Constructor = this;
        if (ToString.call(arr) != "[object Array]") {
          return Constructor.reject(TypeError("Not an array"));
        }
        if (arr.length === 0) {
          return Constructor.resolve([]);
        }
        return new Constructor(function executor(resolve2, reject2) {
          if (typeof resolve2 != "function" || typeof reject2 != "function") {
            throw TypeError("Not a function");
          }
          var len = arr.length, msgs = Array(len), count = 0;
          iteratePromises(Constructor, arr, function resolver(idx, msg) {
            msgs[idx] = msg;
            if (++count === len) {
              resolve2(msgs);
            }
          }, reject2);
        });
      });
      builtInProp(Promise2, "race", function Promise$race(arr) {
        var Constructor = this;
        if (ToString.call(arr) != "[object Array]") {
          return Constructor.reject(TypeError("Not an array"));
        }
        return new Constructor(function executor(resolve2, reject2) {
          if (typeof resolve2 != "function" || typeof reject2 != "function") {
            throw TypeError("Not a function");
          }
          iteratePromises(Constructor, arr, function resolver(idx, msg) {
            resolve2(msg);
          }, reject2);
        });
      });
      return Promise2;
    });
  });
  var callbackMap = /* @__PURE__ */ new WeakMap();
  function storeCallback(player, name, callback) {
    var playerCallbacks = callbackMap.get(player.element) || {};
    if (!(name in playerCallbacks)) {
      playerCallbacks[name] = [];
    }
    playerCallbacks[name].push(callback);
    callbackMap.set(player.element, playerCallbacks);
  }
  function getCallbacks(player, name) {
    var playerCallbacks = callbackMap.get(player.element) || {};
    return playerCallbacks[name] || [];
  }
  function removeCallback(player, name, callback) {
    var playerCallbacks = callbackMap.get(player.element) || {};
    if (!playerCallbacks[name]) {
      return true;
    }
    if (!callback) {
      playerCallbacks[name] = [];
      callbackMap.set(player.element, playerCallbacks);
      return true;
    }
    var index2 = playerCallbacks[name].indexOf(callback);
    if (index2 !== -1) {
      playerCallbacks[name].splice(index2, 1);
    }
    callbackMap.set(player.element, playerCallbacks);
    return playerCallbacks[name] && playerCallbacks[name].length === 0;
  }
  function shiftCallbacks(player, name) {
    var playerCallbacks = getCallbacks(player, name);
    if (playerCallbacks.length < 1) {
      return false;
    }
    var callback = playerCallbacks.shift();
    removeCallback(player, name, callback);
    return callback;
  }
  function swapCallbacks(oldElement, newElement) {
    var playerCallbacks = callbackMap.get(oldElement);
    callbackMap.set(newElement, playerCallbacks);
    callbackMap.delete(oldElement);
  }
  function parseMessageData(data) {
    if (typeof data === "string") {
      try {
        data = JSON.parse(data);
      } catch (error2) {
        console.warn(error2);
        return {};
      }
    }
    return data;
  }
  function postMessage(player, method, params) {
    if (!player.element.contentWindow || !player.element.contentWindow.postMessage) {
      return;
    }
    var message = {
      method
    };
    if (params !== void 0) {
      message.value = params;
    }
    var ieVersion = parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\d+).*$/, "$1"));
    if (ieVersion >= 8 && ieVersion < 10) {
      message = JSON.stringify(message);
    }
    player.element.contentWindow.postMessage(message, player.origin);
  }
  function processData(player, data) {
    data = parseMessageData(data);
    var callbacks2 = [];
    var param;
    if (data.event) {
      if (data.event === "error") {
        var promises = getCallbacks(player, data.data.method);
        promises.forEach(function(promise) {
          var error2 = new Error(data.data.message);
          error2.name = data.data.name;
          promise.reject(error2);
          removeCallback(player, data.data.method, promise);
        });
      }
      callbacks2 = getCallbacks(player, "event:".concat(data.event));
      param = data.data;
    } else if (data.method) {
      var callback = shiftCallbacks(player, data.method);
      if (callback) {
        callbacks2.push(callback);
        param = data.value;
      }
    }
    callbacks2.forEach(function(callback2) {
      try {
        if (typeof callback2 === "function") {
          callback2.call(player, param);
          return;
        }
        callback2.resolve(param);
      } catch (e) {
      }
    });
  }
  var oEmbedParameters = ["autopause", "autoplay", "background", "byline", "color", "controls", "dnt", "height", "id", "interactive_params", "keyboard", "loop", "maxheight", "maxwidth", "muted", "playsinline", "portrait", "responsive", "speed", "texttrack", "title", "transparent", "url", "width"];
  function getOEmbedParameters(element) {
    var defaults = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return oEmbedParameters.reduce(function(params, param) {
      var value = element.getAttribute("data-vimeo-".concat(param));
      if (value || value === "") {
        params[param] = value === "" ? 1 : value;
      }
      return params;
    }, defaults);
  }
  function createEmbed(_ref, element) {
    var html = _ref.html;
    if (!element) {
      throw new TypeError("An element must be provided");
    }
    if (element.getAttribute("data-vimeo-initialized") !== null) {
      return element.querySelector("iframe");
    }
    var div = document.createElement("div");
    div.innerHTML = html;
    element.appendChild(div.firstChild);
    element.setAttribute("data-vimeo-initialized", "true");
    return element.querySelector("iframe");
  }
  function getOEmbedData(videoUrl) {
    var params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var element = arguments.length > 2 ? arguments[2] : void 0;
    return new Promise(function(resolve, reject) {
      if (!isVimeoUrl(videoUrl)) {
        throw new TypeError("\u201C".concat(videoUrl, "\u201D is not a vimeo.com url."));
      }
      var url = "https://vimeo.com/api/oembed.json?url=".concat(encodeURIComponent(videoUrl));
      for (var param in params) {
        if (params.hasOwnProperty(param)) {
          url += "&".concat(param, "=").concat(encodeURIComponent(params[param]));
        }
      }
      var xhr = "XDomainRequest" in window ? new XDomainRequest() : new XMLHttpRequest();
      xhr.open("GET", url, true);
      xhr.onload = function() {
        if (xhr.status === 404) {
          reject(new Error("\u201C".concat(videoUrl, "\u201D was not found.")));
          return;
        }
        if (xhr.status === 403) {
          reject(new Error("\u201C".concat(videoUrl, "\u201D is not embeddable.")));
          return;
        }
        try {
          var json2 = JSON.parse(xhr.responseText);
          if (json2.domain_status_code === 403) {
            createEmbed(json2, element);
            reject(new Error("\u201C".concat(videoUrl, "\u201D is not embeddable.")));
            return;
          }
          resolve(json2);
        } catch (error2) {
          reject(error2);
        }
      };
      xhr.onerror = function() {
        var status = xhr.status ? " (".concat(xhr.status, ")") : "";
        reject(new Error("There was an error fetching the embed code from Vimeo".concat(status, ".")));
      };
      xhr.send();
    });
  }
  function initializeEmbeds() {
    var parent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
    var elements = [].slice.call(parent.querySelectorAll("[data-vimeo-id], [data-vimeo-url]"));
    var handleError2 = function handleError3(error2) {
      if ("console" in window && console.error) {
        console.error("There was an error creating an embed: ".concat(error2));
      }
    };
    elements.forEach(function(element) {
      try {
        if (element.getAttribute("data-vimeo-defer") !== null) {
          return;
        }
        var params = getOEmbedParameters(element);
        var url = getVimeoUrl(params);
        getOEmbedData(url, params, element).then(function(data) {
          return createEmbed(data, element);
        }).catch(handleError2);
      } catch (error2) {
        handleError2(error2);
      }
    });
  }
  function resizeEmbeds() {
    var parent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
    if (window.VimeoPlayerResizeEmbeds_) {
      return;
    }
    window.VimeoPlayerResizeEmbeds_ = true;
    var onMessage = function onMessage2(event) {
      if (!isVimeoUrl(event.origin)) {
        return;
      }
      if (!event.data || event.data.event !== "spacechange") {
        return;
      }
      var iframes = parent.querySelectorAll("iframe");
      for (var i = 0; i < iframes.length; i++) {
        if (iframes[i].contentWindow !== event.source) {
          continue;
        }
        var space = iframes[i].parentElement;
        space.style.paddingBottom = "".concat(event.data.data[0].bottom, "px");
        break;
      }
    };
    window.addEventListener("message", onMessage);
  }
  function initAppendVideoMetadata() {
    var parent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
    if (window.VimeoSeoMetadataAppended) {
      return;
    }
    window.VimeoSeoMetadataAppended = true;
    var onMessage = function onMessage2(event) {
      if (!isVimeoUrl(event.origin)) {
        return;
      }
      var data = parseMessageData(event.data);
      if (!data || data.event !== "ready") {
        return;
      }
      var iframes = parent.querySelectorAll("iframe");
      for (var i = 0; i < iframes.length; i++) {
        var iframe = iframes[i];
        var isValidMessageSource = iframe.contentWindow === event.source;
        if (isVimeoEmbed(iframe.src) && isValidMessageSource) {
          var player = new Player(iframe);
          player.callMethod("appendVideoMetadata", window.location.href);
        }
      }
    };
    window.addEventListener("message", onMessage);
  }
  function checkUrlTimeParam() {
    var parent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
    if (window.VimeoCheckedUrlTimeParam) {
      return;
    }
    window.VimeoCheckedUrlTimeParam = true;
    var handleError2 = function handleError3(error2) {
      if ("console" in window && console.error) {
        console.error("There was an error getting video Id: ".concat(error2));
      }
    };
    var onMessage = function onMessage2(event) {
      if (!isVimeoUrl(event.origin)) {
        return;
      }
      var data = parseMessageData(event.data);
      if (!data || data.event !== "ready") {
        return;
      }
      var iframes = parent.querySelectorAll("iframe");
      for (var i = 0; i < iframes.length; i++) {
        var iframe = iframes[i];
        var isValidMessageSource = iframe.contentWindow === event.source;
        if (isVimeoEmbed(iframe.src) && isValidMessageSource) {
          (function() {
            var player = new Player(iframe);
            player.getVideoId().then(function(videoId) {
              var matches2 = new RegExp("[?&]vimeo_t_".concat(videoId, "=([^&#]*)")).exec(window.location.href);
              if (matches2 && matches2[1]) {
                var sec = decodeURI(matches2[1]);
                player.setCurrentTime(sec);
              }
              return;
            }).catch(handleError2);
          })();
        }
      }
    };
    window.addEventListener("message", onMessage);
  }
  function initializeScreenfull() {
    var fn = function() {
      var val;
      var fnMap = [
        ["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"],
        ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror"],
        ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitCurrentFullScreenElement", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitfullscreenerror"],
        ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror"],
        ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]
      ];
      var i = 0;
      var l = fnMap.length;
      var ret = {};
      for (; i < l; i++) {
        val = fnMap[i];
        if (val && val[1] in document) {
          for (i = 0; i < val.length; i++) {
            ret[fnMap[0][i]] = val[i];
          }
          return ret;
        }
      }
      return false;
    }();
    var eventNameMap = {
      fullscreenchange: fn.fullscreenchange,
      fullscreenerror: fn.fullscreenerror
    };
    var screenfull2 = {
      request: function request(element) {
        return new Promise(function(resolve, reject) {
          var onFullScreenEntered = function onFullScreenEntered2() {
            screenfull2.off("fullscreenchange", onFullScreenEntered2);
            resolve();
          };
          screenfull2.on("fullscreenchange", onFullScreenEntered);
          element = element || document.documentElement;
          var returnPromise = element[fn.requestFullscreen]();
          if (returnPromise instanceof Promise) {
            returnPromise.then(onFullScreenEntered).catch(reject);
          }
        });
      },
      exit: function exit() {
        return new Promise(function(resolve, reject) {
          if (!screenfull2.isFullscreen) {
            resolve();
            return;
          }
          var onFullScreenExit = function onFullScreenExit2() {
            screenfull2.off("fullscreenchange", onFullScreenExit2);
            resolve();
          };
          screenfull2.on("fullscreenchange", onFullScreenExit);
          var returnPromise = document[fn.exitFullscreen]();
          if (returnPromise instanceof Promise) {
            returnPromise.then(onFullScreenExit).catch(reject);
          }
        });
      },
      on: function on(event, callback) {
        var eventName = eventNameMap[event];
        if (eventName) {
          document.addEventListener(eventName, callback);
        }
      },
      off: function off(event, callback) {
        var eventName = eventNameMap[event];
        if (eventName) {
          document.removeEventListener(eventName, callback);
        }
      }
    };
    Object.defineProperties(screenfull2, {
      isFullscreen: {
        get: function get2() {
          return Boolean(document[fn.fullscreenElement]);
        }
      },
      element: {
        enumerable: true,
        get: function get2() {
          return document[fn.fullscreenElement];
        }
      },
      isEnabled: {
        enumerable: true,
        get: function get2() {
          return Boolean(document[fn.fullscreenEnabled]);
        }
      }
    });
    return screenfull2;
  }
  var playerMap = /* @__PURE__ */ new WeakMap();
  var readyMap = /* @__PURE__ */ new WeakMap();
  var screenfull = {};
  var Player = /* @__PURE__ */ function() {
    function Player2(element) {
      var _this = this;
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      _classCallCheck(this, Player2);
      if (window.jQuery && element instanceof jQuery) {
        if (element.length > 1 && window.console && console.warn) {
          console.warn("A jQuery object with multiple elements was passed, using the first element.");
        }
        element = element[0];
      }
      if (typeof document !== "undefined" && typeof element === "string") {
        element = document.getElementById(element);
      }
      if (!isDomElement(element)) {
        throw new TypeError("You must pass either a valid element or a valid id.");
      }
      if (element.nodeName !== "IFRAME") {
        var iframe = element.querySelector("iframe");
        if (iframe) {
          element = iframe;
        }
      }
      if (element.nodeName === "IFRAME" && !isVimeoUrl(element.getAttribute("src") || "")) {
        throw new Error("The player element passed isn\u2019t a Vimeo embed.");
      }
      if (playerMap.has(element)) {
        return playerMap.get(element);
      }
      this._window = element.ownerDocument.defaultView;
      this.element = element;
      this.origin = "*";
      var readyPromise = new npo_src(function(resolve, reject) {
        _this._onMessage = function(event) {
          if (!isVimeoUrl(event.origin) || _this.element.contentWindow !== event.source) {
            return;
          }
          if (_this.origin === "*") {
            _this.origin = event.origin;
          }
          var data = parseMessageData(event.data);
          var isError = data && data.event === "error";
          var isReadyError = isError && data.data && data.data.method === "ready";
          if (isReadyError) {
            var error2 = new Error(data.data.message);
            error2.name = data.data.name;
            reject(error2);
            return;
          }
          var isReadyEvent = data && data.event === "ready";
          var isPingResponse = data && data.method === "ping";
          if (isReadyEvent || isPingResponse) {
            _this.element.setAttribute("data-ready", "true");
            resolve();
            return;
          }
          processData(_this, data);
        };
        _this._window.addEventListener("message", _this._onMessage);
        if (_this.element.nodeName !== "IFRAME") {
          var params = getOEmbedParameters(element, options);
          var url = getVimeoUrl(params);
          getOEmbedData(url, params, element).then(function(data) {
            var iframe2 = createEmbed(data, element);
            _this.element = iframe2;
            _this._originalElement = element;
            swapCallbacks(element, iframe2);
            playerMap.set(_this.element, _this);
            return data;
          }).catch(reject);
        }
      });
      readyMap.set(this, readyPromise);
      playerMap.set(this.element, this);
      if (this.element.nodeName === "IFRAME") {
        postMessage(this, "ping");
      }
      if (screenfull.isEnabled) {
        var exitFullscreen = function exitFullscreen2() {
          return screenfull.exit();
        };
        this.fullscreenchangeHandler = function() {
          if (screenfull.isFullscreen) {
            storeCallback(_this, "event:exitFullscreen", exitFullscreen);
          } else {
            removeCallback(_this, "event:exitFullscreen", exitFullscreen);
          }
          _this.ready().then(function() {
            postMessage(_this, "fullscreenchange", screenfull.isFullscreen);
          });
        };
        screenfull.on("fullscreenchange", this.fullscreenchangeHandler);
      }
      return this;
    }
    _createClass(Player2, [{
      key: "callMethod",
      value: function callMethod(name) {
        var _this2 = this;
        var args = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return new npo_src(function(resolve, reject) {
          return _this2.ready().then(function() {
            storeCallback(_this2, name, {
              resolve,
              reject
            });
            postMessage(_this2, name, args);
          }).catch(reject);
        });
      }
    }, {
      key: "get",
      value: function get2(name) {
        var _this3 = this;
        return new npo_src(function(resolve, reject) {
          name = getMethodName(name, "get");
          return _this3.ready().then(function() {
            storeCallback(_this3, name, {
              resolve,
              reject
            });
            postMessage(_this3, name);
          }).catch(reject);
        });
      }
    }, {
      key: "set",
      value: function set3(name, value) {
        var _this4 = this;
        return new npo_src(function(resolve, reject) {
          name = getMethodName(name, "set");
          if (value === void 0 || value === null) {
            throw new TypeError("There must be a value to set.");
          }
          return _this4.ready().then(function() {
            storeCallback(_this4, name, {
              resolve,
              reject
            });
            postMessage(_this4, name, value);
          }).catch(reject);
        });
      }
    }, {
      key: "on",
      value: function on(eventName, callback) {
        if (!eventName) {
          throw new TypeError("You must pass an event name.");
        }
        if (!callback) {
          throw new TypeError("You must pass a callback function.");
        }
        if (typeof callback !== "function") {
          throw new TypeError("The callback must be a function.");
        }
        var callbacks2 = getCallbacks(this, "event:".concat(eventName));
        if (callbacks2.length === 0) {
          this.callMethod("addEventListener", eventName).catch(function() {
          });
        }
        storeCallback(this, "event:".concat(eventName), callback);
      }
    }, {
      key: "off",
      value: function off(eventName, callback) {
        if (!eventName) {
          throw new TypeError("You must pass an event name.");
        }
        if (callback && typeof callback !== "function") {
          throw new TypeError("The callback must be a function.");
        }
        var lastCallback = removeCallback(this, "event:".concat(eventName), callback);
        if (lastCallback) {
          this.callMethod("removeEventListener", eventName).catch(function(e) {
          });
        }
      }
    }, {
      key: "loadVideo",
      value: function loadVideo(options) {
        return this.callMethod("loadVideo", options);
      }
    }, {
      key: "ready",
      value: function ready() {
        var readyPromise = readyMap.get(this) || new npo_src(function(resolve, reject) {
          reject(new Error("Unknown player. Probably unloaded."));
        });
        return npo_src.resolve(readyPromise);
      }
    }, {
      key: "addCuePoint",
      value: function addCuePoint(time) {
        var data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return this.callMethod("addCuePoint", {
          time,
          data
        });
      }
    }, {
      key: "removeCuePoint",
      value: function removeCuePoint(id) {
        return this.callMethod("removeCuePoint", id);
      }
    }, {
      key: "enableTextTrack",
      value: function enableTextTrack(language, kind) {
        if (!language) {
          throw new TypeError("You must pass a language.");
        }
        return this.callMethod("enableTextTrack", {
          language,
          kind
        });
      }
    }, {
      key: "disableTextTrack",
      value: function disableTextTrack() {
        return this.callMethod("disableTextTrack");
      }
    }, {
      key: "pause",
      value: function pause() {
        return this.callMethod("pause");
      }
    }, {
      key: "play",
      value: function play() {
        return this.callMethod("play");
      }
    }, {
      key: "requestFullscreen",
      value: function requestFullscreen() {
        if (screenfull.isEnabled) {
          return screenfull.request(this.element);
        }
        return this.callMethod("requestFullscreen");
      }
    }, {
      key: "exitFullscreen",
      value: function exitFullscreen() {
        if (screenfull.isEnabled) {
          return screenfull.exit();
        }
        return this.callMethod("exitFullscreen");
      }
    }, {
      key: "getFullscreen",
      value: function getFullscreen() {
        if (screenfull.isEnabled) {
          return npo_src.resolve(screenfull.isFullscreen);
        }
        return this.get("fullscreen");
      }
    }, {
      key: "requestPictureInPicture",
      value: function requestPictureInPicture() {
        return this.callMethod("requestPictureInPicture");
      }
    }, {
      key: "exitPictureInPicture",
      value: function exitPictureInPicture() {
        return this.callMethod("exitPictureInPicture");
      }
    }, {
      key: "getPictureInPicture",
      value: function getPictureInPicture() {
        return this.get("pictureInPicture");
      }
    }, {
      key: "unload",
      value: function unload() {
        return this.callMethod("unload");
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _this5 = this;
        return new npo_src(function(resolve) {
          readyMap.delete(_this5);
          playerMap.delete(_this5.element);
          if (_this5._originalElement) {
            playerMap.delete(_this5._originalElement);
            _this5._originalElement.removeAttribute("data-vimeo-initialized");
          }
          if (_this5.element && _this5.element.nodeName === "IFRAME" && _this5.element.parentNode) {
            if (_this5.element.parentNode.parentNode && _this5._originalElement && _this5._originalElement !== _this5.element.parentNode) {
              _this5.element.parentNode.parentNode.removeChild(_this5.element.parentNode);
            } else {
              _this5.element.parentNode.removeChild(_this5.element);
            }
          }
          if (_this5.element && _this5.element.nodeName === "DIV" && _this5.element.parentNode) {
            _this5.element.removeAttribute("data-vimeo-initialized");
            var iframe = _this5.element.querySelector("iframe");
            if (iframe && iframe.parentNode) {
              if (iframe.parentNode.parentNode && _this5._originalElement && _this5._originalElement !== iframe.parentNode) {
                iframe.parentNode.parentNode.removeChild(iframe.parentNode);
              } else {
                iframe.parentNode.removeChild(iframe);
              }
            }
          }
          _this5._window.removeEventListener("message", _this5._onMessage);
          if (screenfull.isEnabled) {
            screenfull.off("fullscreenchange", _this5.fullscreenchangeHandler);
          }
          resolve();
        });
      }
    }, {
      key: "getAutopause",
      value: function getAutopause() {
        return this.get("autopause");
      }
    }, {
      key: "setAutopause",
      value: function setAutopause(autopause) {
        return this.set("autopause", autopause);
      }
    }, {
      key: "getBuffered",
      value: function getBuffered() {
        return this.get("buffered");
      }
    }, {
      key: "getCameraProps",
      value: function getCameraProps() {
        return this.get("cameraProps");
      }
    }, {
      key: "setCameraProps",
      value: function setCameraProps(camera) {
        return this.set("cameraProps", camera);
      }
    }, {
      key: "getChapters",
      value: function getChapters() {
        return this.get("chapters");
      }
    }, {
      key: "getCurrentChapter",
      value: function getCurrentChapter() {
        return this.get("currentChapter");
      }
    }, {
      key: "getColor",
      value: function getColor() {
        return this.get("color");
      }
    }, {
      key: "setColor",
      value: function setColor(color) {
        return this.set("color", color);
      }
    }, {
      key: "getCuePoints",
      value: function getCuePoints() {
        return this.get("cuePoints");
      }
    }, {
      key: "getCurrentTime",
      value: function getCurrentTime() {
        return this.get("currentTime");
      }
    }, {
      key: "setCurrentTime",
      value: function setCurrentTime(currentTime) {
        return this.set("currentTime", currentTime);
      }
    }, {
      key: "getDuration",
      value: function getDuration() {
        return this.get("duration");
      }
    }, {
      key: "getEnded",
      value: function getEnded() {
        return this.get("ended");
      }
    }, {
      key: "getLoop",
      value: function getLoop() {
        return this.get("loop");
      }
    }, {
      key: "setLoop",
      value: function setLoop(loop) {
        return this.set("loop", loop);
      }
    }, {
      key: "setMuted",
      value: function setMuted(muted) {
        return this.set("muted", muted);
      }
    }, {
      key: "getMuted",
      value: function getMuted() {
        return this.get("muted");
      }
    }, {
      key: "getPaused",
      value: function getPaused() {
        return this.get("paused");
      }
    }, {
      key: "getPlaybackRate",
      value: function getPlaybackRate() {
        return this.get("playbackRate");
      }
    }, {
      key: "setPlaybackRate",
      value: function setPlaybackRate(playbackRate) {
        return this.set("playbackRate", playbackRate);
      }
    }, {
      key: "getPlayed",
      value: function getPlayed() {
        return this.get("played");
      }
    }, {
      key: "getQualities",
      value: function getQualities() {
        return this.get("qualities");
      }
    }, {
      key: "getQuality",
      value: function getQuality() {
        return this.get("quality");
      }
    }, {
      key: "setQuality",
      value: function setQuality(quality) {
        return this.set("quality", quality);
      }
    }, {
      key: "getSeekable",
      value: function getSeekable() {
        return this.get("seekable");
      }
    }, {
      key: "getSeeking",
      value: function getSeeking() {
        return this.get("seeking");
      }
    }, {
      key: "getTextTracks",
      value: function getTextTracks() {
        return this.get("textTracks");
      }
    }, {
      key: "getVideoEmbedCode",
      value: function getVideoEmbedCode() {
        return this.get("videoEmbedCode");
      }
    }, {
      key: "getVideoId",
      value: function getVideoId() {
        return this.get("videoId");
      }
    }, {
      key: "getVideoTitle",
      value: function getVideoTitle() {
        return this.get("videoTitle");
      }
    }, {
      key: "getVideoWidth",
      value: function getVideoWidth() {
        return this.get("videoWidth");
      }
    }, {
      key: "getVideoHeight",
      value: function getVideoHeight() {
        return this.get("videoHeight");
      }
    }, {
      key: "getVideoUrl",
      value: function getVideoUrl() {
        return this.get("videoUrl");
      }
    }, {
      key: "getVolume",
      value: function getVolume() {
        return this.get("volume");
      }
    }, {
      key: "setVolume",
      value: function setVolume(volume) {
        return this.set("volume", volume);
      }
    }]);
    return Player2;
  }();
  if (!isNode) {
    screenfull = initializeScreenfull();
    initializeEmbeds();
    resizeEmbeds();
    initAppendVideoMetadata();
    checkUrlTimeParam();
  }
  var player_es_default = Player;

  // application/tools/rw-player.ts
  var RWPlayer = class {
    constructor({ element, contentId, videoId, elapsedTime, authToken, betamaxBaseUrl }) {
      this.element = null;
      this.contentId = null;
      this.authToken = null;
      this.betamaxBaseUrl = null;
      this.videoId = null;
      this.vimeoId = null;
      this.player = null;
      this.videoPlaybackToken = null;
      this.progressionTimer = null;
      this.progressionInterval = 5;
      this.elapsedTime = 0;
      this.totalTime = 0;
      this.playbackRateSettingKey = "video-player-playback-rate";
      this.playbackRate = localStorage.getItem(this.playbackRateSettingKey);
      this.qualitySettingKey = "video-player-quality";
      this.quality = localStorage.getItem(this.qualitySettingKey);
      this.volumeSettingKey = "video-player-volume";
      this.volume = localStorage.getItem(this.volumeSettingKey);
      this.textTrackLanguageSettingKey = "video-player-text-track-language";
      this.textTrackLanguage = localStorage.getItem(this.textTrackLanguageSettingKey);
      this.ready = null;
      this.ended = null;
      this.loaded = null;
      this.startPlaying = null;
      this.element = element;
      this.contentId = contentId;
      this.videoId = videoId;
      this.elapsedTime = elapsedTime;
      this.authToken = authToken;
      this.betamaxBaseUrl = betamaxBaseUrl;
      this.resetCSRFToken();
      this.getVideo();
    }
    play() {
      if (this.player) {
        if (this.elapsedTime && this.elapsedTime != this.totalTime) {
          this.player.setCurrentTime(this.elapsedTime);
        }
        this.player.play();
      }
    }
    pause() {
      if (this.player) {
        this.player.pause();
      }
    }
    load() {
      if (!this.player) {
        this.element.innerHTML = "";
        this.player = new player_es_default(this.element, {
          id: this.vimeoId,
          responsive: true
        });
        this.player.on("ended", (data) => {
          clearInterval(this.progressionTimer);
          this.progressionTimer = null;
          this.elapsedTime = this.totalTime;
          this.updateProgression();
          if (this.ended) {
            this.ended();
          }
        });
        this.player.on("pause", (data) => {
          if (data.seconds === 0) {
            EventBus.$emit(FLASH_WARNING, "Your browser may have trouble autoplaying. Clicking the play button will eventually teach this browser to autoplay.");
            triggerEvent("video_autoplay_fail", "video");
          }
          clearInterval(this.progressionTimer);
          this.progressionTimer = null;
        });
        this.player.on("play", (data) => {
          clearInterval(this.progressionTimer);
          this.progressionTimer = setInterval(() => this.updateProgression(), this.progressionInterval * 1e3);
          if (this.startPlaying) {
            this.startPlaying();
          }
        });
        this.player.on("timeupdate", (data) => {
          this.elapsedTime = data.seconds;
          this.totalTime = data.duration;
          EventBus.$emit(VIDEO_PLAYBACK_TIME_CHANGE, data.seconds);
        });
        this.player.on("loaded", (data) => {
          if (this.loaded) {
            this.loaded();
          }
          if (this.playbackRate) {
            this.player.setPlaybackRate(this.playbackRate);
          }
          if (this.quality) {
            this.player.setQuality(this.quality);
          }
          if (this.volume) {
            this.player.setVolume(this.volume);
          }
          if (this.textTrackLanguage) {
            this.player.enableTextTrack(this.textTrackLanguage);
          } else {
            this.player.disableTextTrack();
          }
        });
        this.player.on("playbackratechange", (data) => {
          localStorage.setItem(this.playbackRateSettingKey, data.playbackRate);
        });
        this.player.on("qualitychange", (data) => {
          localStorage.setItem(this.qualitySettingKey, data.quality);
        });
        this.player.on("volumechange", (data) => {
          localStorage.setItem(this.volumeSettingKey, data.volume);
        });
        this.player.on("texttrackchange", (data) => {
          if (data.language) {
            localStorage.setItem(this.textTrackLanguageSettingKey, data.language);
          } else {
            localStorage.removeItem(this.textTrackLanguageSettingKey);
          }
        });
      }
      EventBus.$on(VIDEO_SET_CURRENT_TIME, (time) => {
        this.setCurrentTime(time);
      });
    }
    setCurrentTime(time) {
      var _a, _b;
      (_a = this.player) == null ? void 0 : _a.setCurrentTime(time);
      (_b = this.player) == null ? void 0 : _b.play();
    }
    unload() {
      clearInterval(this.progressionTimer);
      this.progressionTimer = null;
      if (this.player) {
        this.player.destroy();
        this.player = null;
      }
      EventBus.$off(VIDEO_SET_CURRENT_TIME, this.setCurrentTime);
    }
    getVideo() {
      Rails.ajax({
        url: `${this.betamaxBaseUrl}/videos/${this.videoId}.json`,
        type: "GET",
        dataType: "json",
        success: (data) => {
          this.vimeoId = data.video.clips[0].provider_id;
          this.getVideoPlaybackToken();
        },
        beforeSend: (xhr) => {
          xhr.setRequestHeader("Authorization", `Token ${this.authToken}`);
          return true;
        }
      });
    }
    updateProgression() {
      if (this.authToken == "") {
        return;
      }
      const data = new FormData();
      data.append("progression[content_id]", this.contentId);
      data.append("progression[progress]", this.elapsedTime);
      data.append("watch_stat[content_id]", this.contentId);
      data.append("watch_stat[seconds]", this.progressionInterval);
      data.append("video_playback_token", this.videoPlaybackToken);
      Rails.ajax({
        url: "/progressions",
        type: "POST",
        data,
        dataType: "json",
        beforeSend: () => true,
        error: (data2, status, xhr) => {
          if (data2.error === "INVALID_TOKEN") {
            this.videoPlaybackToken == null;
            this.player.pause();
            EventBus.$emit(FLASH_ERROR, "You can only stream video on one device at a time. Press play to restart playback on this device.");
          } else if (xhr.status === 422) {
            this.resetCSRFToken();
          }
        }
      });
    }
    getVideoPlaybackToken() {
      if (this.authToken == "") {
        if (this.ready) {
          this.ready();
        }
        return;
      }
      if (this.videoPlaybackToken != null) {
        return;
      }
      Rails.ajax({
        url: "/contents/begin_playback",
        type: "POST",
        dataType: "json",
        success: (data) => {
          this.videoPlaybackToken = data.video_playback_token;
          if (this.ready) {
            this.ready();
          }
        },
        error: (data, status, xhr) => {
          console.error(`There was a problem acquiring the video playback token:
${data}`);
          if (xhr.status === 422) {
            this.resetCSRFToken();
          }
        }
      });
    }
    resetCSRFToken() {
      Rails.ajax({
        url: "/csrf_token",
        type: "GET",
        dataType: "json",
        success: (data) => {
          if (data.csrf_token) {
            document.querySelector('meta[name="csrf-token"]').setAttribute("content", data.csrf_token);
          }
        },
        beforeSend: (xhr) => true
      });
    }
  };

  // controllers/player_controller.js
  var player_controller_default = class extends Controller {
    connect() {
      this.keyStartValue = 339.292;
      this.keyStep = 0.7;
      this.autoplaySettingKey = "video-player-autoplay";
      this.initializePlayer();
      this.autoplay = localStorage.getItem(this.autoplaySettingKey) === "true" || this.hasAutoplayValue && this.autoplayValue;
      localStorage.setItem(this.autoplaySettingKey, false);
    }
    disconnect() {
      if (this.rwplayer) {
        this.rwplayer.unload();
      }
      if (this.keyTimer) {
        clearInterval(this.keyTimer);
      }
    }
    play() {
      this.showPlayerView();
      this.autoplay = true;
      this.rwplayer.load();
      this.rwplayer.play();
    }
    startPlaying() {
      this.showPlayerView();
      if (this.keyTimer) {
        clearInterval(this.keyTimer);
      }
    }
    pause() {
      if (this.rwplayer) {
        this.rwplayer.pause();
      }
    }
    next() {
      if (this.keyTimer) {
        clearInterval(this.keyTimer);
      }
      if (this.hasNextLinkTarget) {
        this.nextLinkTarget.click();
        localStorage.setItem(this.autoplaySettingKey, true);
      } else {
        this.showPreloaderView();
        this.rwplayer.load();
      }
      this.rwplayer.unload();
    }
    ended() {
      this.showCompleteView();
      if (this.hasNextLinkTarget) {
        this.key = this.keyStartValue;
        this.keyTimer = setInterval(() => this.stepCountdown(), 10);
      }
    }
    stepCountdown() {
      this.key -= this.keyStep;
      this.updateSeconds();
      if (this.key <= 0) {
        this.next();
      }
    }
    updateSeconds() {
      this.secondsTextTarget.textContent = ` in ${Math.round(this.key / this.keyStep / 100)}s`;
      this.circleImageTarget.setAttribute("stroke-dashoffset", this.key);
    }
    cancelAutoplay(event) {
      event.target.classList.add("u-hide");
      this.circleImageTarget.setAttribute("stroke-dashoffset", this.keyStartValue);
      this.secondsTextTarget.textContent = "";
      if (this.keyTimer) {
        clearInterval(this.keyTimer);
      }
    }
    playerElement() {
      if (this.hasPlayerContainerTarget) {
        return this.playerContainerTarget;
      }
      if (this.hasPlayerViewTarget) {
        return this.playerViewTarget;
      }
      return null;
    }
    showPreloaderView() {
      if (this.hasPreloaderViewTarget) {
        this.preloaderViewTarget.classList.remove("u-hide");
      }
      if (this.hasPlayerViewTarget) {
        this.playerViewTarget.classList.add("u-hide");
      }
      if (this.hasCompleteViewTarget) {
        this.completeViewTarget.classList.add("u-hide");
      }
    }
    showPlayerView() {
      if (this.hasPreloaderViewTarget) {
        this.preloaderViewTarget.classList.add("u-hide");
      }
      if (this.hasPlayerViewTarget) {
        this.playerViewTarget.classList.remove("u-hide");
      }
      if (this.hasCompleteViewTarget) {
        this.completeViewTarget.classList.add("u-hide");
      }
    }
    showCompleteView() {
      if (this.hasPreloaderViewTarget) {
        this.preloaderViewTarget.classList.add("u-hide");
      }
      if (this.hasPlayerViewTarget) {
        this.playerViewTarget.classList.add("u-hide");
      }
      if (this.hasCompleteViewTarget) {
        this.completeViewTarget.classList.remove("u-hide");
      }
    }
    initializePlayer() {
      if (!this.playerElement()) {
        return;
      }
      this.rwplayer = new RWPlayer({
        element: this.playerElement(),
        contentId: this.contentIdValue,
        videoId: this.videoIdValue,
        elapsedTime: this.elapsedTimeValue,
        authToken: window.CAROLUS_ENV.USER_TOKEN,
        betamaxBaseUrl: window.CAROLUS_ENV.BETAMAX_BASE_URL
      });
      this.rwplayer.ready = () => {
        this.rwplayer.load();
      };
      this.rwplayer.startPlaying = () => {
        this.startPlaying();
      };
      this.rwplayer.loaded = () => {
        if (this.autoplay) {
          this.play();
        } else {
          this.playButtonTargets.forEach((button) => button.classList.remove("u-hide"));
        }
      };
      this.rwplayer.ended = () => {
        this.ended();
      };
    }
  };
  __publicField(player_controller_default, "targets", ["playerContainer", "playerView", "preloaderView", "completeView", "nextLink", "secondsText", "circleImage", "playButton"]);
  __publicField(player_controller_default, "values", {
    contentId: Number,
    videoId: Number,
    elapsedTime: Number,
    autoplay: Boolean
  });

  // controllers/rating_select_controller.js
  var rating_select_controller_default = class extends Controller {
    initialize() {
      this.highlightSelectedStars(this.initialValue);
    }
    select(event) {
      const rating = event.target.closest(".o-icon-button").dataset.ratingValue;
      if (this.hasFieldTarget) {
        this.fieldTarget.value = rating;
      }
      this.highlightSelectedStars(rating);
    }
    highlightSelectedStars(largestStarValue) {
      this.starTargets.forEach((element) => {
        if (element.dataset.ratingValue <= largestStarValue) {
          element.classList.add("c-rate__star--green");
        } else {
          element.classList.remove("c-rate__star--green");
        }
      });
    }
  };
  __publicField(rating_select_controller_default, "targets", ["field", "star"]);
  __publicField(rating_select_controller_default, "values", { initial: Number });

  // controllers/search_controller.js
  var import_debounce2 = __toESM(require_debounce(), 1);
  var import_ujs3 = __toESM(require_rails_ujs(), 1);
  var search_controller_default = class extends Controller {
    initialize() {
      this.loadResults = (0, import_debounce2.default)(() => {
        import_ujs3.default.fire(this.formTarget, "submit");
      }, 400);
    }
    showLoading() {
      if (this.hasLoadingTarget) {
        this.loadingTarget.classList.remove("u-hide");
      }
      if (this.hasResultsTarget) {
        this.resultsTarget.classList.add("u-hide");
      }
    }
    toggleResetFilter() {
      const data = new FormData(this.formTarget);
      const count = [...data.entries()].filter((param) => param[1]).length;
      if (count > 0) {
        this.resetButtonTarget.classList.remove("u-hide");
        if (this.hasFilterCountTarget) {
          this.filterCountTarget.innerHTML = count;
        }
      } else {
        this.resetButtonTarget.classList.add("u-hide");
      }
    }
    queryUpdated() {
      this.showLoading();
      this.loadResults();
      this.toggleResetFilter();
    }
  };
  __publicField(search_controller_default, "targets", ["form", "resetButton", "filterCount", "results", "loading"]);

  // controllers/sidebar_controller.js
  var sidebar_controller_default = class extends Controller {
    connect() {
      this.sidebarSettingKey = "video-player-show-sidebar";
      this.sidebar = window.innerWidth > 992 && localStorage.getItem(this.sidebarSettingKey) === "true";
      this.defaultSidebar();
    }
    defaultSidebar() {
      if (this.sidebar) {
        this.showSidebar();
      } else {
        this.hideSidebar();
      }
    }
    showSidebar() {
      localStorage.setItem(this.sidebarSettingKey, true);
      this.containerTarget.classList.add(this.openClass);
    }
    hideSidebar() {
      localStorage.setItem(this.sidebarSettingKey, false);
      this.containerTarget.classList.remove(this.openClass);
    }
  };
  __publicField(sidebar_controller_default, "targets", ["container"]);
  __publicField(sidebar_controller_default, "classes", ["open"]);

  // controllers/sidebar_group_controller.js
  var sidebar_group_controller_default = class extends Controller {
    connect() {
      this.header = this.element.querySelector("span");
      this.content = this.element.querySelector("ul") || this.element.querySelector("div");
      if (this.hasOpenValue && this.openValue) {
        this.header.classList.add("c-video-player__lessons-header--open");
        this.content.classList.add("c-video-player__lesson-list--open");
      }
    }
    toggle() {
      this.header.classList.toggle("c-video-player__lessons-header--open");
      this.content.classList.toggle("c-video-player__lesson-list--open");
    }
  };
  __publicField(sidebar_group_controller_default, "values", { open: Boolean });

  // controllers/sidebar_group_dropdown_controller.js
  var sidebar_group_dropdown_controller_default = class extends Controller {
    connect() {
      this.header = this.element.querySelector("span");
      this.content = this.element.querySelector("ul") || this.element.querySelector("div");
      if (this.hasOpenValue && this.openValue) {
        this.header.classList.add("c-video-player__lessons-header--open");
        this.content.classList.add("c-video-player__lesson-list-dropdown--open");
      }
    }
    toggle() {
      this.header.classList.toggle("c-video-player__lessons-header--open");
      this.content.classList.toggle("c-video-player__lesson-list-dropdown--open");
    }
  };
  __publicField(sidebar_group_dropdown_controller_default, "values", { open: Boolean });

  // controllers/sidebar_groups_controller.js
  var sidebar_groups_controller_default = class extends Controller {
    connect() {
      this.containerTargets.forEach((container) => this.checkOpenState(container));
    }
    checkOpenState(container) {
      if (container.dataset.containerStateOpen === "true") {
        this.open(container);
      }
    }
    toggleGroup(event) {
      const container = event.target.closest(".c-video-player__lessons-section");
      this.toggleClass(container);
    }
    open(container) {
      const span = container.querySelector("span");
      const ul = container.querySelector("ul");
      span.classList.add(this.openHeaderClass);
      ul.classList.add(this.openListClass);
    }
    toggleClass(container) {
      const span = container.querySelector("span");
      const ul = container.querySelector("ul");
      span.classList.toggle(this.openHeaderClass);
      ul.classList.toggle(this.openListClass);
    }
  };
  __publicField(sidebar_groups_controller_default, "targets", ["container"]);
  __publicField(sidebar_groups_controller_default, "classes", ["openHeader", "openList"]);

  // controllers/site_search_controller.js
  var import_debounce3 = __toESM(require_debounce(), 1);
  var import_ujs4 = __toESM(require_rails_ujs(), 1);
  var site_search_controller_default = class extends Controller {
    initialize() {
      this.loadResults = (0, import_debounce3.default)(() => {
        triggerEvent("global_navbar_search", "search");
        import_ujs4.default.fire(this.formTarget, "submit");
      }, 1e3);
    }
    connect() {
      this.hideSearch();
    }
    showLoading() {
      if (this.hasLoadingTarget) {
        this.loadingTarget.classList.remove("u-hide");
      }
      if (this.hasResultsTarget) {
        this.resultsTarget.classList.add("u-hide");
      }
    }
    openLibrary(event) {
      if (event.keyCode === 13) {
        turbo_es2017_esm_exports.visit(`/library?q=${this.queryTarget.value}&sort_order=relevance`);
      }
    }
    queryUpdated() {
      this.showLoading();
      this.loadResults();
    }
    showSearch() {
      const libraryQueryElement = document.getElementById("library-query");
      if (libraryQueryElement) {
        libraryQueryElement.focus();
      } else {
        if (this.hasOverlayTarget) {
          this.overlayTarget.classList.remove("u-hide");
        }
      }
    }
    hideSearch() {
      if (this.hasOverlayTarget) {
        this.overlayTarget.classList.add("u-hide");
      }
    }
  };
  __publicField(site_search_controller_default, "targets", ["overlay", "query", "results", "loading", "form"]);

  // controllers/tabber_controller.js
  var tabber_controller_default = class extends Controller {
    connect() {
      this.activateTab(0);
    }
    selectTab(event) {
      const index2 = event.target.dataset.tabIndex;
      this.activateTab(index2);
    }
    activateTab(index2) {
      this.reset();
      const tab = this.constructor.findByIndex(this.tabTargets, index2);
      const content = this.constructor.findByIndex(this.contentTargets, index2);
      tab.classList.add(this.activeClass);
      content.classList.remove(this.hideClass);
    }
    reset() {
      this.tabTargets.forEach((tab) => tab.classList.remove(this.activeClass));
      this.contentTargets.forEach((content) => content.classList.add(this.hideClass));
    }
    static findByIndex(collection, index2) {
      return collection.find((item) => item.dataset.tabIndex === index2) || collection[index2];
    }
  };
  __publicField(tabber_controller_default, "targets", ["tab", "content"]);
  __publicField(tabber_controller_default, "classes", ["active", "hide"]);

  // controllers/topics_toggle_controller.js
  var topics_toggle_controller_default = class extends Controller {
    showSidebar() {
      this.sidebarTarget.classList.remove("u-hide");
    }
    hideSidebar() {
      this.sidebarTarget.classList.add("u-hide");
    }
  };
  __publicField(topics_toggle_controller_default, "targets", ["sidebar"]);

  // controllers/transcript_controller.js
  var parseTimestamp = (tsString) => {
    const parsed = tsString.split(":").map((t) => Number(t)).reverse();
    return {
      hours: parsed[2] || 0,
      minutes: parsed[1] || 0,
      seconds: parsed[0] || 0
    };
  };
  var displayTime = (tsString) => {
    const time = parseTimestamp(tsString);
    const mins = `${time.hours * 60 + time.minutes}`.padStart(2, "0");
    const secs = time.seconds.toFixed(0).toString().padStart(2, "0");
    return `${mins}:${secs}`;
  };
  var timeInSeconds = (tsString) => {
    const time = parseTimestamp(tsString);
    return (time.hours * 3600 + time.minutes * 60 + time.seconds).toFixed(2);
  };
  var transcript_controller_default = class extends Controller {
    connect() {
      const timestamps = this.element.querySelectorAll("span[data-video-timestamp]");
      [...timestamps].forEach((timestamp) => {
        timestamp.classList.add("o-badge", "o-badge-product--highlight", "video-timestamp");
        timestamp.innerHTML = displayTime(timestamp.dataset.videoTimestamp);
        timestamp.dataset.action = "click->transcript#jump";
      });
      const headers = this.element.querySelectorAll("h1, h2, h3, h4, h5, h6");
      [...headers].forEach((hd) => {
        hd.remove();
      });
      let checkbox_id = 0;
      const timestampLists = this.element.querySelectorAll("ul, ol, p");
      [...timestampLists].forEach((tL) => {
        if (tL.nextElementSibling && tL.nextElementSibling.tagName === "PRE") {
          checkbox_id++;
          const div = document.createElement("div");
          div.classList.add("o-checkbox-toggle", "o-checkbox-toggle--dark", "l-right-0", "l-bottom-0", "o-button-tooltip");
          div.innerHTML = "<input name='codeblocks[]' type='hidden' value='' autocomplete='off'><input class='o-checkbox-toggle__input' type='checkbox' value='codeblock_' name='codeblocks[]' id='codeblock_" + checkbox_id + "'><span class='o-checkbox-toggle__indicator'></span>";
          tL.appendChild(div);
          const checkbox = document.getElementById(`codeblock_${checkbox_id}`);
          const span = document.createElement("span");
          span.classList.add("o-tooltip", "o-tooltip--dark-small");
          span.innerHTML = "Show Code";
          div.insertBefore(span, div.firstChild);
          checkbox.addEventListener("click", () => {
            if (checkbox.checked) {
              span.innerHTML = "Hide Code";
              tL.nextElementSibling.style.display = "block";
            } else {
              span.innerHTML = "Show Code";
              tL.nextElementSibling.style.display = "none";
            }
          });
        }
      });
      const transcriptElements = this.element.querySelectorAll("li, p");
      EventBus.$on(VIDEO_PLAYBACK_TIME_CHANGE, (time) => {
        this.transcriptsHighlighter(time, transcriptElements);
      });
    }
    transcriptsHighlighter(currentTime, transcriptElements) {
      let desiredIndex = [...transcriptElements].findIndex((tE) => {
        const timestamp = tE.querySelector("span[data-video-timestamp]");
        const time = parseFloat(timeInSeconds(timestamp.dataset.videoTimestamp));
        return time > currentTime;
      });
      if (desiredIndex === -1) {
        desiredIndex = transcriptElements.length;
      }
      desiredIndex -= 1;
      transcriptElements.forEach((tE, i) => {
        if (desiredIndex !== -1 && i !== desiredIndex) {
          tE.classList.remove("bg-transcript--highlighted", "bg-transcript--highlighted-typography");
          tE.querySelector("span[data-video-timestamp]").classList.remove("bg-transcript--highlighted--bubble");
        }
      });
      if (desiredIndex >= 0) {
        transcriptElements[desiredIndex].classList.add("bg-transcript--highlighted", "bg-transcript--highlighted-typography");
        transcriptElements[desiredIndex].querySelector("span[data-video-timestamp]").classList.add("bg-transcript--highlighted--bubble");
      }
    }
    jump(event) {
      const time = timeInSeconds(event.target.dataset.videoTimestamp);
      EventBus.$emit(VIDEO_SET_CURRENT_TIME, time);
    }
  };
  __publicField(transcript_controller_default, "targets", ["timestamp"]);

  // controllers/index.js
  application.register("admin--quicksight-embed", quicksight_embed_controller_default);
  application.register("admin--recommended-content", recommended_content_controller_default);
  application.register("all-checkbox", all_checkbox_controller_default);
  application.register("auto-dismiss", auto_dismiss_controller_default);
  application.register("auto-redirect", auto_redirect_controller_default);
  application.register("auto-submit", auto_submit_controller_default);
  application.register("banner", banner_controller_default);
  application.register("content-annotator", content_annotator_controller_default);
  application.register("css-toggle", css_toggle_controller_default);
  application.register("discussion", discussion_controller_default);
  application.register("dismisser", dismisser_controller_default);
  application.register("filter-toggle", filter_toggle_controller_default);
  application.register("flash", flash_controller_default);
  application.register("highlighter", highlighter_controller_default);
  application.register("max-options", max_options_controller_default);
  application.register("modal", modal_controller_default);
  application.register("new-content", new_content_controller_default);
  application.register("paywall-obfuscation", paywall_obfuscation_controller_default);
  application.register("player-cinema-mode", player_cinema_mode_controller_default);
  application.register("player", player_controller_default);
  application.register("rating-select", rating_select_controller_default);
  application.register("search", search_controller_default);
  application.register("sidebar", sidebar_controller_default);
  application.register("sidebar-group", sidebar_group_controller_default);
  application.register("sidebar-group-dropdown", sidebar_group_dropdown_controller_default);
  application.register("sidebar-groups", sidebar_groups_controller_default);
  application.register("site-search", site_search_controller_default);
  application.register("tabber", tabber_controller_default);
  application.register("topics-toggle", topics_toggle_controller_default);
  application.register("transcript", transcript_controller_default);

  // ../../node_modules/@github/details-menu-element/dist/index.js
  var DetailsMenuElement = class extends HTMLElement {
    get preload() {
      return this.hasAttribute("preload");
    }
    set preload(value) {
      if (value) {
        this.setAttribute("preload", "");
      } else {
        this.removeAttribute("preload");
      }
    }
    get src() {
      return this.getAttribute("src") || "";
    }
    set src(value) {
      this.setAttribute("src", value);
    }
    connectedCallback() {
      if (!this.hasAttribute("role"))
        this.setAttribute("role", "menu");
      const details = this.parentElement;
      if (!details)
        return;
      const summary = details.querySelector("summary");
      if (summary) {
        summary.setAttribute("aria-haspopup", "menu");
        if (!summary.hasAttribute("role"))
          summary.setAttribute("role", "button");
      }
      const subscriptions = [
        fromEvent(details, "compositionstart", (e) => trackComposition(this, e)),
        fromEvent(details, "compositionend", (e) => trackComposition(this, e)),
        fromEvent(details, "click", (e) => shouldCommit(details, e)),
        fromEvent(details, "change", (e) => shouldCommit(details, e)),
        fromEvent(details, "keydown", (e) => keydown(details, this, e)),
        fromEvent(details, "toggle", () => loadFragment(details, this), { once: true }),
        fromEvent(details, "toggle", () => closeCurrentMenu(details)),
        this.preload ? fromEvent(details, "mouseover", () => loadFragment(details, this), { once: true }) : NullSubscription,
        ...focusOnOpen(details)
      ];
      states.set(this, { subscriptions, loaded: false, isComposing: false });
    }
    disconnectedCallback() {
      const state = states.get(this);
      if (!state)
        return;
      states.delete(this);
      for (const sub of state.subscriptions) {
        sub.unsubscribe();
      }
    }
  };
  var states = /* @__PURE__ */ new WeakMap();
  var NullSubscription = {
    unsubscribe() {
    }
  };
  function fromEvent(target2, eventName, onNext, options = false) {
    target2.addEventListener(eventName, onNext, options);
    return {
      unsubscribe: () => {
        target2.removeEventListener(eventName, onNext, options);
      }
    };
  }
  function loadFragment(details, menu) {
    const src = menu.getAttribute("src");
    if (!src)
      return;
    const state = states.get(menu);
    if (!state)
      return;
    if (state.loaded)
      return;
    state.loaded = true;
    const loader = menu.querySelector("include-fragment");
    if (loader && !loader.hasAttribute("src")) {
      loader.addEventListener("loadend", () => autofocus(details));
      loader.setAttribute("src", src);
    }
  }
  function focusOnOpen(details) {
    let isMouse = false;
    const onmousedown = () => isMouse = true;
    const onkeydown = () => isMouse = false;
    const ontoggle = () => {
      if (!details.hasAttribute("open"))
        return;
      if (autofocus(details))
        return;
      if (!isMouse)
        focusFirstItem(details);
    };
    return [
      fromEvent(details, "mousedown", onmousedown),
      fromEvent(details, "keydown", onkeydown),
      fromEvent(details, "toggle", ontoggle)
    ];
  }
  function closeCurrentMenu(details) {
    if (!details.hasAttribute("open"))
      return;
    for (const menu of document.querySelectorAll("details[open] > details-menu")) {
      const opened = menu.closest("details");
      if (opened && opened !== details && !opened.contains(details)) {
        opened.removeAttribute("open");
      }
    }
  }
  function autofocus(details) {
    if (!details.hasAttribute("open"))
      return false;
    const input = details.querySelector("details-menu [autofocus]");
    if (input) {
      input.focus();
      return true;
    } else {
      return false;
    }
  }
  function focusFirstItem(details) {
    const selected = document.activeElement;
    if (selected && isMenuItem(selected) && details.contains(selected))
      return;
    const target2 = sibling(details, true);
    if (target2)
      target2.focus();
  }
  function sibling(details, next) {
    const options = Array.from(details.querySelectorAll('[role^="menuitem"]:not([hidden]):not([disabled])'));
    const selected = document.activeElement;
    const index2 = selected instanceof HTMLElement ? options.indexOf(selected) : -1;
    const found = next ? options[index2 + 1] : options[index2 - 1];
    const def2 = next ? options[0] : options[options.length - 1];
    return found || def2;
  }
  var ctrlBindings = navigator.userAgent.match(/Macintosh/);
  function shouldCommit(details, event) {
    const target2 = event.target;
    if (!(target2 instanceof Element))
      return;
    if (target2.closest("details") !== details)
      return;
    if (event.type === "click") {
      const menuitem = target2.closest('[role="menuitem"], [role="menuitemradio"]');
      if (!menuitem)
        return;
      const input = menuitem.querySelector("input");
      if (menuitem.tagName === "LABEL" && target2 === input)
        return;
      const onlyCommitOnChangeEvent = menuitem.tagName === "LABEL" && input && !input.checked;
      if (!onlyCommitOnChangeEvent) {
        commit(menuitem, details);
      }
    } else if (event.type === "change") {
      const menuitem = target2.closest('[role="menuitemradio"], [role="menuitemcheckbox"]');
      if (menuitem)
        commit(menuitem, details);
    }
  }
  function updateChecked(selected, details) {
    for (const el of details.querySelectorAll('[role="menuitemradio"], [role="menuitemcheckbox"]')) {
      const input = el.querySelector('input[type="radio"], input[type="checkbox"]');
      let checkState = (el === selected).toString();
      if (input instanceof HTMLInputElement) {
        checkState = input.indeterminate ? "mixed" : input.checked.toString();
      }
      el.setAttribute("aria-checked", checkState);
    }
  }
  function commit(selected, details) {
    if (selected.hasAttribute("disabled") || selected.getAttribute("aria-disabled") === "true")
      return;
    const menu = selected.closest("details-menu");
    if (!menu)
      return;
    const dispatched = menu.dispatchEvent(new CustomEvent("details-menu-select", {
      cancelable: true,
      detail: { relatedTarget: selected }
    }));
    if (!dispatched)
      return;
    updateLabel(selected, details);
    updateChecked(selected, details);
    if (selected.getAttribute("role") !== "menuitemcheckbox")
      close(details);
    menu.dispatchEvent(new CustomEvent("details-menu-selected", {
      detail: { relatedTarget: selected }
    }));
  }
  function keydown(details, menu, event) {
    if (!(event instanceof KeyboardEvent))
      return;
    if (details.querySelector("details[open]"))
      return;
    const state = states.get(menu);
    if (!state || state.isComposing)
      return;
    const isSummaryFocused = event.target instanceof Element && event.target.tagName === "SUMMARY";
    switch (event.key) {
      case "Escape":
        if (details.hasAttribute("open")) {
          close(details);
          event.preventDefault();
          event.stopPropagation();
        }
        break;
      case "ArrowDown":
        {
          if (isSummaryFocused && !details.hasAttribute("open")) {
            details.setAttribute("open", "");
          }
          const target2 = sibling(details, true);
          if (target2)
            target2.focus();
          event.preventDefault();
        }
        break;
      case "ArrowUp":
        {
          if (isSummaryFocused && !details.hasAttribute("open")) {
            details.setAttribute("open", "");
          }
          const target2 = sibling(details, false);
          if (target2)
            target2.focus();
          event.preventDefault();
        }
        break;
      case "n":
        {
          if (ctrlBindings && event.ctrlKey) {
            const target2 = sibling(details, true);
            if (target2)
              target2.focus();
            event.preventDefault();
          }
        }
        break;
      case "p":
        {
          if (ctrlBindings && event.ctrlKey) {
            const target2 = sibling(details, false);
            if (target2)
              target2.focus();
            event.preventDefault();
          }
        }
        break;
      case " ":
      case "Enter":
        {
          const selected = document.activeElement;
          if (selected instanceof HTMLElement && isMenuItem(selected) && selected.closest("details") === details) {
            event.preventDefault();
            event.stopPropagation();
            selected.click();
          }
        }
        break;
    }
  }
  function isMenuItem(el) {
    const role = el.getAttribute("role");
    return role === "menuitem" || role === "menuitemcheckbox" || role === "menuitemradio";
  }
  function close(details) {
    const wasOpen = details.hasAttribute("open");
    if (!wasOpen)
      return;
    details.removeAttribute("open");
    const summary = details.querySelector("summary");
    if (summary)
      summary.focus();
  }
  function updateLabel(item, details) {
    const button = details.querySelector("[data-menu-button]");
    if (!button)
      return;
    const text = labelText(item);
    if (text) {
      button.textContent = text;
    } else {
      const html = labelHTML(item);
      if (html)
        button.innerHTML = html;
    }
  }
  function labelText(el) {
    if (!el)
      return null;
    const textEl = el.hasAttribute("data-menu-button-text") ? el : el.querySelector("[data-menu-button-text]");
    if (!textEl)
      return null;
    return textEl.getAttribute("data-menu-button-text") || textEl.textContent;
  }
  function labelHTML(el) {
    if (!el)
      return null;
    const contentsEl = el.hasAttribute("data-menu-button-contents") ? el : el.querySelector("[data-menu-button-contents]");
    return contentsEl ? contentsEl.innerHTML : null;
  }
  function trackComposition(menu, event) {
    const state = states.get(menu);
    if (!state)
      return;
    state.isComposing = event.type === "compositionstart";
  }
  if (!window.customElements.get("details-menu")) {
    window.DetailsMenuElement = DetailsMenuElement;
    window.customElements.define("details-menu", DetailsMenuElement);
  }

  // application.js
  var import_ujs5 = __toESM(require_rails_ujs(), 1);

  // shared/vue-turbo.js
  var Mixin = {
    beforeMount: function beforeMount() {
      if (this === this.$root && this.$el) {
        const vue = this;
        document.addEventListener("turbo:visit", function teardown() {
          vue.$destroy();
          document.removeEventListener("turbo:visit", teardown);
        });
      }
    }
  };
  function plugin(Vue2) {
    Vue2.mixin(Mixin);
  }
  var vue_turbo_default = plugin;

  // shared/vue-mount.js
  var jsonDecodeDataAttributes = (element) => {
    const { dataset } = element;
    return Object.keys(dataset).reduce((acc, currentKey) => {
      try {
        acc[currentKey] = JSON.parse(dataset[currentKey]);
      } catch (_) {
        acc[currentKey] = dataset[currentKey];
      }
      return acc;
    }, { originalHTML: element.outerHTML });
  };
  var mountViewComponent = (domQuery, ComponentClass, container = document) => {
    const elements = container.querySelectorAll(domQuery);
    [...elements].forEach((element) => {
      new Vue({
        el: element,
        render: (h) => h(ComponentClass, { props: jsonDecodeDataAttributes(element) })
      });
    });
  };
  var vue_mount_default = mountViewComponent;

  // application/components/domainFollow/AddButton.vue
  var __vue_script__13 = Vue.extend({
    name: "AddButton",
    props: {
      domain: {
        required: true,
        type: Object
      },
      eventCategory: {
        required: false,
        type: String
      }
    },
    data() {
      return {
        interest: null,
        networkOperationInProgress: false
      };
    },
    methods: {
      handleClick() {
        this.networkOperationInProgress = true;
        const data = new FormData();
        data.append("interest[domain_id]", this.domain.id);
        Rails.ajax({
          url: "/interests",
          type: "POST",
          data,
          success: (data2) => {
            this.interest = data2;
            this.networkOperationInProgress = false;
            this.emitToggleNotification();
          }
        });
      },
      emitToggleNotification() {
        this.$emit("toggle", this.domain.id, this.interest, true);
        EventBus.$emit(FLASH_SUCCESS, `You are now following ${this.domain.name}.`, true);
        if (this.eventCategory) {
          triggerEvent(this.eventCategory, "follow");
        }
      }
    }
  });
  var __vue_render__13 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "a",
      {
        staticClass: "o-tag",
        on: {
          click: function($event) {
            return _vm.handleClick();
          }
        }
      },
      [_vm._v("\n  " + _vm._s(_vm.domain.name) + "\n")]
    );
  };
  var __vue_staticRenderFns__13 = [];
  __vue_render__13._withStripped = true;
  var __vue_inject_styles__13 = void 0;
  var __vue_scope_id__13 = void 0;
  var __vue_module_identifier__13 = void 0;
  var __vue_is_functional_template__13 = false;
  function __vue_normalize__13(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/domainFollow/AddButton.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__13 = /* @__PURE__ */ __vue_normalize__13(
    { render: __vue_render__13, staticRenderFns: __vue_staticRenderFns__13 },
    __vue_inject_styles__13,
    __vue_script__13,
    __vue_scope_id__13,
    __vue_is_functional_template__13,
    __vue_module_identifier__13,
    false,
    void 0,
    void 0,
    void 0
  );
  var AddButton_default = __vue_component__13;

  // application/components/domainFollow/ToggleButton.vue
  var __vue_script__14 = Vue.extend({
    name: "DomainToggleButton",
    props: {
      domain: {
        required: true,
        type: Object
      },
      initialInterest: {
        required: true
      },
      loggedIn: {
        type: Boolean,
        required: true
      },
      shouldShowDomainName: {
        type: Boolean,
        default: true
      },
      eventCategory: {
        required: false,
        type: String
      }
    },
    data() {
      return {
        interest: this.initialInterest,
        networkOperationInProgress: false
      };
    },
    watch: {
      initialInterest() {
        this.interest = this.initialInterest;
      }
    },
    computed: {
      following() {
        return !!this.interest && !!this.interest.id;
      },
      buttonText() {
        if (this.shouldShowDomainName) {
          return this.domain.name;
        }
        return this.following ? "Following" : "Follow";
      }
    },
    methods: {
      handleClick() {
        if (this.following) {
          this.remove();
        } else {
          this.add();
        }
      },
      add() {
        this.networkOperationInProgress = true;
        const data = new FormData();
        data.append("interest[domain_id]", this.domain.id);
        Rails.ajax({
          url: "/interests",
          type: "POST",
          data,
          success: (data2) => {
            this.interest = data2;
            this.networkOperationInProgress = false;
            this.emitToggleNotification();
          }
        });
      },
      remove() {
        this.networkOperationInProgress = true;
        Rails.ajax({
          url: `/interests/${this.interest.id}`,
          type: "DELETE",
          success: () => {
            this.interest = null;
            this.networkOperationInProgress = false;
            this.emitToggleNotification();
          }
        });
      },
      emitToggleNotification() {
        this.$emit("toggle", this.domain.id, this.interest, this.following);
        if (this.following) {
          EventBus.$emit(FLASH_SUCCESS, `You are now following ${this.domain.name}.`, true);
          triggerEvent(this.eventCategory, "follow");
        } else {
          EventBus.$emit(FLASH_SUCCESS, `You are no longer following ${this.domain.name}.`, true);
        }
      }
    },
    components: {
      ButtonContent: ButtonContent_default,
      LoginRequiredButton: LoginRequiredButton_default
    }
  });
  var __vue_render__14 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return !_vm.loggedIn ? _c(
      "LoginRequiredButton",
      { attrs: { buttonClass: "o-button--dark" } },
      [
        _c("ButtonContent", {
          attrs: {
            text: _vm.buttonText,
            iconInputClass: "o-button__icon--left o-button__icon--white",
            svgUncheckedClass: "o-button__svg--black l-button__svg-plus",
            svgUncheckedHref: "#plus--black"
          }
        })
      ],
      1
    ) : _c(
      "button",
      {
        class: _vm.following ? "o-button--green" : "o-button--dark",
        on: { click: _vm.handleClick }
      },
      [
        _c("ButtonContent", {
          attrs: {
            text: _vm.buttonText,
            checked: _vm.following,
            saving: _vm.networkOperationInProgress,
            disabled: _vm.networkOperationInProgress,
            iconInputClass: "o-button__icon--left o-button__icon--white",
            svgUncheckedClass: "o-button__svg--black l-button__svg-plus",
            svgUncheckedHref: "#plus--black",
            svgCheckedClass: "l-button__svg-checkmark o-button__svg--green",
            svgCheckedHref: "#checkmark--green"
          }
        })
      ],
      1
    );
  };
  var __vue_staticRenderFns__14 = [];
  __vue_render__14._withStripped = true;
  var __vue_inject_styles__14 = void 0;
  var __vue_scope_id__14 = void 0;
  var __vue_module_identifier__14 = void 0;
  var __vue_is_functional_template__14 = false;
  function __vue_normalize__14(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/domainFollow/ToggleButton.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__14 = /* @__PURE__ */ __vue_normalize__14(
    { render: __vue_render__14, staticRenderFns: __vue_staticRenderFns__14 },
    __vue_inject_styles__14,
    __vue_script__14,
    __vue_scope_id__14,
    __vue_is_functional_template__14,
    __vue_module_identifier__14,
    false,
    void 0,
    void 0,
    void 0
  );
  var ToggleButton_default2 = __vue_component__14;

  // application/tools/content-sliders/paging-slider.ts
  var import_debounce4 = __toESM(require_debounce(), 1);
  var Hammer = __toESM(require_hammer(), 1);

  // application/tools/content-sliders/temporal-moving-average.ts
  var TemporalMovingAverage = class {
    constructor(windowSize) {
      this.samples = [];
      this.timestamps = [];
      this.movingAverage = 0;
      this.windowSize = windowSize;
    }
    addSample(sample, timestamp) {
      this.samples.push(sample);
      this.timestamps.push(timestamp);
      this.movingAverage += sample;
      this.updateWindow(timestamp);
      return this.movingAverage;
    }
    reset() {
      this.samples = [];
      this.timestamps = [];
      this.movingAverage = 0;
    }
    updateWindow(timestamp) {
      const firstIndexToKeep = this.timestamps.findIndex((ts) => ts > timestamp - this.windowSize);
      if (firstIndexToKeep < 1) {
        return;
      }
      for (let i = 0; i < firstIndexToKeep; i += 1) {
        this.timestamps.shift();
        const sample = this.samples.shift();
        if (sample) {
          this.movingAverage -= sample;
        }
      }
    }
  };

  // application/tools/content-sliders/paging-slider.ts
  var PagingSlider = class {
    constructor(options) {
      this.transformProperty = PagingSlider.webkitOrNot();
      this.currentSlide = 0;
      this.currentWidth = 0;
      this.config = options;
      this.selector = this.config.container;
      this.innerElements = [].slice.call(this.selector.children);
      ["resizeHandler", "mouseWheelHandler", "nextPage", "previousPage"].forEach((method) => {
        this[method] = this[method].bind(this);
      });
      this.movingAverageCalculator = new TemporalMovingAverage(this.config.scrollDuration);
      this.debouncedNextPage = (0, import_debounce4.default)(
        () => this.nextPage(),
        this.config.duration,
        { leading: true, trailing: false, maxWait: 2 * this.config.duration }
      );
      this.debouncedPreviousPage = (0, import_debounce4.default)(
        () => this.previousPage(),
        this.config.duration,
        { leading: true, trailing: false, maxWait: 2 * this.config.duration }
      );
      this.sliderFrame = document.createElement("div");
      this.interactionObserver = new IntersectionObserver((entries) => {
        if (entries[0].intersectionRatio <= 0)
          return;
        this.buildSliderFrame();
      }, { root: document.documentElement });
      this.interactionObserver.observe(this.selector);
    }
    initialise() {
      this.attachEvents();
      this.selector.style.overflow = "hidden";
      this.buildSliderFrame();
    }
    static webkitOrNot() {
      const { style: style2 } = document.documentElement;
      if (typeof style2.transform === "string") {
        return "transform";
      }
      return "WebkitTransform";
    }
    get loopRequired() {
      return this.config.infinite && this.itemCount > this.itemsPerPage;
    }
    get itemWidth() {
      return this.config.itemWidth;
    }
    get itemsPerPage() {
      return Math.max(1, Math.floor(this.selector.offsetWidth / this.itemWidth));
    }
    get itemCount() {
      return this.innerElements.length;
    }
    attachEvents() {
      window.addEventListener("resize", this.resizeHandler, setPassive(true));
      const isTouchDevice = "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
      if (isTouchDevice) {
        const mc = new Hammer.Manager(this.selector, {});
        mc.add(new Hammer.Swipe({ direction: Hammer.DIRECTION_HORIZONTAL }));
        mc.on("swipeleft", this.debouncedNextPage);
        mc.on("swiperight", this.debouncedPreviousPage);
      } else {
        console.log(setPassive(true));
        this.selector.addEventListener("wheel", this.mouseWheelHandler, setPassive(true));
      }
      this.config.previousButton.addEventListener("click", this.previousPage);
      this.config.nextButton.addEventListener("click", this.nextPage);
    }
    buildSliderFrame() {
      this.currentWidth = window.innerWidth;
      if (this.innerElements.length < 1) {
        return;
      }
      const itemsToBuild = this.loopRequired ? this.itemCount + 3 * this.itemsPerPage : this.itemCount;
      this.sliderFrame.style.width = `${this.itemWidth * itemsToBuild}px`;
      this.enableTransition();
      const docFragment = document.createDocumentFragment();
      if (this.loopRequired) {
        for (let i = this.itemCount - this.itemsPerPage; i < this.itemCount; i += 1) {
          const idx = i % this.itemCount;
          const element = this.configureSlideElement(this.innerElements[idx], true);
          docFragment.appendChild(element);
        }
      }
      this.innerElements.forEach((element) => {
        const slide = this.configureSlideElement(element, false);
        docFragment.appendChild(slide);
      });
      if (this.loopRequired) {
        for (let i = 0; i < 2 * this.itemsPerPage; i += 1) {
          const idx = i % this.itemCount;
          const element = this.configureSlideElement(this.innerElements[idx], true);
          docFragment.appendChild(element);
        }
      }
      this.sliderFrame.innerHTML = "";
      this.sliderFrame.appendChild(docFragment);
      this.selector.innerHTML = "";
      this.selector.appendChild(this.sliderFrame);
      this.showHideButtons();
      this.slideToCurrent();
    }
    configureSlideElement(element, clone = false) {
      let configuredElement = element;
      if (clone) {
        configuredElement = element.cloneNode(true);
      }
      configuredElement.style.cssFloat = "left";
      return configuredElement;
    }
    showHideButtons() {
      if (this.loopRequired) {
        this.config.previousButton.classList.remove("u-hide");
        this.config.nextButton.classList.remove("u-hide");
      } else {
        this.config.previousButton.classList.add("u-hide");
        this.config.nextButton.classList.add("u-hide");
      }
    }
    enableTransition() {
      this.sliderFrame.style.webkitTransition = `all ${this.config.duration}ms ${this.config.easing}`;
      this.sliderFrame.style.transition = `all ${this.config.duration}ms ${this.config.easing}`;
    }
    disableTransition() {
      this.sliderFrame.style.webkitTransition = `all 0ms ${this.config.easing}`;
      this.sliderFrame.style.transition = `all 0ms ${this.config.easing}`;
    }
    slideToCurrent(enableTransition = false) {
      const currentSlide = this.loopRequired ? this.currentSlide + this.itemsPerPage : this.currentSlide;
      const offset = -1 * currentSlide * this.itemWidth + this.config.bleed;
      if (enableTransition) {
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            this.enableTransition();
            this.sliderFrame.style.setProperty(
              this.transformProperty,
              `translate3d(${offset}px, 0, 0)`
            );
          });
        });
      } else {
        this.sliderFrame.style.setProperty(
          this.transformProperty,
          `translate3d(${offset}px, 0, 0)`
        );
      }
    }
    previousPage() {
      if (this.innerElements.length <= this.itemsPerPage) {
        return;
      }
      const currentSlideBeforeChange = this.currentSlide;
      if (this.loopRequired) {
        const resetRequired = this.currentSlide < this.itemsPerPage;
        if (resetRequired) {
          this.disableTransition();
          const replicatedIndex = this.currentSlide + this.itemCount;
          this.currentSlide = replicatedIndex - this.itemsPerPage;
          this.resetSliderToIndex(replicatedIndex);
        } else {
          this.currentSlide -= this.itemsPerPage;
        }
      } else {
        this.currentSlide = Math.max(this.currentSlide - this.itemsPerPage, 0);
      }
      if (currentSlideBeforeChange !== this.currentSlide) {
        this.slideToCurrent(this.loopRequired);
      }
    }
    nextPage() {
      const slideCount = this.itemsPerPage;
      if (this.innerElements.length <= this.itemsPerPage) {
        return;
      }
      const currentSlideBeforeChange = this.currentSlide;
      if (this.loopRequired) {
        const resetRequired = this.currentSlide > this.itemCount - this.itemsPerPage - 1;
        if (resetRequired) {
          const replicatedIndex = this.currentSlide - this.itemCount;
          this.currentSlide = replicatedIndex + this.itemsPerPage;
          this.resetSliderToIndex(replicatedIndex);
        } else {
          this.currentSlide += slideCount;
        }
      } else {
        this.currentSlide = Math.min(
          this.currentSlide + slideCount,
          this.innerElements.length - this.itemsPerPage
        );
      }
      if (currentSlideBeforeChange !== this.currentSlide) {
        this.slideToCurrent(this.loopRequired);
      }
    }
    resetSliderToIndex(index2) {
      this.disableTransition();
      const moveToIndex = index2 + this.itemsPerPage;
      const offset = -1 * moveToIndex * this.itemWidth + this.config.bleed;
      this.sliderFrame.style.setProperty(
        this.transformProperty,
        `translate3d(${offset}px, 0, 0)`
      );
    }
    resizeHandler() {
      if (this.currentWidth === window.innerWidth) {
        return;
      }
      if (this.currentSlide + this.itemsPerPage > this.innerElements.length) {
        this.currentSlide = this.innerElements.length <= this.itemsPerPage ? 0 : this.innerElements.length - this.itemsPerPage;
      }
      this.buildSliderFrame();
    }
    mouseWheelHandler(event) {
      if (event.defaultPrevented || event.ctrlKey) {
        return true;
      }
      if (Math.abs(event.deltaY) >= Math.abs(event.deltaX)) {
        return true;
      }
      const totalHorizontalScroll = this.movingAverageCalculator.addSample(
        event.deltaX,
        event.timeStamp
      );
      if (Math.abs(totalHorizontalScroll) > this.config.scrollDistance) {
        totalHorizontalScroll > 0 ? this.debouncedNextPage() : this.debouncedPreviousPage();
        this.movingAverageCalculator.reset();
      }
      event.preventDefault();
      return false;
    }
  };

  // application/tools/content-sliders/index.js
  function configureContentSliders(containingDiv = null) {
    [...(containingDiv || document).querySelectorAll(".l-tutorial-container--slider")].forEach((container) => {
      const itemWidth = container.dataset.itemWidth || 318;
      const slides = container.querySelector(".l-tutorial-container__wrapper");
      const previousButton = container.querySelector(".o-button__icon--prev");
      const nextButton = container.querySelector(".o-button__icon--next");
      const slider = new PagingSlider({
        container: slides,
        previousButton,
        nextButton,
        duration: 600,
        easing: "cubic-bezier(0.645, 0.045, 0.355, 1)",
        infinite: true,
        bleed: 20,
        itemWidth,
        scrollDuration: 150,
        scrollDistance: 60
      });
      slider.initialise();
    });
  }

  // application/components/elements/LoadMorePagination.vue
  var import_debounce5 = __toESM(require_debounce(), 1);
  var import_last = __toESM(require_last(), 1);
  var import_throttle2 = __toESM(require_throttle(), 1);

  // application/images/artwork/file-mascot-all.svg
  var file_mascot_all_default = '<?xml version="1.0" encoding="UTF-8"?>\n<svg width="900px" height="1000px" viewBox="0 0 900 1000" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n    <!-- Generator: Sketch 49.3 (51167) - http://www.bohemiancoding.com/sketch -->\n    <title>file-mascot-all</title>\n    <desc>Created with Sketch.</desc>\n    <defs></defs>\n    <g id="file-mascot-all" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n        <g id="Group-2" transform="translate(62.000000, 17.000000)">\n            <g id="Group-3" transform="translate(0.000000, 528.000000)">\n                <g id="file-mascot-2">\n                    <polygon id="Shape" fill="#FFFFFF" fill-rule="nonzero" points="342.72 429.4 10.42 429.4 10.42 8.94 239.21 8.94 342.72 106.62"></polygon>\n                    <path d="M345.92,432.65 L263.18,434.65 L221.42,435.59 L179.42,436.44 L137.28,437.2 L95.01,437.78 C66.81,438.18 38.56,438.33 10.33,438.51 C5.32295883,438.54328 1.23400527,434.516958 1.19,429.51 L1.19,429.4 L1.04,403.12 L0.98,376.84 C0.926666667,359.32 0.926666667,341.8 0.98,324.28 L0.98,298 L1.11,271.72 L1.4,219.16 L2.14,114.05 L2.44,61.49 L2.61,8.93 C2.60999312,6.87905876 3.42609278,4.91240953 4.87820213,3.4640524 C6.33031149,2.01569526 8.29906564,1.20468668 10.35,1.21 L124.75,1.21 L239.15,0.98 C241.163739,0.974584335 243.103141,1.74032621 244.57,3.12 L296.38,51.89 L322.29,76.28 L348.18,100.78 C349.779842,102.297537 350.687135,104.404914 350.69,106.61 C350.69,133.983333 350.583333,161.373333 350.37,188.78 L350.07,229.86 L349.58,270.86 C349.186667,298.153333 348.676667,325.316667 348.05,352.35 C347.44,379.34 346.76,406.17 345.92,432.65 Z M339.5,426.23 C338.66,398.87 337.98,371.91 337.33,345.09 C336.68,318.27 336.19,291.69 335.8,265.19 L335.31,225.5 L335.01,185.89 C334.823333,159.483333 334.716667,133.073333 334.69,106.66 L337.21,112.5 L311.3,88.12 L285.45,63.65 L233.76,14.75 L239.21,16.92 L124.81,16.69 L10.41,16.69 L18.15,8.95 L18.32,61.51 L18.62,114.07 L19.36,219.18 L19.65,271.74 L19.78,298.02 L19.78,324.3 C19.8266667,341.82 19.8266667,359.34 19.78,376.86 L19.72,403.14 L19.57,429.42 L10.43,420.28 C37.59,420.46 64.71,420.61 91.9,421.01 L132.71,421.59 L173.65,422.35 L214.75,423.2 L256.07,424.14 L339.5,426.23 Z" id="Shape" fill="#000000" fill-rule="nonzero"></path>\n                    <path d="M244.18,17.52 C244.74,21.59 245.18,25.66 245.61,29.73 C246.04,33.8 246.4,37.87 246.7,41.94 C247.366667,50.08 247.863333,58.22 248.19,66.36 C248.57,74.5 248.8,82.64 248.97,90.78 C249.14,98.92 249.12,107.06 248.91,115.2 L239.65,105.94 C248.24,106.28 256.83,107.17 265.42,107.38 C274.01,107.59 282.6,107.56 291.19,107.38 C299.78,107.2 308.37,107.04 316.96,107.25 C321.26,107.43 325.55,107.41 329.85,107.9 C334.231821,108.295101 338.549811,109.218466 342.71,110.65 C343.914747,111.089381 344.895312,111.989822 345.435553,113.15284 C345.975794,114.315858 346.031359,115.645976 345.59,116.85 C345.096808,118.18462 344.04462,119.236808 342.71,119.73 C338.541796,121.177225 334.213585,122.114052 329.82,122.52 C325.52,123 321.23,122.99 316.93,123.17 C308.34,123.38 299.75,123.17 291.16,123.04 C282.57,122.91 273.98,122.78 265.39,123.04 C256.8,123.3 248.21,124.14 239.62,124.48 C234.710832,124.671555 230.574988,120.849033 230.38,115.94 L230.38,115.86 L230.38,115.22 C230.17,107.08 230.18,98.94 230.32,90.8 C230.46,82.66 230.71,74.52 231.1,66.38 C231.49,58.24 231.95,50.1 232.59,41.96 C232.9,37.89 233.28,33.82 233.68,29.75 C234.08,25.68 234.54,21.61 235.11,17.54 C235.276204,16.335507 235.914545,15.2465385 236.884336,14.5130991 C237.854127,13.7796598 239.075763,13.4619529 240.28,13.63 C242.300048,13.9158299 243.888985,15.5006926 244.18,17.52 Z" id="Shape" fill="#000000" fill-rule="nonzero"></path>\n                    <circle id="Oval" fill="#FFFFFF" fill-rule="nonzero" transform="translate(77.041724, 189.672951) rotate(-20.350000) translate(-77.041724, -189.672951) " cx="77.0417241" cy="189.672951" r="25.14"></circle>\n                    <path d="M87.26,217.23 L84.5,218.03 L81.69,218.61 C80.75,218.76 79.79,218.86 78.84,218.99 C77.89,219.12 76.92,219.07 75.96,219.1 C72.0771456,219.051665 68.2401872,218.253713 64.66,216.75 C57.2924438,213.638657 51.4471192,207.75022 48.39,200.36 C45.2556959,192.755427 45.3169747,184.208847 48.56,176.65 C51.8702384,168.949716 58.1748023,162.93041 66.02,159.98 C73.8973802,157.009343 82.6441973,157.370334 90.25,160.98 C97.7800921,164.564379 103.522391,171.065094 106.15,178.98 C108.704774,186.682347 108.085811,195.085135 104.43,202.33 C100.869278,209.346144 94.7077521,214.693071 87.26,217.23 Z M84.34,209.35 C86.851995,208.289949 89.13169,206.747502 91.05,204.81 C92.9194375,202.890434 94.3909768,200.620254 95.38,198.13 C97.2809645,193.256576 97.1803318,187.829599 95.1,183.03 C94.0923893,180.740857 92.6682198,178.658857 90.9,176.89 C89.1463232,175.161307 87.0884833,173.771333 84.83,172.79 C82.587157,171.832696 80.1870461,171.297078 77.75,171.21 C75.3215011,171.143036 72.9013542,171.522666 70.61,172.33 C68.3199426,173.174985 66.202283,174.428639 64.36,176.03 C62.5178429,177.671792 60.992586,179.637679 59.86,181.83 C58.7321628,184.070604 58.0334767,186.502439 57.8,189 C57.576345,191.550639 57.8445338,194.120498 58.59,196.57 C60.1776402,201.67478 63.7428926,205.931475 68.49,208.39 C70.913383,209.635389 73.5626758,210.380183 76.28,210.58 C76.96,210.58 77.65,210.64 78.33,210.64 C79.01,210.64 79.7,210.56 80.38,210.47 C81.06,210.38 81.73,210.21 82.38,210.03 L84.34,209.35 Z" id="Shape" fill="#000000" fill-rule="nonzero"></path>\n                    <circle id="Oval" fill="#000000" fill-rule="nonzero" transform="translate(87.913282, 189.672865) rotate(-20.350000) translate(-87.913282, -189.672865) " cx="87.9132819" cy="189.672865" r="10.86"></circle>\n                    <circle id="Oval" fill="#FFFFFF" fill-rule="nonzero" transform="translate(280.238267, 189.792086) rotate(-42.480000) translate(-280.238267, -189.792086) " cx="280.238267" cy="189.792086" r="25.14"></circle>\n                    <path d="M258.47,209.58 C255.943775,206.676596 253.971176,203.334701 252.65,199.72 C251.294381,196.114199 250.645905,192.281058 250.74,188.43 C250.970859,180.560558 254.285896,173.097235 259.97,167.65 C262.823304,164.926359 266.183495,162.789291 269.86,161.36 C273.570204,159.932471 277.52609,159.252765 281.5,159.36 C285.501599,159.468461 289.442906,160.36205 293.1,161.99 C296.763299,163.665878 300.062256,166.044117 302.81,168.99 C305.546215,171.957336 307.673119,175.433092 309.07,179.22 C310.449442,183.015134 311.061281,187.046476 310.87,191.08 C310.648116,195.107192 309.628379,199.050178 307.87,202.68 C306.106709,206.281915 303.65369,209.502777 300.65,212.16 C294.647229,217.447552 286.781306,220.118726 278.8,219.58 C274.900625,219.318374 271.0896,218.299384 267.58,216.58 C264.115856,214.863153 261.021063,212.485156 258.47,209.58 Z M264.76,203.82 C268.567677,207.755698 273.784516,210.015129 279.26,210.1 C284.595612,210.133936 289.732363,208.077081 293.57,204.37 C295.430123,202.563065 296.918157,200.409153 297.95,198.03 C298.997103,195.680387 299.581106,193.150837 299.67,190.58 C299.857655,185.408089 298.033179,180.364793 294.58,176.51 C292.867298,174.587055 290.795077,173.017602 288.48,171.89 C286.151156,170.743075 283.620137,170.063607 281.03,169.89 C275.715627,169.503828 270.461083,171.212272 266.39,174.65 C262.259417,178.228947 259.73767,183.315671 259.39,188.77 C259.199261,191.511175 259.563179,194.262668 260.46,196.86 C261.380338,199.460222 262.846505,201.833366 264.76,203.82 Z" id="Shape" fill="#000000" fill-rule="nonzero"></path>\n                    <circle id="Oval" fill="#000000" fill-rule="nonzero" transform="translate(292.228722, 191.061487) rotate(-42.480000) translate(-292.228722, -191.061487) " cx="292.228722" cy="191.061487" r="10.86"></circle>\n                    <path d="M155.07,221.57 L195.39,221.57" id="Shape" stroke="#000000" stroke-width="11.97" stroke-linecap="round" stroke-linejoin="round"></path>\n                </g>\n                <g id="file-mascot-2" transform="translate(425.000000, 0.000000)" fill-rule="nonzero">\n                    <polygon id="Shape" fill="#FFFFFF" points="342.3 429.46 10 429.46 10 9 238.79 9 342.3 106.68"></polygon>\n                    <g id="Group" transform="translate(56.000000, 158.000000)">\n                        <circle id="Oval" fill="#FFFFFF" cx="30.4469697" cy="29.9090909" r="23.7045455"></circle>\n                        <path d="M58.1287879,29.9090909 C58.0585062,37.2540477 55.2830814,44.3153326 50.3333333,49.7424242 C42.162373,58.3541217 29.5687891,61.117988 18.5425181,56.7194343 C7.51624706,52.3208806 0.282898324,41.6477378 0.282898324,29.7765152 C0.282898324,17.9052925 7.51624706,7.23214966 18.5425181,2.833596 C29.5687891,-1.56495767 42.162373,1.19890859 50.3333333,9.81060606 C55.4999096,15.207674 58.3049691,22.4397661 58.1287879,29.9090909 Z M50.2272727,29.9090909 C49.9821039,24.7779782 47.7127987,19.953321 43.9166667,16.4924242 C36.4223039,9.81645284 24.9904913,10.2615439 18.0378788,17.5 C11.3933802,24.8101302 11.6612977,36.0500255 18.6465452,43.035273 C25.6317927,50.0205204 36.871688,50.288438 44.1818182,43.6439394 C48.0831755,40.1560717 50.2710699,35.1413403 50.1742424,29.9090909 L50.2272727,29.9090909 Z" id="Shape" fill="#000000"></path>\n                        <path d="M31.6666667,28.4242424 C31.6666667,34.0767932 27.0843689,38.6590909 21.4318182,38.6590909 C15.7792674,38.6590909 11.1969697,34.0767932 11.1969697,28.4242424 C11.1969697,22.75 13.2121212,18.1893939 18.8333333,18.1893939 C24.4545455,18.1893939 31.6666667,22.8030303 31.6666667,28.4242424 Z" id="Shape" fill="#000000"></path>\n                        <circle id="Oval" fill="#FFFFFF" cx="211.545455" cy="29.9090909" r="23.7045455"></circle>\n                        <path d="M239.280303,29.9090909 C239.1006,37.2187952 236.230485,44.2052608 231.219697,49.530303 C226.073012,54.8764239 219.017725,57.965495 211.598485,58.1212121 C198.607389,58.3588896 187.108903,49.7571284 183.668698,37.2275617 C180.228493,24.6979951 185.722452,11.4306702 197.013505,5.00127224 C208.304559,-1.42812572 222.517988,0.617337972 231.537879,9.96969697 C236.650738,15.3328129 239.434107,22.500941 239.280303,29.9090909 Z M231.219697,29.9090909 C231.0657,24.7546026 228.872314,19.8719344 225.121212,16.3333333 C221.472174,12.8448273 216.592908,10.938864 211.545455,11.030303 C204.125267,11.2666566 197.528021,15.8181784 194.672655,22.6710559 C191.81729,29.5239333 193.230838,37.4132864 198.287879,42.8484848 C201.751702,46.4980125 206.516241,48.6325262 211.545455,48.7878788 C216.67796,48.9150021 221.65279,47.0089368 225.386364,43.4848485 C229.208838,40.0116983 231.369254,35.0736033 231.325758,29.9090909 L231.219697,29.9090909 Z" id="Shape" fill="#000000"></path>\n                        <path d="M212.765152,28.4242424 C212.765152,34.0767932 208.182854,38.6590909 202.530303,38.6590909 C196.877752,38.6590909 192.295455,34.0767932 192.295455,28.4242424 C192.295455,22.75 194.310606,18.1893939 199.931818,18.1893939 C205.55303,18.1893939 212.765152,22.8030303 212.765152,28.4242424 Z" id="Shape" fill="#000000"></path>\n                        <path d="M101.401515,52.1287879 L141.174242,52.1287879 C141.174242,52.1287879 138.94697,78.1666667 120.333333,76.6287879 C101.719697,75.0909091 101.401515,52.1287879 101.401515,52.1287879 Z" id="Shape" fill="#000000"></path>\n                    </g>\n                    <path d="M345.92,432.65 L263.18,434.65 L221.42,435.59 L179.42,436.44 L137.28,437.2 L95.01,437.78 C66.81,438.18 38.56,438.33 10.33,438.51 C5.32295883,438.54328 1.23400527,434.516958 1.19,429.51 L1.19,429.4 L1.04,403.12 L0.98,376.84 C0.926666667,359.32 0.926666667,341.8 0.98,324.28 L0.98,298 L1.11,271.72 L1.4,219.16 L2.14,114.05 L2.44,61.49 L2.61,8.93 C2.60999312,6.87905876 3.42609278,4.91240953 4.87820213,3.4640524 C6.33031149,2.01569526 8.29906564,1.20468668 10.35,1.21 L124.75,1.21 L239.15,0.98 C241.163739,0.974584335 243.103141,1.74032621 244.57,3.12 L296.38,51.89 L322.29,76.28 L348.18,100.78 C349.779842,102.297537 350.687135,104.404914 350.69,106.61 C350.69,133.983333 350.583333,161.373333 350.37,188.78 L350.07,229.86 L349.58,270.86 C349.186667,298.153333 348.676667,325.316667 348.05,352.35 C347.44,379.34 346.76,406.17 345.92,432.65 Z M339.5,426.23 C338.66,398.87 337.98,371.91 337.33,345.09 C336.68,318.27 336.19,291.69 335.8,265.19 L335.31,225.5 L335.01,185.89 C334.823333,159.483333 334.716667,133.073333 334.69,106.66 L337.21,112.5 L311.3,88.12 L285.45,63.65 L233.76,14.75 L239.21,16.92 L124.81,16.69 L10.41,16.69 L18.15,8.95 L18.32,61.51 L18.62,114.07 L19.36,219.18 L19.65,271.74 L19.78,298.02 L19.78,324.3 C19.8266667,341.82 19.8266667,359.34 19.78,376.86 L19.72,403.14 L19.57,429.42 L10.43,420.28 C37.59,420.46 64.71,420.61 91.9,421.01 L132.71,421.59 L173.65,422.35 L214.75,423.2 L256.07,424.14 L339.5,426.23 Z" id="Shape" fill="#000000"></path>\n                    <path d="M244.18,17.52 C244.74,21.59 245.18,25.66 245.61,29.73 C246.04,33.8 246.4,37.87 246.7,41.94 C247.366667,50.08 247.863333,58.22 248.19,66.36 C248.57,74.5 248.8,82.64 248.97,90.78 C249.14,98.92 249.12,107.06 248.91,115.2 L239.65,105.94 C248.24,106.28 256.83,107.17 265.42,107.38 C274.01,107.59 282.6,107.56 291.19,107.38 C299.78,107.2 308.37,107.04 316.96,107.25 C321.26,107.43 325.55,107.41 329.85,107.9 C334.231821,108.295101 338.549811,109.218466 342.71,110.65 C343.914747,111.089381 344.895312,111.989822 345.435553,113.15284 C345.975794,114.315858 346.031359,115.645976 345.59,116.85 C345.096808,118.18462 344.04462,119.236808 342.71,119.73 C338.541796,121.177225 334.213585,122.114052 329.82,122.52 C325.52,123 321.23,122.99 316.93,123.17 C308.34,123.38 299.75,123.17 291.16,123.04 C282.57,122.91 273.98,122.78 265.39,123.04 C256.8,123.3 248.21,124.14 239.62,124.48 C234.710832,124.671555 230.574988,120.849033 230.38,115.94 L230.38,115.86 L230.38,115.22 C230.17,107.08 230.18,98.94 230.32,90.8 C230.46,82.66 230.71,74.52 231.1,66.38 C231.49,58.24 231.95,50.1 232.59,41.96 C232.9,37.89 233.28,33.82 233.68,29.75 C234.08,25.68 234.54,21.61 235.11,17.54 C235.276204,16.335507 235.914545,15.2465385 236.884336,14.5130991 C237.854127,13.7796598 239.075763,13.4619529 240.28,13.63 C242.300048,13.9158299 243.888985,15.5006926 244.18,17.52 Z" id="Shape" fill="#000000"></path>\n                </g>\n            </g>\n            <g id="file-mascot-3" transform="translate(213.000000, 0.000000)" fill-rule="nonzero">\n                <polygon id="Shape" fill="#FFFFFF" points="342.72 428.4 10.42 428.4 10.42 7.94 239.21 7.94 342.72 105.62"></polygon>\n                <path d="M345.93,431.61 L263.23,433.68 L221.47,434.62 L179.47,435.47 L137.33,436.23 L95.06,436.81 C66.86,437.21 38.61,437.36 10.38,437.54 C5.37295883,437.57328 1.28400527,433.546958 1.24,428.54 L1.24,428.43 L1.09,402.15 L1.03,375.87 C0.976666667,358.35 0.976666667,340.83 1.03,323.31 L1.03,297.03 L1.16,270.75 L1.45,218.19 L2.19,113.08 L2.49,60.52 L2.66,7.96 C2.65999312,5.90905876 3.47609278,3.94240953 4.92820213,2.4940524 C6.38031149,1.04569526 8.34906564,0.234686681 10.4,0.24 L124.8,0.24 L239.2,0.01 C241.213739,0.00458433521 243.153141,0.770326215 244.62,2.15 L296.43,50.92 L322.34,75.31 L348.18,99.76 C349.779842,101.277537 350.687135,103.384914 350.69,105.59 C350.69,132.963333 350.583333,160.353333 350.37,187.76 L350.07,228.84 L349.58,269.84 C349.186667,297.133333 348.676667,324.296667 348.05,351.33 C347.43,378.33 346.77,405.17 345.93,431.61 Z M339.51,425.19 C338.67,397.83 337.99,370.87 337.34,344.05 C336.69,317.23 336.2,290.65 335.81,264.15 L335.32,224.46 L335.02,184.85 C334.833333,158.443333 334.726667,132.033333 334.7,105.62 L337.22,111.46 L311.31,87.08 L285.43,62.62 L233.74,13.72 L239.19,15.89 L124.79,15.66 L10.39,15.66 L18.13,7.92 L18.3,60.48 L18.6,113.04 L19.34,218.15 L19.63,270.71 L19.76,296.99 L19.76,323.27 C19.8066667,340.79 19.8066667,358.31 19.76,375.83 L19.7,402.11 L19.55,428.39 L10.41,419.25 C37.57,419.43 64.69,419.58 91.88,419.98 L132.69,420.56 L173.63,421.32 L214.73,422.17 L256.04,423.11 L339.51,425.19 Z" id="Shape" fill="#000000"></path>\n                <path d="M244.18,16.51 C244.74,20.58 245.18,24.65 245.61,28.72 C246.04,32.79 246.4,36.86 246.7,40.93 C247.366667,49.07 247.863333,57.21 248.19,65.35 C248.57,73.49 248.8,81.63 248.97,89.77 C249.14,97.91 249.12,106.05 248.91,114.19 L239.65,104.93 C248.24,105.27 256.83,106.16 265.42,106.37 C274.01,106.58 282.6,106.55 291.19,106.37 C299.78,106.19 308.37,106.03 316.96,106.24 C321.25,106.42 325.55,106.4 329.85,106.89 C334.24363,107.295656 338.571876,108.232491 342.74,109.68 C343.944747,110.119381 344.925312,111.019822 345.465553,112.18284 C346.005794,113.345858 346.061359,114.675976 345.62,115.88 C345.126808,117.21462 344.07462,118.266808 342.74,118.76 C338.571822,120.207319 334.2436,121.144149 329.85,121.55 C325.56,122.03 321.26,122.02 316.96,122.2 C308.37,122.41 299.78,122.2 291.19,122.07 C282.6,121.94 274.01,121.81 265.42,122.07 C256.83,122.33 248.24,123.17 239.65,123.51 C234.740995,123.690083 230.614359,119.858846 230.43,114.95 L230.43,114.87 L230.43,114.23 C230.22,106.09 230.23,97.95 230.37,89.81 C230.51,81.67 230.76,73.53 231.15,65.39 C231.54,57.25 232,49.11 232.64,40.97 C232.95,36.9 233.33,32.83 233.73,28.76 C234.13,24.69 234.59,20.62 235.16,16.55 C235.326204,15.345507 235.964545,14.2565385 236.934336,13.5230991 C237.904127,12.7896598 239.125763,12.4719529 240.33,12.64 C242.324339,12.9437798 243.886558,14.514114 244.18,16.51 Z" id="Shape" fill="#000000"></path>\n                <circle id="Oval" fill="#FFFFFF" transform="translate(77.052285, 188.692288) rotate(-20.350000) translate(-77.052285, -188.692288) " cx="77.0522853" cy="188.692288" r="25.14"></circle>\n                <path d="M87.27,216.23 L84.51,217.03 L81.7,217.61 C80.76,217.76 79.8,217.86 78.85,217.99 C77.9,218.12 76.93,218.07 75.97,218.1 C72.0871456,218.051665 68.2501872,217.253713 64.67,215.75 C57.3118787,212.629829 51.4778848,206.738357 48.43,199.35 C45.2956959,191.745427 45.3569747,183.198847 48.6,175.64 C51.9012079,167.936102 58.1985223,161.909601 66.04,158.95 C73.9173802,155.979343 82.6641973,156.340334 90.27,159.95 C97.8000921,163.534379 103.542391,170.035094 106.17,177.95 C108.711908,185.649073 108.085859,194.043169 104.43,201.28 C100.881871,208.313096 94.7228821,213.678881 87.27,216.23 Z M84.35,208.35 C86.861995,207.289949 89.14169,205.747502 91.06,203.81 C92.9296443,201.890599 94.4012118,199.620375 95.39,197.13 C97.2909645,192.256576 97.1903318,186.829599 95.11,182.03 C94.1023893,179.740857 92.6782198,177.658857 90.91,175.89 C89.1563232,174.161307 87.0984833,172.771333 84.84,171.79 C82.597157,170.832696 80.1970461,170.297078 77.76,170.21 C75.3315156,170.143263 72.9114098,170.522887 70.62,171.33 C68.3299426,172.174985 66.212283,173.428639 64.37,175.03 C62.5278429,176.671792 61.002586,178.637679 59.87,180.83 C58.7419425,183.070518 58.0432442,185.502395 57.81,188 C57.586345,190.550639 57.8545338,193.120498 58.6,195.57 C60.1876402,200.67478 63.7528926,204.931475 68.5,207.39 C70.9234832,208.635133 73.5727232,209.379913 76.29,209.58 C76.97,209.58 77.66,209.64 78.34,209.64 C79.02,209.64 79.71,209.56 80.39,209.47 C81.07,209.38 81.74,209.21 82.39,209.03 L84.35,208.35 Z" id="Shape" fill="#000000"></path>\n                <circle id="Oval" fill="#000000" transform="translate(84.264344, 196.224379) rotate(-20.350000) translate(-84.264344, -196.224379) " cx="84.2643441" cy="196.224379" r="10.86"></circle>\n                <circle id="Oval" fill="#FFFFFF" transform="translate(280.214508, 188.774859) rotate(-42.480000) translate(-280.214508, -188.774859) " cx="280.214508" cy="188.774859" r="25.14"></circle>\n                <path d="M258.48,208.57 C255.953775,205.666596 253.981176,202.324701 252.66,198.71 C251.304381,195.104199 250.655905,191.271058 250.75,187.42 C250.988652,179.561051 254.303069,172.109898 259.98,166.67 C262.833465,163.946564 266.193612,161.809524 269.87,160.38 C273.580204,158.952471 277.53609,158.272765 281.51,158.38 C285.511632,158.488201 289.452988,159.381802 293.11,161.01 C296.773429,162.685653 300.072428,165.063922 302.82,168.01 C305.556215,170.977336 307.683119,174.453092 309.08,178.24 C310.459442,182.035134 311.071281,186.066476 310.88,190.1 C310.658116,194.127192 309.638379,198.070178 307.88,201.7 C306.116709,205.301915 303.66369,208.522777 300.66,211.18 C294.657229,216.467552 286.791306,219.138726 278.81,218.6 C274.910583,218.338628 271.09951,217.319624 267.59,215.6 C264.123249,213.874287 261.028267,211.485953 258.48,208.57 Z M264.77,202.81 C268.577677,206.745698 273.794516,209.005129 279.27,209.09 C284.605612,209.123936 289.742363,207.067081 293.58,203.36 C295.440123,201.553065 296.928157,199.399153 297.96,197.02 C299.007103,194.670387 299.591106,192.140837 299.68,189.57 C299.867655,184.398089 298.043179,179.354793 294.59,175.5 C292.877298,173.577055 290.805077,172.007602 288.49,170.88 C286.161156,169.733075 283.630137,169.053607 281.04,168.88 C275.728945,168.51562 270.485848,170.241786 266.43,173.69 C262.299417,177.268947 259.77767,182.355671 259.43,187.81 C259.239261,190.551175 259.603179,193.302668 260.5,195.9 C261.417851,198.479768 262.873315,200.835097 264.77,202.81 Z" id="Shape" fill="#000000"></path>\n                <circle id="Oval" fill="#000000" transform="translate(275.944495, 198.299655) rotate(-42.480000) translate(-275.944495, -198.299655) " cx="275.944495" cy="198.299655" r="10.86"></circle>\n                <path d="M155.08,212.28 L197.19,212.28 C197.19,212.28 194.82,239.91 175.11,238.28 C155.4,236.65 155.08,212.28 155.08,212.28 Z" id="Shape" fill="#000000"></path>\n            </g>\n        </g>\n    </g>\n</svg>';

  // application/components/elements/EmptyState.vue
  var __vue_script__15 = Vue.extend({
    name: "EmptyState",
    props: {
      title: {
        type: String,
        default: "There's nothing here. Get started..."
      }
    },
    data() {
      return {
        codeCardLayoutImage: file_mascot_all_default
      };
    }
  });
  var __vue_render__15 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _c("div", { staticClass: "c-empty-state c-empty-state--suggestions" }, [
        _c("div", { staticClass: "l-inline-block l-relative" }, [
          _c("div", { staticClass: "c-search__no-results" }, [
            _c("img", {
              staticClass: "c-empty-state__artwork",
              attrs: { src: _vm.codeCardLayoutImage, alt: "skeleton" }
            }),
            _vm._v(" "),
            _c("h3", [_vm._v(_vm._s(_vm.title))]),
            _vm._v(" "),
            _c("h4", { staticClass: "l-margin-18--i" }, [
              _vm._v("Try our most popular categories:")
            ]),
            _vm._v(" "),
            _vm._m(0)
          ])
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "l-margin-30" }, [
          _c("p", { staticClass: "l-flex-justify-center" }, [
            _c("i", { staticClass: "o-icon-button o-icon-button--tiny" }, [
              _c(
                "svg",
                { staticClass: "o-button__svg--black l-button__svg-question" },
                [_c("use", { attrs: { "xlink:href": "#question" } })]
              )
            ]),
            _vm._v(" "),
            _vm._m(1)
          ])
        ])
      ])
    ]);
  };
  var __vue_staticRenderFns__15 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", { staticClass: "c-search__tags" }, [
        _c(
          "a",
          {
            staticClass: "o-tag",
            attrs: { href: "/library?category_ids[]=143" }
          },
          [_vm._v("Getting Started")]
        ),
        _vm._v(" "),
        _c(
          "a",
          {
            staticClass: "o-tag",
            attrs: { href: "/library?category_ids[]=158" }
          },
          [_vm._v("Machine Learning")]
        ),
        _vm._v(" "),
        _c(
          "a",
          {
            staticClass: "o-tag",
            attrs: { href: "/library?category_ids[]=159" }
          },
          [_vm._v("AR/VR")]
        ),
        _vm._v(" "),
        _c(
          "a",
          {
            staticClass: "o-tag",
            attrs: { href: "/library?difficulties[]=beginner" }
          },
          [_vm._v("Beginner")]
        ),
        _vm._v(" "),
        _c(
          "a",
          {
            staticClass: "o-tag",
            attrs: { href: "/library?difficulties[]=advanced" }
          },
          [_vm._v("Advanced")]
        ),
        _vm._v(" "),
        _c(
          "a",
          { staticClass: "o-tag", attrs: { href: "/library?domain_ids[]=1" } },
          [_vm._v("iOS")]
        ),
        _vm._v(" "),
        _c(
          "a",
          { staticClass: "o-tag", attrs: { href: "/library?domain_ids[]=2" } },
          [_vm._v("Android")]
        )
      ]);
    },
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "span",
        { staticClass: "l-font-16 l-color-grey l-margin-sides-8" },
        [
          _vm._v("Browse through all tutorials in our library "),
          _c("a", { staticClass: "l-color-green", attrs: { href: "/library" } }, [
            _vm._v("here")
          ])
        ]
      );
    }
  ];
  __vue_render__15._withStripped = true;
  var __vue_inject_styles__15 = function(inject) {
    if (!inject)
      return;
    inject("data-v-afa9961e_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "EmptyState.vue" }, media: void 0 });
  };
  var __vue_scope_id__15 = void 0;
  var __vue_module_identifier__15 = void 0;
  var __vue_is_functional_template__15 = false;
  function __vue_normalize__15(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/EmptyState.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__6() {
    const styles = __vue_create_injector__6.styles || (__vue_create_injector__6.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__15 = /* @__PURE__ */ __vue_normalize__15(
    { render: __vue_render__15, staticRenderFns: __vue_staticRenderFns__15 },
    __vue_inject_styles__15,
    __vue_script__15,
    __vue_scope_id__15,
    __vue_is_functional_template__15,
    __vue_module_identifier__15,
    false,
    __vue_create_injector__6,
    void 0,
    void 0
  );
  var EmptyState_default = __vue_component__15;

  // application/images/artwork/file-mascot.svg
  var file_mascot_default = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 65.74 83.88"><defs><style>.a{fill:#fff;}</style></defs><title>file-mascot</title><polygon class="a" points="63.84 81.68 2.23 81.68 2.23 1.89 42.63 1.89 63.84 22.66 63.84 81.68"/><path d="M298.56,273.61l-15.3.51-15.56.43c-5.21.16-10.47.22-15.72.31l-15.78.19a2.17,2.17,0,0,1-2.2-2.15v-.05l0-19.95.15-19.95c.13-13.3.25-26.6.23-39.89a1.85,1.85,0,0,1,1.84-1.85h0l40.4,0a1.9,1.9,0,0,1,1.33.54c7.07,6.92,14.18,13.8,21.21,20.76h0a1.89,1.89,0,0,1,.56,1.35l-.07,15.1c0,5-.09,10.08-.2,15.08s-.19,10-.36,14.94S298.75,268.79,298.56,273.61ZM297,272.08l-.5-14.85c-.17-4.91-.27-9.74-.36-14.57S296,233,296,228.23l-.07-14.41.57,1.36c-7.1-6.89-14.13-13.85-21.2-20.77l1.32.54-40.4,0,1.85-1.85c0,13.3.1,26.6.23,39.89l.15,19.95,0,19.95-2.2-2.2,15,.19c5,.08,10,.15,15.08.31l15.24.43Z" transform="translate(-233.95 -191.16)"/><path d="M277.52,193.63c.44,3.35.66,6.7.82,10,.09,1.67.12,3.35.16,5s0,3.35,0,5l-1.91-1.91c1.77.07,3.53.25,5.3.3s3.53,0,5.3,0,3.53-.07,5.3,0a16.69,16.69,0,0,1,5.3.71,1,1,0,0,1,0,1.87,16.69,16.69,0,0,1-5.3.71c-1.77,0-3.53,0-5.3,0s-3.53,0-5.3,0-3.53.23-5.3.3a1.83,1.83,0,0,1-1.9-1.76v-.15c0-1.67,0-3.35,0-5s.07-3.35.16-5c.16-3.35.38-6.7.82-10a.94.94,0,0,1,1.87,0Z" transform="translate(-233.95 -191.16)"/><circle class="a" cx="15.17" cy="37.32" r="4.47"/><path d="M254.34,228.48a5.63,5.63,0,0,1-1.47,3.74,5.47,5.47,0,1,1,0-7.53A5.3,5.3,0,0,1,254.34,228.48Zm-1.49,0a3.66,3.66,0,0,0-1.19-2.53,3.52,3.52,0,0,0-4.88.19,3.49,3.49,0,0,0,4.93,4.93A3.39,3.39,0,0,0,252.84,228.48Z" transform="translate(-233.95 -191.16)"/><path d="M249.35,228.2a1.93,1.93,0,1,1-3.86,0c0-1.07.38-1.93,1.44-1.93S249.35,227.14,249.35,228.2Z" transform="translate(-233.95 -191.16)"/><circle class="a" cx="49.32" cy="37.32" r="4.47"/><path d="M288.5,228.48a5.6,5.6,0,0,1-1.52,3.7,5.29,5.29,0,0,1-3.7,1.62,5.36,5.36,0,1,1,3.76-9.08A5.29,5.29,0,0,1,288.5,228.48Zm-1.52,0a3.67,3.67,0,0,0-1.15-2.56,3.61,3.61,0,0,0-2.56-1,3.57,3.57,0,0,0-2.5,6,3.6,3.6,0,0,0,2.5,1.12,3.67,3.67,0,0,0,2.61-1A3.42,3.42,0,0,0,287,228.48Z" transform="translate(-233.95 -191.16)"/><path d="M283.5,228.2a1.93,1.93,0,1,1-3.86,0c0-1.07.38-1.93,1.44-1.93S283.5,227.14,283.5,228.2Z" transform="translate(-233.95 -191.16)"/><path d="M262.5,232.67H270s-.42,4.91-3.93,4.62S262.5,232.67,262.5,232.67Z" transform="translate(-233.95 -191.16)"/></svg>';

  // application/images/artwork/file-mascot-2.svg
  var file_mascot_2_default = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 349.74 437.54"><defs><style>.a{fill:#fff;}.b{fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:11.97px;}</style></defs><title>file-mascot-2</title><polygon class="a" points="341.72 428.4 9.42 428.4 9.42 7.94 238.21 7.94 341.72 105.62 341.72 428.4"/><path d="M-1756.26,287-1839,289l-41.76.94-42,.85-42.14.76-42.27.58c-28.2.4-56.45.55-84.68.73a9.08,9.08,0,0,1-9.14-9h0v-.11l-.15-26.28-.06-26.28q-.08-26.28,0-52.56l0-26.28.13-26.28.29-52.56.74-105.11.3-52.56.17-52.56v0a7.72,7.72,0,0,1,7.74-7.72l114.4,0,114.4-.23a7.88,7.88,0,0,1,5.42,2.14l0,0,51.81,48.77,25.91,24.39L-1754-44.87h0a8.05,8.05,0,0,1,2.51,5.83q0,41.06-.32,82.17l-.3,41.08-.49,41q-.59,40.94-1.53,81.49C-1754.74,233.69-1755.42,260.52-1756.26,287Zm-6.42-6.42c-.84-27.36-1.52-54.32-2.17-81.14s-1.14-53.4-1.53-79.9l-.49-39.69-.3-39.61q-.28-39.61-.32-79.23l2.52,5.84-25.91-24.38L-1816.73-82l-51.69-48.9,5.45,2.17-114.4-.23-114.4,0,7.74-7.74.17,52.56.3,52.56.74,105.11.29,52.56.13,26.28,0,26.28q.07,26.28,0,52.56l-.06,26.28-.15,26.28-9.14-9.14c27.16.18,54.28.33,81.47.73l40.81.58,40.94.76,41.1.85,41.32.94Z" transform="translate(2101.18 144.65)"/><path d="M-1858-128.13c.56,4.07,1,8.14,1.43,12.21s.79,8.14,1.09,12.21q1,12.21,1.49,24.42c.38,8.14.61,16.28.78,24.42s.15,16.28-.06,24.42l-9.26-9.26c8.59.34,17.18,1.23,25.77,1.44s17.18.18,25.77,0,17.18-.34,25.77-.13c4.3.18,8.59.16,12.89.65A54.59,54.59,0,0,1-1759.47-35a4.83,4.83,0,0,1,2.88,6.2,4.87,4.87,0,0,1-2.88,2.88,54.62,54.62,0,0,1-12.89,2.79c-4.3.48-8.59.47-12.89.65-8.59.21-17.18,0-25.77-.13s-17.18-.26-25.77,0-17.18,1.1-25.77,1.44a8.9,8.9,0,0,1-9.24-8.54v-.08l0-.64c-.21-8.14-.2-16.28-.06-24.42s.39-16.28.78-24.42.85-16.28,1.49-24.42c.31-4.07.69-8.14,1.09-12.21s.86-8.14,1.43-12.21a4.58,4.58,0,0,1,5.17-3.91A4.59,4.59,0,0,1-1858-128.13Z" transform="translate(2101.18 144.65)"/><circle class="a" cx="-2025.12" cy="44.07" r="25.14" transform="translate(1959.44 -556.89) rotate(-20.35)"/><path d="M-2014.92,71.58l-2.76.8-2.81.58c-.94.15-1.9.25-2.85.38s-1.92.08-2.88.11a30.15,30.15,0,0,1-11.3-2.35,30.41,30.41,0,0,1-16.27-16.39,30.58,30.58,0,0,1,.17-23.71,30.81,30.81,0,0,1,17.46-16.67,31,31,0,0,1,24.23,1,30.62,30.62,0,0,1,15.9,18,30.51,30.51,0,0,1-1.72,23.35A30.16,30.16,0,0,1-2014.92,71.58Zm-2.92-7.88a20.85,20.85,0,0,0,6.71-4.54,20.33,20.33,0,0,0,4.33-6.68,19.84,19.84,0,0,0-.28-15.1,20.19,20.19,0,0,0-4.2-6.14,20,20,0,0,0-6.07-4.1,19.84,19.84,0,0,0-7.08-1.58,19.84,19.84,0,0,0-7.14,1.12,20.17,20.17,0,0,0-6.25,3.7,20.17,20.17,0,0,0-4.5,5.8,20.11,20.11,0,0,0-2.06,7.17,20,20,0,0,0,.79,7.57,20,20,0,0,0,9.9,11.82,20.3,20.3,0,0,0,7.79,2.19c.68,0,1.37.06,2.05.06s1.37-.08,2.05-.17,1.35-.26,2-.44Z" transform="translate(2101.18 144.65)"/><circle cx="-2014.25" cy="44.07" r="10.86" transform="translate(1960.12 -553.11) rotate(-20.35)"/><circle class="a" cx="-1822.02" cy="44.07" r="25.14" transform="translate(1593.24 -1074.18) rotate(-42.48)"/><path d="M-1843.71,63.93a31.49,31.49,0,0,1-5.82-9.86,30,30,0,0,1-1.91-11.29A30,30,0,0,1-1842.21,22a30.14,30.14,0,0,1,9.89-6.29,30.15,30.15,0,0,1,11.64-2,30.56,30.56,0,0,1,11.6,2.63,30.8,30.8,0,0,1,9.71,7,30.83,30.83,0,0,1,6.26,10.23,30.49,30.49,0,0,1,1.8,11.86,30.45,30.45,0,0,1-3,11.6,30.65,30.65,0,0,1-7.22,9.48,30,30,0,0,1-21.85,7.42,30.08,30.08,0,0,1-11.22-3A29.64,29.64,0,0,1-1843.71,63.93Zm6.29-5.76a20.62,20.62,0,0,0,14.5,6.28,20.41,20.41,0,0,0,14.31-5.73,19.85,19.85,0,0,0,4.38-6.34,20,20,0,0,0,1.72-7.45,20,20,0,0,0-5.09-14.07,19.75,19.75,0,0,0-6.1-4.62,19.87,19.87,0,0,0-7.45-2A20.4,20.4,0,0,0-1835.79,29a20.4,20.4,0,0,0-7,14.12,20.44,20.44,0,0,0,1.07,8.09A19.33,19.33,0,0,0-1837.42,58.17Z" transform="translate(2101.18 144.65)"/><circle cx="-1810.03" cy="45.34" r="10.86" transform="translate(1595.53 -1065.75) rotate(-42.48)"/><line class="b" x1="154.07" y1="220.57" x2="194.39" y2="220.57"/></svg>';

  // application/images/artwork/file-mascot-3.svg
  var file_mascot_3_default = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 349.74 437.54"><defs><style>.a{fill:#fff;}</style></defs><title>file-mascot-3</title><polygon class="a" points="341.72 428.4 9.42 428.4 9.42 7.94 238.21 7.94 341.72 105.62 341.72 428.4"/><path d="M-1186.5,221.66l-82.7,2.07-41.76.94-42,.85-42.14.76-42.27.58c-28.2.4-56.45.55-84.68.73a9.08,9.08,0,0,1-9.14-9h0v-.11l-.15-26.28-.06-26.28q-.08-26.28,0-52.56l0-26.28.13-26.28.29-52.56.74-105.11.3-52.56.17-52.56v0a7.72,7.72,0,0,1,7.74-7.72l114.4,0,114.4-.23a7.88,7.88,0,0,1,5.42,2.14l0,0,51.81,48.77,25.91,24.39,25.84,24.45h0a8.05,8.05,0,0,1,2.51,5.83q0,41.06-.32,82.17l-.3,41.08-.49,41q-.59,40.94-1.53,81.49C-1185,168.38-1185.66,195.22-1186.5,221.66Zm-6.42-6.42c-.84-27.36-1.52-54.32-2.17-81.14s-1.14-53.4-1.53-79.9l-.49-39.69-.3-39.61q-.28-39.61-.32-79.23l2.52,5.84-25.91-24.38L-1247-147.33l-51.69-48.9,5.45,2.17-114.4-.23-114.4,0,7.74-7.74.17,52.56.3,52.56.74,105.11.29,52.56.13,26.28,0,26.28q.07,26.28,0,52.56l-.06,26.28-.15,26.28-9.14-9.14c27.16.18,54.28.33,81.47.73l40.81.58,40.94.76,41.1.85,41.31.94Z" transform="translate(1531.43 209.95)"/><path d="M-1288.25-193.44c.56,4.07,1,8.14,1.43,12.21s.79,8.14,1.09,12.21q1,12.21,1.49,24.42c.38,8.14.61,16.28.78,24.42s.15,16.28-.06,24.42l-9.26-9.26c8.59.34,17.18,1.23,25.77,1.44s17.18.18,25.77,0,17.18-.34,25.77-.13c4.29.18,8.59.16,12.89.65a54.59,54.59,0,0,1,12.89,2.79,4.83,4.83,0,0,1,2.88,6.2,4.87,4.87,0,0,1-2.88,2.88,54.61,54.61,0,0,1-12.89,2.79c-4.29.48-8.59.47-12.89.65-8.59.21-17.18,0-25.77-.13s-17.18-.26-25.77,0-17.18,1.1-25.77,1.44A8.9,8.9,0,0,1-1302-95v-.08l0-.64c-.21-8.14-.2-16.28-.06-24.42s.39-16.28.78-24.42.85-16.28,1.49-24.42c.31-4.07.69-8.14,1.09-12.21s.86-8.14,1.43-12.21a4.58,4.58,0,0,1,5.17-3.91A4.59,4.59,0,0,1-1288.25-193.44Z" transform="translate(1531.43 209.95)"/><circle class="a" cx="-1455.36" cy="-21.23" r="25.14" transform="translate(1447.96 -297.51) rotate(-20.35)"/><path d="M-1445.16,6.28l-2.76.8-2.81.58c-.94.15-1.9.25-2.85.38s-1.92.08-2.88.11a30.15,30.15,0,0,1-11.3-2.35A30.41,30.41,0,0,1-1484-10.6a30.58,30.58,0,0,1,.17-23.71A30.81,30.81,0,0,1-1466.39-51a31,31,0,0,1,24.23,1,30.62,30.62,0,0,1,15.9,18A30.52,30.52,0,0,1-1428-8.67,30.16,30.16,0,0,1-1445.16,6.28Zm-2.92-7.88a20.85,20.85,0,0,0,6.71-4.54,20.32,20.32,0,0,0,4.33-6.68,19.84,19.84,0,0,0-.28-15.1,20.19,20.19,0,0,0-4.2-6.14,20,20,0,0,0-6.07-4.1,19.84,19.84,0,0,0-7.08-1.58,19.85,19.85,0,0,0-7.14,1.12,20.17,20.17,0,0,0-6.25,3.7,20.17,20.17,0,0,0-4.5,5.8,20.1,20.1,0,0,0-2.06,7.17,20,20,0,0,0,.79,7.57,20,20,0,0,0,9.9,11.82,20.31,20.31,0,0,0,7.79,2.19c.68,0,1.37.06,2.05.06s1.37-.08,2.05-.17,1.35-.26,2-.44Z" transform="translate(1531.43 209.95)"/><circle cx="-1448.15" cy="-13.69" r="10.86" transform="translate(1445.79 -294.54) rotate(-20.35)"/><circle class="a" cx="-1252.26" cy="-21.23" r="25.14" transform="translate(1217.11 -641.26) rotate(-42.48)"/><path d="M-1273.95-1.38a31.49,31.49,0,0,1-5.82-9.86,30,30,0,0,1-1.91-11.29,30,30,0,0,1,9.23-20.75,30.15,30.15,0,0,1,9.89-6.29,30.15,30.15,0,0,1,11.64-2,30.55,30.55,0,0,1,11.6,2.63,30.79,30.79,0,0,1,9.71,7,30.83,30.83,0,0,1,6.26,10.23,30.49,30.49,0,0,1,1.8,11.86,30.45,30.45,0,0,1-3,11.6,30.65,30.65,0,0,1-7.22,9.48,30,30,0,0,1-21.85,7.42,30.07,30.07,0,0,1-11.22-3A29.64,29.64,0,0,1-1273.95-1.38Zm6.29-5.76a20.62,20.62,0,0,0,14.5,6.28,20.41,20.41,0,0,0,14.31-5.73,19.85,19.85,0,0,0,4.38-6.34,20,20,0,0,0,1.72-7.45,20,20,0,0,0-5.09-14.07,19.75,19.75,0,0,0-6.1-4.62,19.87,19.87,0,0,0-7.45-2A20.4,20.4,0,0,0-1266-36.26a20.4,20.4,0,0,0-7,14.12,20.44,20.44,0,0,0,1.07,8.09A19.33,19.33,0,0,0-1267.66-7.14Z" transform="translate(1531.43 209.95)"/><circle cx="-1256.53" cy="-11.71" r="10.86" transform="translate(1209.56 -641.64) rotate(-42.48)"/><path d="M-1377.35,2.33h42.11s-2.37,27.63-22.08,26S-1377.35,2.33-1377.35,2.33Z" transform="translate(1531.43 209.95)"/></svg>';

  // application/components/elements/LoadingState.vue
  var __vue_script__16 = Vue.extend({
    name: "LoadingState",
    data() {
      return {
        fileMascot1Image: file_mascot_default,
        fileMascot2Image: file_mascot_2_default,
        fileMascot3Image: file_mascot_3_default
      };
    }
  });
  var __vue_render__16 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "c-empty-state c-empty-state--loader" }, [
      _c("div", { staticClass: "l-inline-block l-relative" }, [
        _c(
          "div",
          {
            staticClass: "c-search__loading l-flex-justify-center l-flex-wrap l-margin-30"
          },
          [
            _c("div", { staticClass: "c-search__loading-static" }),
            _vm._v(" "),
            _c(
              "div",
              { staticClass: "c-search__loading-animate l-margin-sides-0" },
              [
                _c("img", {
                  staticClass: "a-file-rotate--1",
                  attrs: { src: _vm.fileMascot1Image, alt: "" }
                }),
                _vm._v(" "),
                _c("img", {
                  staticClass: "a-file-rotate--2",
                  attrs: { src: _vm.fileMascot2Image, alt: "" }
                }),
                _vm._v(" "),
                _c("img", {
                  staticClass: "a-file-rotate--3",
                  attrs: { src: _vm.fileMascot3Image, alt: "" }
                })
              ]
            ),
            _vm._v(" "),
            _vm._m(0)
          ]
        )
      ])
    ]);
  };
  var __vue_staticRenderFns__16 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("h3", { staticClass: "l-margin-18 l-full-col" }, [
        _vm._v("Loading"),
        _c("span", { staticClass: "c-dot-loader" }, [
          _c("span", { staticClass: "a-dot-loader--1" }, [_vm._v(".")]),
          _c("span", { staticClass: "a-dot-loader--2" }, [_vm._v(".")]),
          _c("span", { staticClass: "a-dot-loader--3" }, [_vm._v(".")])
        ])
      ]);
    }
  ];
  __vue_render__16._withStripped = true;
  var __vue_inject_styles__16 = function(inject) {
    if (!inject)
      return;
    inject("data-v-02773daa_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "LoadingState.vue" }, media: void 0 });
  };
  var __vue_scope_id__16 = void 0;
  var __vue_module_identifier__16 = void 0;
  var __vue_is_functional_template__16 = false;
  function __vue_normalize__16(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/LoadingState.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__7() {
    const styles = __vue_create_injector__7.styles || (__vue_create_injector__7.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__16 = /* @__PURE__ */ __vue_normalize__16(
    { render: __vue_render__16, staticRenderFns: __vue_staticRenderFns__16 },
    __vue_inject_styles__16,
    __vue_script__16,
    __vue_scope_id__16,
    __vue_is_functional_template__16,
    __vue_module_identifier__16,
    false,
    __vue_create_injector__7,
    void 0,
    void 0
  );
  var LoadingState_default = __vue_component__16;

  // application/components/elements/LoadMorePagination.vue
  var __vue_script__17 = Vue.extend({
    name: "LoadMorePagination",
    props: {
      contentUrl: {
        type: String,
        required: true
      },
      urlParams: {
        type: URLSearchParams,
        default: () => new URLSearchParams()
      },
      listClass: {
        default: ""
      },
      buttonContainerClass: {
        type: String,
        default: "l-block l-block--1200 l-padding-bottom-60 l-margin-24"
      },
      buttonClass: {
        type: String,
        default: "btn-normalw bg-black-night fc-white justify-center w-100"
      },
      infiniteScroll: {
        type: Boolean,
        default: false
      },
      infiniteScrollTriggerDistance: {
        type: Number,
        default: 250
      },
      pageLimit: {
        type: Number,
        default: null
      },
      pageLimitLink: {
        type: String,
        default: null
      },
      pageLimitLinkTitle: {
        type: String,
        default: "Show All"
      }
    },
    data() {
      return {
        results: [],
        isFirstLoad: true,
        isLoading: false,
        isComplete: false,
        currentPage: 0,
        resultCount: null
      };
    },
    computed: {
      urlSearchParams() {
        const sp = new URLSearchParams(this.urlParams.toString());
        sp.set("page", this.currentPage);
        return sp;
      },
      showLoadMoreButton() {
        return !this.infiniteScroll && !this.isComplete && !this.isLoading && !this.pageLimitReached;
      },
      currentDistance: {
        cache: false,
        get() {
          const topOffset = this.$el.getBoundingClientRect().bottom;
          const viewportHeight = window.innerHeight;
          return topOffset - viewportHeight;
        }
      },
      emptyResults() {
        return this.results.length === 0 || this.results.length === 1 && this.results[0] === "";
      },
      pageLimitReached() {
        if (this.pageLimit === null) {
          return false;
        }
        return this.currentPage >= this.pageLimit;
      }
    },
    methods: {
      requestContent() {
        if (this.isComplete || this.isLoading || this.pageLimitReached) {
          return;
        }
        this.$emit("contentRequested");
        this.currentPage += 1;
        this.isLoading = true;
        Rails.ajax({
          url: this.contentUrl,
          type: "GET",
          data: this.urlSearchParams,
          success: (doc, _status, request) => {
            this.isLoading = false;
            this.resultCount = request.getResponseHeader("search-total-results") ? parseInt(request.getResponseHeader("search-total-results")) : null;
            this.isComplete = request.getResponseHeader("search-has-more") === "false" || doc.body.innerHTML === "";
            if (this.isFirstLoad) {
              this.results = [];
            }
            this.results.push(doc.body.innerHTML);
            this.isFirstLoad = false;
          },
          error: () => {
            this.reset();
            this.isComplete = true;
            this.isFirstLoad = false;
          },
          complete: () => {
            this.$nextTick(() => this.$emit("contentUpdated", (0, import_last.default)(this.$refs.results)));
          }
        });
      },
      scrollHandler: (0, import_throttle2.default)(function() {
        if (this.infiniteScroll && this.currentDistance < this.infiniteScrollTriggerDistance && !this.isLoading && !this.isComplete) {
          this.requestContent();
        }
      }, 100),
      reset() {
        this.resultCount = null;
        this.currentPage = 0;
        this.isLoading = false;
        this.results = [];
      }
    },
    watch: {
      resultCount() {
        this.$emit("resultCountUpdated", this.resultCount);
      },
      urlParams: (0, import_debounce5.default)(function(val, oldVal) {
        if (val.toString() === oldVal.toString()) {
          return;
        }
        this.reset();
        this.isFirstLoad = true;
        this.isComplete = false;
        this.requestContent();
      }, 400),
      contentUrl(val, oldVal) {
        if (val.toString() === oldVal.toString()) {
          return;
        }
        this.reset();
        this.isFirstLoad = true;
        this.isComplete = false;
        this.requestContent();
      }
    },
    mounted() {
      if (this.urlParams) {
        this.requestContent();
      }
      window.addEventListener("scroll", this.scrollHandler, setPassive(true));
    },
    destroyed() {
      window.removeEventListener("scroll", this.scrollHandler);
    },
    components: {
      EmptyState: EmptyState_default,
      LoadingState: LoadingState_default
    }
  });
  var __vue_render__17 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _vm._l(_vm.results, function(item, idx) {
          return _c("div", {
            key: idx,
            ref: "results",
            refInFor: true,
            class: _vm.listClass,
            domProps: { innerHTML: _vm._s(item) }
          });
        }),
        _vm._v(" "),
        _vm.isComplete && _vm.emptyResults ? _vm._t("noResults", function() {
          return [_c("EmptyState")];
        }) : _vm._e(),
        _vm._v(" "),
        _vm.isLoading ? _vm._t("loading", function() {
          return [_c("LoadingState")];
        }) : _vm._e(),
        _vm._v(" "),
        _vm.isComplete && !_vm.emptyResults ? _vm._t("noMoreResults") : _vm._e(),
        _vm._v(" "),
        _vm.showLoadMoreButton ? _c("div", { class: _vm.buttonContainerClass }, [
          _c(
            "button",
            { class: _vm.buttonClass, on: { click: _vm.requestContent } },
            [_vm._v("Load More...")]
          )
        ]) : _vm._e(),
        _vm._v(" "),
        _vm.pageLimitReached && _vm.pageLimitLink !== null && !_vm.emptyResults ? _c("div", { class: _vm.buttonContainerClass }, [
          _c(
            "a",
            { class: _vm.buttonClass, attrs: { href: _vm.pageLimitLink } },
            [_vm._v("\n      " + _vm._s(_vm.pageLimitLinkTitle) + "\n    ")]
          )
        ]) : _vm._e()
      ],
      2
    );
  };
  var __vue_staticRenderFns__17 = [];
  __vue_render__17._withStripped = true;
  var __vue_inject_styles__17 = function(inject) {
    if (!inject)
      return;
    inject("data-v-49a14bfd_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "LoadMorePagination.vue" }, media: void 0 });
  };
  var __vue_scope_id__17 = void 0;
  var __vue_module_identifier__17 = void 0;
  var __vue_is_functional_template__17 = false;
  function __vue_normalize__17(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/LoadMorePagination.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__8() {
    const styles = __vue_create_injector__8.styles || (__vue_create_injector__8.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__17 = /* @__PURE__ */ __vue_normalize__17(
    { render: __vue_render__17, staticRenderFns: __vue_staticRenderFns__17 },
    __vue_inject_styles__17,
    __vue_script__17,
    __vue_scope_id__17,
    __vue_is_functional_template__17,
    __vue_module_identifier__17,
    false,
    __vue_create_injector__8,
    void 0,
    void 0
  );
  var LoadMorePagination_default = __vue_component__17;

  // application/components/elements/KodecoLoadingSkeleton.vue
  var __vue_script__18 = Vue.extend({
    name: "KodecoLoadingSkeleton"
  });
  var __vue_render__18 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "display-flex align-items-center justify-content-center my-64"
      },
      [
        _c("div", { staticClass: "loading" }, [
          _c("div", { staticClass: "loading-icon" }, [
            _c(
              "svg",
              {
                attrs: {
                  width: "145",
                  height: "160",
                  viewBox: "0 0 145 160",
                  fill: "#14161D",
                  xmlns: "http://www.w3.org/2000/svg"
                }
              },
              [
                _c("g", [
                  _c("path", {
                    attrs: {
                      d: "M87.4497 64.7336H105.397C107.226 64.7309 108.979 64.0015 110.271 62.7057C111.563 61.4099 112.289 59.6536 112.289 57.8225V41.5399C112.291 39.2106 113.216 36.9772 114.861 35.3298C116.506 33.6825 118.736 32.7557 121.062 32.7529H138.106C139.933 32.7516 141.685 32.0241 142.977 30.7303C144.269 29.4364 144.996 27.682 144.997 25.8522V6.8981C144.995 5.0688 144.268 3.31505 142.976 2.02178C141.684 0.728505 139.932 0.001381 138.106 0H116.695C114.869 0.00207158 113.118 0.7295 111.826 2.0227C110.534 3.31589 109.808 5.06925 109.806 6.8981V23.1937C109.803 25.5231 108.878 27.7562 107.232 29.4031C105.587 31.0499 103.357 31.976 101.03 31.9781H83.9843C82.1575 31.9808 80.4064 32.7089 79.1149 34.0025C77.8235 35.2961 77.0971 37.0497 77.095 38.8788V55.1718C77.0923 57.4996 76.1682 59.7314 74.5253 61.3784C72.8824 63.0254 70.6545 63.9533 68.3297 63.9588H50.3718C48.5435 63.9608 46.7908 64.6897 45.499 65.9852C44.2071 67.2806 43.4819 69.0367 43.4825 70.8673V89.8188C43.4839 91.6482 44.2101 93.4022 45.5017 94.6959C46.7933 95.9897 48.5448 96.7175 50.3718 96.7196H68.3297C70.6563 96.7223 72.8869 97.649 74.532 99.2962C76.1772 100.944 77.1027 103.177 77.1054 105.507V121.8C77.1068 123.629 77.833 125.383 79.1246 126.677C80.4162 127.97 82.1677 128.698 83.9947 128.7H101.03C103.357 128.703 105.587 129.63 107.233 131.277C108.878 132.924 109.803 135.158 109.806 137.487V153.107C109.808 154.936 110.534 156.689 111.826 157.983C113.118 159.276 114.869 160.003 116.695 160.005H138.106C139.932 160.004 141.684 159.277 142.976 157.983C144.268 156.69 144.995 154.936 144.997 153.107V134.145C144.996 132.315 144.269 130.561 142.977 129.267C141.685 127.973 139.933 127.246 138.106 127.244H121.062C118.736 127.242 116.506 126.315 114.861 124.668C113.216 123.02 112.291 120.787 112.289 118.457V102.838C112.286 101.008 111.559 99.2551 110.267 97.962C108.975 96.6689 107.224 95.9415 105.397 95.9395H87.4497C85.1236 95.936 82.8937 95.0091 81.2491 93.3619C79.6045 91.7146 78.6794 89.4816 78.6766 87.1525V73.518C78.6794 71.1891 79.6046 68.9564 81.2493 67.3096C82.8939 65.6628 85.1238 64.7364 87.4497 64.7336Z",
                      fill: "#14161D"
                    }
                  }),
                  _vm._v(" "),
                  _c("path", {
                    attrs: {
                      d: "M25.5324 0H2.48576C1.11291 0 0 1.11434 0 2.48895V157.511C0 158.886 1.11291 160 2.48576 160H25.5324C26.9053 160 28.0182 158.886 28.0182 157.511V2.48895C28.0182 1.11434 26.9053 0 25.5324 0Z",
                      fill: "#14161D"
                    }
                  })
                ])
              ]
            )
          ]),
          _vm._v(" "),
          _vm._m(0)
        ])
      ]
    );
  };
  var __vue_staticRenderFns__18 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", { staticClass: "loading-progress" }, [
        _c("progress", { staticClass: "progress", attrs: { max: "100" } })
      ]);
    }
  ];
  __vue_render__18._withStripped = true;
  var __vue_inject_styles__18 = function(inject) {
    if (!inject)
      return;
    inject("data-v-f0647f8c_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "KodecoLoadingSkeleton.vue" }, media: void 0 });
  };
  var __vue_scope_id__18 = void 0;
  var __vue_module_identifier__18 = void 0;
  var __vue_is_functional_template__18 = false;
  function __vue_normalize__18(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/KodecoLoadingSkeleton.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__9() {
    const styles = __vue_create_injector__9.styles || (__vue_create_injector__9.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__18 = /* @__PURE__ */ __vue_normalize__18(
    { render: __vue_render__18, staticRenderFns: __vue_staticRenderFns__18 },
    __vue_inject_styles__18,
    __vue_script__18,
    __vue_scope_id__18,
    __vue_is_functional_template__18,
    __vue_module_identifier__18,
    false,
    __vue_create_injector__9,
    void 0,
    void 0
  );
  var KodecoLoadingSkeleton_default = __vue_component__18;

  // application/components/domainPages/App.vue
  var progressAnnotator = new progress_annotator_default();
  var bookmarksLoader = new bookmarks_loader_default();
  var __vue_script__19 = Vue.extend({
    name: "DomainPageApp",
    props: {
      pageId: {
        required: true
      }
    },
    data() {
      return {
        loggedIn: !!window.CAROLUS_ENV.USER_TOKEN
      };
    },
    computed: {
      currentPageUrl() {
        return `/pages/${this.pageId}`;
      }
    },
    methods: {
      refreshAnnotations(changedDiv) {
        this.$nextTick(() => {
          if (this.loggedIn) {
            progressAnnotator.updateDOMWithUserProgress(changedDiv);
            bookmarksLoader.updateDOMWithBookmarks(changedDiv);
          }
          configureContentSliders(changedDiv);
          event_tracking_default(changedDiv);
        });
      }
    },
    components: {
      LoadMorePagination: LoadMorePagination_default,
      KodecoLoadingSkeleton: KodecoLoadingSkeleton_default
    }
  });
  var __vue_render__19 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("LoadMorePagination", {
      attrs: { contentUrl: _vm.currentPageUrl, infiniteScroll: true },
      on: { contentUpdated: _vm.refreshAnnotations },
      scopedSlots: _vm._u([
        {
          key: "loading",
          fn: function() {
            return [_c("KodecoLoadingSkeleton")];
          },
          proxy: true
        }
      ])
    });
  };
  var __vue_staticRenderFns__19 = [];
  __vue_render__19._withStripped = true;
  var __vue_inject_styles__19 = void 0;
  var __vue_scope_id__19 = void 0;
  var __vue_module_identifier__19 = void 0;
  var __vue_is_functional_template__19 = false;
  function __vue_normalize__19(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/domainPages/App.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__19 = /* @__PURE__ */ __vue_normalize__19(
    { render: __vue_render__19, staticRenderFns: __vue_staticRenderFns__19 },
    __vue_inject_styles__19,
    __vue_script__19,
    __vue_scope_id__19,
    __vue_is_functional_template__19,
    __vue_module_identifier__19,
    false,
    void 0,
    void 0,
    void 0
  );
  var App_default2 = __vue_component__19;

  // shared/vueSelect/mixins/pointerScroll.js
  var pointerScroll_default = {
    watch: {
      typeAheadPointer() {
        this.maybeAdjustScroll();
      }
    },
    methods: {
      maybeAdjustScroll() {
        const pixelsToPointerTop = this.pixelsToPointerTop();
        const pixelsToPointerBottom = this.pixelsToPointerBottom();
        if (pixelsToPointerTop <= this.viewport().top) {
          return this.scrollTo(pixelsToPointerTop);
        }
        if (pixelsToPointerBottom >= this.viewport().bottom) {
          return this.scrollTo(this.viewport().top + this.pointerHeight());
        }
        return null;
      },
      pixelsToPointerTop() {
        let pixelsToPointerTop = 0;
        if (this.$refs.dropdownMenu) {
          for (let i = 0; i < this.typeAheadPointer; i += 1) {
            pixelsToPointerTop += this.$refs.dropdownMenu.children[i].offsetHeight;
          }
        }
        return pixelsToPointerTop;
      },
      pixelsToPointerBottom() {
        return this.pixelsToPointerTop() + this.pointerHeight();
      },
      pointerHeight() {
        const element = this.$refs.dropdownMenu ? this.$refs.dropdownMenu.children[this.typeAheadPointer] : false;
        return element ? element.offsetHeight : 0;
      },
      viewport() {
        return {
          top: this.$refs.dropdownMenu ? this.$refs.dropdownMenu.scrollTop : 0,
          bottom: this.$refs.dropdownMenu ? this.$refs.dropdownMenu.offsetHeight + this.$refs.dropdownMenu.scrollTop : 0
        };
      },
      scrollTo(position) {
        return this.$refs.dropdownMenu ? this.$refs.dropdownMenu.scrollTop = position : null;
      }
    }
  };

  // shared/vueSelect/mixins/typeAheadPointer.js
  var typeAheadPointer_default = {
    data() {
      return {
        typeAheadPointer: -1
      };
    },
    watch: {
      filteredOptions() {
        this.typeAheadPointer = 0;
      }
    },
    methods: {
      typeAheadUp() {
        if (this.typeAheadPointer > 0) {
          this.typeAheadPointer -= 1;
          if (this.maybeAdjustScroll) {
            this.maybeAdjustScroll();
          }
        }
      },
      typeAheadDown() {
        if (this.typeAheadPointer < this.filteredOptions.length - 1) {
          this.typeAheadPointer += 1;
          if (this.maybeAdjustScroll) {
            this.maybeAdjustScroll();
          }
        }
      },
      typeAheadSelect() {
        if (this.filteredOptions[this.typeAheadPointer]) {
          this.select(this.filteredOptions[this.typeAheadPointer]);
        } else if (this.taggable && this.search.length) {
          this.select(this.search);
        }
        if (this.clearSearchOnSelect) {
          this.search = "";
        }
      }
    }
  };

  // shared/vueSelect/mixins/ajax.js
  var ajax_default = {
    props: {
      loading: {
        type: Boolean,
        default: false
      },
      onSearch: {
        type: Function,
        default(search, loading) {
        }
      }
    },
    data() {
      return {
        mutableLoading: false
      };
    },
    watch: {
      search() {
        if (this.search.length > 0) {
          this.onSearch(this.search, this.toggleLoading);
          this.$emit("search", this.search, this.toggleLoading);
        }
      },
      loading(val) {
        this.mutableLoading = val;
      }
    },
    methods: {
      toggleLoading(toggle = null) {
        if (toggle == null) {
          return this.mutableLoading = !this.mutableLoading;
        }
        return this.mutableLoading = toggle;
      }
    }
  };

  // shared/vueSelect/components/Select.vue
  var __vue_script__20 = {
    mixins: [pointerScroll_default, typeAheadPointer_default, ajax_default],
    props: {
      value: {
        default: null
      },
      options: {
        type: Array,
        default() {
          return [];
        }
      },
      disabled: {
        type: Boolean,
        default: false
      },
      maxHeight: {
        type: String,
        default: "400px"
      },
      searchable: {
        type: Boolean,
        default: true
      },
      multiple: {
        type: Boolean,
        default: false
      },
      placeholder: {
        type: String,
        default: ""
      },
      transition: {
        type: String,
        default: "fade"
      },
      clearSearchOnSelect: {
        type: Boolean,
        default: true
      },
      closeOnSelect: {
        type: Boolean,
        default: true
      },
      label: {
        type: String,
        default: "label"
      },
      getOptionLabel: {
        type: Function,
        default(option) {
          if (typeof option === "object") {
            if (this.label && option[this.label]) {
              return option[this.label];
            }
          }
          return option;
        }
      },
      onChange: {
        type: Function,
        default: function(val) {
          this.$emit("input", val);
        }
      },
      taggable: {
        type: Boolean,
        default: false
      },
      tabindex: {
        type: Number,
        default: null
      },
      pushTags: {
        type: Boolean,
        default: false
      },
      filterable: {
        type: Boolean,
        default: true
      },
      createOption: {
        type: Function,
        default(newOption) {
          if (typeof this.mutableOptions[0] === "object") {
            newOption = { [this.label]: newOption };
          }
          this.$emit("option:created", newOption);
          return newOption;
        }
      },
      resetOnOptionsChange: {
        type: Boolean,
        default: false
      },
      noDrop: {
        type: Boolean,
        default: false
      },
      inputId: {
        type: String
      },
      dir: {
        type: String,
        default: "auto"
      }
    },
    data() {
      return {
        search: "",
        open: false,
        mutableValue: null,
        mutableOptions: []
      };
    },
    watch: {
      value(val) {
        this.mutableValue = val;
      },
      mutableValue(val, old) {
        if (this.multiple) {
          this.onChange ? this.onChange(val) : null;
        } else {
          this.onChange && val !== old ? this.onChange(val) : null;
        }
      },
      options(val) {
        this.mutableOptions = val;
      },
      mutableOptions() {
        if (!this.taggable && this.resetOnOptionsChange) {
          this.mutableValue = this.multiple ? [] : null;
        }
      },
      multiple(val) {
        this.mutableValue = val ? [] : null;
      }
    },
    created() {
      this.mutableValue = this.value;
      this.mutableOptions = this.options.slice(0);
      this.mutableLoading = this.loading;
      this.$on("option:created", this.maybePushTag);
    },
    methods: {
      select(option) {
        if (this.isOptionSelected(option)) {
          this.deselect(option);
        } else {
          if (this.taggable && !this.optionExists(option)) {
            option = this.createOption(option);
          }
          if (this.multiple && !this.mutableValue) {
            this.mutableValue = [option];
          } else if (this.multiple) {
            this.mutableValue.push(option);
          } else {
            this.mutableValue = option;
          }
        }
        this.onAfterSelect(option);
      },
      deselect(option) {
        if (this.multiple) {
          let ref2 = -1;
          this.mutableValue.forEach((val) => {
            if (val === option || typeof val === "object" && val[this.label] === option[this.label]) {
              ref2 = val;
            }
          });
          var index2 = this.mutableValue.indexOf(ref2);
          this.mutableValue.splice(index2, 1);
        } else {
          this.mutableValue = null;
        }
      },
      clearSelection() {
        this.mutableValue = this.multiple ? [] : null;
      },
      onAfterSelect(option) {
        if (this.closeOnSelect) {
          this.open = !this.open;
          this.$refs.search.blur();
        }
        if (this.clearSearchOnSelect) {
          this.search = "";
        }
      },
      toggleDropdown(e) {
        if (e.target === this.$refs.openIndicator || e.target === this.$refs.search || e.target === this.$refs.toggle || e.target === this.$el) {
          if (this.open) {
            this.$refs.search.blur();
          } else {
            if (!this.disabled) {
              this.open = true;
              this.$refs.search.focus();
            }
          }
        }
      },
      isOptionSelected(option) {
        if (this.multiple && this.mutableValue) {
          let selected = false;
          this.mutableValue.forEach((opt) => {
            if (typeof opt === "object" && opt[this.label] === option[this.label]) {
              selected = true;
            } else if (typeof opt === "object" && opt[this.label] === option) {
              selected = true;
            } else if (opt === option) {
              selected = true;
            }
          });
          return selected;
        }
        return this.mutableValue === option;
      },
      onEscape() {
        if (!this.search.length) {
          this.$refs.search.blur();
        } else {
          this.search = "";
        }
      },
      onSearchBlur() {
        if (this.clearSearchOnBlur) {
          this.search = "";
        }
        this.open = false;
        this.$emit("search:blur");
      },
      onSearchFocus() {
        this.open = true;
        this.$emit("search:focus");
      },
      maybeDeleteValue() {
        if (!this.$refs.search.value.length && this.mutableValue) {
          return this.multiple ? this.mutableValue.pop() : this.mutableValue = null;
        }
      },
      optionExists(option) {
        let exists = false;
        this.mutableOptions.forEach((opt) => {
          if (typeof opt === "object" && opt[this.label] === option) {
            exists = true;
          } else if (opt === option) {
            exists = true;
          }
        });
        return exists;
      },
      maybePushTag(option) {
        if (this.pushTags) {
          this.mutableOptions.push(option);
        }
      }
    },
    computed: {
      dropdownClasses() {
        return {
          open: this.dropdownOpen,
          single: !this.multiple,
          searching: this.searching,
          searchable: this.searchable,
          unsearchable: !this.searchable,
          loading: this.mutableLoading,
          rtl: this.dir === "rtl",
          disabled: this.disabled
        };
      },
      clearSearchOnBlur() {
        return this.clearSearchOnSelect && !this.multiple;
      },
      searching() {
        return !!this.search;
      },
      dropdownOpen() {
        return this.noDrop ? false : this.open && !this.mutableLoading;
      },
      searchPlaceholder() {
        if (this.valueAsArray && this.valueAsArray.length > 0) {
          return this.placeholder + " \xB7 " + this.valueAsArray.length;
        } else {
          return this.placeholder;
        }
      },
      filteredOptions() {
        if (!this.filterable && !this.taggable) {
          return this.mutableOptions.slice();
        }
        let options = this.mutableOptions.filter((option) => {
          if (typeof option === "object" && option.hasOwnProperty(this.label)) {
            return option[this.label].toLowerCase().indexOf(this.search.toLowerCase()) > -1;
          } else if (typeof option === "object" && !option.hasOwnProperty(this.label)) {
            return console.warn(`[vue-select warn]: Label key "option.${this.label}" does not exist in options object.
http://sagalbot.github.io/vue-select/#ex-labels`);
          }
          return option.toLowerCase().indexOf(this.search.toLowerCase()) > -1;
        });
        if (this.taggable && this.search.length && !this.optionExists(this.search)) {
          options.unshift(this.search);
        }
        return options;
      },
      isValueEmpty() {
        if (this.mutableValue) {
          if (typeof this.mutableValue === "object") {
            return !Object.keys(this.mutableValue).length;
          }
          return !this.mutableValue.length;
        }
        return true;
      },
      valueAsArray() {
        if (this.multiple) {
          return this.mutableValue;
        } else if (this.mutableValue) {
          return [this.mutableValue];
        }
        return [];
      },
      showClearButton() {
        return !this.multiple && !this.open && this.mutableValue != null;
      }
    }
  };
  var __vue_render__20 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "dropdown v-select",
        class: _vm.dropdownClasses,
        attrs: { dir: _vm.dir }
      },
      [
        _c(
          "div",
          {
            ref: "toggle",
            class: ["dropdown-toggle", "clearfix"],
            on: {
              mousedown: function($event) {
                $event.preventDefault();
                return _vm.toggleDropdown.apply(null, arguments);
              }
            }
          },
          [
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.search,
                  expression: "search"
                }
              ],
              ref: "search",
              staticClass: "form-control",
              style: { width: _vm.isValueEmpty ? "100%" : "auto" },
              attrs: {
                type: "search",
                autocomplete: "false",
                disabled: _vm.disabled,
                placeholder: _vm.searchPlaceholder,
                tabindex: _vm.tabindex,
                readonly: !_vm.searchable,
                id: _vm.inputId,
                "aria-label": "Search for option"
              },
              domProps: { value: _vm.search },
              on: {
                keydown: [
                  function($event) {
                    if (!$event.type.indexOf("key") && _vm._k($event.keyCode, "delete", [8, 46], $event.key, [
                      "Backspace",
                      "Delete",
                      "Del"
                    ])) {
                      return null;
                    }
                    return _vm.maybeDeleteValue.apply(null, arguments);
                  },
                  function($event) {
                    if (!$event.type.indexOf("key") && _vm._k($event.keyCode, "up", 38, $event.key, [
                      "Up",
                      "ArrowUp"
                    ])) {
                      return null;
                    }
                    $event.preventDefault();
                    return _vm.typeAheadUp.apply(null, arguments);
                  },
                  function($event) {
                    if (!$event.type.indexOf("key") && _vm._k($event.keyCode, "down", 40, $event.key, [
                      "Down",
                      "ArrowDown"
                    ])) {
                      return null;
                    }
                    $event.preventDefault();
                    return _vm.typeAheadDown.apply(null, arguments);
                  },
                  function($event) {
                    if (!$event.type.indexOf("key") && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                      return null;
                    }
                    $event.preventDefault();
                    return _vm.typeAheadSelect.apply(null, arguments);
                  }
                ],
                keyup: function($event) {
                  if (!$event.type.indexOf("key") && _vm._k($event.keyCode, "esc", 27, $event.key, [
                    "Esc",
                    "Escape"
                  ])) {
                    return null;
                  }
                  return _vm.onEscape.apply(null, arguments);
                },
                blur: _vm.onSearchBlur,
                focus: _vm.onSearchFocus,
                input: function($event) {
                  if ($event.target.composing) {
                    return;
                  }
                  _vm.search = $event.target.value;
                }
              }
            }),
            _vm._v(" "),
            _c(
              "button",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.showClearButton,
                    expression: "showClearButton"
                  }
                ],
                staticClass: "clear",
                attrs: {
                  disabled: _vm.disabled,
                  type: "button",
                  title: "Clear selection"
                },
                on: { click: _vm.clearSelection }
              },
              [_c("span", { attrs: { "aria-hidden": "true" } }, [_vm._v("\xD7")])]
            ),
            _vm._v(" "),
            !_vm.noDrop ? _c("i", {
              ref: "openIndicator",
              staticClass: "open-indicator",
              attrs: { role: "presentation" }
            }) : _vm._e(),
            _vm._v(" "),
            _vm._t("spinner", function() {
              return [
                _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.mutableLoading,
                        expression: "mutableLoading"
                      }
                    ],
                    staticClass: "spinner"
                  },
                  [_vm._v("Loading...")]
                )
              ];
            })
          ],
          2
        ),
        _vm._v(" "),
        _c("transition", { attrs: { name: _vm.transition } }, [
          _vm.dropdownOpen ? _c(
            "ul",
            {
              ref: "dropdownMenu",
              staticClass: "dropdown-menu",
              style: { "max-height": _vm.maxHeight }
            },
            [
              _vm.valueAsArray && _vm.valueAsArray.length ? _c("li", [
                _c("span", [
                  _vm._v(_vm._s(_vm.valueAsArray.length) + " selected")
                ]),
                _c("button", { on: { click: _vm.clearSelection } }, [
                  _vm._v("Clear")
                ])
              ]) : _vm._e(),
              _vm._v(" "),
              _vm._l(_vm.filteredOptions, function(option, index2) {
                return _c(
                  "li",
                  {
                    key: index2,
                    class: {
                      active: _vm.isOptionSelected(option),
                      highlight: index2 === _vm.typeAheadPointer
                    },
                    on: {
                      mouseover: function($event) {
                        _vm.typeAheadPointer = index2;
                      }
                    }
                  },
                  [
                    _c(
                      "a",
                      {
                        on: {
                          mousedown: function($event) {
                            $event.preventDefault();
                            return _vm.select(option);
                          }
                        }
                      },
                      [
                        _vm._t(
                          "option",
                          function() {
                            return [
                              _vm._v(
                                "\n          " + _vm._s(_vm.getOptionLabel(option)) + "\n        "
                              )
                            ];
                          },
                          null,
                          option
                        )
                      ],
                      2
                    )
                  ]
                );
              }),
              _vm._v(" "),
              !_vm.filteredOptions.length ? _c(
                "li",
                { staticClass: "no-options" },
                [
                  _vm._t("no-options", function() {
                    return [_vm._v("Sorry, no matching options.")];
                  })
                ],
                2
              ) : _vm._e()
            ],
            2
          ) : _vm._e()
        ])
      ],
      1
    );
  };
  var __vue_staticRenderFns__20 = [];
  __vue_render__20._withStripped = true;
  var __vue_inject_styles__20 = function(inject) {
    if (!inject)
      return;
    inject("data-v-3e16865a_0", { source: `
.v-select {
  position: relative;
  font-family: sans-serif;
}
.v-select,
.v-select * {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
/* Rtl support */
.v-select.rtl .open-indicator {
  left: 10px;
  right: auto;
}
.v-select.rtl .selected-tag {
  float: right;
  margin-right: 3px;
  margin-left: 1px;
}
.v-select.rtl .dropdown-menu {
  text-align: right;
}
.v-select.rtl .dropdown-toggle .clear {
  left: 30px;
  right: auto;
}
/* Open Indicator */
.v-select .open-indicator {
  position: absolute;
  top: 50%;
  right: 20px;
  display: inline-block;
  cursor: pointer;
  pointer-events: all;
  transition: all 150ms cubic-bezier(1.000, -0.115, 0.975, 0.855);
  transition-timing-function: cubic-bezier(1.000, -0.115, 0.975, 0.855);
  opacity: 1;
  height: 20px; width: 10px;
  margin-top: 0;
}
.v-select .open-indicator:before {
  content: "";
  height: 6px;
  width: 10px;
  background-image: url(../../../images/svg-icons/chevron-down-white.png);
  background-size: cover;
  position: absolute;
}
/* Open Indicator States */
.v-select.open .open-indicator:before {
  transform: rotate(180deg);
}
.v-select.loading .open-indicator {
  opacity: 1;
}
.v-select.open .open-indicator {
  bottom: 1px;
}
/* Dropdown Toggle */
.v-select .dropdown-toggle {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  display: block;
  padding: 0;
  background: none;
  border: 1px solid rgba(60, 60, 60, .26);
  border-radius: 4px;
  white-space: normal;
}
.v-select .dropdown-toggle:after {
  visibility: hidden;
  display: block;
  font-size: 0;
  content: " ";
  clear: both;
  height: 0;
}

/* Clear Button */
.v-select .dropdown-toggle .clear {
  position: absolute;
  bottom: 9px;
  right: 30px;
  font-size: 23px;
  font-weight: 700;
  line-height: 1;
  color: rgba(60, 60, 60, .5);
  padding: 0;
  border: 0;
  background-color: transparent;
  cursor: pointer;
}

/* Dropdown Toggle States */
.v-select.searchable .dropdown-toggle {
  cursor: text;
}
.v-select.unsearchable .dropdown-toggle {
  cursor: pointer;
}
.v-select.open .dropdown-toggle {
  border-bottom-color: transparent;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}
/* Dropdown Menu */
.v-select .dropdown-menu {
  display:block;
  position: absolute;
  top: 100%;
  left: 0;
  z-index: 1000;
  min-width: 160px;
  padding: 5px 0;
  margin: 0;
  width: 100%;
  overflow-y: scroll;
  border: 1px solid rgba(0, 0, 0, .26);
  box-shadow: 0px 3px 6px 0px rgba(0,0,0,.15);
  border-top: none;
  border-radius: 0 0 4px 4px;
  text-align: left;
  list-style: none;
  background: #fff;
}
.v-select .no-options {
  text-align: center;
}
/* Selected Tags */
.v-select .selected-tag {
  color: #333;
  background-color: #f0f0f0;
  border: 1px solid #ccc;
  border-radius: 4px;
  height: 26px;
  margin: 4px 1px 0px 3px;
  padding: 1px 0.25em;
  float: left;
  line-height: 24px;
}
.v-select.single .selected-tag {
  background-color: transparent;
  border-color: transparent;
}
.v-select.single.open .selected-tag {
  position: absolute;
  opacity: .5;
}
.v-select.single.open.searching .selected-tag,
.v-select.single.loading .selected-tag {
  display: none;
}
.v-select .selected-tag .close {
  float: none;
  margin-right: 0;
  font-size: 20px;
  appearance: none;
  padding: 0;
  cursor: pointer;
  background: 0 0;
  border: 0;
  font-weight: 700;
  line-height: 1;
  color: #000;
  text-shadow: 0 1px 0 #fff;
  filter: alpha(opacity=20);
  opacity: .2;
}
.v-select.single.searching:not(.open):not(.loading) input[type="search"] {
  opacity: .2;
}
/* Search Input */
.v-select input[type="search"]::-webkit-search-decoration,
.v-select input[type="search"]::-webkit-search-cancel-button,
.v-select input[type="search"]::-webkit-search-results-button,
.v-select input[type="search"]::-webkit-search-results-decoration {
  display: none;
}
.v-select input[type="search"]::-ms-clear {
  display: none;
}
.v-select input[type="search"],
.v-select input[type="search"]:focus {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  line-height: 1.42857143;
  font-size:1em;
  height: 34px;
  display: inline-block;
  border: none;
  outline: none;
  margin: 0;
  padding: 0 .5em;
  width: 10em;
  max-width: 100%;
  background: none;
  position: relative;
  box-shadow: none;
  color: transparent;
  caret-color: transparent !important;
  -webkit-user-select: none;
}
.v-select.unsearchable input[type="search"] {
  opacity: 1;
}
.v-select.unsearchable input[type="search"]:hover {
  cursor: pointer;
}
  /* List Items */
.v-select li {
  line-height: 1.42857143; /* Normalize line height */
}
.v-select li > a {
  display: block;
  padding: 3px 20px;
  clear: both;
  color: #333; /* Overrides most CSS frameworks */
  white-space: nowrap;
}
.v-select li:hover {
  cursor: pointer;
}
.v-select .dropdown-menu .active > a {
  color: #333;
  background: rgba(50, 50, 50, .1);
}
.v-select .dropdown-menu > .highlight > a {
  /*
   * required to override bootstrap 3's
   * .dropdown-menu > li > a:hover {} styles
   */
  background: #5897fb;
  color: #fff;
}
.v-select .highlight:not(:last-child) {
  margin-bottom: 0; /* Fixes Bulma Margin */
}
/* Loading Spinner */
.v-select .spinner {
  opacity: 0;
  position: absolute;
  top: 5px;
  right: 10px;
  font-size: 5px;
  text-indent: -9999em;
  overflow: hidden;
  border-top: .9em solid rgba(100, 100, 100, .1);
  border-right: .9em solid rgba(100, 100, 100, .1);
  border-bottom: .9em solid rgba(100, 100, 100, .1);
  border-left: .9em solid rgba(60, 60, 60, .45);
  transform: translateZ(0);
  animation: vSelectSpinner 1.1s infinite linear;
  transition: opacity .1s;
}
.v-select .spinner,
.v-select .spinner:after {
  border-radius: 50%;
  width: 5em;
  height: 5em;
}

/* Disabled state */
.v-select.disabled .dropdown-toggle,
.v-select.disabled .dropdown-toggle .clear,
.v-select.disabled .dropdown-toggle input,
.v-select.disabled .selected-tag .close,
.v-select.disabled .open-indicator {
  cursor: not-allowed;
  background-color: rgb(248, 248, 248);
}

/* Loading Spinner States */
.v-select.loading .spinner {
  opacity: 1;
}
/* KeyFrames */
@-webkit-keyframes vSelectSpinner {
0% {
    transform: rotate(0deg);
}
100% {
    transform: rotate(360deg);
}
}
@keyframes vSelectSpinner {
0% {
    transform: rotate(0deg);
}
100% {
    transform: rotate(360deg);
}
}
/* Dropdown Default Transition */
.fade-enter-active,
.fade-leave-active {
  transition: opacity .15s cubic-bezier(1.0, 0.5, 0.8, 1.0);
}
.fade-enter,
.fade-leave-to {
  opacity: 0;
}
`, map: { "version": 3, "sources": ["app/javascript/shared/vueSelect/components/Select.vue"], "names": [], "mappings": ";AACA;EACA,kBAAA;EACA,uBAAA;AACA;AAEA;;EAEA,8BAAA;EACA,2BAAA;EACA,sBAAA;AACA;AACA,gBAAA;AACA;EACA,UAAA;EACA,WAAA;AACA;AACA;EACA,YAAA;EACA,iBAAA;EACA,gBAAA;AACA;AACA;EACA,iBAAA;AACA;AACA;EACA,UAAA;EACA,WAAA;AACA;AACA,mBAAA;AACA;EACA,kBAAA;EACA,QAAA;EACA,WAAA;EACA,qBAAA;EACA,eAAA;EACA,mBAAA;EACA,+DAAA;EACA,qEAAA;EACA,UAAA;EACA,YAAA,EAAA,WAAA;EACA,aAAA;AACA;AACA;EACA,WAAA;EACA,WAAA;EACA,WAAA;EACA,uEAAA;EACA,sBAAA;EACA,kBAAA;AACA;AACA,0BAAA;AACA;EACA,yBAAA;AACA;AACA;EACA,UAAA;AACA;AACA;EACA,WAAA;AACA;AACA,oBAAA;AACA;EACA,wBAAA;EACA,qBAAA;EACA,gBAAA;EACA,cAAA;EACA,UAAA;EACA,gBAAA;EACA,uCAAA;EACA,kBAAA;EACA,mBAAA;AACA;AACA;EACA,kBAAA;EACA,cAAA;EACA,YAAA;EACA,YAAA;EACA,WAAA;EACA,SAAA;AACA;;AAEA,iBAAA;AACA;EACA,kBAAA;EACA,WAAA;EACA,WAAA;EACA,eAAA;EACA,gBAAA;EACA,cAAA;EACA,2BAAA;EACA,UAAA;EACA,SAAA;EACA,6BAAA;EACA,eAAA;AACA;;AAEA,2BAAA;AACA;EACA,YAAA;AACA;AACA;EACA,eAAA;AACA;AACA;EACA,gCAAA;EACA,4BAAA;EACA,6BAAA;AACA;AACA,kBAAA;AACA;EACA,aAAA;EACA,kBAAA;EACA,SAAA;EACA,OAAA;EACA,aAAA;EACA,gBAAA;EACA,cAAA;EACA,SAAA;EACA,WAAA;EACA,kBAAA;EACA,oCAAA;EACA,2CAAA;EACA,gBAAA;EACA,0BAAA;EACA,gBAAA;EACA,gBAAA;EACA,gBAAA;AACA;AACA;EACA,kBAAA;AACA;AACA,kBAAA;AACA;EACA,WAAA;EACA,yBAAA;EACA,sBAAA;EACA,kBAAA;EACA,YAAA;EACA,uBAAA;EACA,mBAAA;EACA,WAAA;EACA,iBAAA;AACA;AACA;EACA,6BAAA;EACA,yBAAA;AACA;AACA;EACA,kBAAA;EACA,WAAA;AACA;AACA;;EAEA,aAAA;AACA;AACA;EACA,WAAA;EACA,eAAA;EACA,eAAA;EACA,gBAAA;EACA,UAAA;EACA,eAAA;EACA,eAAA;EACA,SAAA;EACA,gBAAA;EACA,cAAA;EACA,WAAA;EACA,yBAAA;EACA,yBAAA;EACA,WAAA;AACA;AACA;EACA,WAAA;AACA;AACA,iBAAA;AACA;;;;EAIA,aAAA;AACA;AACA;EACA,aAAA;AACA;AACA;;EAEA,gBAAA;EACA,wBAAA;EACA,qBAAA;EACA,uBAAA;EACA,aAAA;EACA,YAAA;EACA,qBAAA;EACA,YAAA;EACA,aAAA;EACA,SAAA;EACA,eAAA;EACA,WAAA;EACA,eAAA;EACA,gBAAA;EACA,kBAAA;EACA,gBAAA;EACA,kBAAA;EACA,mCAAA;EACA,yBAAA;AACA;AACA;EACA,UAAA;AACA;AACA;EACA,eAAA;AACA;EACA,eAAA;AACA;EACA,uBAAA,EAAA,0BAAA;AACA;AACA;EACA,cAAA;EACA,iBAAA;EACA,WAAA;EACA,WAAA,EAAA,kCAAA;EACA,mBAAA;AACA;AACA;EACA,eAAA;AACA;AACA;EACA,WAAA;EACA,gCAAA;AACA;AACA;EACA;;;IAGA;EACA,mBAAA;EACA,WAAA;AACA;AACA;EACA,gBAAA,EAAA,uBAAA;AACA;AACA,oBAAA;AACA;EACA,UAAA;EACA,kBAAA;EACA,QAAA;EACA,WAAA;EACA,cAAA;EACA,oBAAA;EACA,gBAAA;EACA,8CAAA;EACA,gDAAA;EACA,iDAAA;EACA,6CAAA;EACA,wBAAA;EACA,8CAAA;EACA,uBAAA;AACA;AACA;;EAEA,kBAAA;EACA,UAAA;EACA,WAAA;AACA;;AAEA,mBAAA;AACA;;;;;EAKA,mBAAA;EACA,oCAAA;AACA;;AAEA,2BAAA;AACA;EACA,UAAA;AACA;AACA,cAAA;AACA;AACA;IACA,uBAAA;AACA;AACA;IACA,yBAAA;AACA;AACA;AACA;AACA;IACA,uBAAA;AACA;AACA;IACA,yBAAA;AACA;AACA;AACA,gCAAA;AACA;;EAEA,yDAAA;AACA;AACA;;EAEA,UAAA;AACA", "file": "Select.vue", "sourcesContent": [`<style>
  .v-select {
    position: relative;
    font-family: sans-serif;
  }

  .v-select,
  .v-select * {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }
  /* Rtl support */
  .v-select.rtl .open-indicator {
    left: 10px;
    right: auto;
  }
  .v-select.rtl .selected-tag {
    float: right;
    margin-right: 3px;
    margin-left: 1px;
  }
  .v-select.rtl .dropdown-menu {
    text-align: right;
  }
  .v-select.rtl .dropdown-toggle .clear {
    left: 30px;
    right: auto;
  }
  /* Open Indicator */
  .v-select .open-indicator {
    position: absolute;
    top: 50%;
    right: 20px;
    display: inline-block;
    cursor: pointer;
    pointer-events: all;
    transition: all 150ms cubic-bezier(1.000, -0.115, 0.975, 0.855);
    transition-timing-function: cubic-bezier(1.000, -0.115, 0.975, 0.855);
    opacity: 1;
    height: 20px; width: 10px;
    margin-top: 0;
  }
  .v-select .open-indicator:before {
    content: "";
    height: 6px;
    width: 10px;
    background-image: url(../../../images/svg-icons/chevron-down-white.png);
    background-size: cover;
    position: absolute;
  }
  /* Open Indicator States */
  .v-select.open .open-indicator:before {
    transform: rotate(180deg);
  }
  .v-select.loading .open-indicator {
    opacity: 1;
  }
  .v-select.open .open-indicator {
    bottom: 1px;
  }
  /* Dropdown Toggle */
  .v-select .dropdown-toggle {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    display: block;
    padding: 0;
    background: none;
    border: 1px solid rgba(60, 60, 60, .26);
    border-radius: 4px;
    white-space: normal;
  }
  .v-select .dropdown-toggle:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: " ";
    clear: both;
    height: 0;
  }

  /* Clear Button */
  .v-select .dropdown-toggle .clear {
    position: absolute;
    bottom: 9px;
    right: 30px;
    font-size: 23px;
    font-weight: 700;
    line-height: 1;
    color: rgba(60, 60, 60, .5);
    padding: 0;
    border: 0;
    background-color: transparent;
    cursor: pointer;
  }

  /* Dropdown Toggle States */
  .v-select.searchable .dropdown-toggle {
    cursor: text;
  }
  .v-select.unsearchable .dropdown-toggle {
    cursor: pointer;
  }
  .v-select.open .dropdown-toggle {
    border-bottom-color: transparent;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }
  /* Dropdown Menu */
  .v-select .dropdown-menu {
    display:block;
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    min-width: 160px;
    padding: 5px 0;
    margin: 0;
    width: 100%;
    overflow-y: scroll;
    border: 1px solid rgba(0, 0, 0, .26);
    box-shadow: 0px 3px 6px 0px rgba(0,0,0,.15);
    border-top: none;
    border-radius: 0 0 4px 4px;
    text-align: left;
    list-style: none;
    background: #fff;
  }
  .v-select .no-options {
    text-align: center;
  }
  /* Selected Tags */
  .v-select .selected-tag {
    color: #333;
    background-color: #f0f0f0;
    border: 1px solid #ccc;
    border-radius: 4px;
    height: 26px;
    margin: 4px 1px 0px 3px;
    padding: 1px 0.25em;
    float: left;
    line-height: 24px;
  }
  .v-select.single .selected-tag {
    background-color: transparent;
    border-color: transparent;
  }
  .v-select.single.open .selected-tag {
    position: absolute;
    opacity: .5;
  }
  .v-select.single.open.searching .selected-tag,
  .v-select.single.loading .selected-tag {
    display: none;
  }
  .v-select .selected-tag .close {
    float: none;
    margin-right: 0;
    font-size: 20px;
    appearance: none;
    padding: 0;
    cursor: pointer;
    background: 0 0;
    border: 0;
    font-weight: 700;
    line-height: 1;
    color: #000;
    text-shadow: 0 1px 0 #fff;
    filter: alpha(opacity=20);
    opacity: .2;
  }
  .v-select.single.searching:not(.open):not(.loading) input[type="search"] {
    opacity: .2;
  }
  /* Search Input */
  .v-select input[type="search"]::-webkit-search-decoration,
  .v-select input[type="search"]::-webkit-search-cancel-button,
  .v-select input[type="search"]::-webkit-search-results-button,
  .v-select input[type="search"]::-webkit-search-results-decoration {
    display: none;
  }
  .v-select input[type="search"]::-ms-clear {
    display: none;
  }
  .v-select input[type="search"],
  .v-select input[type="search"]:focus {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    line-height: 1.42857143;
    font-size:1em;
    height: 34px;
    display: inline-block;
    border: none;
    outline: none;
    margin: 0;
    padding: 0 .5em;
    width: 10em;
    max-width: 100%;
    background: none;
    position: relative;
    box-shadow: none;
    color: transparent;
    caret-color: transparent !important;
    -webkit-user-select: none;
  }
  .v-select.unsearchable input[type="search"] {
    opacity: 1;
  }
  .v-select.unsearchable input[type="search"]:hover {
    cursor: pointer;
  }
    /* List Items */
  .v-select li {
    line-height: 1.42857143; /* Normalize line height */
  }
  .v-select li > a {
    display: block;
    padding: 3px 20px;
    clear: both;
    color: #333; /* Overrides most CSS frameworks */
    white-space: nowrap;
  }
  .v-select li:hover {
    cursor: pointer;
  }
  .v-select .dropdown-menu .active > a {
    color: #333;
    background: rgba(50, 50, 50, .1);
  }
  .v-select .dropdown-menu > .highlight > a {
    /*
     * required to override bootstrap 3's
     * .dropdown-menu > li > a:hover {} styles
     */
    background: #5897fb;
    color: #fff;
  }
  .v-select .highlight:not(:last-child) {
    margin-bottom: 0; /* Fixes Bulma Margin */
  }
  /* Loading Spinner */
  .v-select .spinner {
    opacity: 0;
    position: absolute;
    top: 5px;
    right: 10px;
    font-size: 5px;
    text-indent: -9999em;
    overflow: hidden;
    border-top: .9em solid rgba(100, 100, 100, .1);
    border-right: .9em solid rgba(100, 100, 100, .1);
    border-bottom: .9em solid rgba(100, 100, 100, .1);
    border-left: .9em solid rgba(60, 60, 60, .45);
    transform: translateZ(0);
    animation: vSelectSpinner 1.1s infinite linear;
    transition: opacity .1s;
  }
  .v-select .spinner,
  .v-select .spinner:after {
    border-radius: 50%;
    width: 5em;
    height: 5em;
  }

  /* Disabled state */
  .v-select.disabled .dropdown-toggle,
  .v-select.disabled .dropdown-toggle .clear,
  .v-select.disabled .dropdown-toggle input,
  .v-select.disabled .selected-tag .close,
  .v-select.disabled .open-indicator {
    cursor: not-allowed;
    background-color: rgb(248, 248, 248);
  }

  /* Loading Spinner States */
  .v-select.loading .spinner {
    opacity: 1;
  }
  /* KeyFrames */
  @-webkit-keyframes vSelectSpinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  @keyframes vSelectSpinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  /* Dropdown Default Transition */
  .fade-enter-active,
  .fade-leave-active {
    transition: opacity .15s cubic-bezier(1.0, 0.5, 0.8, 1.0);
  }
  .fade-enter,
  .fade-leave-to {
    opacity: 0;
  }
</style>

<template>
  <div :dir="dir" class="dropdown v-select" :class="dropdownClasses">
    <div ref="toggle" @mousedown.prevent="toggleDropdown" :class="['dropdown-toggle', 'clearfix']">

      <input
              ref="search"
              v-model="search"
              @keydown.delete="maybeDeleteValue"
              @keyup.esc="onEscape"
              @keydown.up.prevent="typeAheadUp"
              @keydown.down.prevent="typeAheadDown"
              @keydown.enter.prevent="typeAheadSelect"
              @blur="onSearchBlur"
              @focus="onSearchFocus"
              type="search"
              class="form-control"
              autocomplete="false"
              :disabled="disabled"
              :placeholder="searchPlaceholder"
              :tabindex="tabindex"
              :readonly="!searchable"
              :style="{ width: isValueEmpty ? '100%' : 'auto' }"
              :id="inputId"
              aria-label="Search for option"
      >

      <button 
        v-show="showClearButton" 
        :disabled="disabled" 
        @click="clearSelection"
        type="button" 
        class="clear" 
        title="Clear selection" 
      >
        <span aria-hidden="true">&times;</span>
      </button>

      <i v-if="!noDrop" ref="openIndicator" role="presentation" class="open-indicator"></i>

      <slot name="spinner">
        <div class="spinner" v-show="mutableLoading">Loading...</div>
      </slot>
    </div>

    <transition :name="transition">
      <ul ref="dropdownMenu" v-if="dropdownOpen" class="dropdown-menu" :style="{ 'max-height': maxHeight }">
        <li v-if="valueAsArray && valueAsArray.length"><span>{{ valueAsArray.length }} selected</span><button @click="clearSelection">Clear</button></li>
        <li v-for="(option, index) in filteredOptions" v-bind:key="index" :class="{ active: isOptionSelected(option), highlight: index === typeAheadPointer }" @mouseover="typeAheadPointer = index">
          <a @mousedown.prevent="select(option)">
          <slot name="option" v-bind="option">
            {{ getOptionLabel(option) }}
          </slot>
          </a>
        </li>
        <li v-if="!filteredOptions.length" class="no-options">
          <slot name="no-options">Sorry, no matching options.</slot>
        </li>
      </ul>
    </transition>
  </div>
</template>

<script type="text/babel">
  import pointerScroll from '../mixins/pointerScroll'
  import typeAheadPointer from '../mixins/typeAheadPointer'
  import ajax from '../mixins/ajax'

  export default {
    mixins: [pointerScroll, typeAheadPointer, ajax],

    props: {
      /**
       * Contains the currently selected value. Very similar to a
       * \`value\` attribute on an <input>. You can listen for changes
       * using 'change' event using v-on
       * @type {Object||String||null}
       */
      value: {
        default: null
      },

      /**
       * An array of strings or objects to be used as dropdown choices.
       * If you are using an array of objects, vue-select will look for
       * a \`label\` key (ex. [{label: 'This is Foo', value: 'foo'}]). A
       * custom label key can be set with the \`label\` prop.
       * @type {Array}
       */
      options: {
        type: Array,
        default() {
          return []
        },
      },

      /**
       * Disable the entire component.
       * @type {Boolean}
       */
      disabled: {
        type: Boolean,
        default: false
      },

      /**
       * Sets the max-height property on the dropdown list.
       * @deprecated
       * @type {String}
       */
      maxHeight: {
        type: String,
        default: '400px'
      },

      /**
       * Enable/disable filtering the options.
       * @type {Boolean}
       */
      searchable: {
        type: Boolean,
        default: true
      },

      /**
       * Equivalent to the \`multiple\` attribute on a \`<select>\` input.
       * @type {Boolean}
       */
      multiple: {
        type: Boolean,
        default: false
      },

      /**
       * Equivalent to the \`placeholder\` attribute on an \`<input>\`.
       * @type {String}
       */
      placeholder: {
        type: String,
        default: ''
      },

      /**
       * Sets a Vue transition property on the \`.dropdown-menu\`. vue-select
       * does not include CSS for transitions, you'll need to add them yourself.
       * @type {String}
       */
      transition: {
        type: String,
        default: 'fade'
      },

      /**
       * Enables/disables clearing the search text when an option is selected.
       * @type {Boolean}
       */
      clearSearchOnSelect: {
        type: Boolean,
        default: true
      },

      /**
       * Close a dropdown when an option is chosen. Set to false to keep the dropdown
       * open (useful when combined with multi-select, for example)
       * @type {Boolean}
       */
      closeOnSelect: {
        type: Boolean,
        default: true
      },

      /**
       * Tells vue-select what key to use when generating option
       * labels when each \`option\` is an object.
       * @type {String}
       */
      label: {
        type: String,
        default: 'label'
      },

      /**
       * Callback to generate the label text. If {option}
       * is an object, returns option[this.label] by default.
       * @type {Function}
       * @param  {Object || String} option
       * @return {String}
       */
      getOptionLabel: {
        type: Function,
        default(option) {
          if (typeof option === 'object') {
            if (this.label && option[this.label]) {
              return option[this.label]
            }
          }
          return option;
        }
      },

      /**
       * An optional callback function that is called each time the selected
       * value(s) change. When integrating with Vuex, use this callback to trigger
       * an action, rather than using :value.sync to retreive the selected value.
       * @type {Function}
       * @param {Object || String} val
       */
      onChange: {
        type: Function,
        default: function (val) {
          this.$emit('input', val)
        }
      },

      /**
       * Enable/disable creating options from searchInput.
       * @type {Boolean}
       */
      taggable: {
        type: Boolean,
        default: false
      },

      /**
       * Set the tabindex for the input field.
       * @type {Number}
       */
      tabindex: {
        type: Number,
        default: null
      },

      /**
       * When true, newly created tags will be added to
       * the options list.
       * @type {Boolean}
       */
      pushTags: {
        type: Boolean,
        default: false
      },

      /**
       * When true, existing options will be filtered
       * by the search text. Should not be used in conjunction
       * with taggable.
       * @type {Boolean}
       */
      filterable: {
        type: Boolean,
        default: true
      },

      /**
       * User defined function for adding Options
       * @type {Function}
       */
      createOption: {
        type: Function,
        default(newOption) {
          if (typeof this.mutableOptions[0] === 'object') {
            newOption = {[this.label]: newOption}
          }
          this.$emit('option:created', newOption)
          return newOption
        }
      },

      /**
       * When false, updating the options will not reset the select value
       * @type {Boolean}
       */
      resetOnOptionsChange: {
        type: Boolean,
        default: false
      },

      /**
       * Disable the dropdown entirely.
       * @type {Boolean}
       */
      noDrop: {
        type: Boolean,
        default: false
      },

      /**
       * Sets the id of the input element.
       * @type {String}
       * @default {null}
       */
      inputId: {
        type: String
      },

      /**
       * Sets RTL support. Accepts 'ltr', 'rtl', 'auto'.
       * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir
       * @type {String}
       * @default 'auto'
       */
      dir: {
        type: String,
        default: 'auto'
      },
    },

    data() {
      return {
        search: '',
        open: false,
        mutableValue: null,
        mutableOptions: []
      }
    },

    watch: {
      /**
       * When the value prop changes, update
			 * the internal mutableValue.
       * @param  {mixed} val
       * @return {void}
       */
      value(val) {
				this.mutableValue = val
      },

      /**
       * Maybe run the onChange callback.
       * @param  {string|object} val
       * @param  {string|object} old
       * @return {void}
       */
			mutableValue(val, old) {
        if (this.multiple) {
          this.onChange ? this.onChange(val) : null
        } else {
          this.onChange && val !== old ? this.onChange(val) : null
        }
      },

      /**
       * When options change, update
       * the internal mutableOptions.
       * @param  {array} val
       * @return {void}
       */
      options(val) {
        this.mutableOptions = val
      },

      /**
			 * Maybe reset the mutableValue
       * when mutableOptions change.
       * @return {[type]} [description]
       */
      mutableOptions() {
        if (!this.taggable && this.resetOnOptionsChange) {
					this.mutableValue = this.multiple ? [] : null
        }
      },

      /**
			 * Always reset the mutableValue when
       * the multiple prop changes.
       * @param  {Boolean} val
       * @return {void}
       */
      multiple(val) {
				this.mutableValue = val ? [] : null
      }
    },

    /**
     * Clone props into mutable values,
     * attach any event listeners.
     */
    created() {
			this.mutableValue = this.value
      this.mutableOptions = this.options.slice(0)
			this.mutableLoading = this.loading

      this.$on('option:created', this.maybePushTag)
    },

    methods: {

      /**
       * Select a given option.
       * @param  {Object|String} option
       * @return {void}
       */
      select(option) {
        if (this.isOptionSelected(option)) {
          this.deselect(option)
        } else {
          if (this.taggable && !this.optionExists(option)) {
            option = this.createOption(option)
          }

          if (this.multiple && !this.mutableValue) {
            this.mutableValue = [option]
          } else if (this.multiple) {
            this.mutableValue.push(option)
          } else {
            this.mutableValue = option
          }
        }

        this.onAfterSelect(option)
      },

      /**
       * De-select a given option.
       * @param  {Object|String} option
       * @return {void}
       */
      deselect(option) {
        if (this.multiple) {
          let ref = -1
          this.mutableValue.forEach((val) => {
            if (val === option || typeof val === 'object' && val[this.label] === option[this.label]) {
              ref = val
            }
          })
          var index = this.mutableValue.indexOf(ref)
          this.mutableValue.splice(index, 1)
        } else {
          this.mutableValue = null
        }
      },

      /**
       * Clears the currently selected value(s)
       * @return {void}
       */
       clearSelection() {
         this.mutableValue = this.multiple ? [] : null
       },

      /**
       * Called from this.select after each selection.
       * @param  {Object|String} option
       * @return {void}
       */
      onAfterSelect(option) {
        if (this.closeOnSelect) {
          this.open = !this.open
          this.$refs.search.blur()
        }

        if (this.clearSearchOnSelect) {
          this.search = ''
        }
      },

      /**
       * Toggle the visibility of the dropdown menu.
       * @param  {Event} e
       * @return {void}
       */
      toggleDropdown(e) {
        if (e.target === this.$refs.openIndicator || e.target === this.$refs.search || e.target === this.$refs.toggle || e.target === this.$el) {
          if (this.open) {
            this.$refs.search.blur() // dropdown will close on blur
          } else {
            if (!this.disabled) {
              this.open = true
              this.$refs.search.focus()
            }
          }
        }
      },

      /**
       * Check if the given option is currently selected.
       * @param  {Object|String}  option
       * @return {Boolean}        True when selected | False otherwise
       */
      isOptionSelected(option) {
        if (this.multiple && this.mutableValue) {
          let selected = false
          this.mutableValue.forEach(opt => {
            if (typeof opt === 'object' && opt[this.label] === option[this.label]) {
              selected = true
            } else if (typeof opt === 'object' && opt[this.label] === option) {
              selected = true
            }
            else if (opt === option) {
              selected = true
            }
          })
          return selected
        }

        return this.mutableValue === option
      },

      /**
       * If there is any text in the search input, remove it.
       * Otherwise, blur the search input to close the dropdown.
       * @return {void}
       */
      onEscape() {
        if (!this.search.length) {
          this.$refs.search.blur()
        } else {
          this.search = ''
        }
      },

      /**
       * Close the dropdown on blur.
       * @emits  {search:blur}
       * @return {void}
       */
      onSearchBlur() {
        if (this.clearSearchOnBlur) {
          this.search = ''
        }
        this.open = false
        this.$emit('search:blur')
      },

      /**
       * Open the dropdown on focus.
       * @emits  {search:focus}
       * @return {void}
       */
      onSearchFocus() {
        this.open = true
        this.$emit('search:focus')
      },

      /**
       * Delete the value on Delete keypress when there is no
       * text in the search input, & there's tags to delete
       * @return {this.value}
       */
      maybeDeleteValue() {
        if (!this.$refs.search.value.length && this.mutableValue) {
          return this.multiple ? this.mutableValue.pop() : this.mutableValue = null
        }
      },

      /**
       * Determine if an option exists
       * within this.mutableOptions array.
       *
       * @param  {Object || String} option
       * @return {boolean}
       */
      optionExists(option) {
        let exists = false

        this.mutableOptions.forEach(opt => {
          if (typeof opt === 'object' && opt[this.label] === option) {
            exists = true
          } else if (opt === option) {
            exists = true
          }
        })

        return exists
      },

      /**
       * If push-tags is true, push the
       * given option to mutableOptions.
       *
       * @param  {Object || String} option
       * @return {void}
       */
      maybePushTag(option) {
        if (this.pushTags) {
          this.mutableOptions.push(option)
        }
      }
    },

    computed: {

      /**
       * Classes to be output on .dropdown
       * @return {Object}
       */
      dropdownClasses() {
        return {
          open: this.dropdownOpen,
          single: !this.multiple,
          searching: this.searching,
          searchable: this.searchable,
          unsearchable: !this.searchable,
          loading: this.mutableLoading,
          rtl: this.dir === 'rtl',
          disabled: this.disabled
        }
      },

      /**
       * If search text should clear on blur
       * @return {Boolean} True when single and clearSearchOnSelect
       */
      clearSearchOnBlur() {
        return this.clearSearchOnSelect && !this.multiple
      },

      /**
       * Return the current state of the
       * search input
       * @return {Boolean} True if non empty value
       */
      searching() {
        return !!this.search
      },

      /**
       * Return the current state of the
       * dropdown menu.
       * @return {Boolean} True if open
       */
      dropdownOpen() {
        return this.noDrop ? false : this.open && !this.mutableLoading
      },

      /**
       * Return the placeholder string if it's set
       * & there is no value selected.
       * @return {String} Placeholder text
       */
      searchPlaceholder() {
        if (this.valueAsArray && this.valueAsArray.length > 0) {
          return this.placeholder + ' \xB7 ' + this.valueAsArray.length;
        } else {
          return this.placeholder;
        }
      },

      /**
       * The currently displayed options, filtered
       * by the search elements value. If tagging
       * true, the search text will be prepended
       * if it doesn't already exist.
       *
       * @return {array}
       */
      filteredOptions() {
        if (!this.filterable && !this.taggable) {
          return this.mutableOptions.slice()
        }
        let options = this.mutableOptions.filter((option) => {
          if (typeof option === 'object' && option.hasOwnProperty(this.label)) {
            return option[this.label].toLowerCase().indexOf(this.search.toLowerCase()) > -1
          } else if (typeof option === 'object' && !option.hasOwnProperty(this.label)) {
            return console.warn(\`[vue-select warn]: Label key "option.\${this.label}" does not exist in options object.\\nhttp://sagalbot.github.io/vue-select/#ex-labels\`)
          }
          return option.toLowerCase().indexOf(this.search.toLowerCase()) > -1
        })
        if (this.taggable && this.search.length && !this.optionExists(this.search)) {
          options.unshift(this.search)
        }
        return options
      },

      /**
       * Check if there aren't any options selected.
       * @return {Boolean}
       */
      isValueEmpty() {
        if (this.mutableValue) {
          if (typeof this.mutableValue === 'object') {
            return !Object.keys(this.mutableValue).length
          }
          return !this.mutableValue.length
        }

        return true;
      },

      /**
       * Return the current value in array format.
       * @return {Array}
       */
      valueAsArray() {
        if (this.multiple) {
          return this.mutableValue
        } else if (this.mutableValue) {
          return [this.mutableValue]
        }

        return []
      },

      /**
       * Determines if the clear button should be displayed.
       * @return {Boolean}
       */
      showClearButton() {
        return !this.multiple && !this.open && this.mutableValue != null
      }
    },

  }
<\/script>
`] }, media: void 0 });
  };
  var __vue_scope_id__20 = void 0;
  var __vue_module_identifier__20 = void 0;
  var __vue_is_functional_template__20 = false;
  function __vue_normalize__20(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/shared/vueSelect/components/Select.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__10() {
    const styles = __vue_create_injector__10.styles || (__vue_create_injector__10.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__20 = /* @__PURE__ */ __vue_normalize__20(
    { render: __vue_render__20, staticRenderFns: __vue_staticRenderFns__20 },
    __vue_inject_styles__20,
    __vue_script__20,
    __vue_scope_id__20,
    __vue_is_functional_template__20,
    __vue_module_identifier__20,
    false,
    __vue_create_injector__10,
    void 0,
    void 0
  );
  var Select_default = __vue_component__20;

  // shared/vueSelect/index.js
  var vueSelect_default = Select_default;

  // application/components/library/FilterSelect.vue
  var __vue_script__21 = Vue.extend({
    name: "FilterSelect",
    props: {
      options: {
        required: true,
        type: Array
      },
      values: {
        required: true,
        type: Array
      },
      placeholder: {
        required: true,
        type: String
      },
      labelMethod: {
        required: true,
        type: String
      },
      paramName: {
        required: true,
        type: String
      }
    },
    data() {
      return {
        selectedValues: [...this.values]
      };
    },
    methods: {
      optionFor(option) {
        return this.options.find((o) => o.id === option.id)[this.labelMethod];
      },
      removeOption(option) {
        this.selectedValues.splice(this.selectedValues.indexOf(option), 1);
      }
    },
    watch: {
      selectedValues() {
        this.$nextTick(() => {
          const event = new CustomEvent("form-updated");
          window.dispatchEvent(event);
        });
      }
    },
    components: {
      VueSelect: vueSelect_default
    }
  });
  var __vue_render__21 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _c(
        "div",
        { staticClass: "l-full-col" },
        [
          _c("VueSelect", {
            attrs: {
              multiple: "",
              label: _vm.labelMethod,
              tabindex: 2,
              placeholder: _vm.placeholder,
              options: _vm.options,
              searchable: false,
              closeOnSelect: false
            },
            model: {
              value: _vm.selectedValues,
              callback: function($$v) {
                _vm.selectedValues = $$v;
              },
              expression: "selectedValues"
            }
          })
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "div",
        { staticClass: "c-library-filters__added l-full-col" },
        _vm._l(_vm.selectedValues, function(option) {
          return _c("span", { staticClass: "o-tag o-tag--black" }, [
            _c("input", {
              attrs: { type: "hidden", name: _vm.paramName },
              domProps: { value: option.id }
            }),
            _vm._v("\n      " + _vm._s(_vm.optionFor(option)) + "\n      "),
            _c(
              "button",
              {
                on: {
                  click: function($event) {
                    return _vm.removeOption(option);
                  }
                }
              },
              [
                _c("svg", { staticClass: "o-button__svg--white" }, [
                  _c("use", { attrs: { "xlink:href": "#plus" } })
                ])
              ]
            )
          ]);
        }),
        0
      )
    ]);
  };
  var __vue_staticRenderFns__21 = [];
  __vue_render__21._withStripped = true;
  var __vue_inject_styles__21 = void 0;
  var __vue_scope_id__21 = void 0;
  var __vue_module_identifier__21 = void 0;
  var __vue_is_functional_template__21 = false;
  function __vue_normalize__21(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/library/FilterSelect.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__21 = /* @__PURE__ */ __vue_normalize__21(
    { render: __vue_render__21, staticRenderFns: __vue_staticRenderFns__21 },
    __vue_inject_styles__21,
    __vue_script__21,
    __vue_scope_id__21,
    __vue_is_functional_template__21,
    __vue_module_identifier__21,
    false,
    void 0,
    void 0,
    void 0
  );
  var FilterSelect_default = __vue_component__21;

  // application/images/artwork/safe.svg
  var safe_default = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 580.51 678.4"><defs><style>.a{fill:none;}.b{opacity:0.29;}.c{fill:#010101;}.d{fill:#676767;}.e{fill:#818181;}.f{opacity:0.13;}.g{fill:#333;}.h{opacity:0.2;}.i{fill:#b4b4b4;}.j{fill:#989898;}.k{clip-path:url(#a);}.l{opacity:0.31;}.m{opacity:0.27;}.n{fill:#fff;}.o{opacity:0.61;}</style><clipPath id="a" transform="translate(-109.75 -60.8)"><ellipse class="a" cx="400.99" cy="369.32" rx="95.76" ry="113.74"/></clipPath></defs><title>safe</title><g class="b"><ellipse class="c" cx="290.34" cy="655.98" rx="277.82" ry="22.42"/></g><path class="d" d="M269.83,706.81H218A19.05,19.05,0,0,1,198.7,688v-9.13A19.05,19.05,0,0,1,218,660.1h51.82a19.06,19.06,0,0,1,19.31,18.79V688A19.06,19.06,0,0,1,269.83,706.81Z" transform="translate(-109.75 -60.8)"/><path class="c" d="M269.83,715l-30.46-.54-15.23-.31-3.81-.08-1.9,0-1.15-.06-1.31-.09a27,27,0,0,1-10-3c-6.08-3.2-11-8.75-12.43-15.29a25.08,25.08,0,0,1-.57-4.86c0-.81,0-1.61.07-2.41s.11-1.28.16-1.93a50.91,50.91,0,0,0,0-7.41,27.19,27.19,0,0,1,5.83-18.41A25,25,0,0,1,218,651.38c10.15-.29,20.3-.29,30.46-.09l15.23.32,3.81.09,1.9,0c.27,0,.7,0,1.18,0l1.37.08a28.69,28.69,0,0,1,10.47,3,28.31,28.31,0,0,1,15.2,21c.13.88.18,1.77.25,2.67l.1,2c.06,2.47.14,4.94.11,7.41a26.66,26.66,0,0,1-8.34,19.39A28.35,28.35,0,0,1,269.83,715Zm0-16.37a10.84,10.84,0,0,0,7.48-3.38,10.54,10.54,0,0,0,2.88-7.37c0-2.47.05-4.94.1-7.41l.07-1.73c0-.34,0-.69,0-1a11.65,11.65,0,0,0-.27-2,9.83,9.83,0,0,0-5.36-6.21,10.7,10.7,0,0,0-4.09-1h-.53a7.11,7.11,0,0,0-.72,0l-1.9,0-3.81.09-15.23.31c-10.16.21-20.31.21-30.46-.08a15.29,15.29,0,0,0-8.49,1.87,10.57,10.57,0,0,0-5.38,8.34,50.91,50.91,0,0,0,0,7.41c.07.58.1,1.31.19,1.78s.18.87.31,1.28a14.42,14.42,0,0,0,1,2.38,14.82,14.82,0,0,0,6.82,6.69,12.22,12.22,0,0,0,4.59,1h1.35l1.9-.05,3.81-.08,15.23-.31Z" transform="translate(-109.75 -60.8)"/><path class="d" d="M587.64,706.81H535.81A19,19,0,0,1,516.51,688v-9.13a19,19,0,0,1,19.3-18.79h51.83a19,19,0,0,1,19.3,18.79V688A19,19,0,0,1,587.64,706.81Z" transform="translate(-109.75 -60.8)"/><path class="c" d="M587.64,715l-30.46-.54L542,714.15l-3.81-.08-1.9,0-1.16-.06-1.3-.09a27,27,0,0,1-10-3c-6.07-3.2-11-8.75-12.42-15.29a25.9,25.9,0,0,1-.58-4.86c0-.81.05-1.61.08-2.41s.1-1.28.15-1.93a49.54,49.54,0,0,0,0-7.41,27.09,27.09,0,0,1,5.83-18.41,25,25,0,0,1,18.91-9.24c10.16-.29,20.31-.29,30.46-.09l15.23.32,3.81.09,1.91,0c.26,0,.7,0,1.18,0l1.37.08a28.69,28.69,0,0,1,10.47,3,28.31,28.31,0,0,1,15.2,21c.13.88.18,1.77.25,2.67l.1,2c.05,2.47.13,4.94.1,7.41a26.84,26.84,0,0,1-2.14,10.51,27.3,27.3,0,0,1-6.19,8.88A28.35,28.35,0,0,1,587.64,715Zm0-16.37a10.86,10.86,0,0,0,7.48-3.38,10.54,10.54,0,0,0,2.88-7.37c0-2.47,0-4.94.1-7.41l.07-1.73c0-.34,0-.69,0-1a11.66,11.66,0,0,0-.28-2,9.82,9.82,0,0,0-5.35-6.21,10.7,10.7,0,0,0-4.09-1h-.53a7.19,7.19,0,0,0-.72,0l-1.91,0-3.81.09-15.23.31c-10.15.21-20.3.21-30.46-.08a15.26,15.26,0,0,0-8.48,1.87A10.54,10.54,0,0,0,522,679a50.91,50.91,0,0,0,0,7.41c.07.58.09,1.31.19,1.78s.18.87.3,1.28a14.45,14.45,0,0,0,1,2.38,14.82,14.82,0,0,0,6.82,6.69,12.13,12.13,0,0,0,4.59,1h1.35l1.9-.05,3.81-.08,15.23-.31Z" transform="translate(-109.75 -60.8)"/><path class="e" d="M617.51,667.57H182.67c-33.36,0-60.4-26.32-60.4-58.78V129.18c0-32.47,27-58.79,60.4-58.79H617.51c33.35,0,60.39,26.32,60.39,58.79V608.79C677.9,641.25,650.86,667.57,617.51,667.57Z" transform="translate(-109.75 -60.8)"/><g class="f"><path class="c" d="M598.63,642.39H200.2c-30.56,0-55.34-24.11-55.34-53.86V149.08c0-29.75,24.78-53.86,55.34-53.86H598.63c30.57,0,55.34,24.11,55.34,53.86V588.53C654,618.28,629.2,642.39,598.63,642.39Z" transform="translate(-109.75 -60.8)"/></g><path class="c" d="M617.51,674c-46.56,0-93.11,1.37-139.67,3.16s-93.11,3-139.66,2.85-93.11-.78-139.66-1.92l-8.73-.23-4.36-.11c-1.46,0-2.84,0-4.64-.2l-5.08-.37c-1.68-.23-3.36-.55-5-.83a36.7,36.7,0,0,1-5-1.13c-1.62-.48-3.28-.82-4.86-1.44A73,73,0,0,1,143,664.64,72.06,72.06,0,0,1,128.66,651a70.77,70.77,0,0,1-9.74-16.9,69.63,69.63,0,0,1-4.39-18.79c-.36-6.74,0-12,.06-17.75l.29-17,.51-34,.19-34c.3-22.66-.12-45.31-1-68s-2.45-45.31-3.43-68c-.59-11.33-.82-22.66-1.17-34-.19-11.33-.3-22.65-.19-34,0-45.31,1.19-90.62,2.6-135.94l1-34,.27-8.5c0-1.32.19-3.12.29-4.67a36.88,36.88,0,0,1,.52-4.8,65.62,65.62,0,0,1,5.66-18.41,68.07,68.07,0,0,1,43.31-36,76.3,76.3,0,0,1,19.18-2.61q139.66.47,279.32-1.25L601.65,61l8.73-.1,4.37,0c1.46,0,2.83-.06,4.62,0l5.07.21c1.68.17,3.36.43,5,.66a36.65,36.65,0,0,1,5,1c1.64.43,3.32.72,4.92,1.29a70.73,70.73,0,0,1,33.36,22,71.23,71.23,0,0,1,10.56,17,72.12,72.12,0,0,1,5.15,19.34c.58,7.1.44,12.26.55,18l.2,17,.55,68q.29,34,.34,68l.16,68-.16,34q0,17-.36,34c-.58,45.32-2.07,90.63-3.3,135.94l-.81,34-.2,8.5c0,1.33-.17,3.08-.25,4.62a37.85,37.85,0,0,1-.47,4.74,64.85,64.85,0,0,1-5.41,18.22,67.39,67.39,0,0,1-10.51,15.88,71.44,71.44,0,0,1-14.58,12.38,69.75,69.75,0,0,1-17.58,7.85A73.55,73.55,0,0,1,617.51,674Zm0-12.84a60.74,60.74,0,0,0,15.31-2.26,56.4,56.4,0,0,0,14-6.4,51,51,0,0,0,19.46-22.84,50.83,50.83,0,0,0,3.81-14.42,27.14,27.14,0,0,0,.25-3.72c0-1.29.13-2.36.06-3.86l-.19-8.5-.81-34c-1.23-45.31-2.72-90.62-3.31-135.94-.2-11.32-.34-22.65-.36-34l-.16-34,.17-68q0-34,.34-68l.54-68,.21-17c.06-5.57.21-11.74,0-16a47.52,47.52,0,0,0-10.37-25.65A52.73,52.73,0,0,0,646,89.07a53.38,53.38,0,0,0-12.86-6.43c-1.12-.45-2.32-.64-3.48-1a21.52,21.52,0,0,0-3.54-.78l-3.6-.58-3.65-.22c-1.12-.11-2.65-.11-4.1-.12l-4.37,0-8.73-.1L462,78.24Q322.33,76.59,182.67,77c-20.84-.13-40.63,13.2-48,31.64a49.72,49.72,0,0,0-3.56,14.23,24.67,24.67,0,0,0-.2,3.65c0,1.28-.11,2.3,0,3.81l.27,8.5,1.05,34c1.41,45.32,2.62,90.63,2.6,135.94.11,11.33,0,22.65-.2,34s-.57,22.66-1.16,34c-1,22.65-2.55,45.31-3.43,68s-1.3,45.31-1,68l.19,34,.51,34,.29,17c.15,5.59.18,11.65.66,16.22a53.63,53.63,0,0,0,4,14.08,51.52,51.52,0,0,0,7.95,12.25A51,51,0,0,0,167,655.53c1.14.39,2.37.53,3.54.83a22.71,22.71,0,0,0,3.58.62l3.6.41,3.63.05c1.11.06,2.64,0,4.1,0l4.36-.12,8.73-.23q69.82-1.71,139.66-1.91c46.55-.11,93.11,1.07,139.66,2.84S571,661.14,617.51,661.15Z" transform="translate(-109.75 -60.8)"/><path class="g" d="M574.76,620.5H225.41c-33.36,0-60.4-26.32-60.4-58.78V174c0-32.46,27-58.78,60.4-58.78H574.76c33.36,0,60.4,26.32,60.4,58.78V561.72C635.16,594.18,608.12,620.5,574.76,620.5Z" transform="translate(-109.75 -60.8)"/><path class="c" d="M574.76,625.59c-78.11.22-156.23.5-234.35,1.32l-58.59.56-29.29.28-14.65.14-7.33.07c-2.5,0-4.7.12-7.59,0a68.87,68.87,0,0,1-31.6-8.49,67.79,67.79,0,0,1-24-22A65,65,0,0,1,156.69,567c-.46-5.71-.32-10.07-.41-14.91l-.15-14.25c-.83-76-1.13-152.07-1.36-228.1,0-19,.27-38,.9-57l2-57,.37-14.26.12-7.13c.16-2.56.24-5.26.58-7.86a68.69,68.69,0,0,1,11.38-29.37,68.22,68.22,0,0,1,55.33-29.66l234.35,1.27,117.41.2a68.26,68.26,0,0,1,54.6,29.94,63.81,63.81,0,0,1,10.69,29.9c.47,5.6.36,10,.47,14.83l.2,14.26c.6,38,.37,76,.19,114l-.46,57-.72,57L640.82,540l-.13,14.25-.05,7.13c-.13,2.52-.19,5.16-.5,7.71a64,64,0,0,1-11.2,28.75,66.84,66.84,0,0,1-23.57,20.39A68.83,68.83,0,0,1,574.76,625.59Zm0-10.17a58.05,58.05,0,0,0,25.71-6.23A56,56,0,0,0,620.24,592a53.81,53.81,0,0,0,9.09-24.14c.23-2.16.24-4.29.35-6.51l0-7.13L629.51,540l-1.33-114-.71-57-.47-57c-.18-38-.4-76,.19-114l.21-14.26c0-4.68.23-9.78,0-13.67a49.81,49.81,0,0,0-7.65-23.63,51.36,51.36,0,0,0-18.29-17.54,53.75,53.75,0,0,0-24.74-7c-2.05-.19-4.7-.11-7.08-.15l-7.33,0H547.65l-29.3,0-58.59.14L225.41,123a56.82,56.82,0,0,0-24.74,5.35,53.22,53.22,0,0,0-19.58,16.15A49.31,49.31,0,0,0,172.18,168c-.21,2.12-.19,4.18-.28,6.36l.12,7.13.37,14.26,2,57c.63,19,.87,38,.9,57-.23,76-.53,152.06-1.36,228.1l-.15,14.25c0,4.67-.19,9.82.07,13.6a48.81,48.81,0,0,0,7.62,23.09,52.55,52.55,0,0,0,42.08,24.07c2,.19,4.67.12,7,.17l7.33.07,14.65.14,29.29.28,58.59.56C418.53,614.91,496.65,615.2,574.76,615.42Z" transform="translate(-109.75 -60.8)"/><g class="h"><path class="c" d="M159,663l39.92-49,408-2.38-72.81,56Z" transform="translate(-109.75 -60.8)"/></g><path class="i" d="M561.51,620.5H237.88c-39.24,0-71.06-26.32-71.06-58.78V174c0-32.46,31.82-58.78,71.06-58.78H561.51c39.25,0,71.07,26.32,71.07,58.78V561.72C632.58,594.18,600.76,620.5,561.51,620.5Z" transform="translate(-109.75 -60.8)"/><path class="c" d="M561.51,621.6c-84.62-.21-169.25,8.42-253.87,8.89l-31.74.24-31.73-.1-4,0c-1.3,0-2.61,0-4.24-.12a89,89,0,0,1-9.23-.71,78.41,78.41,0,0,1-9.07-1.54l-4.47-1-4.33-1.36a83.4,83.4,0,0,1-30.13-17.06,66.88,66.88,0,0,1-18.08-25.95c-1-2.38-1.49-4.86-2.21-7.29-.46-2.47-.88-4.95-1.17-7.42-.08-2.44-.25-5.11-.2-7.34l.12-6.56c.4-17.5.5-35,.56-52.51,0-70-2.28-140-2.89-210-.19-35-.33-70,1-105l.56-13.19c.28-2.5.36-5,.86-7.47l.82-3.69.41-1.84.62-1.8a64.4,64.4,0,0,1,16.54-26.12c15.43-15,39-23.5,62.22-23.17q31.74.41,63.47.28c21.16,0,42.32-.26,63.47-.5L491.76,107c10.58-.22,21.16-.29,31.74-.39s21.15-.22,31.73-.2h4c1.3,0,2.61,0,4.21.07a88.69,88.69,0,0,1,9.07.58,76.65,76.65,0,0,1,9,1.42l4.42,1,4.29,1.28c11.33,3.63,21.82,9.23,29.93,16.68a63.62,63.62,0,0,1,17.64,25.77c.9,2.35,1.37,4.81,2,7.2.4,2.45.74,4.9,1,7.33,0,2.41.11,5,0,7.23l-.38,6.56c-1,17.5-1.86,35-2.31,52.51-1.43,70,3.13,140,4.48,210,.1,8.75.33,17.5.32,26.25l0,26.26q-.08,26.25-2.29,52.5c-.38,4.4-.66,8.71-1.12,13.17-.4,2.39-.58,4.78-1.18,7.11l-1,3.49-.48,1.73-.68,1.69a63.74,63.74,0,0,1-16.66,24.07C604.45,613.83,583.08,621.54,561.51,621.6Zm0-2.19c20.84.12,41.32-8.73,52.75-22.6a48.69,48.69,0,0,0,10.9-22.72l.31-1.49.12-1.51.24-3c.14-2-.12-4-.14-6L624.62,549q-2.22-26.25-2.29-52.5l0-26.26c0-8.75.22-17.5.32-26.25,1.35-70,5.91-140,4.49-210-.46-17.51-1.28-35-2.32-52.51l-.37-6.56c-.15-2.16-.48-3.93-.68-5.89-.41-1.9-.91-3.78-1.4-5.64-.74-1.82-1.25-3.69-2.13-5.45a54.72,54.72,0,0,0-14.89-18.8,64,64,0,0,0-22.65-11.89l-3.15-1-3.26-.7a53.54,53.54,0,0,0-6.61-1.06,60,60,0,0,0-6.72-.46c-1-.08-2.38-.08-3.72-.08h-4c-10.58,0-21.16-.11-31.73-.21s-21.16-.17-31.74-.38l-126.94-2.17c-21.15-.25-42.31-.52-63.47-.5s-42.31,0-63.47.28c-19.18.26-37.45,8.36-48.46,20.74a47.58,47.58,0,0,0-11,20.68l-.37,1.37-.18,1.41-.38,2.8c-.24,1.86-.09,3.75-.18,5.62l.51,13.06c1.32,35,1.18,70,1,105-.61,70-2.91,140-2.89,210,.06,17.51.16,35,.56,52.51l.12,6.56c.08,2.15.35,3.85.48,5.78.35,1.86.78,3.71,1.2,5.55.69,1.79,1.15,3.63,2,5.37a51,51,0,0,0,14.44,18.61,61.38,61.38,0,0,0,22.45,11.51l3.12.9,3.21.62a52,52,0,0,0,6.49.94,62.57,62.57,0,0,0,6.57.34c1,.06,2.34,0,3.69,0l4,0,31.73-.1,31.74.23C392.26,611,476.89,619.62,561.51,619.41Z" transform="translate(-109.75 -60.8)"/><path class="j" d="M162.29,316h0c-10.49,0-19.06-8.35-19.06-18.55V216.15c0-10.2,8.57-18.55,19.06-18.55h0c10.48,0,19.06,8.35,19.06,18.55v81.28C181.35,307.63,172.77,316,162.29,316Z" transform="translate(-109.75 -60.8)"/><path class="c" d="M162.29,325.87a29.2,29.2,0,0,1-23-12.09,26.43,26.43,0,0,1-4.73-12,29.29,29.29,0,0,1-.17-5.76l.2-4.36,1.78-34.87c.54-11.63,1-23.25,1.23-34.88l.1-4.36a29.32,29.32,0,0,1,.42-5.19,23,23,0,0,1,4.46-10.22,25,25,0,0,1,39.6-.1,23.13,23.13,0,0,1,4.61,10.28,31.21,31.21,0,0,1,.44,5.23l.15,4.36c.36,11.63.88,23.25,1.46,34.88l1.68,34.87.2,4.36a28.9,28.9,0,0,1-.2,5.83A27,27,0,0,1,185.62,314a28.74,28.74,0,0,1-10.07,8.77A27,27,0,0,1,162.29,325.87Zm0-19.79a16,16,0,0,0,4-1,9,9,0,0,0,3.43-2.45,8.51,8.51,0,0,0,2-3.77c.33-.78.38-4.47.53-7.23l1.68-34.87c.58-11.63,1.1-23.25,1.46-34.88a62.31,62.31,0,0,0,0-7.81,12.29,12.29,0,0,0-2.23-5.65,13.55,13.55,0,0,0-21.89-.1,12.55,12.55,0,0,0-2.39,5.71,74.83,74.83,0,0,0,0,7.85c.21,11.63.7,23.25,1.23,34.88l1.78,34.87c.16,2.77.2,6.42.56,7.3a9.15,9.15,0,0,0,2.12,3.92A9.37,9.37,0,0,0,162.29,306.08Z" transform="translate(-109.75 -60.8)"/><path class="j" d="M162.29,552.64h0c-10.49,0-19.06-8.35-19.06-18.55V452.82c0-10.21,8.57-18.56,19.06-18.56h0c10.48,0,19.06,8.35,19.06,18.56v81.27C181.35,544.29,172.77,552.64,162.29,552.64Z" transform="translate(-109.75 -60.8)"/><path class="c" d="M162.29,562.54a29.24,29.24,0,0,1-23-12.1,26.39,26.39,0,0,1-4.73-12,29.21,29.21,0,0,1-.17-5.75l.2-4.36,1.78-34.88c.54-11.62,1-23.25,1.23-34.87l.1-4.36a29.32,29.32,0,0,1,.42-5.19,23,23,0,0,1,4.46-10.22,25,25,0,0,1,39.6-.1A23.09,23.09,0,0,1,186.77,449a31.32,31.32,0,0,1,.44,5.24l.15,4.36c.36,11.62.88,23.25,1.46,34.87l1.68,34.88.2,4.36a28.81,28.81,0,0,1-.2,5.82,27,27,0,0,1-4.88,12.15,28.74,28.74,0,0,1-10.07,8.77A27,27,0,0,1,162.29,562.54Zm0-19.79a15.57,15.57,0,0,0,4-1,9,9,0,0,0,3.43-2.45,8.51,8.51,0,0,0,2-3.77c.33-.77.38-4.46.53-7.22l1.68-34.88c.58-11.62,1.1-23.25,1.46-34.87a62.31,62.31,0,0,0,0-7.81,12.29,12.29,0,0,0-2.23-5.65,13.54,13.54,0,0,0-21.89-.1,12.51,12.51,0,0,0-2.39,5.7,75,75,0,0,0,0,7.86c.21,11.62.7,23.25,1.23,34.87l1.78,34.88c.16,2.76.2,6.42.56,7.3a9.15,9.15,0,0,0,2.12,3.92A9.43,9.43,0,0,0,162.29,542.75Z" transform="translate(-109.75 -60.8)"/><g class="k"><ellipse class="g" cx="291.24" cy="308.52" rx="95.76" ry="113.74"/><polygon class="c" points="314.24 257.93 307.44 243.47 364.14 218.22 370.94 232.69 314.24 257.93"/><polygon class="c" points="319.98 296.39 318.25 280.57 389.69 273.18 391.42 289 319.98 296.39"/><polygon class="c" points="378.52 361.98 311.95 338.9 319.12 319.31 385.69 342.38 378.52 361.98"/><polygon class="c" points="358.29 407.96 308.51 368.9 321.92 352.71 371.7 391.76 358.29 407.96"/><polygon class="c" points="253.69 257.93 260.49 243.47 203.78 218.22 196.98 232.69 253.69 257.93"/><polygon class="c" points="247.94 296.39 249.67 280.57 178.23 273.18 176.51 289 247.94 296.39"/><polygon class="c" points="189.41 361.98 255.97 338.9 248.81 319.31 182.24 342.38 189.41 361.98"/><polygon class="c" points="223.63 408.96 273.42 369.9 260.01 353.71 210.23 392.76 223.63 408.96"/><polygon class="c" points="299.63 251.04 283.48 251.13 284.86 188.19 301 188.11 299.63 251.04"/><polygon class="c" points="299.63 421.04 283.48 421.13 284.86 358.19 301 358.11 299.63 421.04"/></g><path class="c" d="M401,493c-58.45,0-106-55.49-106-123.7s47.55-123.71,106-123.71,106,55.5,106,123.71S459.44,493,401,493Zm0-227.48c-47.16,0-85.53,46.55-85.53,103.78S353.83,473.1,401,473.1s85.52-46.55,85.52-103.77S448.15,265.55,401,265.55Z" transform="translate(-109.75 -60.8)"/><ellipse class="j" cx="290.45" cy="308.22" rx="56.41" ry="71.16"/><path class="c" d="M467.41,369c-.37,18.38-5.47,37-16.59,52.53a68.83,68.83,0,0,1-21.41,19.68,57,57,0,0,1-29.22,7.83c-10.24-.23-20.52-3.26-28.44-9.05l-2.95-2.16-2.67-2.42a62.49,62.49,0,0,1-5-5c-.76-.89-1.69-1.63-2.39-2.56s-1.47-1.79-2.25-2.64c-1.59-1.7-2.89-3.58-4.33-5.38a111.16,111.16,0,0,1-13.92-23.79,74.69,74.69,0,0,1-5.94-27c-.27-18.51,4.67-37.52,16-53.37a70.11,70.11,0,0,1,21.84-20.15,59.86,59.86,0,0,1,30.05-8.26,61.73,61.73,0,0,1,29.91,8.48,65.81,65.81,0,0,1,21.87,20,87.08,87.08,0,0,1,12,25.77A100.7,100.7,0,0,1,467.41,369Zm-21.62,0a79.84,79.84,0,0,0-3.54-21.54A66.48,66.48,0,0,0,433,328.32a56,56,0,0,0-14.35-14.45,33.3,33.3,0,0,0-18.43-5.4,34.91,34.91,0,0,0-18.29,5.62,50.17,50.17,0,0,0-14.37,14.3c-7.81,11.66-11.74,26.09-12.23,40.63a141.93,141.93,0,0,0,1.08,22,53.25,53.25,0,0,0,7.32,21.14,30.5,30.5,0,0,0,3.31,4.56,26.54,26.54,0,0,0,4,4l2.16,1.75c.75.56,1.58,1,2.35,1.48l2.34,1.42,2.47,1.13c6.51,2.93,13.07,5,19.89,4.82a37.7,37.7,0,0,0,19.12-6,51.61,51.61,0,0,0,14.81-14.78C442.17,398.55,445.93,383.68,445.79,369Z" transform="translate(-109.75 -60.8)"/><g class="l"><path class="c" d="M450.12,369.8c0,34.62-19.14,71.78-40,71.94-7.83.06-14.52-5.11-19.45-10.54A60.16,60.16,0,0,0,407.93,417c13.46-16.26,13.58-34.84,13.65-45.25.07-11.12.25-38.57-19.62-54a46.36,46.36,0,0,0-14.33-7.46c9.84-11,17.74-12.59,22.49-12.45C431.74,298.54,450.11,335.93,450.12,369.8Z" transform="translate(-109.75 -60.8)"/></g><g class="m"><ellipse class="n" cx="269.57" cy="310.98" rx="23.04" ry="48.2"/></g><g class="o"><path class="n" d="M162.29,300.15a5.05,5.05,0,0,1-5.12-5V214a5.12,5.12,0,0,1,10.24,0v81.2A5.06,5.06,0,0,1,162.29,300.15Z" transform="translate(-109.75 -60.8)"/></g><g class="o"><path class="n" d="M162.29,536.81a5.05,5.05,0,0,1-5.12-5v-81.2a5.12,5.12,0,0,1,10.24,0v81.2A5.06,5.06,0,0,1,162.29,536.81Z" transform="translate(-109.75 -60.8)"/></g></svg>';

  // application/components/paywall/SubscriptionRequiredButton.vue
  var __vue_script__22 = Vue.extend({
    name: "SubscriptionRequired",
    props: {
      buttonClass: String,
      buttonContent: String,
      signUpPath: {
        default: newSessionPath_default({ signup: true }),
        type: String
      },
      signInPath: {
        default: newSessionPath_default({ signup: false }),
        type: String
      },
      eventCategory: {
        required: false,
        type: String
      },
      eventAction: {
        required: false,
        type: String
      }
    },
    data() {
      return {
        subscriptionUrl: `${window.CAROLUS_ENV.KERCHING_BASE_URL}/products/subscription`,
        SubscribeSceneImage: safe_default,
        showModal: false
      };
    },
    methods: {
      recordAccountSignupEvent() {
        triggerEvent("global_modal_createAccount", "createAccount");
      },
      handleButtonClick() {
        if (this.eventCategory && this.eventAction) {
          triggerEvent(this.eventCategory, this.eventAction);
        }
        this.showModal = true;
      }
    },
    components: {
      Modal: Modal_default
    }
  });
  var __vue_render__22 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _vm.showModal ? _c("Modal", {
          on: {
            closeModal: function($event) {
              _vm.showModal = false;
            }
          },
          scopedSlots: _vm._u(
            [
              {
                key: "graphic",
                fn: function() {
                  return [
                    _c("img", {
                      staticClass: "c-modal__artwork--subscribe",
                      staticStyle: { "max-width": "180px !important" },
                      attrs: {
                        src: _vm.SubscribeSceneImage,
                        alt: "Create account"
                      }
                    })
                  ];
                },
                proxy: true
              },
              {
                key: "title",
                fn: function() {
                  return [
                    _vm._v("Become a subscriber today "),
                    _c("br"),
                    _vm._v(" "),
                    _c("span", { staticClass: "c-modal__subtitle" }, [
                      _vm._v(
                        "Access these project files, as well as the project files for 3,000+ videos, as a kodeco.com subscriber!"
                      )
                    ])
                  ];
                },
                proxy: true
              },
              {
                key: "content",
                fn: function() {
                  return [
                    _c(
                      "a",
                      {
                        staticClass: "o-button--green",
                        attrs: { href: _vm.subscriptionUrl }
                      },
                      [
                        _c("span", { staticClass: "o-button__label" }, [
                          _vm._v("Learn more")
                        ]),
                        _vm._v(" "),
                        _c(
                          "i",
                          {
                            staticClass: "o-button__icon--right o-button__icon--white"
                          },
                          [
                            _c(
                              "svg",
                              {
                                staticClass: "l-button__svg-arrow o-button__svg o-button__svg--green"
                              },
                              [
                                _c("use", {
                                  attrs: { "xlink:href": "#arrow-right" }
                                })
                              ]
                            )
                          ]
                        )
                      ]
                    )
                  ];
                },
                proxy: true
              }
            ],
            null,
            false,
            2966785133
          )
        }) : _vm._e(),
        _vm._v(" "),
        _vm.buttonContent ? _c("button", {
          class: _vm.buttonClass,
          domProps: { innerHTML: _vm._s(_vm.buttonContent) },
          on: { click: _vm.handleButtonClick }
        }) : _c(
          "button",
          { class: _vm.buttonClass, on: { click: _vm.handleButtonClick } },
          [_vm._t("default")],
          2
        )
      ],
      1
    );
  };
  var __vue_staticRenderFns__22 = [];
  __vue_render__22._withStripped = true;
  var __vue_inject_styles__22 = function(inject) {
    if (!inject)
      return;
    inject("data-v-4dc81455_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "SubscriptionRequiredButton.vue" }, media: void 0 });
  };
  var __vue_scope_id__22 = void 0;
  var __vue_module_identifier__22 = void 0;
  var __vue_is_functional_template__22 = false;
  function __vue_normalize__22(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/paywall/SubscriptionRequiredButton.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__11() {
    const styles = __vue_create_injector__11.styles || (__vue_create_injector__11.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__22 = /* @__PURE__ */ __vue_normalize__22(
    { render: __vue_render__22, staticRenderFns: __vue_staticRenderFns__22 },
    __vue_inject_styles__22,
    __vue_script__22,
    __vue_scope_id__22,
    __vue_is_functional_template__22,
    __vue_module_identifier__22,
    false,
    __vue_create_injector__11,
    void 0,
    void 0
  );
  var SubscriptionRequiredButton_default = __vue_component__22;

  // application/components/progressions/MarkAsCompleteButton.vue
  var import_throttle3 = __toESM(require_throttle(), 1);
  var __vue_script__23 = Vue.extend({
    name: "MarkAsCompleteButton",
    props: {
      initiallyComplete: {
        type: Boolean,
        default: false
      },
      loggedIn: {
        type: Boolean,
        required: true
      },
      contentId: {
        type: Number,
        required: true
      },
      contentDuration: {
        type: Number,
        required: true
      },
      articleContainerSelector: {
        type: String,
        default: null
      },
      contentType: {
        type: String,
        default: "tutorial"
      },
      trackedEventCategory: {
        type: String,
        default: "article_end_markComplete"
      },
      trackedEventAction: {
        type: String,
        default: "markComplete"
      },
      iconOnly: {
        type: Boolean,
        default: false
      }
    },
    computed: {
      buttonText() {
        return this.complete ? "Completed" : "Mark complete";
      },
      buttonClass() {
        return this.complete ? "btn-mark-complete--completed" : "";
      }
    },
    data() {
      return {
        complete: this.initiallyComplete,
        inProgress: false,
        networkOperationInProgress: false,
        articleContainer: this.articleContainerSelector ? document.querySelector(this.articleContainerSelector) : null,
        shouldTrackInProgress: !this.initiallyComplete
      };
    },
    methods: {
      toggleComplete() {
        this.inProgress = false;
        this.shouldTrackInProgress = false;
        this.complete = !this.complete;
        this.updateProgression();
      },
      updateProgression() {
        this.networkOperationInProgress = true;
        const data = new FormData();
        const progress = this.complete ? this.contentDuration : this.inProgress ? 1 : 0;
        data.append("progression[content_id]", this.contentId);
        data.append("progression[progress]", progress);
        data.append("progression[target]", this.contentDuration);
        data.append("progression[finished]", this.complete);
        Rails.ajax({
          url: "/progressions",
          type: "POST",
          data,
          dataType: "json",
          complete: () => {
            this.networkOperationInProgress = false;
          },
          success: () => {
            this.emitNotification();
          },
          error: (e) => {
            console.log(e);
          }
        });
      },
      emitNotification() {
        if (this.inProgress) {
          return;
        }
        if (this.complete) {
          EventBus.$emit(FLASH_SUCCESS, `You have marked this ${this.contentType} as complete.`, true);
          EventBus.$emit(CONTENT_MARK_COMPLETE, this.contentId);
          triggerEvent(this.trackedEventCategory, this.trackedEventAction);
        } else {
          EventBus.$emit(FLASH_SUCCESS, `You have marked this ${this.contentType} as incomplete.`, true);
          EventBus.$emit(CONTENT_MARK_INCOMPLETE, this.contentId);
        }
      },
      scrollHandler: (0, import_throttle3.default)(function() {
        if (!this.loggedIn) {
          return;
        }
        if (this.networkOperationInProgress) {
          return;
        }
        if (!this.shouldTrackInProgress) {
          return;
        }
        if (this.userHasStartedReadingArticle()) {
          this.inProgress = true;
          this.shouldTrackInProgress = false;
          this.updateProgression();
        }
      }, 100),
      userHasStartedReadingArticle() {
        if (!this.articleContainer) {
          return false;
        }
        const boundingRect = this.articleContainer.getBoundingClientRect();
        return boundingRect.top < Math.max(-1500, boundingRect.height * -0.5);
      }
    },
    created() {
      EventBus.$on(CONTENT_MARK_COMPLETE, (messageContentId) => {
        if (this.contentId === messageContentId && !this.complete) {
          this.complete = true;
        }
      });
      EventBus.$on(CONTENT_MARK_INCOMPLETE, (messageContentId) => {
        if (this.contentId === messageContentId && this.complete) {
          this.complete = false;
        }
      });
    },
    mounted() {
      window.addEventListener("scroll", this.scrollHandler, setPassive(true));
    },
    destroyed() {
      window.removeEventListener("scroll", this.scrollHandler);
    },
    components: {
      LoginRequiredButton: LoginRequiredButton_default,
      ButtonContent: ButtonContent_default,
      IconButtonContent: IconButtonContent_default
    }
  });
  var __vue_render__23 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return !_vm.loggedIn ? _c(
      "LoginRequiredButton",
      {
        attrs: {
          buttonClass: "o-button--dark l-margin-sides-8",
          eventCategory: "article_end_markCompleteAttempt",
          eventAction: "markComplete"
        }
      },
      [
        _c("ButtonContent", {
          attrs: { text: _vm.buttonText, svgUncheckedClass: "" }
        })
      ],
      1
    ) : _vm.iconOnly ? _c(
      "button",
      {
        staticClass: "btn-icon btn-icon-mark-complete",
        on: { click: _vm.toggleComplete }
      },
      [
        _c("IconButtonContent", {
          attrs: {
            text: _vm.buttonText,
            checked: _vm.complete,
            saving: _vm.networkOperationInProgress,
            disabled: _vm.networkOperationInProgress,
            svgUncheckedClass: "",
            svgCheckedClass: "",
            checkedIconInputClass: "",
            svgUncheckedHref: "#checkmark-completed",
            svgCheckedHref: "#checkmark-completed-color"
          }
        })
      ],
      1
    ) : _c(
      "button",
      {
        class: [_vm.buttonClass, "btn-mark-complete"],
        on: { click: _vm.toggleComplete }
      },
      [
        _c("ButtonContent", {
          attrs: {
            text: _vm.buttonText,
            checked: _vm.complete,
            saving: _vm.networkOperationInProgress,
            disabled: _vm.networkOperationInProgress,
            svgUncheckedClass: "",
            svgCheckedClass: "",
            svgUncheckedHref: "#checkmark-completed",
            svgCheckedHref: "#checkmark-completed"
          }
        })
      ],
      1
    );
  };
  var __vue_staticRenderFns__23 = [];
  __vue_render__23._withStripped = true;
  var __vue_inject_styles__23 = function(inject) {
    if (!inject)
      return;
    inject("data-v-2143e511_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "MarkAsCompleteButton.vue" }, media: void 0 });
  };
  var __vue_scope_id__23 = void 0;
  var __vue_module_identifier__23 = void 0;
  var __vue_is_functional_template__23 = false;
  function __vue_normalize__23(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/progressions/MarkAsCompleteButton.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__12() {
    const styles = __vue_create_injector__12.styles || (__vue_create_injector__12.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__23 = /* @__PURE__ */ __vue_normalize__23(
    { render: __vue_render__23, staticRenderFns: __vue_staticRenderFns__23 },
    __vue_inject_styles__23,
    __vue_script__23,
    __vue_scope_id__23,
    __vue_is_functional_template__23,
    __vue_module_identifier__23,
    false,
    __vue_create_injector__12,
    void 0,
    void 0
  );
  var MarkAsCompleteButton_default = __vue_component__23;

  // application/components/progressions/MarkAsCompleteButtonWrapper.vue
  var __vue_script__24 = Vue.extend({
    name: "MarkAsCompleteButtonWrapper",
    props: {
      originalHTML: {
        type: String,
        default: null
      },
      disableLoginModal: {
        type: Boolean,
        default: false
      },
      loggedIn: {
        type: Boolean,
        default: false
      },
      markCompleteContentId: {
        type: Number,
        required: true
      },
      markCompleteContentTargetDuration: {
        type: Number,
        required: true
      },
      markCompleteClass: {
        type: String,
        default: null
      },
      markCompleteFadeOut: {
        type: Boolean,
        default: false
      },
      markCompleteTargetSelector: {
        type: String,
        default: null
      },
      preventToggle: {
        type: Boolean,
        default: false
      },
      contentType: {
        type: String,
        default: "tutorial"
      }
    },
    data() {
      return {
        complete: null,
        networkOperationInProgress: false
      };
    },
    computed: {
      targetElement() {
        if (this.markCompleteTargetSelector && this.markCompleteTargetSelector.length > 0) {
          return document.querySelector(this.markCompleteTargetSelector);
        }
        return this.$el.parentElement;
      },
      renderLoginButton() {
        if (this.loggedIn) {
          return false;
        }
        if (this.preventToggle) {
          return false;
        }
        if (this.disableLoginModal) {
          return false;
        }
        return true;
      }
    },
    methods: {
      toggle() {
        if (this.preventToggle) {
          return;
        }
        if (this.disableLoginModal && !this.loggedIn) {
          return;
        }
        if (this.networkOperationInProgress) {
          return;
        }
        this.updateProgression();
      },
      updateProgression() {
        this.networkOperationInProgress = true;
        this.complete = this.targetElement.classList.toggle(this.markCompleteClass);
        const progress = this.complete ? this.markCompleteContentTargetDuration : 0;
        const data = new FormData();
        data.append("progression[content_id]", this.markCompleteContentId);
        data.append("progression[progress]", progress);
        data.append("progression[finished]", this.complete);
        Rails.ajax({
          url: "/progressions",
          type: "POST",
          data,
          dataType: "json",
          complete: () => {
            this.networkOperationInProgress = false;
          },
          success: () => {
            this.emitNotification();
            if (this.markCompleteFadeOut) {
              this.targetElement.addEventListener("animationend", () => {
                this.targetElement.parentNode.removeChild(this.targetElement);
              });
              this.targetElement.style.animationName = "a-fade-out";
            }
          },
          error: (e) => {
            console.log(e);
          }
        });
      },
      emitNotification() {
        if (this.complete) {
          EventBus.$emit(FLASH_SUCCESS, `You have marked this ${this.contentType} as complete.`, true);
          EventBus.$emit(CONTENT_MARK_COMPLETE, this.markCompleteContentId);
          triggerEvent("content_markComplete", "markComplete");
        } else {
          EventBus.$emit(FLASH_SUCCESS, `You have marked this ${this.contentType} as incomplete.`, true);
          EventBus.$emit(CONTENT_MARK_INCOMPLETE, this.markCompleteContentId);
        }
      }
    },
    created() {
      EventBus.$on(CONTENT_MARK_COMPLETE, (messageContentId) => {
        if (this.markCompleteContentId === messageContentId && !this.complete) {
          this.targetElement.classList.add(this.markCompleteClass);
          this.complete = true;
        }
      });
      EventBus.$on(CONTENT_MARK_INCOMPLETE, (messageContentId) => {
        if (this.markCompleteContentId === messageContentId && this.complete) {
          this.targetElement.classList.remove(this.markCompleteClass);
          this.complete = false;
        }
      });
    },
    components: {
      LoginRequiredButton: LoginRequiredButton_default
    }
  });
  var __vue_render__24 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _vm.renderLoginButton ? _c(
      "LoginRequiredButton",
      {
        attrs: {
          eventCategory: "content_markCompleteAttempt",
          eventAction: "markComplete"
        }
      },
      [_c("span", { domProps: { innerHTML: _vm._s(_vm.originalHTML) } })]
    ) : _c("span", {
      domProps: { innerHTML: _vm._s(_vm.originalHTML) },
      on: {
        click: function($event) {
          $event.preventDefault();
          return _vm.toggle.apply(null, arguments);
        }
      }
    });
  };
  var __vue_staticRenderFns__24 = [];
  __vue_render__24._withStripped = true;
  var __vue_inject_styles__24 = function(inject) {
    if (!inject)
      return;
    inject("data-v-1b986717_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "MarkAsCompleteButtonWrapper.vue" }, media: void 0 });
  };
  var __vue_scope_id__24 = void 0;
  var __vue_module_identifier__24 = void 0;
  var __vue_is_functional_template__24 = false;
  function __vue_normalize__24(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/progressions/MarkAsCompleteButtonWrapper.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__13() {
    const styles = __vue_create_injector__13.styles || (__vue_create_injector__13.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__24 = /* @__PURE__ */ __vue_normalize__24(
    { render: __vue_render__24, staticRenderFns: __vue_staticRenderFns__24 },
    __vue_inject_styles__24,
    __vue_script__24,
    __vue_scope_id__24,
    __vue_is_functional_template__24,
    __vue_module_identifier__24,
    false,
    __vue_create_injector__13,
    void 0,
    void 0
  );
  var MarkAsCompleteButtonWrapper_default = __vue_component__24;

  // application/components/elements/StickyBanner.vue
  var import_throttle4 = __toESM(require_throttle(), 1);
  var __vue_script__25 = Vue.extend({
    name: "StickyBanner",
    props: {
      scrollDistanceToDisplay: {
        type: Number,
        default: 250
      },
      content: {
        type: String,
        default: null
      },
      userClosed: {
        type: Boolean,
        default: false
      },
      containerClass: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        showForScroll: false,
        commentsSection: document.getElementsByClassName("c-forum-comments")[0],
        endOfContentSection: document.getElementById("end-of-content")
      };
    },
    methods: {
      scrollHandler: (0, import_throttle4.default)(function() {
        const scrolledEnough = window.scrollY > this.scrollDistanceToDisplay;
        const hiddenForComments = this.commentsSection && this.commentsCurrentlyVisible();
        const hiddenForEndOfContent = this.endOfContentCurrentlyVisible();
        this.showForScroll = scrolledEnough && !hiddenForComments && !hiddenForEndOfContent;
      }, 100),
      handleCloseClicked() {
        this.userClosed = true;
      },
      commentsCurrentlyVisible() {
        if (!this.commentsSection) {
          return false;
        }
        const topOffset = this.commentsSection.getBoundingClientRect().top;
        const viewportHeight = window.innerHeight;
        return topOffset < viewportHeight;
      },
      endOfContentCurrentlyVisible() {
        if (!this.endOfContentSection) {
          return false;
        }
        const topOffset = this.endOfContentSection.getBoundingClientRect().top;
        const viewportHeight = window.innerHeight;
        return topOffset < viewportHeight;
      }
    },
    mounted() {
      window.addEventListener("scroll", this.scrollHandler, setPassive(true));
    },
    destroyed() {
      window.removeEventListener("scroll", this.scrollHandler);
    }
  });
  var __vue_render__25 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "transition",
      [
        _vm.showForScroll && !_vm.userClosed && _vm.content ? _c("div", {
          class: _vm.containerClass,
          domProps: { innerHTML: _vm._s(_vm.content) }
        }) : _vm.showForScroll && !_vm.userClosed ? _vm._t("default") : _vm._e()
      ],
      2
    );
  };
  var __vue_staticRenderFns__25 = [];
  __vue_render__25._withStripped = true;
  var __vue_inject_styles__25 = function(inject) {
    if (!inject)
      return;
    inject("data-v-689b6ca7_0", { source: ".v-enter-active[data-v-689b6ca7] {\n  animation: a-slide-in-up 0.25s;\n}\n.v-leave-active[data-v-689b6ca7] {\n  animation: a-slide-out-down 0.25s;\n}\n\n/*# sourceMappingURL=StickyBanner.vue.map */", map: { "version": 3, "sources": ["app/javascript/application/components/elements/StickyBanner.vue", "StickyBanner.vue"], "names": [], "mappings": "AAyEA;EACA,8BAAA;ACxEA;AD2EA;EACA,iCAAA;ACxEA;;AAEA,2CAA2C", "file": "StickyBanner.vue", "sourcesContent": [`<template>
  <transition>
    <div v-if="showForScroll && !userClosed && content" v-html="content" :class="containerClass" />
    <slot v-else-if="showForScroll && !userClosed" />
  </transition>
</template>

<script>
import throttle from 'lodash/throttle';
import Vue from 'vue';
import setPassive from '../../lib/passive-polyfill';

export default Vue.extend({
  name: 'StickyBanner',
  props: {
    scrollDistanceToDisplay: {
      type: Number,
      default: 250,
    },
    content: {
      type: String,
      default: null,
    },
    userClosed: {
      type: Boolean,
      default: false,
    },
    containerClass: {
      type: String,
      default: '',
    },
  },
  data() {
    return {
      showForScroll: false,
      commentsSection: document.getElementsByClassName('c-forum-comments')[0],
      endOfContentSection: document.getElementById('end-of-content'),
    };
  },
  methods: {
    scrollHandler: throttle(function () {
      const scrolledEnough = window.scrollY > this.scrollDistanceToDisplay;
      const hiddenForComments = this.commentsSection && this.commentsCurrentlyVisible();
      const hiddenForEndOfContent = this.endOfContentCurrentlyVisible();

      this.showForScroll = scrolledEnough && !hiddenForComments && !hiddenForEndOfContent;
    }, 100),
    handleCloseClicked() {
      this.userClosed = true;
    },
    commentsCurrentlyVisible() {
      if (!this.commentsSection) { return false; }
      const topOffset = this.commentsSection.getBoundingClientRect().top;
      const viewportHeight = window.innerHeight;
      return topOffset < viewportHeight;
    },
    endOfContentCurrentlyVisible() {
      if (!this.endOfContentSection) { return false; }
      const topOffset = this.endOfContentSection.getBoundingClientRect().top;
      const viewportHeight = window.innerHeight;
      return topOffset < viewportHeight;
    },
  },
  mounted() {
    window.addEventListener('scroll', this.scrollHandler, setPassive(true));
  },
  destroyed() {
    window.removeEventListener('scroll', this.scrollHandler);
  },
});
<\/script>

<style scoped="true" lang="scss">
  .v-enter-active {
    animation: a-slide-in-up 0.25s;
  }

  .v-leave-active {
    animation: a-slide-out-down 0.25s;
  }
</style>
`, ".v-enter-active {\n  animation: a-slide-in-up 0.25s;\n}\n\n.v-leave-active {\n  animation: a-slide-out-down 0.25s;\n}\n\n/*# sourceMappingURL=StickyBanner.vue.map */"] }, media: void 0 });
  };
  var __vue_scope_id__25 = "data-v-689b6ca7";
  var __vue_module_identifier__25 = void 0;
  var __vue_is_functional_template__25 = false;
  function __vue_normalize__25(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/StickyBanner.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__14() {
    const styles = __vue_create_injector__14.styles || (__vue_create_injector__14.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__25 = /* @__PURE__ */ __vue_normalize__25(
    { render: __vue_render__25, staticRenderFns: __vue_staticRenderFns__25 },
    __vue_inject_styles__25,
    __vue_script__25,
    __vue_scope_id__25,
    __vue_is_functional_template__25,
    __vue_module_identifier__25,
    false,
    __vue_create_injector__14,
    void 0,
    void 0
  );
  var StickyBanner_default = __vue_component__25;

  // application/components/stickySmartBanner/VideoBeginnerSubscriptionSignup.vue
  var __vue_script__26 = Vue.extend({
    name: "VideoBeginnerSubscriptionSignup",
    data: function() {
      return {
        beginnerSubscriptionImage: "/assets/artwork/illustration-device-path.svg",
        subscriptionUrl: `${window.CAROLUS_ENV.KERCHING_BASE_URL}/products/subscription`
      };
    },
    methods: {
      handleClose() {
        this.$emit("closeClicked");
      },
      handleClick() {
        triggerEvent("article_product_subscription", "subscription");
      }
    }
  });
  var __vue_render__26 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "c-banner-draper-sticky c-banner-draper-sticky--subscribe" },
      [
        _c(
          "div",
          {
            staticClass: "c-banner-draper-sticky__wrapper l-block--912 l-margin-auto l-padding-sides-24--tablet"
          },
          [
            _c("img", { attrs: { src: _vm.beginnerSubscriptionImage, alt: "" } }),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Subscribe now to get full access to our entire catalogue of 4,000+ mobile development videos and 50+ online books."
              )
            ]),
            _vm._v(" "),
            _c(
              "a",
              {
                staticClass: "o-button--green",
                attrs: { href: _vm.subscriptionUrl },
                on: { click: _vm.handleClick }
              },
              [
                _c("span", { staticClass: "o-button__label" }, [
                  _vm._v("Learn more")
                ]),
                _vm._v(" "),
                _c(
                  "i",
                  { staticClass: "o-button__icon--right o-button__icon--white" },
                  [
                    _c(
                      "svg",
                      {
                        staticClass: "l-button__svg-arrow o-button__svg o-button__svg--green"
                      },
                      [_c("use", { attrs: { "xlink:href": "#arrow-right" } })]
                    )
                  ]
                )
              ]
            ),
            _vm._v(" "),
            _c(
              "button",
              {
                staticClass: "o-alert__close",
                attrs: { type: "button", "aria-label": "Close" },
                on: { click: _vm.handleClose }
              },
              [
                _c("span", [
                  _c(
                    "svg",
                    {
                      staticClass: "l-button__svg-close o-button__svg o-button__svg--black-force"
                    },
                    [_c("use", { attrs: { "xlink:href": "#plus--black" } })]
                  )
                ])
              ]
            )
          ]
        )
      ]
    );
  };
  var __vue_staticRenderFns__26 = [];
  __vue_render__26._withStripped = true;
  var __vue_inject_styles__26 = function(inject) {
    if (!inject)
      return;
    inject("data-v-ee23aefc_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "VideoBeginnerSubscriptionSignup.vue" }, media: void 0 });
  };
  var __vue_scope_id__26 = void 0;
  var __vue_module_identifier__26 = void 0;
  var __vue_is_functional_template__26 = false;
  function __vue_normalize__26(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/stickySmartBanner/VideoBeginnerSubscriptionSignup.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__15() {
    const styles = __vue_create_injector__15.styles || (__vue_create_injector__15.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__26 = /* @__PURE__ */ __vue_normalize__26(
    { render: __vue_render__26, staticRenderFns: __vue_staticRenderFns__26 },
    __vue_inject_styles__26,
    __vue_script__26,
    __vue_scope_id__26,
    __vue_is_functional_template__26,
    __vue_module_identifier__26,
    false,
    __vue_create_injector__15,
    void 0,
    void 0
  );
  var VideoBeginnerSubscriptionSignup_default = __vue_component__26;

  // application/components/stickySmartBanner/VideoProfessionalSubscriptionSignup.vue
  var __vue_script__27 = Vue.extend({
    name: "VideoProfessionalSubscriptionSignup",
    props: {
      isUpgrade: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        professionalSubscriptionImage: "/assets/artwork/illustration-pro-items.svg",
        subscriptionUrl: `${window.CAROLUS_ENV.KERCHING_BASE_URL}/products/subscription`
      };
    },
    methods: {
      handleClose() {
        this.$emit("closeClicked");
      },
      handleClick() {
        triggerEvent("article_product_subscription", "subscription");
      }
    }
  });
  var __vue_render__27 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      {
        staticClass: "c-banner-draper-sticky c-banner-draper-sticky--pro-subscribe"
      },
      [
        _c(
          "div",
          {
            staticClass: "c-banner-draper-sticky__wrapper l-block l-block--1080"
          },
          [
            _c("img", {
              attrs: { src: _vm.professionalSubscriptionImage, alt: "" }
            }),
            _vm._v(" "),
            _c("p", [
              _vm._v(
                "Access our entire catalogue of advanced books and video courses for professional developers with kodeco.com Ultimate Professional."
              )
            ]),
            _vm._v(" "),
            _c(
              "a",
              {
                staticClass: "o-button--white-blue",
                attrs: { href: _vm.subscriptionUrl },
                on: { click: _vm.handleClick }
              },
              [
                _vm.isUpgrade ? _c("span", { staticClass: "o-button__label" }, [
                  _vm._v("Upgrade now")
                ]) : _c("span", { staticClass: "o-button__label" }, [
                  _vm._v("Learn more")
                ]),
                _vm._v(" "),
                _c(
                  "i",
                  { staticClass: "o-button__icon--right o-button__icon--blue" },
                  [
                    _c(
                      "svg",
                      {
                        staticClass: "l-button__svg-arrow o-button__svg o-button__svg--white"
                      },
                      [_c("use", { attrs: { "xlink:href": "#arrow-right" } })]
                    )
                  ]
                )
              ]
            ),
            _vm._v(" "),
            _c(
              "button",
              {
                staticClass: "o-alert__close",
                attrs: { type: "button", "aria-label": "Close" },
                on: { click: _vm.handleClose }
              },
              [
                _c("span", [
                  _c(
                    "svg",
                    {
                      staticClass: "l-button__svg-close o-button__svg o-button__svg--white"
                    },
                    [_c("use", { attrs: { "xlink:href": "#plus" } })]
                  )
                ])
              ]
            )
          ]
        )
      ]
    );
  };
  var __vue_staticRenderFns__27 = [];
  __vue_render__27._withStripped = true;
  var __vue_inject_styles__27 = function(inject) {
    if (!inject)
      return;
    inject("data-v-3a910d58_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "VideoProfessionalSubscriptionSignup.vue" }, media: void 0 });
  };
  var __vue_scope_id__27 = void 0;
  var __vue_module_identifier__27 = void 0;
  var __vue_is_functional_template__27 = false;
  function __vue_normalize__27(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/stickySmartBanner/VideoProfessionalSubscriptionSignup.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__16() {
    const styles = __vue_create_injector__16.styles || (__vue_create_injector__16.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__27 = /* @__PURE__ */ __vue_normalize__27(
    { render: __vue_render__27, staticRenderFns: __vue_staticRenderFns__27 },
    __vue_inject_styles__27,
    __vue_script__27,
    __vue_scope_id__27,
    __vue_is_functional_template__27,
    __vue_module_identifier__27,
    false,
    __vue_create_injector__16,
    void 0,
    void 0
  );
  var VideoProfessionalSubscriptionSignup_default = __vue_component__27;

  // application/images/artwork/cyber-monday-2021-artwork.svg
  var cyber_monday_2021_artwork_default = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1100.19 543.6"><defs><style>.cls-1{isolation:isolate;}.cls-2{fill:#0d0d0d;}.cls-3{opacity:0.28;}.cls-4,.cls-5{fill:#fff;}.cls-4{mix-blend-mode:screen;opacity:0.3;}.cls-6{fill:#f2c14b;}.cls-7{fill:#a4c43a;}.cls-8{opacity:0.6;}.cls-9{fill:#e33c70;}.cls-10{fill:#5084f8;}</style></defs><g class="cls-1"><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-2" d="M176.25,388.16H122.36a1.46,1.46,0,0,0-1.43,1.13L105.53,452,90.14,389.29a1.46,1.46,0,0,0-1.43-1.13H34.82a1.49,1.49,0,0,0-1.48,1.39l-7.84,129A1.46,1.46,0,0,0,27,520.16H70.12a1.48,1.48,0,0,0,1.48-1.42l2.24-56.61,14.47,56.92a1.47,1.47,0,0,0,1.43,1.11h31.59a1.47,1.47,0,0,0,1.43-1.12l14.44-57.56,2.27,57.26a1.48,1.48,0,0,0,1.47,1.42H184.1a1.5,1.5,0,0,0,1.07-.46,1.47,1.47,0,0,0,.4-1.11l-7.84-129A1.49,1.49,0,0,0,176.25,388.16Z" transform="translate(0 -2.33)"/><g class="cls-3"><path class="cls-4" d="M207.9,373.15c0-2.21-17.34-4-20.26-4l-84.86.13H39.13L8.29,369.2c-2.87,0-2,1.75-2,3.93v0c-.11,13.62-.16,27.24-.35,40.86l-.44,40.86L5.3,475.32l0,20.43c0,13.62.09,27.24.25,40.86v.07c0,2.5,2.71,4.5,6,4.48L54.64,541l21.73-.24q21.73-.22,43.3-.66l21.5-.42,21.36-.47,42.21-1c.73-13.25,1.33-26.79,1.76-40.47s.73-27.5.9-41.36l.48-41.6,0-41.62h0Z" transform="translate(0 -2.33)"/></g><path class="cls-2" d="M176.25,388.16H122.36a1.46,1.46,0,0,0-1.43,1.13L105.53,452,90.14,389.29a1.46,1.46,0,0,0-1.43-1.13H34.82a1.49,1.49,0,0,0-1.48,1.39l-7.84,129A1.46,1.46,0,0,0,27,520.16H70.12a1.48,1.48,0,0,0,1.48-1.42l2.24-56.61,14.47,56.92a1.47,1.47,0,0,0,1.43,1.11h31.59a1.47,1.47,0,0,0,1.43-1.12l14.44-57.56,2.27,57.26a1.48,1.48,0,0,0,1.47,1.42H184.1a1.5,1.5,0,0,0,1.07-.46,1.47,1.47,0,0,0,.4-1.11l-7.84-129A1.49,1.49,0,0,0,176.25,388.16Z" transform="translate(0 -2.33)"/><g class="cls-3"><path class="cls-4" d="M87.17,388.16H34.82a1.49,1.49,0,0,0-1.48,1.39L30,445.38Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><polygon class="cls-4" points="169.17 385.83 130.99 385.83 118.02 398.79 105.61 449.38 169.17 385.83"/></g><g class="cls-3"><path class="cls-4" d="M27,520.16h10.2L73,484.37l.88-22.24,4.33,17,27.32-27.32L98,421.18,27.11,492,25.5,518.59A1.46,1.46,0,0,0,27,520.16Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M88.58,519.57a1.45,1.45,0,0,0,1.16.59h26.43l8.43-8.43L134,474.12Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M137.56,470.59l1.07,27.11,43.05-43.05-1.61-26.57Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M143,520.16H184.1a1.5,1.5,0,0,0,1.07-.46,1.47,1.47,0,0,0,.4-1.11l-2.35-38.66Z" transform="translate(0 -2.33)"/></g><path class="cls-5" d="M176.25,391.05l-30.12.12-15.06.06-7.52.06h-1.18l.24,0a1.52,1.52,0,0,0,.51-.16,1.66,1.66,0,0,0,.74-.74,1.09,1.09,0,0,0,.1-.25s0-.14,0-.07l0,.12-.11.46L123,394.3,116,423.61l-6.83,29.33a3.77,3.77,0,0,1-7.33.09l0-.09L90.73,409.79,88,399l-1.39-5.39-.69-2.7-.09-.33,0-.17c0-.06,0,0,0,0l0,.17a3,3,0,0,0,.77,1.22,3.1,3.1,0,0,0,1.23.74,3,3,0,0,0,.72.13h-.07L66.17,393l-22.28.26-5.57.07-2.78,0H35l.21,0a3.35,3.35,0,0,0,.44-.07,3.72,3.72,0,0,0,2.86-3,3.94,3.94,0,0,0,0-.4v.18l0,.34,0,.7-.07,1.39-.15,2.78L38,400.82q-1.17,22.26-2.43,44.5C34.64,460.14,34,475,32.71,489.79c-.64,7.4-1.41,14.79-2.17,22.18L30,517.52l-.07.69,0,.35,0,.17v0a2.82,2.82,0,0,0-2.36-2.82l-.33,0h-.1l.34,0,1.4.05,11.14.33c7.42.15,14.85.28,22.28.07l5.56-.14,1.4,0,.69,0H70a2.34,2.34,0,0,0-.59.09,2.56,2.56,0,0,0-1.7,1.58,2.49,2.49,0,0,0-.14.6v-.82c0-3.71.11-7.43.16-11.14s.23-7.42.41-11.13l.53-11.13,1-22.26v-.06a4.15,4.15,0,0,1,8.18-.8L87,498.39,91.65,517l.25,1a2.25,2.25,0,0,0-1.15-1.36,2.22,2.22,0,0,0-.87-.24h1.57l4.8,0,9.59,0,9.6,0h5.73a2.17,2.17,0,0,0-1.5.79,2,2,0,0,0-.39.76l.12-.47.29-1.17,4.68-18.61c3.11-12.42,6-24.89,8.87-37.36a4.07,4.07,0,0,1,8,.69v.14l1.64,29.54q.38,7.38.67,14.78l.3,7.38.13,3.7.06,1.82a3.13,3.13,0,0,0-2.28-2.86,2.66,2.66,0,0,0-.49-.1h2.94l3.69,0,7.4,0,14.79.13,7.39.07,3.7,0,1.85,0,.93,0h-.12a3.07,3.07,0,0,0-.42.07,2.52,2.52,0,0,0-.79.34,2.75,2.75,0,0,0-1.09,1.29,3,3,0,0,0-.2.83c0,.12,0,.34,0,.37v-.23l-.08-1.85-.17-3.69-.34-7.39L178,446.57c-.44-9.85-1-19.7-1.54-29.54l-.86-14.77-.45-7.38-.22-3.69,0-.93,0-.46c0-.14,0,0,0,.06a1.39,1.39,0,0,0,1.4,1.19Zm0-5.78a4.38,4.38,0,0,1,4.15,3,3.74,3.74,0,0,1,.16.66c0,.22.06.51.06.52l0,.46,0,.93.23,3.69.46,7.38.93,14.76c.67,9.84,1.3,19.68,2.05,29.51l4.41,59,.55,7.38.28,3.68.14,1.85,0,.23a5.87,5.87,0,0,1,0,.83,5.41,5.41,0,0,1-.41,1.72,5.7,5.7,0,0,1-2.27,2.68,6.08,6.08,0,0,1-1.64.69,6.71,6.71,0,0,1-.88.14l-.45,0H184l-.93,0-1.85,0-3.7,0-7.39.08-14.79.13-7.4,0-3.69,0h-3.53l-.47,0a5,5,0,0,1-.94-.18,6.08,6.08,0,0,1-4.43-5.57l-.09-1.88-.16-3.69-.29-7.39q-.3-7.38-.5-14.78l-.71-29.58,8,.83c-3.34,12.36-6.7,24.71-9.81,37.13l-4.66,18.62-.29,1.16-.18.69a5.11,5.11,0,0,1-4.51,3.69h-6.27l-9.6,0-9.59,0-4.8,0h-2a5.21,5.21,0,0,1-4.67-3.7l-.35-1.31-4.85-18.57-9.73-37.14,8.17-.86-.71,22.27-.35,11.13c-.12,3.72-.24,7.43-.47,11.13s-.45,7.42-.73,11.12l0,.7,0,.58a6.15,6.15,0,0,1-.29,1.27,5.51,5.51,0,0,1-3.63,3.44,5.11,5.11,0,0,1-1.27.21h-.59l-.69,0-1.4,0-5.56-.14c-7.43-.21-14.86-.08-22.28.07l-11.14.33-1.4,0-.34,0h-.46a5.08,5.08,0,0,1-.67-.07,5.94,5.94,0,0,1-2.47-1.07,5.8,5.8,0,0,1-2.3-4.74l0-1.54.11-5.57c.14-7.43.27-14.86.53-22.29.53-14.84,1.68-29.66,2.6-44.48s1.95-29.64,3-44.46l.39-5.56.19-2.77.09-1.39.05-.7,0-.34,0-.18c0-.19,0-.5.08-.74a6.72,6.72,0,0,1,3.65-4.85,6.51,6.51,0,0,1,1.48-.52,7,7,0,0,1,.78-.12l.39,0h1l2.78,0,5.57.07,22.28.26,22.28.26h.62a6.09,6.09,0,0,1,3.83,1.7,5.89,5.89,0,0,1,1.5,2.38l.11.34.06.22,0,.17.08.34.64,2.71,1.26,5.43,2.53,10.85,10.1,43.4h-7.36L109.37,422l7.42-29.19.92-3.65.12-.46.11-.41a4.43,4.43,0,0,1,.28-.68,4.62,4.62,0,0,1,2-2.06,4.82,4.82,0,0,1,1.39-.45,6.23,6.23,0,0,1,.72-.05h1.18l7.52.06,15.06.06Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M302.69,371.12c-10.7,0-21.42.85-31.45,3.67s-19.24,7.78-25.31,15.66a56.26,56.26,0,0,0-7.59,13.26,88.77,88.77,0,0,0-4.58,15.07,159.79,159.79,0,0,0-3.15,32A199.2,199.2,0,0,0,232.84,483a69.8,69.8,0,0,0,4.08,15.27,52.45,52.45,0,0,0,8,13.52,40.19,40.19,0,0,0,11.73,9.82,55.87,55.87,0,0,0,14.47,5.46,101.36,101.36,0,0,0,15.63,2.3c5.29.41,10.63.57,16,.51a148.27,148.27,0,0,0,15.95-.87A94.21,94.21,0,0,0,334,526.08a57,57,0,0,0,13.89-5.88,41,41,0,0,0,11-9.64,59.68,59.68,0,0,0,7.76-13.05,72.8,72.8,0,0,0,4.54-14.78c2.07-10.34,2.68-21.16,2.74-32s-.65-21.55-2.93-31.88-6-20.21-12.1-28.08c-5.9-7.8-15-12.79-24.94-15.68S313.38,371.24,302.69,371.12Zm0-9.24c11.28,0,22.75.85,34,4A67.25,67.25,0,0,1,353,372.8a48.63,48.63,0,0,1,13.69,12,63.1,63.1,0,0,1,8.73,15.52A98.14,98.14,0,0,1,380.23,417a150.53,150.53,0,0,1,2.35,16.9c.48,5.64.7,11.27.74,16.89a185,185,0,0,1-2.66,33.8,81.84,81.84,0,0,1-5,16.79,67.13,67.13,0,0,1-8.94,15.34,50.87,50.87,0,0,1-13.6,12.08,60.2,60.2,0,0,1-8,4.13,71.15,71.15,0,0,1-8.4,2.87,104.2,104.2,0,0,1-17,3.11,159.44,159.44,0,0,1-17,.81,114.72,114.72,0,0,1-33.8-4.89c-11-3.42-21.61-9.92-28.74-19.33A81.28,81.28,0,0,1,226,484.31a118.13,118.13,0,0,1-2.48-16.75c-.46-5.6-.66-11.2-.7-16.79a167.42,167.42,0,0,1,2.88-33.68,96.61,96.61,0,0,1,4.81-16.55,63.51,63.51,0,0,1,8.61-15.39,47.82,47.82,0,0,1,13.47-11.94,67.34,67.34,0,0,1,16.18-7C280,363,291.4,362,302.69,361.88Z" transform="translate(0 -2.33)"/><g class="cls-3"><path class="cls-4" d="M304.8,366.53c-.71,0-1.4,0-2.11,0-28.43,0-48.44,6.86-59.48,20.4-10.14,12.44-15.64,31.81-16.39,57.61Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M242.17,513.21a43.9,43.9,0,0,0,3.24,3.71L367.49,394.84a54.43,54.43,0,0,0-5.33-7.94c-4.79-5.88-11.3-10.47-19.43-13.82L229.89,485.92l.27,1.21A67.6,67.6,0,0,0,242.17,513.21Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M312.5,534.5l65.43-65.44c.48-5.64.73-11.75.73-18.29a187.39,187.39,0,0,0-.94-19.26l-2.8,2.8q-49,49.11-97.9,98.27a136.41,136.41,0,0,0,25.67,2.2Q307.77,534.78,312.5,534.5Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M404.17,418l-7.56,7.56v34.18l66.17-66.17-13.95-20.23Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M398.41,531h3.91l48.21-48.21V474l.24.35,3.34,4.84,85.74-85.74V372a1.81,1.81,0,0,0-1.8-1.8H528l-42.06,42.06v14.93c-.08-.13-.16-.24-.24-.36l-5.85-8.48-83.23,83.23v27.67A1.8,1.8,0,0,0,398.41,531Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M534.74,458.4l-56.23,56.23,10.75,15.6a1.82,1.82,0,0,0,1.49.78h47.3a1.8,1.8,0,0,0,1.8-1.8V453.3Z" transform="translate(0 -2.33)"/></g><path class="cls-5" d="M538.05,374.85,511,374.77l-13.54,0-6.77,0h-2.86a2.79,2.79,0,0,0,.63-.08,2.72,2.72,0,0,0,2-2.28c0-.11,0-.21,0-.31h0v1l-.17,54.17a4.36,4.36,0,0,1-7.94,2.46l-.08-.13-27.28-40-6.85-10-3.43-5-.81-1.19a2.25,2.25,0,0,0,1.59.91h-2.62l-24.28-.11L406.44,374l-6.07,0h-1.9c-.13,0,0,0,.08,0l.21,0a2,2,0,0,0,.78-.33,2,2,0,0,0,.83-1.39,1.49,1.49,0,0,0,0-.21c0-.06,0,0,0,0v1.24c-.09,8.09-.29,16.19-.47,24.28s-.33,16.19-.32,24.29.11,16.19.22,24.28l.24,12.14.32,12.14.63,24.29c.23,8.09.38,16.19.5,24.28l.05,6.07,0,3v1.14a2.39,2.39,0,0,0-.06-.62,3.14,3.14,0,0,0-1.51-2.13,3.17,3.17,0,0,0-1.28-.42,1.77,1.77,0,0,0-.32,0h5.13l6.07,0,24.28-.05,12.14,0h2.43a2.27,2.27,0,0,0-.35.05,3.29,3.29,0,0,0-2.23,1.55,3.46,3.46,0,0,0-.46,1.33c0,.11,0,.23,0,.34v-6.58l.12-48.56a5,5,0,0,1,9.15-2.85l.11.15,19.63,28.74,9.89,14.48,4.95,7.23,2.48,3.61L493,527.2l.16.22.06.09-.14-.18a2.94,2.94,0,0,0-.67-.6,2.7,2.7,0,0,0-.81-.37l-.45-.09-.22,0h-.09l35,.06,8.76,0h3.28c.39,0-.14,0-.38.06a2.88,2.88,0,0,0-2,1.55,2.82,2.82,0,0,0-.26.84,3.27,3.27,0,0,0,0,.44v-2.46l-.1-17.51c-.09-11.68-.18-23.35-.19-35l0-35,.1-35,.07-17.51,0-8.76,0-4.38v-1.37c0-.06,0-.29,0,0a2.65,2.65,0,0,0,.18.87A2.9,2.9,0,0,0,538.05,374.85Zm0-9.38a6.42,6.42,0,0,1,3.71,1.16,6.53,6.53,0,0,1,2.39,3.07,6.44,6.44,0,0,1,.39,1.93,4.92,4.92,0,0,1,0,.51v1.37l0,4.38,0,8.76.08,17.51.1,35,.05,35c0,11.68-.1,23.35-.2,35l-.09,17.51v2.47a6.46,6.46,0,0,1-.07,1,6.26,6.26,0,0,1-.6,1.88,6.49,6.49,0,0,1-2.68,2.81,6.33,6.33,0,0,1-1.85.68,6.43,6.43,0,0,1-1,.12,4.94,4.94,0,0,1-.51,0h-3.28l-8.76,0-35,.07h-.37l-.5,0a7.94,7.94,0,0,1-1-.2,6.2,6.2,0,0,1-1.81-.83,6.43,6.43,0,0,1-1.48-1.32c-.11-.13-.21-.27-.31-.4l-.09-.14-.16-.23-1.24-1.79-2.49-3.6-5-7.19-10-14.37-20.12-28.94,9.26-2.69.13,48.56,0,6.07v.64c0,.24,0,.48-.05.72a6.93,6.93,0,0,1-5.59,6c-.24,0-.48.08-.72.1l-.36,0H446l-12.14,0L409.61,536l-6.07,0h-5.13a5.53,5.53,0,0,1-.69,0,6.75,6.75,0,0,1-2.72-.88,6.83,6.83,0,0,1-3.23-4.52,6.73,6.73,0,0,1-.13-1.37v-1.14l0-3,.06-6.07c.11-8.09.26-16.19.5-24.28l.63-24.29.32-12.14.24-12.14c.11-8.09.23-16.19.22-24.28s-.18-16.19-.32-24.29-.38-16.19-.47-24.28v-1.41a3.9,3.9,0,0,1,0-.59,5.65,5.65,0,0,1,2.37-3.91,5.74,5.74,0,0,1,2.17-.89,5.93,5.93,0,0,1,.59-.07l.46,0h1.9l6.07,0,12.14-.06,24.28-.11h2.85c.19,0,.41,0,.61,0a5.85,5.85,0,0,1,4.13,2.39l.92,1.31,3.46,5,6.93,10,27.84,40-8,2.33L481.41,373v-1.15a6.13,6.13,0,0,1,0-.74,6.51,6.51,0,0,1,.38-1.44,6.33,6.33,0,0,1,4.29-3.81,6.06,6.06,0,0,1,1.46-.21h3.06l6.77,0,13.54-.05Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M691.75,392a40,40,0,0,0-12.54-9.36,69.38,69.38,0,0,0-15.57-5.3A116.17,116.17,0,0,0,646.88,375c-5.69-.41-11.35-.44-17.27-.46l-35.15-.19-17.58-.11-8.79-.06h-2.86a1.22,1.22,0,0,0,.32,0,2.08,2.08,0,0,0,1.12-.62,2.13,2.13,0,0,0,.57-1.15,1.72,1.72,0,0,0,0-.32v.82l0,2.19c-.1,11.72,0,23.44-.41,35.16q-.29,8.79-.48,17.57c-.1,5.86-.12,11.72,0,17.58.26,23.44,1.83,46.87,1.92,70.31l0,8.79,0,4.39v.19l0-.24a3.3,3.3,0,0,0-.26-.93,3.19,3.19,0,0,0-1.27-1.42,3,3,0,0,0-.91-.36,3.7,3.7,0,0,0-.48-.08h1L584,526c11.72-.08,23.44,0,35.16.06l17.54.06a145.42,145.42,0,0,0,17-.89A94.9,94.9,0,0,0,670.07,522a54.27,54.27,0,0,0,14.65-6.69,18.62,18.62,0,0,0,1.61-1.14c.51-.4,1-.78,1.55-1.19,1-.88,2-1.69,2.83-2.65a38.31,38.31,0,0,0,4.83-6.19,58.28,58.28,0,0,0,6.53-14.9,104.56,104.56,0,0,0,3.25-16.47c.71-5.6,1-11.29,1.22-17a167.05,167.05,0,0,0-2.25-34,85.14,85.14,0,0,0-4.46-16A49,49,0,0,0,691.75,392Zm7-6.08a58.38,58.38,0,0,1,9.85,16.28A93.86,93.86,0,0,1,713.75,420a176.52,176.52,0,0,1,2.61,36c-.31,12-1.68,24.12-5.34,35.94a71.09,71.09,0,0,1-7.69,17.13A45.72,45.72,0,0,1,690,523a63.24,63.24,0,0,1-17.14,8,109.18,109.18,0,0,1-18,3.73,157.18,157.18,0,0,1-18.08,1.16l-17.6.09c-11.72,0-23.44.14-35.16.07L566.38,536h-1.23l-.5,0a7,7,0,0,1-1-.16,6.55,6.55,0,0,1-1.92-.77,6.75,6.75,0,0,1-2.72-3,6.86,6.86,0,0,1-.56-2c0-.17,0-.34,0-.51v-.64l0-4.39,0-8.79c.09-23.44,1.66-46.87,1.92-70.31.12-5.86.1-11.72,0-17.58s-.29-11.71-.48-17.57c-.37-11.72-.31-23.44-.41-35.16l0-2.19v-.84a4.91,4.91,0,0,1,.07-.86A5.69,5.69,0,0,1,561,368.1a5.79,5.79,0,0,1,3-1.66,6.12,6.12,0,0,1,.86-.1h3.18l8.79-.06,17.58-.11,35.15-.2c5.8,0,11.86-.06,17.87.33a125.15,125.15,0,0,1,18,2.36,78.18,78.18,0,0,1,17.67,5.87A48.91,48.91,0,0,1,698.71,386Z" transform="translate(0 -2.33)"/><g class="cls-3"><path class="cls-4" d="M565.14,531h36.18L709.38,423c-2.07-12.09-5.64-21.95-10.72-29.47l-42.3,42.3-93,93v.41A1.8,1.8,0,0,0,565.14,531Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M641.23,530.92c25.71-.79,43.87-7,54-18.63,9.47-10.82,14.85-28.08,16-51.41Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M679.52,377.8c-11.1-5-25.79-7.53-44-7.53H623.88L582.15,412l-18.81,18.8V494Z" transform="translate(0 -2.33)"/></g><path class="cls-5" d="M833.42,372.78a2.79,2.79,0,0,0,1.13,1.6,2.68,2.68,0,0,0,.91.41,2,2,0,0,0,.49.08H833.4l-5.12,0-10.24,0-20.48-.08-20.47-.09-10.24,0-5.12,0h-3.15l.22,0a2.36,2.36,0,0,0,.44-.11,2.51,2.51,0,0,0,1.36-1.08,3.62,3.62,0,0,0,.19-.4c0-.07.05-.14.07-.21s0-.06,0,0l0,.08-.16.62-.33,1.24-.65,2.47-1.31,4.95-2.63,9.9-5.25,19.79L740,451.37c-1.76,6.59-3.49,13.2-5.33,19.77l-5.63,19.69q-2.85,9.84-5.32,19.78l-2.43,9.95-1.18,5-.58,2.49-.29,1.25-.07.31a2.56,2.56,0,0,0,.05-.27,1.52,1.52,0,0,0-.66-1.41,1.34,1.34,0,0,0-.5-.23,1.26,1.26,0,0,0-.28,0H718l2.56-.09,5.12-.17,10.24-.34c6.82-.2,13.65-.46,20.47-.63,3.42-.06,6.83-.17,10.24-.2l2.56,0h1.6a2.23,2.23,0,0,0-.49,0,3,3,0,0,0-1,.37,3.06,3.06,0,0,0-1.39,1.65c0,.09-.06.17-.08.26s0,0,0,0l0-.07.07-.32.14-.62.56-2.5,4.57-20a5,5,0,0,1,4.83-3.86h0l19.31-.06c6.44,0,12.88,0,19.32,0h0a5,5,0,0,1,4.87,3.88l3.42,14.94,1.71,7.47.21.94,0,.11v.06l0-.1a2.58,2.58,0,0,0-.14-.39,3,3,0,0,0-.42-.73,3.16,3.16,0,0,0-1.32-1,3.78,3.78,0,0,0-.82-.2h-.06l3.83,0,30.65.16,15.33,0h2.72a2.5,2.5,0,0,0-.38.06,3.1,3.1,0,0,0-.72.26,2.91,2.91,0,0,0-1.54,2.5,2.81,2.81,0,0,0,.08.76l-.1-.42-.24-.93-1.91-7.42c-2.56-9.89-5-19.8-7.66-29.68l-7.93-29.61c-2.63-9.87-5.14-19.77-7.69-29.67Zm8.94-2.32L858,429.74c2.59,9.88,5.2,19.76,7.7,29.67l7.45,29.73c2.5,9.91,5.15,19.77,7.72,29.66l1.94,7.42.24.92.13.51a6.6,6.6,0,0,1,.19,1.71,6.5,6.5,0,0,1-3.47,5.6,6.17,6.17,0,0,1-1.62.59,6,6,0,0,1-.85.13l-.43,0h-3.07l-15.33,0-30.65.17-3.83,0h-.58l-.44,0a7,7,0,0,1-1.74-.44,6.62,6.62,0,0,1-2.84-2.12,6.47,6.47,0,0,1-.9-1.55,5.22,5.22,0,0,1-.29-.84l-.1-.4-.22-.93-1.76-7.46-3.51-14.91,4.89,3.88c-6.44,0-12.88.06-19.32,0L778,511.11l4.86-3.86-4.7,19.93-.59,2.49-.16.62-.07.31-.06.24c0,.19-.1.38-.17.57a6.71,6.71,0,0,1-5.21,4.38,7.78,7.78,0,0,1-1.13.09h-1.6l-2.56,0c-3.41,0-6.82-.13-10.24-.2-6.82-.16-13.65-.42-20.47-.63l-10.24-.34-5.12-.17-2.56-.08-.47,0a5.54,5.54,0,0,1-.91-.13,5,5,0,0,1-1.67-.73,5.16,5.16,0,0,1-2.11-2.89,5.23,5.23,0,0,1-.17-1.8,4.7,4.7,0,0,1,.15-.9l.09-.31.35-1.23.7-2.46,1.39-4.93,2.71-9.88c1.76-6.59,3.43-13.21,5-19.87l4.64-19.95c1.58-6.64,3.28-13.25,5-19.87l10-39.7,5-19.85,2.51-9.93,1.25-5,.64-2.48.31-1.24.16-.62.07-.25a5.08,5.08,0,0,1,.17-.51,5.88,5.88,0,0,1,.47-1,6.14,6.14,0,0,1,3.32-2.65,6.27,6.27,0,0,1,1.06-.24,3.29,3.29,0,0,1,.54,0h3.57l5.12,0,10.24,0,20.47-.08,20.48-.08,10.24,0,5.12,0h2.93l.28,0a6.08,6.08,0,0,1,1.12.18,6.27,6.27,0,0,1,2.07.94A6.38,6.38,0,0,1,842.36,370.46Z" transform="translate(0 -2.33)"/><g class="cls-3"><path class="cls-4" d="M837.84,371.49a1.8,1.8,0,0,0-1.69-1.22H807.88l-68.59,68.59L728.38,481Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M772.53,529.62l5.46-23.5h20.22l59.2-59.2-10.95-42.23-46.85,46.85L720.14,531h50.64A1.8,1.8,0,0,0,772.53,529.62Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M869.11,492l-39,39h46.74a1.79,1.79,0,0,0,1.42-.7,1.76,1.76,0,0,0,.32-1.55Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M781.06,370.27h-22.6a1.79,1.79,0,0,0-1.74,1.35l-8.05,31Z" transform="translate(0 -2.33)"/></g><path class="cls-5" d="M317.46,293a1.24,1.24,0,0,0,1,.2l.16,0s.09,0,0,0l-.09,0-1.55.56c-1,.35-2.08.7-3.13,1-2.1.63-4.21,1.19-6.35,1.66a114.92,114.92,0,0,1-12.9,2,122.6,122.6,0,0,1-13,.58,89.42,89.42,0,0,1-13.15-1.12,3.76,3.76,0,0,1-3.15-3.58v-.23l-1-30.89-.48-15.44c-.09-2.58-.12-5.15-.18-7.73,0-2.11-.64-6.21,1.94-10.54a11.44,11.44,0,0,1,2.51-2.88,13.64,13.64,0,0,1,1.54-1.06l.8-.43.69-.31a25.11,25.11,0,0,1,4.87-1.42,61.26,61.26,0,0,1,8.52-.94c1.37-.06,2.72-.1,4.07-.12s2.74,0,4.11,0q4.08.15,8.12.59c2.68.29,5.35.65,8,1.09,1.33.22,2.64.46,4,.71l1.95.39,1,.2.12,0-.23,0a4.63,4.63,0,0,0-.65,0,4.35,4.35,0,0,0-1.32.19,4.49,4.49,0,0,0-2.21,1.52,4.39,4.39,0,0,0-.67,1.17,4.84,4.84,0,0,0-.19.65c0,.18,0,0,0,0l0-.12.37-1.89.75-3.79,1.51-7.57,3.09-15.14.78-3.78.2-.94,0-.24s0-.14,0-.06,0,.21,0,.32a4,4,0,0,0,.06,1.29,4.31,4.31,0,0,0,2.27,3l.19.08-.09,0-.17-.08a40.73,40.73,0,0,0-6.42-2,140.42,140.42,0,0,0-14.55-2.57,114.85,114.85,0,0,0-14.72-1.05c-9.9-.08-19.8.92-28.83,3.86-1.14.33-2.2.82-3.31,1.22s-2.13.95-3.2,1.42a42.09,42.09,0,0,0-5.86,3.55,34.08,34.08,0,0,0-5.05,4.45L236.47,210c-.36.42-.72.85-1.06,1.33-.69.92-1.34,1.9-2,2.87A52.86,52.86,0,0,0,227.6,227a84.64,84.64,0,0,0-2.86,14.27,186.4,186.4,0,0,0-.94,30,148.39,148.39,0,0,0,1.36,14.85c.36,2.44.79,4.85,1.33,7.21a62.78,62.78,0,0,0,2,6.82,50.79,50.79,0,0,0,6.4,12.43,35.22,35.22,0,0,0,9.61,9.4A45.69,45.69,0,0,0,257,327.66a83.49,83.49,0,0,0,14.27,2.64c4.9.53,9.89.77,14.9.82a128,128,0,0,0,14.82-.69c2.43-.27,4.86-.6,7.25-1s4.77-.89,7.09-1.51c1.16-.31,2.31-.63,3.45-1l.85-.29.43-.14.21-.07.11,0-.12.06a2.66,2.66,0,0,0-1.43,2.67l-.28-7.72c-.19-5.15-.4-10.3-.71-15.44-.17-2.57-.31-5.14-.51-7.7l-.31-3.85-.18-1.93,0-.45a1.86,1.86,0,0,0,.1.39A1.32,1.32,0,0,0,317.46,293Zm3.14-4.95a4.53,4.53,0,0,1,1.74,2.06,4.36,4.36,0,0,1,.34,1.32l.05.51.17,1.92.37,3.85c.26,2.56.58,5.11.86,7.67.61,5.12,1.32,10.22,2,15.33l1.1,7.67A5.9,5.9,0,0,1,324,334.2l-2.12.94c-1.27.54-2.55,1.05-3.85,1.5a79.67,79.67,0,0,1-15.87,3.67,132.76,132.76,0,0,1-16,1,155.13,155.13,0,0,1-15.94-.69,94,94,0,0,1-16.08-2.92,54.09,54.09,0,0,1-15.46-7,45.55,45.55,0,0,1-12.3-12.09,61.19,61.19,0,0,1-7.65-15,70.78,70.78,0,0,1-2.28-8c-.59-2.67-1-5.33-1.42-8a155.94,155.94,0,0,1-1.35-15.9A208.65,208.65,0,0,1,214.85,240a94.18,94.18,0,0,1,3.22-16A62.38,62.38,0,0,1,225,208.83c.76-1.18,1.55-2.35,2.4-3.48s1.83-2.26,2.76-3.37a46.74,46.74,0,0,1,6.47-5.81,50.87,50.87,0,0,1,7.28-4.51c1.28-.59,2.54-1.23,3.84-1.77s2.59-1.07,3.91-1.48a85.27,85.27,0,0,1,16-3.79,126.17,126.17,0,0,1,16.06-1.26,124.26,124.26,0,0,1,16.09.75,136.66,136.66,0,0,1,15.91,2.45,52.35,52.35,0,0,1,8.32,2.51l.27.11.14.06.41.19a7.81,7.81,0,0,1,1.83,1.3,7.54,7.54,0,0,1,2.23,6.16c0,.18-.05.37-.08.55l0,.18,0,.24-.18.95-.7,3.79L325,217.78l-1.47,7.58-.74,3.79-.36,1.9-.08.37a7.42,7.42,0,0,1-.33,1.11,7.84,7.84,0,0,1-1.14,2,7.75,7.75,0,0,1-6.06,2.92,7.08,7.08,0,0,1-1.13-.09l-.46-.08-.12,0-.92-.19-1.83-.38c-1.21-.24-2.43-.46-3.64-.68-2.43-.42-4.87-.78-7.3-1.06s-4.86-.48-7.27-.58c-1.21-.07-2.41-.1-3.62-.12s-2.44,0-3.64,0a50,50,0,0,0-6.85.56,15,15,0,0,0-2.55.63l-.19.08-.07,0h-.06s0,0,0,0a2.51,2.51,0,0,0-.38,1.19c0,.18,0,.38-.06.58l0,.32v.45l0,1.93c-.06,2.58-.09,5.15-.18,7.73L274,263.2l-1,30.89-3.16-3.81a82.89,82.89,0,0,0,12,1.71c2,.15,4.05.16,6.11.15s4.1-.07,6.15-.18,4.08-.31,6.11-.55,4-.59,6-1,4-.87,5.93-1.42c1-.26,1.94-.57,2.91-.87l1.44-.49.32-.1a3.39,3.39,0,0,1,.55-.13,4.2,4.2,0,0,1,1.12-.06A4.64,4.64,0,0,1,320.6,288.05Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M465.48,196.84,417,196.6a3,3,0,0,0,2.3-1.43,3.36,3.36,0,0,0,.28-.65l0-.12,0,.1-.05.18-.19.74-.77,3-1.53,5.9L414,216.08l-6.17,23.61,0,.05a4.27,4.27,0,0,1-8.28-.07l-6.14-25.28-3.07-12.64-1.54-6.32-.19-.79-.09-.39a2.54,2.54,0,0,0,.2.53,2.39,2.39,0,0,0,1.95,1.23l-3,0c-8.67,0-17.34-.24-26-.55-4.33-.14-8.67-.28-13-.32-2.16,0-4.35-.05-6.49,0a1.45,1.45,0,0,0,1.22-.68,1.43,1.43,0,0,0,.21-.69,1.14,1.14,0,0,0,0-.37,1.21,1.21,0,0,0-.05-.18l0,0,0,0,0,.1,1.24,3c3.28,8,6.76,16,10.27,23.91s7,15.87,10.45,23.84,6.66,16,9.9,24.06l9.65,24.16a5.44,5.44,0,0,1,.36,1.92L385.34,325l0,3.85v2.27l0-.26a3.29,3.29,0,0,0-.1-.53,3.52,3.52,0,0,0-1.15-1.74,3.48,3.48,0,0,0-1.94-.79,1.13,1.13,0,0,0-.26,0h2.71l3.86,0,15.41.1,15.42.09,3.85,0h2.48a3.39,3.39,0,0,0-1.8.74,3.27,3.27,0,0,0-1.06,1.63,4.1,4.1,0,0,0-.1.48l0,.24V325l0-30.84a4.87,4.87,0,0,1,.34-1.75c3.38-8.57,6.62-17.2,9.93-25.8s6.74-17.15,10.16-25.71l10.26-25.66,5.16-12.82,2.58-6.41,1.29-3.21.09-.2,0-.1s0,0,0,0l0,.11a3,3,0,0,0-.15.84,3.18,3.18,0,0,0,3.19,3.35Zm0-9.55a6.37,6.37,0,0,1,6.37,6.7,6.08,6.08,0,0,1-.31,1.69l-.25.65L470,199.55l-2.5,6.44-5,12.89-10.07,25.74c-3.36,8.58-6.72,17.15-10.18,25.7s-7,17-10.4,25.6l.33-1.76.06,30.84v6.63a3.91,3.91,0,0,1,0,.48,6.15,6.15,0,0,1-.19.95,6.44,6.44,0,0,1-5.65,4.67l-.48,0h-6.68l-15.42.1-15.41.1-3.86,0h-2.82l-.5,0a6.71,6.71,0,0,1-3.7-1.51,6.64,6.64,0,0,1-2.18-3.34,5.44,5.44,0,0,1-.21-1c0-.17,0-.33,0-.5v-2.79l0-3.85L375,294.16l.36,1.93-9.49-24.22c-3.14-8.08-6.3-16.16-9.24-24.32s-5.8-16.36-8.69-24.54-5.76-16.37-8.87-24.46l-1.14-3.05-.11-.28a4,4,0,0,1-.16-.57,4.62,4.62,0,0,1,4.5-5.61c2.2,0,4.34,0,6.52,0,4.33,0,8.67-.18,13-.32,8.68-.31,17.35-.54,26-.56h3.49a5.56,5.56,0,0,1,4.56,2.92,5.84,5.84,0,0,1,.5,1.28l.1.4.2.78,1.62,6.3,3.24,12.6,6.48,25.19h-8.3l5.87-23.69,3-11.83,1.47-5.92.74-3,.19-.74,0-.18.11-.4a6.13,6.13,0,0,1,5.38-4.33Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M592.23,258.19a5.9,5.9,0,0,1,1-2.73,5.83,5.83,0,0,1,2.37-2l.73-.34c.44-.22.87-.45,1.3-.7a18.47,18.47,0,0,0,2.42-1.7,21.41,21.41,0,0,0,4.06-4.46,27.62,27.62,0,0,0,4.17-11.72,53,53,0,0,0,.56-6.71,40.79,40.79,0,0,0-.28-6.59,23.19,23.19,0,0,0-4.39-11.37c-4.67-6.38-14-8.48-23.13-8.94-1.14-.07-2.31-.08-3.47-.11l-3.63,0-7.28-.06-14.56-.1c-9.7-.1-19.41,0-29.12-.4l-7.27-.25-3.64-.1-.91,0h0l.22,0a1.38,1.38,0,0,0,.41-.18,1.46,1.46,0,0,0,.56-.67,1.51,1.51,0,0,0,.11-.43v-.1h0v.23c-.1,4.85-.11,9.7,0,14.56.25,19.41,1.76,38.82,1.84,58.23l.12,29.12q0,7.27,0,14.56l0,7.28v4.09a3.15,3.15,0,0,0-.15-1,3.34,3.34,0,0,0-3-2.3h.73l58.23.3,14.56,0a39.87,39.87,0,0,0,12.9-1.94,22.55,22.55,0,0,0,10-6.65,29.33,29.33,0,0,0,5.78-11,41.93,41.93,0,0,0,1.49-13,44.18,44.18,0,0,0-2-12.94,23.78,23.78,0,0,0-6.43-10.2,25,25,0,0,0-2.33-1.89,27.65,27.65,0,0,0-2.64-1.55c-.46-.22-.91-.47-1.39-.68l-1.46-.58-.36-.15c-.16-.06-.14-.06-.6-.21a10.19,10.19,0,0,1-2.24-1.12,9.41,9.41,0,0,1-1.94-1.76A13,13,0,0,1,592.23,258.19Zm8.87-.61a2.64,2.64,0,0,0,.51-1.24,2.36,2.36,0,0,0-.19-1.24,1.38,1.38,0,0,0-.5-.6c-.17-.08.13,0,.26.08l.49.18,1.93.73c.64.27,1.26.59,1.9.88a40.42,40.42,0,0,1,3.67,2.07,34.25,34.25,0,0,1,3.37,2.63,32.68,32.68,0,0,1,9.09,14,53.55,53.55,0,0,1,2.57,15.7,51.7,51.7,0,0,1-1.76,15.82,37.16,37.16,0,0,1-7.81,14.51,31.76,31.76,0,0,1-14.15,9.05,51.74,51.74,0,0,1-15.77,2.29l-14.56,0-58.23.3h-1.1a6.26,6.26,0,0,1-5.74-4.37,6.49,6.49,0,0,1-.3-1.89v-4.1l0-7.28q0-7.28,0-14.56l.11-29.12c.09-19.41,1.59-38.82,1.85-58.23.11-4.86.09-9.71,0-14.56v-.45c0-.11,0-.22,0-.34a4.65,4.65,0,0,1,.35-1.3,4.45,4.45,0,0,1,1.74-2,4.36,4.36,0,0,1,1.26-.52,3.75,3.75,0,0,1,.67-.11l.46,0,.91,0,3.64-.1,7.27-.26c9.71-.35,19.42-.29,29.12-.39l14.56-.11,7.28,0,3.64,0c1.27,0,2.54,0,3.81.06a57.36,57.36,0,0,1,15.42,2.44,32.68,32.68,0,0,1,7.55,3.48,25.53,25.53,0,0,1,3.45,2.65,27.89,27.89,0,0,1,2.92,3.13,29.07,29.07,0,0,1,4.22,7.36,35.85,35.85,0,0,1,2.08,8,48.87,48.87,0,0,1,.47,7.94,58.74,58.74,0,0,1-.59,7.79,36.32,36.32,0,0,1-5.54,15.46,30.45,30.45,0,0,1-5.68,6.29,28.77,28.77,0,0,1-3.52,2.5c-.62.36-1.25.71-1.9,1l-.92.45a3.3,3.3,0,0,0,1.54-1.61A3.39,3.39,0,0,0,601.1,257.58Z" transform="translate(0 -2.33)"/><g class="cls-3"><rect class="cls-4" x="896.08" y="358.33" width="168" height="172"/></g><path class="cls-5" d="M733.37,296.7l-48.74-.18h0a4.25,4.25,0,0,1-4.23-4.27l0-12.6v0a4.2,4.2,0,0,1,4.21-4.19h0l28.36.11,7.09,0,3.54,0h.29a2.53,2.53,0,0,0-.38.07,2.51,2.51,0,0,0-1.91,2.14,1.33,1.33,0,0,0,0,.32v-.66l.08-14.18.08-14.18v-.66a1.87,1.87,0,0,0,0,.29,2.41,2.41,0,0,0,.59,1.28,2.44,2.44,0,0,0,1.21.71,2,2,0,0,0,.35.06c.11,0,.29,0,.13,0h-.44l-3.54,0-7.09,0-28.36-.16h0A3.62,3.62,0,0,1,681,247q0-7.12.17-14.25v-.15a3.4,3.4,0,0,1,3.47-3.32h0c9,.21,18,.48,27,.62q6.75.08,13.51,0l1.68,0h.36a1.27,1.27,0,0,0-.39.06,1.34,1.34,0,0,0-.66.43,1.42,1.42,0,0,0-.21.33c0,.07,0,.13-.07.19l0,.1s0,.08,0,0l.12-.84.24-1.67c.32-2.23.64-4.46.93-6.69.6-4.46,1.19-8.93,1.73-13.4l.83-6.7.42-3.35,0-.21c0-.08,0,.06,0,.08v.16a2.28,2.28,0,0,0,.06.64,2.24,2.24,0,0,0,.62,1.11,2.33,2.33,0,0,0,1.14.6,1.86,1.86,0,0,0,.33,0c.06,0,.12,0,0,0h-.53c-9,.27-18,.6-27,.75l-13.5.16-13.51,0-27,.08-6.76,0h-1.73a4,4,0,0,0,.47-.05,3.67,3.67,0,0,0,.92-.3,3.57,3.57,0,0,0,1.39-1.28,3.64,3.64,0,0,0,.37-.89,3.89,3.89,0,0,0,.09-.47l0-.24V201l0,13.51-.09,27-.22,54-.06,27v4a2.75,2.75,0,0,0,0-.39,3.05,3.05,0,0,0-.68-1.52,3,3,0,0,0-1.38-.91,3.34,3.34,0,0,0-.83-.13h.37l6.75,0,13.5-.11q13.51-.13,27-.16l27,.06,13.51,0h2.79a3.15,3.15,0,0,0-2.81,2.48,2.12,2.12,0,0,0-.06.44,1.55,1.55,0,0,0,0,.21v-1.37l0-6.75.07-13.51,0-6.75v-4.39a2.83,2.83,0,0,0,0,.41,3.18,3.18,0,0,0,.25.81A3,3,0,0,0,733.37,296.7Zm0-8.89a5.94,5.94,0,0,1,5.38,3.42,5.83,5.83,0,0,1,.49,1.62,4.76,4.76,0,0,1,.07.84v4.47l0,6.75.06,13.51,0,6.75V327a8.09,8.09,0,0,1-.12.86,6.11,6.11,0,0,1-4.62,4.68,5,5,0,0,1-.86.13l-.42,0h-3.11l-13.51,0-27,.06q-13.5,0-27-.16l-13.5-.1-6.75,0h-.49a5.86,5.86,0,0,1-1.65-.26,5.93,5.93,0,0,1-2.78-1.83,5.85,5.85,0,0,1-1.35-3,4.66,4.66,0,0,1-.06-.82v-4l-.06-27-.22-54-.1-27,0-13.51v-2.86c0-.15,0-.29,0-.44a5.38,5.38,0,0,1,.17-.89,6.09,6.09,0,0,1,.7-1.66,6.39,6.39,0,0,1,2.61-2.41,6.19,6.19,0,0,1,1.72-.56,5.39,5.39,0,0,1,.89-.1H644l6.76,0,27,.07,13.51,0,13.5.17c9,.15,18,.48,27,.74l.43,0h.36a4.8,4.8,0,0,1,.75.09,5.24,5.24,0,0,1,2.62,1.35,5.24,5.24,0,0,1,1.63,4,2.22,2.22,0,0,1,0,.37l0,.3,0,.21-.62,3.32-1.26,6.63c-.84,4.43-1.64,8.86-2.43,13.29-.41,2.22-.78,4.43-1.16,6.65L731.7,231l-.14.83,0,.23c0,.1,0,.2-.08.3a3.1,3.1,0,0,1-.21.58,4.44,4.44,0,0,1-.65,1.06,4.34,4.34,0,0,1-2,1.35,4.21,4.21,0,0,1-1.22.2h-.49l-1.68,0c-4.51,0-9-.05-13.51,0-9,.14-18,.41-27,.61l3.47-3.47c.11,4.75.15,9.5.18,14.25l-3.65-3.65,28.36-.15,7.09,0,3.54,0h.63l.39,0a5.22,5.22,0,0,1,.79.14,5.32,5.32,0,0,1,4,4.47,5.19,5.19,0,0,1,0,.74v.66l.07,14.18.08,14.18v.66c0,.17,0,.51,0,.76a5.53,5.53,0,0,1-4.15,4.63,5.49,5.49,0,0,1-.81.14l-.41,0h-.63l-3.54,0-7.09,0-28.36.1,4.22-4.21,0,12.6L684.63,288Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M895.6,332.6l-23-44.75v0a4.59,4.59,0,0,1,1.79-6.07,31.1,31.1,0,0,0,8.84-7.58,35.81,35.81,0,0,0,5.69-10.51c2.72-7.73,3.61-16.37,3.44-25s-1.61-17-5.31-24.23a36,36,0,0,0-3.21-5.08A32.88,32.88,0,0,0,879.8,205a35.07,35.07,0,0,0-10.26-6.26,53,53,0,0,0-12.09-3.11l-1.58-.22-1.59-.16c-1.06-.14-2.13-.2-3.2-.28s-2.15-.09-3.22-.16l-3.36-.1q-6.74-.22-13.47-.37t-13.48-.16c-9,0-18,.23-26.95.52l-6.74.24-3.37.12-1.68.07-.85,0h-.11a1.1,1.1,0,0,0,.31,0,2.69,2.69,0,0,0,.62-.16,2.48,2.48,0,0,0,1.5-2c0-.05,0-.11,0-.16v.58l0,.84.12,3.37.23,6.74c.37,9,.49,18,.6,27l.09,27c.11,18,0,35.93-.06,53.9l-.07,13.48,0,3.37v2a3.38,3.38,0,0,0-1.05-2.4,3.39,3.39,0,0,0-1.56-.86l-.45-.08h1.77l3.37,0,27,.12H822a3.5,3.5,0,0,0-.77.09,3.85,3.85,0,0,0-.79.32,3.18,3.18,0,0,0-1.19,1.17,3.26,3.26,0,0,0-.46,1.62v-5.84l0-6.74q0-6.75,0-13.48t-.1-13.48a4.86,4.86,0,0,1,4.8-4.91h.11l6.87-.07a4.9,4.9,0,0,1,4.51,2.87l.05.1q5.05,11.13,10,22.33l4.9,11.2,2.46,5.6.3.7.16.35a3.5,3.5,0,0,0-.39-.66,3.46,3.46,0,0,0-1.25-1,3.6,3.6,0,0,0-.78-.27,2.76,2.76,0,0,0-.4-.06l-.21,0h3l24.45.1,12.22.07,6.12,0h2.73l-.38,0a3.21,3.21,0,0,0-2.37,4.65Zm8.52-4.43a6.41,6.41,0,0,1-4.75,9.31,4.77,4.77,0,0,1-.76.06h-3l-6.12,0-12.22.07-24.45.1h-3.34l-.39,0c-.26,0-.53-.07-.78-.12a7.2,7.2,0,0,1-1.5-.52,6.69,6.69,0,0,1-2.42-2,6.45,6.45,0,0,1-.76-1.32l-.16-.35-.31-.7-2.48-5.58-5-11.18q-5-11.18-9.75-22.42l4.56,3-6.87-.07,4.92-4.92q-.09,6.75-.11,13.48t0,13.48l0,6.74v5.94a6.43,6.43,0,0,1-.9,3.22,6.54,6.54,0,0,1-2.39,2.34,6.27,6.27,0,0,1-1.57.62,6.38,6.38,0,0,1-1.61.2H810.25l-27,.12-3.37,0H777.5l-.43,0a6.21,6.21,0,0,1-.86-.16,6.55,6.55,0,0,1-3-1.65,6.69,6.69,0,0,1-1.78-3,6.4,6.4,0,0,1-.26-1.72v-2.19l0-3.37-.06-13.48c-.06-18-.18-35.94-.07-53.9l.09-27c.11-9,.23-18,.6-27l.23-6.74.12-3.37,0-.84v-.89l0-.37a5.71,5.71,0,0,1,3.39-4.58,5.89,5.89,0,0,1,1.42-.4,4.62,4.62,0,0,1,.74-.06h.3l.85,0,1.68.07,3.37.12,6.74.24c9,.29,18,.48,26.95.52q6.74,0,13.48-.16t13.47-.37l3.39-.09c1.16,0,2.33,0,3.51,0a64.38,64.38,0,0,1,7.05.48,56.74,56.74,0,0,1,14,3.38,43.12,43.12,0,0,1,12.72,7.56,41.39,41.39,0,0,1,5.16,5.43,44.31,44.31,0,0,1,4.07,6.25,53.6,53.6,0,0,1,4.91,13.73A78.28,78.28,0,0,1,901,238.46a96.57,96.57,0,0,1-.52,14.1,66.05,66.05,0,0,1-3.11,14.08,44.81,44.81,0,0,1-7,13.12A40.13,40.13,0,0,1,879,289.71l1.79-6.09Z" transform="translate(0 -2.33)"/><g class="cls-3"><path class="cls-4" d="M283.19,188.79c-24.58.28-41.84,6.62-51.29,18.87a58.07,58.07,0,0,0-10.42,23,130.54,130.54,0,0,0-2.69,22.42Q251,220.9,283.19,188.79Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M280.52,228.63c2.33-.22,5-.34,8.14-.34a124.44,124.44,0,0,1,25.87,3.05,1.6,1.6,0,0,0,1.91-1.26l6.6-33.69a1.59,1.59,0,0,0-.92-1.77,39.88,39.88,0,0,0-5.68-1.91Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M285,336.18l1.71,0c14.09,0,26-2,35.41-5.85a1.6,1.6,0,0,0,1-1.62l-2.51-28.14Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M231.9,317.29a40.37,40.37,0,0,0,8.19,7.95l30.85-30.85c-.61-.1-1.22-.19-1.82-.3V240l-48.71,48.71c.32,2,.67,3.89,1.07,5.69A57.94,57.94,0,0,0,231.9,317.29Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M349.29,216l24-24H342.15a1.6,1.6,0,0,0-1.48,2.19Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M381.58,332.89h43.95a1.89,1.89,0,0,0,1.89-1.89V287.07l.11-.28Q404.55,309.85,381.58,332.89Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M466.88,194.45l.08-.2a1.6,1.6,0,0,0-1.48-2.19H429.09L411,210.2l-7.24,28.43-4.24-16.95q-11.06,11-22.1,22.1L365.11,256l11.39,28.79Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M592.57,198.52a64.08,64.08,0,0,0-15.08-1.59H549.22l-39.64,39.64v44.37Q551.06,239.72,592.57,198.52Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M511.07,328H546.3l63.38-63.38a29.45,29.45,0,0,0-13-6.76,24.6,24.6,0,0,0,11.27-9.34c3.5-5.22,5.28-12.64,5.28-22.05a38.06,38.06,0,0,0-1.31-10.25q-51.17,51.17-102.32,102.32v8A1.49,1.49,0,0,0,511.07,328Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M591.55,327.6c8.36-1.08,14.89-4.23,19.44-9.4a34.51,34.51,0,0,0,8-18.07Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M707.72,247H684.63V234.52l-44,44v35.28Q674.17,280.34,707.72,247Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M733.37,292.25H714.89L679.12,328h54.25a1.49,1.49,0,0,0,1.49-1.49v-32.8A1.49,1.49,0,0,0,733.37,292.25Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M729.68,225.11l4.13-26.47a1.45,1.45,0,0,0-.34-1.19,1.48,1.48,0,0,0-1.13-.52H722.22L686.44,232.7H722Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M677.4,196.93H642.14a1.48,1.48,0,0,0-1.48,1.49v35.25Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M822.77,332.56l.73-.73a1.52,1.52,0,0,0,.17-.71v-37l-38.59,38.59h37A1.51,1.51,0,0,0,822.77,332.56Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M873.09,196q-10.49-4.78-25.57-4.8H816q-17,17-34,34L776.19,231v62.12Q824.71,244.6,873.09,196Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M888.78,309l-23.7,23.69h33.36a1.6,1.6,0,0,0,1.37-.77,1.62,1.62,0,0,0,.05-1.58Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M840.71,314.63q26.84-26.85,53.71-53.65a77.69,77.69,0,0,0,2.3-19.73,74.38,74.38,0,0,0-2-18.12l-68.43,68.42h4.28Z" transform="translate(0 -2.33)"/></g><path class="cls-2" d="M287.39,403.52C318.9,390.89,358,426,348.76,461.75s-61.54,42.58-82.71,18.67S258.9,414.94,287.39,403.52Z" transform="translate(0 -2.33)"/><path class="cls-6" d="M287.39,403.52C318.9,390.89,358,426,348.76,461.75s-61.54,42.58-82.71,18.67S258.9,414.94,287.39,403.52Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M286.41,426.48c4.16-6.3,32.8,16.52,35.3,21.39s-34.37,20.82-37,19.08S286.41,426.48,286.41,426.48Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M285.87,399.74a44.68,44.68,0,0,1,9.91-2.54,47.28,47.28,0,0,1,10.16,0,52.33,52.33,0,0,1,9.8,2.21,56.62,56.62,0,0,1,9.08,4.09A59.31,59.31,0,0,1,340,416a56.54,56.54,0,0,1,5.8,7.95c.89,1.37,1.61,2.86,2.39,4.3s1.39,3,1.92,4.55a47.57,47.57,0,0,1-1.87,38.33,46.62,46.62,0,0,1-2.44,4.3c-1,1.33-1.85,2.73-2.91,4a53.28,53.28,0,0,1-6.77,7.24,43.59,43.59,0,0,1-17.25,9.76,56.41,56.41,0,0,1-38.64-2.64,49.65,49.65,0,0,1-8.49-4.95c-.68-.46-1.29-1-1.94-1.53l-.95-.78-.89-.84c-.59-.57-1.23-1.09-1.77-1.71l-1.65-1.82a48.82,48.82,0,0,1-5.44-8.05L258,471.88c-.35-.73-.61-1.49-.93-2.23s-.58-1.51-.84-2.27a22.89,22.89,0,0,1-.72-2.31c-.2-.78-.44-1.55-.61-2.34l-.52-2.36c-.26-1.59-.5-3.18-.65-4.78l-.12-1.21-.06-1.21c0-.8-.1-1.61-.08-2.41v-2.43l.13-2.42a61.63,61.63,0,0,1,1.51-9.6,57.49,57.49,0,0,1,3.17-9.23,54.56,54.56,0,0,1,4.78-8.58c.91-1.37,1.92-2.67,2.94-4s2.14-2.51,3.33-3.68A49.56,49.56,0,0,1,285.87,399.74Zm3,7.57a42.83,42.83,0,0,0-7.39,3.91,46.25,46.25,0,0,0-6.56,5.32,54.42,54.42,0,0,0-10.27,13.66,61.94,61.94,0,0,0-3.56,7.92,54.16,54.16,0,0,0-2.27,8.44,41.9,41.9,0,0,0-.66,8.74,35.33,35.33,0,0,0,1.26,8.67A34.8,34.8,0,0,0,267.93,479,35.51,35.51,0,0,0,282.48,488a51.76,51.76,0,0,0,17,2.45,60,60,0,0,0,16.83-2.63c2.68-.87,5.38-1.74,8-2.86a48.48,48.48,0,0,0,7.57-3.84,16.58,16.58,0,0,0,1.77-1.19c.57-.44,1.17-.83,1.71-1.29a32.09,32.09,0,0,0,3.09-3,30.46,30.46,0,0,0,2.65-3.35,41.39,41.39,0,0,0,2.15-3.7,33.69,33.69,0,0,0,2.88-8.06,38.2,38.2,0,0,0,.69-4.24A40.81,40.81,0,0,0,347,452c0-.71-.06-1.43-.09-2.14a17,17,0,0,0-.17-2.13l-.26-2.12-.42-2.1a43.88,43.88,0,0,0-2.55-8.16,50.37,50.37,0,0,0-30.3-28.46,44.76,44.76,0,0,0-8.18-1.78,38.55,38.55,0,0,0-8.25.11A36,36,0,0,0,288.91,407.31Z" transform="translate(0 -2.33)"/><path class="cls-7" d="M202.42,260.24c0-.56-.14-1.12-.2-1.68s-.16-1.12-.28-1.67a31.54,31.54,0,0,0-2-6.51,33.32,33.32,0,0,0-3.26-6,31,31,0,0,0-4.55-5.24,4.72,4.72,0,0,0-3.13-1.22h-.1L10.21,236.35c-.26,4-.49,8-.66,12.1s-.32,8.13-.39,12.2-.09,8.13,0,12.15.11,8,.24,11.91l0,.52v0a7.44,7.44,0,0,0,.24,1.58c-.08.11-.17.22-.25.34a43.85,43.85,0,0,0-4.27,7.44,39.72,39.72,0,0,0,.39,33.46,44,44,0,0,0,4.38,7.25,40.31,40.31,0,0,0,5.79,6.31l0,0A5.22,5.22,0,0,0,19.17,343q10.75-.09,21.52-.06H62.21c14.35,0,28.7.1,43,.15l43.05.1,21.52-.08,21.52-.17h.17a5.18,5.18,0,0,0,5.1-5.27c-.07-4.67-.15-9.36-.31-14s-.37-9.33-.67-13.92-.61-9.13-.95-13.58c-.28-3.36-.56-6.68-.85-9.93.24-.28.48-.56.71-.85.71-.87,1.37-1.76,2-2.69a35.6,35.6,0,0,0,3.19-5.85,34,34,0,0,0,2.83-13.15C202.58,262.5,202.46,261.37,202.42,260.24Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M189.14,287.47c-14.81.72-29.29,1.33-43.63,1.91l-21.38.79-21.17.64c-14,.34-28,.67-41.95.78-7,0-13.93.07-20.9,0l-20.94-.22,4-1.51a29.88,29.88,0,0,0-4.13,4.44,32.27,32.27,0,0,0-3.26,5.27,29,29,0,0,0-2.87,11.87,28.54,28.54,0,0,0,2.49,12A31.71,31.71,0,0,0,18.56,329a29.49,29.49,0,0,0,4.12,4.65l-3.51-1.32c14.35.12,28.69,0,43,.07s28.7-.1,43-.14l43.05-.11,21.52.08,21.52.17-5.28,5.27c.08-4.05.16-8.09.32-12.14s.36-8.12.67-12.26.61-8.33.95-12.6Zm4.39-4.39c.42,4.21.78,8.59,1.15,13s.68,9,.95,13.58.48,9.26.67,13.92.24,9.37.31,14a5.18,5.18,0,0,1-5.1,5.27h-.17l-21.52.17-21.52.08-43.05-.1c-14.34-.05-28.69-.18-43-.15s-28.69-.05-43,.07a5.23,5.23,0,0,1-3.48-1.29l0,0a40.31,40.31,0,0,1-5.79-6.31,44,44,0,0,1-4.38-7.25,39.72,39.72,0,0,1-.39-33.46,43.85,43.85,0,0,1,4.27-7.44,39.63,39.63,0,0,1,5.78-6.53,5.79,5.79,0,0,1,3.84-1.5h.18l22.1-.22c7.38-.05,14.76,0,22.15,0,14.76.11,29.48.44,44.13.78l21.87.64,21.66.79C165.43,281.75,179.65,282.36,193.53,283.08Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M28.74,285.28l1.53,26.54-1.53,26.54a3.23,3.23,0,0,1-6.45,0l-1.53-26.54,1.53-26.54a3.23,3.23,0,0,1,6.45,0Z" transform="translate(0 -2.33)"/><g class="cls-8"><path class="cls-5" d="M189.75,321.49l-74.18-5,74.18-5a5,5,0,0,1,.68,10Z" transform="translate(0 -2.33)"/></g><g class="cls-8"><path class="cls-5" d="M28.69,312l36.1,5-36.1,5a5,5,0,0,1-1.39-10A5.39,5.39,0,0,1,28.69,312Z" transform="translate(0 -2.33)"/></g><path class="cls-5" d="M10.21,236.35l178.72,1.58h.12a4.65,4.65,0,0,1,3.11,1.22A32.05,32.05,0,0,1,200,250.38a31.54,31.54,0,0,1,2,6.51c.24,1.11.35,2.23.48,3.35s.16,2.26.13,3.39a34,34,0,0,1-2.83,13.15,35.6,35.6,0,0,1-3.19,5.85c-.62.93-1.28,1.82-2,2.69-.35.44-.72.87-1.1,1.3s-.73.82-1.3,1.36a4.46,4.46,0,0,1-3.07,1.24H189l-43,.21-43,.52c-14.35.23-28.69.56-43,.87s-28.69.74-43,1.37a7.16,7.16,0,0,1-7.47-6.84v-.06l0-.58c-.28-7.84-.38-15.94-.19-24.07.09-4.07.26-8.12.42-12.19S10,240.35,10.21,236.35Zm9.85,9.84c.39,6.58.77,13,1,19.39s.37,12.7.37,19.12l-4.65-4.65L189,279.91l-3.16,1.24c.14-.13.47-.47.71-.75s.53-.6.79-.92a24.56,24.56,0,0,0,1.46-2,26.05,26.05,0,0,0,2.37-4.37,24.66,24.66,0,0,0,2-9.53c0-.81-.08-1.63-.1-2.44a24.31,24.31,0,0,0-.35-2.42,22.12,22.12,0,0,0-1.42-4.65,23.61,23.61,0,0,0-2.35-4.26,21.15,21.15,0,0,0-3.1-3.57l3.1,1.18c-28.15,0-56.2-.06-84.3-.28S48.37,246.55,20.06,246.19Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M186.83,242.77,188.11,264l-1.25,21.19a2.65,2.65,0,0,1-5.3,0L180.28,264l1.25-21.19a2.65,2.65,0,0,1,5.3,0Z" transform="translate(0 -2.33)"/><g class="cls-8"><path class="cls-5" d="M18.36,253.92,112,257.39,18.37,261a3.55,3.55,0,0,1-.27-7.09Z" transform="translate(0 -2.33)"/></g><g class="cls-8"><path class="cls-5" d="M179.44,271.65l-49.18-3.51,49.18-3.58a3.55,3.55,0,0,1,.51,7.09A4.34,4.34,0,0,1,179.44,271.65Z" transform="translate(0 -2.33)"/></g><rect class="cls-7" x="131.79" y="127.18" width="42.98" height="10.89" rx="3.29" transform="translate(-36.25 202.14) rotate(-61.63)"/><path class="cls-5" d="M137.55,147.7a66.45,66.45,0,0,1,7.3-18.71,83.41,83.41,0,0,1,5.51-8.56c1-1.39,2.07-2.76,3.22-4.11a27.54,27.54,0,0,1,4-3.85,13.72,13.72,0,0,1,2.69-1.68,7.38,7.38,0,0,1,4-.7,5.93,5.93,0,0,1,2.26.8,9.55,9.55,0,0,1,1.4,1.06,7.46,7.46,0,0,1,1.28,1.52,6.2,6.2,0,0,1,.78,2,7.55,7.55,0,0,1-.19,3.66,15.12,15.12,0,0,1-1.12,2.72,36,36,0,0,1-2.78,4.41l-5.84,8c-1.95,2.67-3.83,5.39-5.82,8.06,3-5.89,6.06-11.75,9.43-17.41a41.17,41.17,0,0,0,2.22-4.33,7,7,0,0,0,.72-4.26,3.07,3.07,0,0,0-1.09-1.57,5.82,5.82,0,0,0-.88-.58,2,2,0,0,0-.81-.24c-1.13-.1-2.49.76-3.63,1.76a38.11,38.11,0,0,0-6,7.42c-1.78,2.71-3.4,5.54-5,8.39-3.16,5.72-6.09,11.58-9,17.46a1.43,1.43,0,0,1-2.67-.93Z" transform="translate(0 -2.33)"/><path class="cls-7" d="M106.74,138.92c-47.14,0-85.35,36-85.35,81h170.7C192.09,174.9,153.88,138.92,106.74,138.92Zm39.87,63.71c-22.77,3.42-75.68,6.83-81.45-3.41a25,25,0,0,1-3.21-16c0-.22-.06-.43-.06-.66a6.78,6.78,0,0,1,1.18-3.84c3.36-9.5,12.7-16.79,24.57-17.77,19.68-1.64,62,8.44,70.48,18.5S169.39,199.22,146.61,202.63Z" transform="translate(0 -2.33)"/><path class="cls-7" d="M109,151.39c-36.1,0-65.36,24.28-65.36,62.41H174.37C174.37,175.67,145.11,151.39,109,151.39ZM79.79,182.46a6.86,6.86,0,1,1,6.86-6.86A6.86,6.86,0,0,1,79.79,182.46Zm52.61,0a6.86,6.86,0,1,1,6.86-6.86A6.86,6.86,0,0,1,132.4,182.46Z" transform="translate(0 -2.33)"/><rect class="cls-7" x="61.48" y="111.16" width="10.31" height="42.98" rx="3.12" transform="translate(-57.74 49.27) rotate(-30.24)"/><path class="cls-5" d="M79.4,145.11A131.28,131.28,0,0,0,71.09,130c-1.53-2.44-3.13-4.83-4.84-7.11a40.89,40.89,0,0,0-5.51-6.18,9.46,9.46,0,0,0-1.47-1.06,2.7,2.7,0,0,0-1.14-.41l-.16,0s0,0-.06,0l0,0-.09.07-.2.15a6.29,6.29,0,0,0-1.16,1.14,4.16,4.16,0,0,0-.72,2.79,14,14,0,0,0,.79,3.67,35.4,35.4,0,0,0,1.52,3.8c.55,1.29,1.2,2.54,1.82,3.82,1.29,2.54,2.59,5.12,3.86,7.76l0,.06a.92.92,0,0,1-.43,1.23.91.91,0,0,1-1.11-.26q-1.38-1.71-2.72-3.47c-.86-1.2-1.7-2.41-2.51-3.66a44.13,44.13,0,0,1-4.19-8,17.27,17.27,0,0,1-1.14-4.77,9.75,9.75,0,0,1,.2-2.76,7.45,7.45,0,0,1,1.22-2.71,11,11,0,0,1,1.89-2l.23-.19.12-.09.2-.15a4.57,4.57,0,0,1,.92-.52,4.86,4.86,0,0,1,2.06-.34,7.27,7.27,0,0,1,3.11,1,14,14,0,0,1,2.17,1.5A37.78,37.78,0,0,1,70,120.24q1.36,1.82,2.54,3.73c.79,1.26,1.55,2.54,2.26,3.85s1.42,2.61,2,4c.3.68.63,1.34.91,2l.78,2.1a34.76,34.76,0,0,1,1.21,4.34,17.6,17.6,0,0,1,.45,4.62V145a.42.42,0,0,1-.43.38A.4.4,0,0,1,79.4,145.11Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M19.12,222a5,5,0,0,1-.71-1.1c-.07-.15-.14-.31-.19-.44l-.12-.35a5.14,5.14,0,0,1-.17-.64c-.05-.2-.09-.4-.12-.57a19.41,19.41,0,0,1-.22-2,34.37,34.37,0,0,1,0-3.66,61.39,61.39,0,0,1,.76-7,87.88,87.88,0,0,1,3.34-13.43,89.51,89.51,0,0,1,12.64-24.6,81,81,0,0,1,20.11-19.35A85.32,85.32,0,0,1,80,137.52a101.5,101.5,0,0,1,13.67-2.65c2.3-.29,4.6-.5,6.9-.65,1.15-.09,2.31-.12,3.47-.14l3.47-.07a91.93,91.93,0,0,1,27.71,3.89A74.09,74.09,0,0,1,170,161.1a91.56,91.56,0,0,1,8,11.3,137,137,0,0,1,11.47,24.72,112.77,112.77,0,0,1,3.81,13,59.83,59.83,0,0,1,1.14,6.88c0,.31,0,.71,0,1.07a1.59,1.59,0,0,1-.05.47,2.64,2.64,0,0,1-.24.72,3.18,3.18,0,0,1-.59.8,4.15,4.15,0,0,1-.88.62,9.73,9.73,0,0,1-2.12.73c-1.23.3-2.36.48-3.51.65-4.54.62-9,.92-13.44,1.2s-8.89.53-13.34.73c-8.88.4-17.77.68-26.65.91-17.76.48-35.51.78-53.27.76-8.88,0-17.77-.09-26.65-.3-2.23-.06-4.45-.13-6.67-.25s-4.45-.24-6.67-.41-4.45-.37-6.69-.61c-1.12-.14-2.24-.26-3.37-.44-.57-.09-1.15-.17-1.74-.28l-.95-.2-.57-.13L26.6,223l-.4-.14a3.83,3.83,0,0,1-1.11-.73,3.05,3.05,0,1,1,4.31-4.32,3.17,3.17,0,0,0-.93-.64l-.19-.08c-.06,0,0,0,0,0h2.53L34,217c2.2,0,4.4-.05,6.61-.05s4.41,0,6.62,0,4.42.06,6.63.11l26.54.63c17.71.4,35.42.84,53.13,1,8.85.07,17.7.08,26.54,0,4.42-.07,8.84-.12,13.24-.33s8.81-.44,13.07-1c1.05-.13,2.11-.29,3-.5a6.17,6.17,0,0,0,1-.32s0,0-.19.16a1.91,1.91,0,0,0-.52,1c0,.27,0,.36,0,.26s0-.35,0-.59a53.88,53.88,0,0,0-1-6.23,99.23,99.23,0,0,0-3.63-12.47,83.37,83.37,0,0,0-12.43-22.65,88.4,88.4,0,0,0-18.18-17.57,78.56,78.56,0,0,0-22.24-10.92,90.86,90.86,0,0,0-24.76-3.71h-3.17c-1.06,0-2.12,0-3.18.05-2.12.1-4.24.25-6.35.47a91.78,91.78,0,0,0-12.47,2.14,76.32,76.32,0,0,0-23.07,9.67A72.77,72.77,0,0,0,40.68,173a85,85,0,0,0-12.29,22.17,81,81,0,0,0-3.54,12.24,56.42,56.42,0,0,0-.92,6.21c-.09,1-.13,2-.12,3,0,.46,0,.93.09,1.29,0,.1,0,.18,0,.24s0,.15,0,.17v0l0-.06a2.06,2.06,0,0,0-.29-.38A3.05,3.05,0,0,1,19.12,222Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M73.21,175.25c-.55-9.42,12.16-10.17,13.61-.87S74,188.61,73.21,175.25Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M71.59,175.35c-.06-.57-.07-1.14-.15-1.73a3.86,3.86,0,0,1,0-.9v-1a10.27,10.27,0,0,1,.34-2,9.53,9.53,0,0,1,.88-2,7,7,0,0,1,.7-.85,5.36,5.36,0,0,1,.8-.78,7.18,7.18,0,0,1,1.93-1.07l1.05-.34a9.78,9.78,0,0,1,1.06-.18,8.16,8.16,0,0,1,2.15-.07,9.34,9.34,0,0,1,2.08.41,15.17,15.17,0,0,1,2,.82A14.11,14.11,0,0,1,86,167a12.26,12.26,0,0,1,1.35,1.56,11.73,11.73,0,0,1,1,1.75,13,13,0,0,1,.61,1.82c.11.62.2,1.23.28,1.83a10.51,10.51,0,0,1,0,1.86,9.92,9.92,0,0,1-9.55,9.07,7.12,7.12,0,0,1-3.48-.94,8.3,8.3,0,0,1-2.55-2.45A14.5,14.5,0,0,1,71.59,175.35Zm3.23-.19a9.91,9.91,0,0,0,1.32,4.73,3.94,3.94,0,0,0,3.48,1.93,5.83,5.83,0,0,0,4-1.87,6.21,6.21,0,0,0,1.69-4.17,7.85,7.85,0,0,0-.08-1.17l-.29-1.17a10.07,10.07,0,0,0-.45-1.07,5.54,5.54,0,0,0-.62-1,8.34,8.34,0,0,0-.77-.8c-.29-.24-.62-.4-.93-.62a10,10,0,0,0-1-.39,5.16,5.16,0,0,0-1.1-.18,5,5,0,0,0-3.93,1.5A5.9,5.9,0,0,0,74.82,175.16Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M125.46,175.67c.28-8.91,14-11.83,13.7-.13S125.18,184.57,125.46,175.67Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M122.14,175.57a11.71,11.71,0,0,1,.9-3.94,10.42,10.42,0,0,1,9.39-6.24,8.45,8.45,0,0,1,3.89.85,7.46,7.46,0,0,1,3,2.66,9.22,9.22,0,0,1,1.32,3.37,14.28,14.28,0,0,1,.24,3.3,14.93,14.93,0,0,1-.4,3.28,10.16,10.16,0,0,1-1.39,3.28,8.32,8.32,0,0,1-2.81,2.65,8.43,8.43,0,0,1-3.82,1.06,10,10,0,0,1-7.3-2.77,9.89,9.89,0,0,1-2.28-3.47A11.32,11.32,0,0,1,122.14,175.57Zm5,.15a5.82,5.82,0,0,0,1.48,4.13,5.72,5.72,0,0,0,4,1.84A4.24,4.24,0,0,0,136.2,180a7.88,7.88,0,0,0,1.3-4.49,11.65,11.65,0,0,0-.22-2.47,5.65,5.65,0,0,0-.87-2,3.86,3.86,0,0,0-3.6-1.49,6.4,6.4,0,0,0-4,2A6.47,6.47,0,0,0,127.12,175.72Z" transform="translate(0 -2.33)"/><path class="cls-9" d="M684.84,150.4c5.27-14,3.37-31.46-10-45.29,9.76-36.8,2.15-61.68-30.4-91.89C641.8,10.73,635.71,6,637,9.41c8.15,22.09,10.15,40.24,2.83,61.31C631.23,67,588.44,39.8,563.33,9.4c-2.37,4.78,6.41,24.36,25.61,49-18-11.41-28.79-20-41.93-32.57-1.71-1.64-7.25-5.56-6-3.51,13,22.21,28,54.19,67.92,77.6,3.89,2.28,3.81,4.89.92,6.12-24.88,10.6-49.34,11.21-83.7-11.71-1.92-1.28-2.49-.72-1.29,1.25,23,37.56,61.4,65.5,114.15,48.36,18.49-8.79,33.11-9.72,44.1,6.67C683.66,151.45,684.46,151.4,684.84,150.4Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M681.44,149.11a39.25,39.25,0,0,0,2.66-22.25,40.24,40.24,0,0,0-3.62-11,46.5,46.5,0,0,0-6.59-9.78l-.08-.09a1.3,1.3,0,0,1-.26-1.23h0c.58-3.61,1-7.23,1.39-10.82s.52-7.17.53-10.72a72.18,72.18,0,0,0-2.85-20.62A64,64,0,0,0,669,53a80.25,80.25,0,0,0-5.06-9,95.51,95.51,0,0,0-6.1-8.44c-2.19-2.73-4.58-5.31-7-7.91s-4.93-5.09-7.5-7.56l-2-1.83-1-.9-.89-.77c-.62-.52-1.26-1-1.89-1.51a19,19,0,0,0-1.72-1.17c-.19-.13-.46-.22-.06-.06a4.55,4.55,0,0,0,.73.16,5.1,5.1,0,0,0,2.69-.38,5.67,5.67,0,0,0,2.26-1.75,5.51,5.51,0,0,0,.67-1.15,4.89,4.89,0,0,0,.31-.94A4.48,4.48,0,0,0,642.62,8a3.1,3.1,0,0,0-.11-.5l0-.08s0,0,0,0l0,.08.23.68.46,1.34c.63,1.79,1.19,3.62,1.75,5.44s1.07,3.68,1.56,5.53.84,3.77,1.15,5.68a71.36,71.36,0,0,1,1.27,11.6,63.32,63.32,0,0,1-.61,11.68c-.15,1-.27,1.93-.45,2.88l-.59,2.85c-.19,1-.5,1.87-.75,2.8s-.51,1.85-.84,2.76a62.87,62.87,0,0,1-4.57,10.45l-.21.4a1.16,1.16,0,0,1-1.56.48l-.1-.06h0a15.9,15.9,0,0,1-4.14,1,21.38,21.38,0,0,1-3.74.05,22.4,22.4,0,0,1-6.56-1.48,25.23,25.23,0,0,1-5.6-3c-1.76-1.17-3.49-2.36-5.22-3.56a217.62,217.62,0,0,1-19.76-15.66A175.16,175.16,0,0,1,576.58,31.2a110.14,110.14,0,0,1-14.32-20.91l2.31-.27h0a11,11,0,0,0,.81,2.54c.35.94.88,1.89,1.35,2.86,1,1.93,2.07,3.88,3.21,5.81,2.18,3.91,4.53,7.79,6.72,11.8L578.4,36l1.69,3c.57,1,1.18,2,1.74,3l1.7,3c2.25,4.06,4.52,8.13,6.51,12.5h0l.06.09a1.4,1.4,0,0,1-.39,1.93,1.38,1.38,0,0,1-1.51,0c-7.08-4.53-14.06-9.25-20.74-14.38a248.45,248.45,0,0,1-19.2-16.42L546,26.58a28.11,28.11,0,0,0-2.34-1.86,20.48,20.48,0,0,0-2.47-1.59c-.16-.1-.43-.18-.32-.16a.5.5,0,0,0,.18,0,1.15,1.15,0,0,0,.51-.18,1.18,1.18,0,0,0,.51-.7,1.53,1.53,0,0,0,0-.4c-.06-.25,0-.12,0-.09l.79,1.36,6.24,10.91c4.16,7.25,8.49,14.38,13.3,21.16a157.84,157.84,0,0,0,15.88,19.19,144.09,144.09,0,0,0,18.85,16.2c3.35,2.44,6.83,4.71,10.38,6.85l2.74,1.65a7.6,7.6,0,0,1,2.72,2.79,3.85,3.85,0,0,1,.39,2.51,3.9,3.9,0,0,1-1.3,2.17,6,6,0,0,1-1.76,1.06l-1.47.62a87.55,87.55,0,0,1-24.7,6.5,71.15,71.15,0,0,1-12.89,0,77.52,77.52,0,0,1-12.68-2.31,107.32,107.32,0,0,1-23.66-9.79c-1.87-1-3.74-2-5.56-3.14-.93-.53-1.84-1.08-2.74-1.64l-1.35-.84-.67-.41c-.16-.1-.31-.18-.41-.23l-.08,0a1,1,0,0,0,.32.07,2.21,2.21,0,0,0,.7-.06,2.4,2.4,0,0,0,1.76-1.92,1.89,1.89,0,0,0,0-.51c0-.35,0-.21,0-.13s.15.26.25.42l1.71,2.57c1.15,1.7,2.32,3.39,3.54,5a119,119,0,0,0,16.36,18.19c1.48,1.37,3.05,2.65,4.6,4s3.17,2.5,4.83,3.64a89,89,0,0,0,10.19,6.33,81.92,81.92,0,0,0,10.84,4.85,87.37,87.37,0,0,0,11.35,3.17,84.76,84.76,0,0,0,11.65,1.5,92.2,92.2,0,0,0,11.75-.18,118.51,118.51,0,0,0,23.23-4.65l-.69.27a77.11,77.11,0,0,1,13.2-4.64,38.6,38.6,0,0,1,14.81-1,28.47,28.47,0,0,1,7.47,2.19,27.74,27.74,0,0,1,6.48,4.11,34.94,34.94,0,0,1,5.07,5.35c.73,1,1.42,1.93,2.05,2.93l.48.74c0,.06-.07-.1-.16-.18a2.29,2.29,0,0,0-.62-.45,2.78,2.78,0,0,0-1.44-.31,2.89,2.89,0,0,0-1.58.54A2.06,2.06,0,0,0,681.44,149.11Zm6.8,2.57a5.36,5.36,0,0,1-1.79,2.3,4.39,4.39,0,0,1-4.51.32,5.27,5.27,0,0,1-2-1.73l-.46-.59q-.9-1.2-1.89-2.28a26.31,26.31,0,0,0-4.21-3.8,17.69,17.69,0,0,0-9.89-3.45,32,32,0,0,0-11,1.79A80,80,0,0,0,641.4,149a5.8,5.8,0,0,1-.69.27c-2.1.64-4.17,1.38-6.3,1.94s-4.27,1.11-6.44,1.51a91.18,91.18,0,0,1-13.19,1.71l-3.34.14c-1.11,0-2.23,0-3.34,0-2.23,0-4.46-.18-6.68-.35a94.34,94.34,0,0,1-13.16-2.3A88.58,88.58,0,0,1,564,141.36a96.85,96.85,0,0,1-10.61-7.65c-1.7-1.35-3.3-2.82-4.91-4.25s-3.14-3-4.62-4.55a121.37,121.37,0,0,1-8.45-9.71c-2.62-3.39-5.23-6.77-7.57-10.33-1.2-1.77-2.34-3.57-3.45-5.38l-1.68-2.72a9.55,9.55,0,0,1-.5-.92,5,5,0,0,1-.45-1.51,3,3,0,0,1,0-.83,2.75,2.75,0,0,1,.6-1.33,2.66,2.66,0,0,1,1.41-.89,3.17,3.17,0,0,1,1-.09,3.83,3.83,0,0,1,1,.24,4,4,0,0,1,.61.27,8.35,8.35,0,0,1,.92.53l.66.44,1.3.85c.85.58,1.72,1.13,2.6,1.67,1.74,1.11,3.52,2.16,5.3,3.19a106.69,106.69,0,0,0,11.07,5.4l2.84,1.14,2.87,1c1.94.63,3.9,1.19,5.86,1.67a66.4,66.4,0,0,0,11.91,1.84,65.5,65.5,0,0,0,11.89-.54,77,77,0,0,0,22.6-7.16l1.35-.65c.16-.08.09-.06.12-.08h0a.54.54,0,0,0-.24.13,3,3,0,0,0-1,1.67,3.52,3.52,0,0,0-.05,1.28,2.75,2.75,0,0,0,.22.79c.15.34.18.35.11.33l-.47-.28-1.16-.62-1.43-.78c-1.91-1-3.79-2.14-5.65-3.27s-3.67-2.35-5.47-3.6a131.25,131.25,0,0,1-20-16.89A161.53,161.53,0,0,1,556.1,59.5a239.26,239.26,0,0,1-13.17-22.08c-2-3.7-3.92-7.46-5.84-11.11l-.75-1.41c-.11-.22-.19-.37-.32-.64s-.15-.38-.22-.57a6,6,0,0,1-.24-1A5.46,5.46,0,0,1,538,17.28a5.54,5.54,0,0,1,2.59-.86,6.85,6.85,0,0,1,1.23,0l.63.13.42.13.35.12.23.1.41.19.33.17A18.26,18.26,0,0,1,546,18.45c.51.36,1,.72,1.45,1.08,1,.75,1.79,1.44,2.83,2.43l2.24,2.29c2.86,3,5.75,5.93,8.72,8.77,1.49,1.43,3,2.82,4.52,4.21s3,2.79,4.6,4.15c3.11,2.71,6.31,5.35,9.53,8s6.51,5.23,9.83,7.81l-1.84,2h0A75.64,75.64,0,0,1,577.64,49.1l-2.28-2.77c-.75-.93-1.44-1.9-2.15-2.87s-1.41-1.93-2.09-2.92l-1.93-3a63.29,63.29,0,0,1-6.46-13,39.56,39.56,0,0,1-1.8-7.32,20.84,20.84,0,0,1-.19-4,8.16,8.16,0,0,1,1.34-4.38h0a1.37,1.37,0,0,1,1.81-.68,1.33,1.33,0,0,1,.47.37l0,0a196.82,196.82,0,0,0,16.83,17.72c5.95,5.59,12.19,10.88,18.59,16s13,9.93,19.76,14.55c3.37,2.3,6.79,4.55,10.25,6.71,1.73,1.08,3.47,2.14,5.23,3.16s3.55,2,5.3,2.81h0l-1.88.82c.52-3.65,1.06-7.21,1.32-10.77.1-.88.13-1.77.17-2.65s.12-1.76.09-2.64l.06-2.63c0-.87,0-1.74-.06-2.61A94.62,94.62,0,0,0,637,28.47c-.41-1.69-.94-3.36-1.43-5s-1-3.36-1.56-5-1.13-3.35-1.76-5l-.47-1.25-.23-.62-.09-.25-.13-.41A7.1,7.1,0,0,1,631,9.7a6.57,6.57,0,0,1,.08-2.51,6.47,6.47,0,0,1,.36-1.11,6.14,6.14,0,0,1,3.3-3.25,6.07,6.07,0,0,1,2.09-.48l.4,0h.31c.23,0,.41,0,.56.05a7.25,7.25,0,0,1,1.4.33,11.72,11.72,0,0,1,2.41,1.14,30.07,30.07,0,0,1,2.81,2c.83.64,1.61,1.29,2.39,2,.39.34.77.68,1.17,1l1,1,2,2c2.68,2.66,5.34,5.36,7.89,8.2a113.89,113.89,0,0,1,13.61,18.63,73.56,73.56,0,0,1,8.34,21.89,71.48,71.48,0,0,1,.61,23.14c-.24,1.89-.56,3.76-.9,5.62L680.33,92l-.69,2.74a109.91,109.91,0,0,1-3.41,10.69h0l-.34-1.32a24.79,24.79,0,0,1,11.7,7.75,31.36,31.36,0,0,1,6.62,12.69,26.37,26.37,0,0,1-.35,14.34A66.08,66.08,0,0,1,688.24,151.68Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M205.19,373.16a2.16,2.16,0,0,0,.31,1.14,1.92,1.92,0,0,0,.3.39c.12.1.11.08.06.06a5.12,5.12,0,0,0-.62-.25,17.83,17.83,0,0,0-1.87-.51c-1.34-.31-2.75-.55-4.18-.76-2.85-.43-5.77-.75-8.65-1-.72-.06-1.44-.11-2.13-.14h-.95l-1.12,0-4.45.12-8.92.22c-11.9.27-23.79.62-35.68.82q-35.68.74-71.36,1c-11.9.11-23.8.28-35.69.26l-17.85,0-4.15,0a2.62,2.62,0,0,0,1.09-.33,4.3,4.3,0,0,0,1.49-1.25,4.13,4.13,0,0,0,.74-1.56c.14-.71.06-.64.1-.45l.1,1.17c0,.27,0,.55,0,.86V377l0,4.46q-.13,35.72-.8,71.36-.3,17.82-.5,35.64c-.08,5.93-.1,11.87-.11,17.81l0,17.81v12.41a1.55,1.55,0,0,0,0-.21.9.9,0,0,0-.17-.34.87.87,0,0,0,.33.21c.48.2.67.22,2.54.21h4.46l8.91,0c11.89,0,23.79.08,35.67-.08s23.76-.3,35.64-.48,23.76-.38,35.65-.67l71.32-1.76L200,538c.37-6.85.68-13.71,1-20.56s.59-13.71.83-20.57c.5-13.71.8-27.44,1-41.17l.4-20.63.59-20.62c.14-6.88.34-13.75.55-20.63S204.81,380,205.19,373.16Zm5.43,0c.37,6.91.55,13.77.83,20.66s.39,13.77.52,20.66.09,13.77.13,20.65L212,455.77c-.13,13.78-.35,27.57-.75,41.37-.2,6.88-.44,13.79-.71,20.68s-.65,13.78-1,20.67h0a4.82,4.82,0,0,1-4.68,4.53c-23.78.53-47.56,1.09-71.36,1.49l-35.7.55c-11.9.19-23.8.38-35.7.49l-35.69.25-8.93.08-4.46,0c-.8,0-1.28.05-2.66,0A12.12,12.12,0,0,1,6.78,545a10.59,10.59,0,0,1-3.39-2.2A8.9,8.9,0,0,1,1,538.73a8.21,8.21,0,0,1-.22-1.3l0-.66v-.3l0-1.11,0-2.23-.1-8.94C.4,512.29.13,500.38.07,488.47S0,464.65,0,452.74.13,429,.27,417.05L.63,381.4l.12-8.59-.06-1.06a9,9,0,0,1,.18-2.67,6.89,6.89,0,0,1,1.19-2.57,6.65,6.65,0,0,1,2.35-1.95,8.14,8.14,0,0,1,3.25-.8h4.77l17.83.13,35.67.31q17.83.18,35.67.43t35.68.52c11.89.16,23.78.47,35.68.71l8.92.18,4.46.12,1.11,0h.65l.63,0c.8.05,1.56.12,2.32.19,3,.31,6,.7,9,1.22,1.51.27,3,.56,4.58.95a23,23,0,0,1,2.42.72,11.63,11.63,0,0,1,1.42.64,5.11,5.11,0,0,1,1,.7,3.48,3.48,0,0,1,.66.8A3.21,3.21,0,0,1,210.62,373.14Z" transform="translate(0 -2.33)"/><path class="cls-2" d="M1039.37,382.69a1.48,1.48,0,0,0-1.22-.65H992.47a1.49,1.49,0,0,0-1.43,1.11L980.18,425.8l-10.66-42.64a1.47,1.47,0,0,0-1.43-1.12H922.42a1.48,1.48,0,0,0-1.38,2l37.1,93.77v34.85a1.47,1.47,0,0,0,1.47,1.48H1001a1.48,1.48,0,0,0,1.48-1.48V477.83l37.09-93.77A1.48,1.48,0,0,0,1039.37,382.69Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M1034.14,386.24a4.82,4.82,0,0,0,1.76,1.57,4.53,4.53,0,0,0,1.11.42c.2,0,.39.08.59.1l.3,0h-1.22l-2.91,0-5.82,0-11.63,0-11.64,0-11.63-.12h-.38l.28,0a4.57,4.57,0,0,0,3.57-2.44c.09-.17.16-.34.23-.51l.09-.27,0-.13c0-.05,0-.11,0-.07l-.09.35-.75,2.82-1.5,5.62-3,11.24-6.15,22.44-.06.19a5.34,5.34,0,0,1-10.36-.21l-5.48-23.8-2.74-11.89-1.37-5.95-.17-.75-.09-.37v-.07a1.33,1.33,0,0,0,0,.19,2.87,2.87,0,0,0,.15.37,3.06,3.06,0,0,0,2.49,1.71l-2.62,0-24.42-.46-12.2-.22-6.11-.11c-.06,0,0,0,0,0h.14l.28-.05a2.33,2.33,0,0,0,.52-.2,2.24,2.24,0,0,0,.82-.77,2.15,2.15,0,0,0,.32-1.05,2.09,2.09,0,0,0-.05-.56,1.46,1.46,0,1,1-.06-.22l1.09,2.85,8.73,22.8,8.88,22.74c5.88,15.18,12,30.25,18,45.37a3.25,3.25,0,0,1,.23,1.17v.05l.32,28.92,0,3.62,0,1.8v.26a2.21,2.21,0,0,0-.06-.34,2.26,2.26,0,0,0-.72-1.14,2.23,2.23,0,0,0-1.26-.53h.61l1.81,0,3.61-.07,14.46-.27,14.46-.27,3.62-.06,1.8,0h.55a3,3,0,0,0-2.72,2.21,2.63,2.63,0,0,0-.1.47l0,.23v-.4l0-1.8-.07-3.62-.53-28.92a4.71,4.71,0,0,1,.29-1.72l.07-.19,9-23.95c3-8,6-15.94,9.08-23.91s6.08-15.92,9.21-23.85l4.66-11.9,2.33-6,1.16-3,.59-1.49,0-.09,0-.05-.05.12a6.52,6.52,0,0,0-.18.63,5.12,5.12,0,0,0-.1,1.3A4.85,4.85,0,0,0,1034.14,386.24Zm7.85-5.34a4.62,4.62,0,0,1,.7,3.6,4.24,4.24,0,0,1-.17.61l-.11.27-.58,1.48-1.18,3-2.35,5.95-4.7,11.89-9.41,23.77L1005.38,479l.22-1.17v35c0,.11,0,.23,0,.35a4.34,4.34,0,0,1-.14.7,4.64,4.64,0,0,1-4.11,3.41H959.24a4.64,4.64,0,0,1-4.11-3.41,4.34,4.34,0,0,1-.14-.7c0-.12,0-.24,0-.35v-35l.23,1.17-35.93-90.81-1.12-2.84-.11-.29a4,4,0,0,1-.16-.57,4.43,4.43,0,0,1-.1-1.2,4.68,4.68,0,0,1,2.46-3.88,4.87,4.87,0,0,1,1.12-.42,5.58,5.58,0,0,1,.59-.1l.3,0h46l.3,0a4.64,4.64,0,0,1,3.76,2.64,4.2,4.2,0,0,1,.22.55l.09.29,0,.11.1.37.18.74,1.48,5.92,3,11.84L983.26,425l-6.15,0,5.74-22.55,2.87-11.27,1.43-5.64.72-2.82.09-.35a5.5,5.5,0,0,1,.39-1,4.72,4.72,0,0,1,1.51-1.69,4.66,4.66,0,0,1,2.13-.78c.17,0,.44,0,.51,0h45.63A4.66,4.66,0,0,1,1042,380.9Z" transform="translate(0 -2.33)"/><g class="cls-3"><path class="cls-4" d="M931.14,409.59q13.8-13.79,27.63-27.55H922.42a1.48,1.48,0,0,0-1.38,2Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M1038.15,382h-16.38l-40.84,40.85-.75,2.91-.43-1.73L949,454.79l9.12,23v13l64.75-64.75,16.63-42.05a1.48,1.48,0,0,0-1.37-2Z" transform="translate(0 -2.33)"/></g><g class="cls-3"><path class="cls-4" d="M963.17,514.16H1001a1.48,1.48,0,0,0,1.48-1.48V477.83l1.86-4.7Z" transform="translate(0 -2.33)"/></g><path class="cls-5" d="M1012.48,259a3.39,3.39,0,0,0,2.52,1.26c8.23,4,16.47,7.89,24.68,11.9,1.29.63,2.36.2,3.51-.21q25.51-9.17,51-18.36c.63-.23,1.66-.05,1.74-1.62-4.91-2.26-10-4.54-15-6.9q-23.64-11-47.25-22.1l-2.87-1.74c10.23-21.74,20.47-43.47,31-65.74a23.27,23.27,0,0,0-2.32.53c-17.24,6.16-34.46,12.36-51.71,18.48a5.35,5.35,0,0,0-3.16,3.17c-2.58,5.57-5.33,11.06-7.81,16.68-1.29,2.92-3.29,5.57-3.7,8.86-6.65,11.85-11.76,24.44-17.75,36.61-.87,1.76.4,2.1,1.49,2.62,6.53,3.1,13.05,6.25,19.62,9.27C1001.76,254.16,1006.9,257.06,1012.48,259Zm18.75-187.07a5.48,5.48,0,0,0-1.18.12q-26.17,9.36-52.36,18.71c-1.59.56-2.19,1.74-2.81,3.06q-27.81,58.92-55.68,117.81c-1.11,2.36-.83,3.4,1.58,4.5q16.15,7.38,32.13,15.13c2.55,1.24,3.43.78,4.62-1.75Q993.88,152.23,1030.39,75C1030.81,74.14,1031.49,73.31,1031.23,71.93Z" transform="translate(0 -2.33)"/><path class="cls-10" d="M1031.23,71.93c.26,1.38-.42,2.21-.84,3.09q-36.45,77.24-72.86,154.49c-1.19,2.53-2.07,3-4.62,1.75q-16-7.77-32.13-15.13c-2.41-1.1-2.69-2.14-1.58-4.5q27.91-58.86,55.68-117.81c.62-1.32,1.22-2.5,2.81-3.06q26.2-9.3,52.36-18.71A5.48,5.48,0,0,1,1031.23,71.93Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M1032.52,70.22a2.87,2.87,0,0,1,.79,1.33,3.35,3.35,0,0,1,.08.47v.17a5.35,5.35,0,0,1,0,.69,5.53,5.53,0,0,1-.29,1.32,14.05,14.05,0,0,1-.82,1.66c-.45.94-.91,1.94-1.35,2.91-.87,2-1.72,3.94-2.53,5.94-.39,1-.81,2-1.19,3s-.7,2-1,3.08c-.62,2.09-1.15,4.22-1.87,6.25s-1.7,3.95-2.59,5.91l-2.72,5.84-5.5,11.66-11.23,23.21c-3.78,7.73-7.58,15.44-11.3,23.19s-7.51,15.46-11.11,23.27-7.1,15.66-10.58,23.52l-5.23,11.78-2.62,5.9a13.18,13.18,0,0,1-1.15,2.09,7.54,7.54,0,0,1-1.26,1.42,6.24,6.24,0,0,1-2.43,1.27,6.52,6.52,0,0,1-2.47.14l-.48-.08-.41-.09c-.29-.07-.5-.14-.73-.21-.85-.28-1.56-.64-2-.82L927,224.56l-5.84-2.67-3.09-1.47a9.23,9.23,0,0,1-2.76-2,6.93,6.93,0,0,1-1.45-2.5,7.14,7.14,0,0,1-.29-2.77,9.57,9.57,0,0,1,.86-3.1l.24-.51.17-.36.37-.72a31.42,31.42,0,0,1,1.68-2.77,44.62,44.62,0,0,0,3.44-5.5c3.58-7.82,7.26-15.59,10.88-23.38l21.89-46.7,5.49-11.67c1.79-3.9,3.73-7.74,5.73-11.55s3.94-7.64,5.72-11.55c.45-1,.91-2,1.34-2.93a15.57,15.57,0,0,1,.92-1.83,7.9,7.9,0,0,1,2-2.25,7.81,7.81,0,0,1,1.36-.84,7,7,0,0,1,.7-.3l.39-.15,1.5-.58,3-1.15,12.07-4.53c4-1.53,8-3.07,12.1-4.45s8.16-2.69,12.32-3.83c2.07-.58,4.17-1.11,6.28-1.59,1-.24,2.11-.47,3.18-.68.53-.11,1.07-.2,1.6-.3l.4-.07s.2,0,.27-.06a1.71,1.71,0,0,1,.3-.05,3.17,3.17,0,0,1,.93,0l.16,0,.08,0A2.47,2.47,0,0,1,1032.52,70.22Zm-2.58,3.42a1.91,1.91,0,0,0,1.35.45l-.13,0-.24,0a1,1,0,0,0-.31.09s0,0,0,0h.1s.15,0,.08,0l-.36.2c-.47.26-1,.53-1.43.78-1,.52-1.92,1-2.89,1.49q-2.91,1.45-5.86,2.76-5.91,2.61-12,4.85c-4,1.5-8.11,2.86-12.19,4.22l-12.21,4.15-3.06,1-1.53.5-.37.12h0s0,0,0,0,0,0-.15.16a9.43,9.43,0,0,0-.56,1c-.49,1-1,1.93-1.41,2.9-1.9,3.86-3.64,7.79-5.3,11.76s-3.41,7.9-5.29,11.76l-5.53,11.65L938.49,180.2c-3.72,7.74-7.39,15.52-11.16,23.24a45.94,45.94,0,0,0-2.07,6.16,30,30,0,0,1-1.07,3.06l-.58,1.32c-.12.24-.11.44,0,0a3,3,0,0,0-.14-1.17,3.14,3.14,0,0,0-.63-1.13c-.43-.43-.34-.28-.14-.2l2.74,1.29,5.82,2.82,23.18,11.49c.56.27.8.4,1,.47s0-.1-.93.1a2.45,2.45,0,0,0-1,.53,1.13,1.13,0,0,0-.21.21,3.23,3.23,0,0,0,.42-.72l2.89-5.77,5.76-11.53q5.79-11.53,11.43-23.13c3.72-7.74,7.29-15.57,10.88-23.37s7.15-15.64,10.71-23.47L1006.07,117l5.5-11.67,2.78-5.81c.94-1.93,1.8-3.91,2.91-5.76s2.41-3.61,3.63-5.41c.61-.91,1.19-1.82,1.74-2.75s1-1.89,1.56-2.83q1.53-2.84,3-5.72c.47-1,.94-1.92,1.4-2.93a8.73,8.73,0,0,0,.59-1.23.66.66,0,0,0,0-.37v0c0-.08,0,0,0,.27A1.6,1.6,0,0,0,1029.94,73.64Z" transform="translate(0 -2.33)"/><path class="cls-10" d="M993.06,203.21q6.62-14,13.24-27.93l55.46-19.79c-10.48,22.27-20.72,44-31,65.74a4.45,4.45,0,0,1-.54.25c-.27-.34-.48-.81-.84-1-7.35-3.42-14.76-6.72-22.07-10.22C1002.56,208,997.54,206.13,993.06,203.21Z" transform="translate(0 -2.33)"/><path class="cls-10" d="M1026.63,219.21q26.67,13.06,54.3,25.86,7.53,3.5,15,6.9l-54.81,20.51L1008,257.24Z" transform="translate(0 -2.33)"/><path class="cls-10" d="M1026.63,219.21q26.67,13.06,54.3,25.86,7.53,3.5,15,6.9l-54.81,20.51L1008,257.24Z" transform="translate(0 -2.33)"/><path class="cls-10" d="M993.06,203.21c4.48,2.92,9.5,4.77,14.3,7.07,7.31,3.5,14.72,6.8,22.07,10.22.36.17.57.64.85,1q-4,8.81-8,17.63L1012.48,259c-5.58-1.94-10.72-4.84-16.06-7.29-6.57-3-13.09-6.17-19.62-9.27-.31-.14-1.42-.38-1.71-1.19a1.81,1.81,0,0,1,.22-1.43Q984.18,221.51,993.06,203.21Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M1028.44,221.29a2.46,2.46,0,0,1,.32-1.21,2.4,2.4,0,0,1,.89-.9l-1,1c1.43-2.68,2.66-5.45,3.85-8.23.59-1.4,1.17-2.8,1.72-4.21a43,43,0,0,0,1.52-4.3c.89-2.94,1.45-6,2.65-8.8s2.53-5.5,3.79-8.25c2.53-5.5,5.14-11,7.74-16.43l7.93-16.35,5.33,5.87c-9.29,3.17-18.61,6.27-27.88,9.5l-13.91,4.81c-4.63,1.65-9.26,3.27-13.84,5l2.15-2c-3.8,8.33-7.51,16.7-11.22,25.07s-7.58,16.7-11.39,25.05l-5.71,12.52-.71,1.57-.37.78-.17.37a2.8,2.8,0,0,0,.12-.29,3.79,3.79,0,0,0,.12-2,4.34,4.34,0,0,0-.56-1.42,4.15,4.15,0,0,0-.79-.93,3.1,3.1,0,0,0-.76-.51l.2.07.25.09.44.19.19.09c2.08.93,4.15,1.9,6.2,2.88l3.08,1.49c1,.51,2.07,1,3.06,1.55,2,1.12,3.79,2.67,5.76,3.85a22.28,22.28,0,0,0,3.11,1.61c1.07.47,2.11,1,3.13,1.48,2.06,1,4.06,2,6,2.81l0,0a4.27,4.27,0,0,1,2.24,5.62c0,.06-.06.13-.08.18h0l-2.11-5.79L1043,268.36l-3.48-.12,27.38-10.34,13.7-5.13c4.56-1.72,9.24-3.14,13.87-4.69l-.27,7.66c-2.68-1.36-5.43-2.58-8.17-3.82l-8.36-3.63c-5.88-2.64-11.78-5.47-17.72-8.38s-11.77-6.11-17.1-9.34S1032.6,224.14,1028.44,221.29Zm4.71-.11,18.09,6.19c5.51,1.92,10.55,3.87,15.43,6.13s9.85,4.57,14.82,7.09c1.19.62,2.6,1.31,3.93,2s2.69,1.33,4,1.95c2.72,1.27,5.43,2.55,8.2,3.69a4.09,4.09,0,0,1,0,7.55l-.27.11c-4.51,1.87-9,3.87-13.54,5.57l-13.71,5.12-27.44,10.18h0a4.52,4.52,0,0,1-3.45-.14l-33-15.42-.11-.05a4.25,4.25,0,0,1-2.05-5.63l.06-.1h0l2.18,5.82c-2.2-1-4.31-2-6.36-3-1-.51-2-1-3-1.54a18.5,18.5,0,0,0-3.09-1.31c-2.16-.78-4.5-1.18-6.65-2-1.07-.4-2.1-.91-3.15-1.38l-3.12-1.44c-2.08-1-4.16-1.95-6.21-3l-.2-.1h0l.09,0,.18.08s.07,0,0,0l-.6-.23a7.87,7.87,0,0,1-2.24-1.36,6.66,6.66,0,0,1-2.22-3.78,7,7,0,0,1,.27-3.66,8.09,8.09,0,0,1,.46-1.08l.2-.4.38-.76.79-1.53,6.26-12.17,12.51-24.38c4.13-8.16,8.26-16.32,12.29-24.53l.06-.12a3.63,3.63,0,0,1,2.1-1.83c4.66-1.55,9.27-3.22,13.89-4.87l13.82-5.1c9.22-3.36,18.39-6.86,27.59-10.29a4.27,4.27,0,0,1,5.38,5.77l0,.11-7.55,16.52c-2.55,5.49-5.11,11-7.73,16.44-1.32,2.72-2.58,5.48-3.95,8.18s-3.4,5.09-5.1,7.64A43.12,43.12,0,0,0,1039,210c-.74,1.32-1.45,2.66-2.15,4-1.39,2.69-2.74,5.4-3.89,8.21l-1,1a2.31,2.31,0,0,0,.88-.88A2.35,2.35,0,0,0,1033.15,221.18Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M1067.86,536.44,1025,537c-14.31.18-28.68.24-43,.3q-43.07.18-85.92-.11H896a4.5,4.5,0,0,1-4.46-4.52h0c.12-14.33.06-28.67.45-43,.19-7.17.44-14.33.58-21.5s.14-14.33,0-21.5c-.16-14.33-.37-28.67-.73-43s-.84-28.67-1.51-43a5.44,5.44,0,0,1,5.18-5.7h.52l42,.15,42,.07,84,.11h0a5.37,5.37,0,0,1,5.36,5.37h0l-.06,44c.07,14.71.12,29.48-.05,44.17l-.65,44-.37,21.89Zm-7.57-7.56-.45-21.25-.38-21.11-.64-42c-.18-14-.13-27.87,0-41.83l-.06-42,5.37,5.37-84,.11-42,.07-42,.15,5.7-5.7q-1,21.49-1.51,43c-.37,14.33-.58,28.67-.74,43q-.15,10.75.05,21.5c.14,7.17.38,14.33.58,21.5.39,14.33.32,28.67.45,43l-4.53-4.53c27.47-.17,54.78-.23,82.07-.11,13.66.06,27.28.12,41,.3Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M958.07,356.9a36.26,36.26,0,0,0,10.75,1.35,37.65,37.65,0,0,0,10.57-2,23.5,23.5,0,0,0,8.82-4.54,9.39,9.39,0,0,0,3.34-7,12.49,12.49,0,0,0-.08-2.1c0-.36-.14-.74-.2-1.1a9.42,9.42,0,0,0-.25-1.12,20.67,20.67,0,0,0-.74-2.27c-.15-.39-.27-.77-.44-1.15l-.54-1.14a39.63,39.63,0,0,0-5.8-8.64,50.45,50.45,0,0,0-3.63-3.81,37.47,37.47,0,0,0-4-3.21,40.17,40.17,0,0,0-9.13-4.76c-3.09-1.17-6.29-1.68-8.48-1.26a5.77,5.77,0,0,0-2.57,1.1,6.51,6.51,0,0,0-1.8,2.37,4.25,4.25,0,0,0-.32,1.16,3.54,3.54,0,0,0,0,.45,1.24,1.24,0,0,1,.05.43,5.22,5.22,0,0,0,1.43,2.38,24.35,24.35,0,0,0,7.84,5.05,34.91,34.91,0,0,0,4.79,1.66,28.59,28.59,0,0,0,4.91.82,40,40,0,0,0,10.39-.56,37.52,37.52,0,0,0,9.91-3.24,27.59,27.59,0,0,0,8.13-5.87,21.26,21.26,0,0,0,4.88-8.24,20.2,20.2,0,0,0,.66-9.44c-1-6.3-5.27-12.25-10.6-17.05a57,57,0,0,0-8.82-6.4,51.2,51.2,0,0,0-4.8-2.52c-.83-.37-1.59-.7-2.46-1s-1.72-.65-2.57-.94a27.71,27.71,0,0,0-9.74-1.68,8.45,8.45,0,0,0-3.53.88l-.34.17c-.1.07-.18.16-.28.23a4.68,4.68,0,0,0-.57.45,6.29,6.29,0,0,0-1,1.3,5.83,5.83,0,0,0-.83,3,4.88,4.88,0,0,0,1,2.69,13.83,13.83,0,0,0,3,3,27.48,27.48,0,0,0,4.25,2.55,42.88,42.88,0,0,0,10,3.32,28.86,28.86,0,0,0,5,.61c.84.05,1.67,0,2.5,0s1.67-.11,2.5-.28c6.68-1,13.17-4.41,19-8.89a95.29,95.29,0,0,0,16-15.93l.06-.07a2.94,2.94,0,0,1,4.92,3.17,68.05,68.05,0,0,1-6.72,10.49,70,70,0,0,1-8.53,9.22,55.1,55.1,0,0,1-10.5,7.48,41.29,41.29,0,0,1-12.62,4.44,38.1,38.1,0,0,1-13.6-.13,50.58,50.58,0,0,1-12.57-4.06,36.92,36.92,0,0,1-5.95-3.53,22.62,22.62,0,0,1-5.37-5.41,15.32,15.32,0,0,1-2.81-8.4,16.12,16.12,0,0,1,2.26-8.36,16.46,16.46,0,0,1,2.62-3.42,16.11,16.11,0,0,1,1.73-1.44c.3-.22.6-.46.91-.66l1-.53a18.59,18.59,0,0,1,7.88-2.07,29.43,29.43,0,0,1,7.13.57,48.13,48.13,0,0,1,6.43,1.74c1,.35,2,.74,3,1.13s2,.84,3,1.3a63.25,63.25,0,0,1,5.69,3.06,67.05,67.05,0,0,1,10.32,7.65,50.26,50.26,0,0,1,8.62,10,34,34,0,0,1,5.14,12.81,31.34,31.34,0,0,1-7.91,26.22,39.25,39.25,0,0,1-10.85,8.27,51.26,51.26,0,0,1-25.75,5.72,40.58,40.58,0,0,1-6.84-.89,47.48,47.48,0,0,1-6.52-2,42.51,42.51,0,0,1-6.2-3,28.6,28.6,0,0,1-5.92-4.58,17.27,17.27,0,0,1-4.51-7.76c-.16-.83-.29-1.68-.4-2.52a15,15,0,0,1,.06-2.51,16,16,0,0,1,1.19-4.57,18.49,18.49,0,0,1,5.26-7.06,12.75,12.75,0,0,1,1.89-1.32,18.16,18.16,0,0,1,2-1.09q1.07-.42,2.13-.78c.71-.2,1.42-.33,2.13-.48a24.13,24.13,0,0,1,7.93.08,35,35,0,0,1,6.87,1.91c1.1.38,2.1.89,3.14,1.34s2,1,3,1.57a52.56,52.56,0,0,1,5.61,3.62,48.55,48.55,0,0,1,5.14,4.38c.77.8,1.57,1.57,2.29,2.41l1.09,1.23,1,1.29a50.14,50.14,0,0,1,6.88,11.4c1.74,4.19,3.11,8.91,2.52,14.15a19,19,0,0,1-7.52,13.4,32.25,32.25,0,0,1-12.59,5.43c-1,.23-2.1.42-3.12.59l-1.58.24c-.55.08-1.09.15-1.65.19a37.09,37.09,0,0,1-6.58.07,39.22,39.22,0,0,1-12.52-3.1,2.94,2.94,0,0,1,2-5.53Z" transform="translate(0 -2.33)"/><polygon class="cls-2" points="806.49 456.21 787.88 456.21 797.3 416.01 806.49 456.21"/><path class="cls-5" d="M808.37,460c-2.8.64-6,1.36-9.53,1.94a97,97,0,0,1-11,1.18,4.45,4.45,0,0,1-4.64-4.23,4.74,4.74,0,0,1,.06-.93l.09-.51c.58-3.39,1.23-6.78,2-10.13s1.67-6.68,2.64-10,2-6.61,2.86-9.94,1.68-6.67,2.46-10a4.06,4.06,0,0,1,7.92,0v0l2.53,10.91c.83,3.66,1.6,7.36,2.27,11s1.24,7.33,1.74,10.89c.23,1.77.39,3.49.49,5.13A40.41,40.41,0,0,1,808.37,460Zm-3.76-3c-.85-1.95-1.56-3.71-2.22-5.43s-1.27-3.33-1.81-4.92c-1-3.14-2-6.18-2.85-9.2s-1.62-6-2.33-9.05l-2.07-9.2,7.93,0q-1.2,5-2.25,10.07c-.67,3.38-1.25,6.77-1.85,10.17s-1.28,6.76-2.06,10.11-1.74,6.66-2.72,10l-4.5-5.67a53.33,53.33,0,0,1,7.65,1.18C798.23,455.69,801.2,456.41,804.61,457.05Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M748.78,181.71c-29,.34-57.8.83-86.31,1q-21.39.15-42.75.14l-43.78.31L489,183.6h0l.13,0a1.48,1.48,0,0,0,.35-.13,2.9,2.9,0,0,0,.63-.36,3.47,3.47,0,0,0,.83-.76,4.27,4.27,0,0,0,.63-1,3.28,3.28,0,0,0,.17-.5,1.89,1.89,0,0,0,.09-.34c0-.28,0-.31,0-.44,0-.31,0,.13.08.71a15.15,15.15,0,0,1,.07,1.92l0,5.48-.07,11L491.78,221l-.33,21.89L491,264.78q-.56,21.87-.94,43.73-.17,10.92-.43,21.86l-.25,10.94-.06,2.74,0,1.36v.16a.32.32,0,0,0,0-.14c0-.08-.07-.16-.08-.19s.05.17.45.42a5.9,5.9,0,0,0,1.57.71,10.68,10.68,0,0,0,2,.39c.61.05,1.68.06,2.55.09l5.48.13,10.95.24c7.3.09,14.6.23,21.9.23,14.6.11,29.2-.1,43.79-.21,29.2-.36,58.39-.8,87.58-1.55l43.8-1.05,43.81-.91-3.89,4q-.46-20.68-.76-41.28l-.28-20.58L748,265.25c-.08-13.73-.17-27.42-.05-41.28S748.31,196.1,748.78,181.71Zm4.76-4.77c.8,13.67,1.41,27.7,1.84,41.91s.68,28.56.91,42.89l.32,21.49.2,21.5q.2,21.48.2,42.89v.08a3.89,3.89,0,0,1-3.89,3.89l-43.8.05c-14.6,0-29.19.19-43.8.25l-43.81.21-43.82.31-43.81.28c-7.3,0-14.6.2-21.9.32l-10.95.29-5.48.16c-.95,0-1.71.08-2.92.06a16.75,16.75,0,0,1-3.4-.43,13.27,13.27,0,0,1-3.48-1.33,8.11,8.11,0,0,1-3.36-3.4,7.39,7.39,0,0,1-.53-1.48c-.05-.27-.08-.55-.11-.82l0-.36v-.17l-.05-1.37-.11-2.74-.43-11q-.45-11-.79-21.94c-.16-3.66-.18-7.31-.24-11l-.15-11,0-21.94.17-21.91.31-21.91.34-21.88.19-10.94.09-5.47a4.78,4.78,0,0,0,0-.81,17.81,17.81,0,0,1-.11-2,6.69,6.69,0,0,1,.12-1.13c0-.22.09-.45.14-.67s.19-.55.3-.82a6.56,6.56,0,0,1,1-1.62,7.24,7.24,0,0,1,1.33-1.22,9,9,0,0,1,1.24-.69c.32-.13.66-.24,1-.35s.53-.12.8-.18l.39-.07.31,0c.41,0,.83-.08,1.15-.09h2.25l2.74,0,5.47,0,10.95.08,21.9.17,43.8.26,43.83.32q22.44.35,44.86.83C694.53,175.19,724.18,176.14,753.54,176.94Z" transform="translate(0 -2.33)"/><path class="cls-2" d="M561,243.67H549.53V227.22h11.68c2.9,0,6.23.94,6.23,8.23S564,243.67,561,243.67Z" transform="translate(0 -2.33)"/><path class="cls-2" d="M549.53,277.3h14.82c3,0,7.07.95,7.07,9.17s-4.15,9.17-7.28,9.17H549.53Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M561,247.28l-11.47.05a3.65,3.65,0,0,1-3.66-3.63v0l-.07-16.45a3.72,3.72,0,0,1,3.7-3.72h0l8.89,0h2.78l.73,0,.78.06.82.12a8.66,8.66,0,0,1,3.5,1.45,8.52,8.52,0,0,1,2.53,2.9,13.77,13.77,0,0,1,1.49,5.82,22.41,22.41,0,0,1-.31,5.36,12.17,12.17,0,0,1-1,3,8.77,8.77,0,0,1-2.28,3,8.34,8.34,0,0,1-3.39,1.72A12.34,12.34,0,0,1,561,247.28Zm0-7.22a4.91,4.91,0,0,0,1.29-.16,1.3,1.3,0,0,0,.52-.28,1.85,1.85,0,0,0,.31-.57,6.57,6.57,0,0,0,.27-1.23,15,15,0,0,0-.13-3.43,5.17,5.17,0,0,0-.83-2.39c-.15-.14-.21-.1-.2,0s0,.1-.24.1-2.17.2-3.57.23c-3,.15-5.93.19-8.89.19l5.26-5.26c0,1.37,0,2.74-.1,4.11s-.12,2.75-.26,4.12l-.71,8.22-4.19-4.19,2.87.24c1,.1,1.91.12,2.86.18C557.18,240,559.09,240,561,240.06Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M547,274.75a149,149,0,0,1,16.46-1.1,13.78,13.78,0,0,1,4.75.54,8.9,8.9,0,0,1,4.64,3.41,12,12,0,0,1,1.91,4.62,22.51,22.51,0,0,1,.4,4.22,21.23,21.23,0,0,1-.38,4.25,12.15,12.15,0,0,1-1.91,4.64,9.21,9.21,0,0,1-4.61,3.41,11.93,11.93,0,0,1-2.54.54,20.48,20.48,0,0,1-2.12.06l-14,0h0a3.65,3.65,0,0,1-3.65-3.66c0-3.49.1-7,.31-10.56S546.67,278.1,547,274.75Zm5.11,5.11,1.47,8.28c.23,1.29.37,2.53.51,3.78s.25,2.48.3,3.72l-4.83-4.83c4.68-.2,9.36-.3,14-.38a11.52,11.52,0,0,0,1.24,0,2.78,2.78,0,0,0,.55-.12c.21-.09,0,0,.16-.15a4.45,4.45,0,0,0,.44-1.24,12.87,12.87,0,0,0,.24-2.43A16.19,16.19,0,0,0,566,284a5.15,5.15,0,0,0-.36-1.35c-.11-.15.05-.12-.17-.27a4.33,4.33,0,0,0-1.76-.29C560.18,281.82,556.62,280.84,552.08,279.86Z" transform="translate(0 -2.33)"/><path class="cls-7" d="M613.47,410.82c26-14.69,64.08,11.29,60.27,43.52s-48.61,44.3-69.85,26S590,424.1,613.47,410.82Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M615.3,430.93c2.89-6,30.5,10.55,33.25,14.5s-27.5,22.16-30,20.95S615.3,430.93,615.3,430.93Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M611.7,407.7a39.09,39.09,0,0,1,8.33-3.37,41.56,41.56,0,0,1,8.85-1.23,47.06,47.06,0,0,1,8.8.78,49.29,49.29,0,0,1,8.38,2.5,52.07,52.07,0,0,1,14.66,9.12,50.3,50.3,0,0,1,6,6.24c.94,1.1,1.74,2.31,2.59,3.48s1.56,2.43,2.2,3.73a41.73,41.73,0,0,1,2.86,33.61,39.8,39.8,0,0,1-1.61,4c-.69,1.27-1.29,2.59-2.07,3.81a47.5,47.5,0,0,1-5,7.11A38.32,38.32,0,0,1,651.73,488a49.51,49.51,0,0,1-34,2.23,43.41,43.41,0,0,1-8-3.32,39.56,39.56,0,0,1-7.06-5,44.08,44.08,0,0,1-5.68-6.38l-1.18-1.77c-.39-.6-.71-1.24-1.08-1.84s-.68-1.25-1-1.88a19.79,19.79,0,0,1-.89-1.93c-.57-1.29-1.06-2.62-1.53-4s-.82-2.71-1.13-4.09A49.6,49.6,0,0,1,589,451.7a54.17,54.17,0,0,1,.19-8.54,50.5,50.5,0,0,1,1.68-8.41,48.63,48.63,0,0,1,3.16-8c.63-1.3,1.36-2.55,2.09-3.8s1.58-2.45,2.47-3.6A43.62,43.62,0,0,1,611.7,407.7Zm3.53,6.24a38.27,38.27,0,0,0-11.07,9.67,47.79,47.79,0,0,0-7.34,13.11,57,57,0,0,0-2.18,7.31,48.6,48.6,0,0,0-1,7.61,36,36,0,0,0,.45,7.69,31.23,31.23,0,0,0,2.11,7.41,30.66,30.66,0,0,0,9.14,12.14,31.31,31.31,0,0,0,13.72,6.06,45.92,45.92,0,0,0,15.07.15,52.94,52.94,0,0,0,14.35-4.27c.58-.23,1.11-.54,1.68-.8s1.12-.53,1.66-.83l1.66-.86c.53-.31,1.06-.63,1.6-.93a42.21,42.21,0,0,0,6.15-4.23,14,14,0,0,0,1.4-1.25c.44-.44.92-.86,1.34-1.32a28.85,28.85,0,0,0,2.34-3,26.18,26.18,0,0,0,1.92-3.23,36.39,36.39,0,0,0,1.44-3.48,29.65,29.65,0,0,0,1.57-7.35,38.41,38.41,0,0,0-.17-7.53,38.83,38.83,0,0,0-5-14.1,45.25,45.25,0,0,0-22.57-19.19,47.47,47.47,0,0,0-7.16-2,39.32,39.32,0,0,0-7.33-.58,33.91,33.91,0,0,0-7.17,1.05A32.4,32.4,0,0,0,615.23,413.94Z" transform="translate(0 -2.33)"/><path class="cls-2" d="M821.66,229.79h8.57c5.06,0,8.75.51,11,1.52.67.3,2.71,1.23,2.71,6.17v9.08c0,4.94-2,5.87-2.71,6.18-2.21,1-5.9,1.51-11,1.51h-8.57Z" transform="translate(0 -2.33)"/><path class="cls-5" d="M817.4,225.53c1.91-.32,3.94-.52,5.94-.66a49.64,49.64,0,0,1,5.86,0l.7,0,.34,0,.26,0,1,.12,2.11.28a43.87,43.87,0,0,1,4.32.79,22.65,22.65,0,0,1,4.68,1.58l.32.17.42.23a7,7,0,0,1,.84.59,7.32,7.32,0,0,1,1.35,1.45,8.68,8.68,0,0,1,1.33,3,13.82,13.82,0,0,1,.37,2.64,21.38,21.38,0,0,1,0,2.27l-.15,3.92c-.06,1.31-.1,2.62-.11,3.93,0,.6,0,1.44-.1,2.23a12.19,12.19,0,0,1-.48,2.53,8.64,8.64,0,0,1-1.37,2.73,6.38,6.38,0,0,1-1.28,1.26,6.74,6.74,0,0,1-1.46.84,20.12,20.12,0,0,1-4.53,1.28,60.26,60.26,0,0,1-8.31.63l-7.84.32a3.37,3.37,0,0,1-3.5-3.17l0-.35c-.13-2.24-.24-4.53-.32-6.85s-.22-4.69-.26-7.07-.13-4.84-.13-7.29l0-3.72Zm6.39,6.4c.26,3.83.5,7.56.66,11.25s.23,7.35.23,11.07l-3-3h7.84a47.24,47.24,0,0,0,7.36-.43,13,13,0,0,0,3-.79c.25-.11.19-.1.24-.13s.06,0,.11-.12a2.57,2.57,0,0,0,.36-.79,6.65,6.65,0,0,0,.23-1.33c0-.52,0-1,0-1.69V238.1c0-.7,0-1.18,0-1.69a6.63,6.63,0,0,0-.23-1.34,2.69,2.69,0,0,0-.36-.79.44.44,0,0,0-.11-.12s0,0-.24-.12a13,13,0,0,0-3-.8,34.11,34.11,0,0,0-3.59-.35c-.61,0-1.23,0-1.86-.07h-1.72A29.09,29.09,0,0,1,823.79,231.93Z" transform="translate(0 -2.33)"/></g></g></g></svg>';

  // application/components/stickySmartBanner/PromoGetSubscription.vue
  var __vue_script__28 = Vue.extend({
    name: "PromoGetSubscription",
    data() {
      return {
        blackFriday21SubscriptionImage: cyber_monday_2021_artwork_default,
        subscriptionUrl: `${window.CAROLUS_ENV.KERCHING_BASE_URL}/products/subscription`
      };
    },
    methods: {
      handleClose() {
        this.$emit("closeClicked");
      },
      handleClick() {
        triggerEvent("article_product_subscription", "subscription");
      }
    }
  });
  var __vue_render__28 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "c-banner-draper-sticky l-black-friday-ui-sales-2021" },
      [
        _c(
          "div",
          {
            staticClass: "c-banner-draper-sticky__wrapper l-block--912 l-margin-auto l-padding-sides-24--tablet"
          },
          [
            _c("img", {
              attrs: { src: _vm.blackFriday21SubscriptionImage, alt: "" }
            }),
            _vm._v(" "),
            _vm._m(0),
            _vm._v(" "),
            _c(
              "a",
              {
                staticClass: "o-button--green",
                attrs: { href: _vm.subscriptionUrl },
                on: { click: _vm.handleClick }
              },
              [
                _c("span", { staticClass: "o-button__label" }, [
                  _vm._v("Get it now")
                ]),
                _vm._v(" "),
                _c(
                  "i",
                  { staticClass: "o-button__icon--right o-button__icon--white" },
                  [
                    _c(
                      "svg",
                      {
                        staticClass: "l-button__svg-arrow o-button__svg o-button__svg--green"
                      },
                      [_c("use", { attrs: { "xlink:href": "#arrow-right" } })]
                    )
                  ]
                )
              ]
            ),
            _vm._v(" "),
            _c(
              "button",
              {
                staticClass: "o-alert__close",
                attrs: { type: "button", "aria-label": "Close" },
                on: { click: _vm.handleClose }
              },
              [
                _c("span", [
                  _c(
                    "svg",
                    {
                      staticClass: "l-button__svg-close o-button__svg o-button__svg--white"
                    },
                    [_c("use", { attrs: { "xlink:href": "#plus" } })]
                  )
                ])
              ]
            )
          ]
        )
      ]
    );
  };
  var __vue_staticRenderFns__28 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("p", [
        _vm._v(
          "Introducing unlimited access to all video courses, all books, and our new monthly live professional development series! Just "
        ),
        _c("span", { staticClass: "l-font-line" }, [_vm._v("$899")]),
        _vm._v(" $399 per year during our Cyber Monday event.")
      ]);
    }
  ];
  __vue_render__28._withStripped = true;
  var __vue_inject_styles__28 = function(inject) {
    if (!inject)
      return;
    inject("data-v-5f4e1af6_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "PromoGetSubscription.vue" }, media: void 0 });
  };
  var __vue_scope_id__28 = void 0;
  var __vue_module_identifier__28 = void 0;
  var __vue_is_functional_template__28 = false;
  function __vue_normalize__28(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/stickySmartBanner/PromoGetSubscription.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__17() {
    const styles = __vue_create_injector__17.styles || (__vue_create_injector__17.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__28 = /* @__PURE__ */ __vue_normalize__28(
    { render: __vue_render__28, staticRenderFns: __vue_staticRenderFns__28 },
    __vue_inject_styles__28,
    __vue_script__28,
    __vue_scope_id__28,
    __vue_is_functional_template__28,
    __vue_module_identifier__28,
    false,
    __vue_create_injector__17,
    void 0,
    void 0
  );
  var PromoGetSubscription_default = __vue_component__28;

  // application/components/stickySmartBanner/PromoUpgradeSubscription.vue
  var __vue_script__29 = Vue.extend({
    name: "PromoUpgradeSubscription",
    data() {
      return {
        blackFriday21SubscriptionImage: cyber_monday_2021_artwork_default,
        subscriptionUrl: `${window.CAROLUS_ENV.KERCHING_BASE_URL}/subscription/promo`
      };
    },
    methods: {
      handleClose() {
        this.$emit("closeClicked");
      },
      handleClick() {
        triggerEvent("article_product_subscription", "subscription");
      }
    }
  });
  var __vue_render__29 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "c-banner-draper-sticky l-black-friday-ui-sales-2021" },
      [
        _c(
          "div",
          {
            staticClass: "c-banner-draper-sticky__wrapper l-block--912 l-margin-auto l-padding-sides-24--tablet"
          },
          [
            _c("img", {
              attrs: { src: _vm.blackFriday21SubscriptionImage, alt: "" }
            }),
            _vm._v(" "),
            _vm._m(0),
            _vm._v(" "),
            _c(
              "a",
              {
                staticClass: "o-button--green",
                attrs: { href: _vm.subscriptionUrl },
                on: { click: _vm.handleClick }
              },
              [
                _c("span", { staticClass: "o-button__label" }, [
                  _vm._v("Upgrade now")
                ]),
                _vm._v(" "),
                _c(
                  "i",
                  { staticClass: "o-button__icon--right o-button__icon--white" },
                  [
                    _c(
                      "svg",
                      {
                        staticClass: "l-button__svg-arrow o-button__svg o-button__svg--green"
                      },
                      [_c("use", { attrs: { "xlink:href": "#arrow-right" } })]
                    )
                  ]
                )
              ]
            ),
            _vm._v(" "),
            _c(
              "button",
              {
                staticClass: "o-alert__close",
                attrs: { type: "button", "aria-label": "Close" },
                on: { click: _vm.handleClose }
              },
              [
                _c("span", [
                  _c(
                    "svg",
                    {
                      staticClass: "l-button__svg-close o-button__svg o-button__svg--white"
                    },
                    [_c("use", { attrs: { "xlink:href": "#plus" } })]
                  )
                ])
              ]
            )
          ]
        )
      ]
    );
  };
  var __vue_staticRenderFns__29 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("p", { staticClass: "l-color-white" }, [
        _vm._v(
          "Upgrade to get unlimited access to all video courses, all books, and our new monthly live professional development series! Just "
        ),
        _c("span", { staticClass: "l-font-line" }, [_vm._v("$899")]),
        _vm._v(
          " $359 per year during our Cyber Monday event for existing subscribers like you."
        )
      ]);
    }
  ];
  __vue_render__29._withStripped = true;
  var __vue_inject_styles__29 = function(inject) {
    if (!inject)
      return;
    inject("data-v-f72ca1fc_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "PromoUpgradeSubscription.vue" }, media: void 0 });
  };
  var __vue_scope_id__29 = void 0;
  var __vue_module_identifier__29 = void 0;
  var __vue_is_functional_template__29 = false;
  function __vue_normalize__29(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/stickySmartBanner/PromoUpgradeSubscription.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__18() {
    const styles = __vue_create_injector__18.styles || (__vue_create_injector__18.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__29 = /* @__PURE__ */ __vue_normalize__29(
    { render: __vue_render__29, staticRenderFns: __vue_staticRenderFns__29 },
    __vue_inject_styles__29,
    __vue_script__29,
    __vue_scope_id__29,
    __vue_is_functional_template__29,
    __vue_module_identifier__29,
    false,
    __vue_create_injector__18,
    void 0,
    void 0
  );
  var PromoUpgradeSubscription_default = __vue_component__29;

  // application/components/stickySmartBanner/App.vue
  var __vue_script__30 = Vue.extend({
    name: "StickySmartBanner",
    props: {
      user: {
        type: Object,
        default: null
      },
      permissionTags: {
        type: Array,
        default: () => []
      },
      signUpPath: {
        default: "/sessions/new?mode=signup",
        type: String
      },
      enableLegacyPromo: {
        default: false,
        type: Boolean
      },
      legacyPromoState: {
        default: "",
        type: String
      }
    },
    data() {
      return {
        userClosed: false
      };
    },
    computed: {
      showVideoBeginnerSubscriptionSignup() {
        return !this.enableLegacyPromo && (this.user === null || !this.user.group_manager) && !this.permissionTags.includes("stream-beginner-videos");
      },
      showVideoProfessionalSubscriptionSignup() {
        return !this.enableLegacyPromo && !this.user.group_manager && !this.showVideoBeginnerSubscriptionSignup && !this.permissionTags.includes("read-professional-books");
      },
      isUpgrade() {
        return this.permissionTags.includes("stream-beginner-videos") && !this.permissionTags.includes("read-professional-books");
      },
      showPromoGetSubscription() {
        return this.enableLegacyPromo && this.legacyPromoState === "get_subscription";
      },
      showPromoUpgradeSubscription() {
        return this.enableLegacyPromo && this.legacyPromoState === "upgrade_ultimate";
      }
    },
    methods: {
      handleCloseClicked() {
        this.userClosed = true;
      },
      requiresPermissionTag(tag) {
      }
    },
    components: {
      StickyBanner: StickyBanner_default,
      VideoBeginnerSubscriptionSignup: VideoBeginnerSubscriptionSignup_default,
      VideoProfessionalSubscriptionSignup: VideoProfessionalSubscriptionSignup_default,
      PromoGetSubscription: PromoGetSubscription_default,
      PromoUpgradeSubscription: PromoUpgradeSubscription_default
    }
  });
  var __vue_render__30 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "StickyBanner",
      { attrs: { userClosed: _vm.userClosed } },
      [
        _vm.showPromoGetSubscription ? _c("PromoGetSubscription", {
          on: { closeClicked: _vm.handleCloseClicked }
        }) : _vm.showPromoUpgradeSubscription ? _c("PromoUpgradeSubscription", {
          on: { closeClicked: _vm.handleCloseClicked }
        }) : _vm.showVideoBeginnerSubscriptionSignup ? _c("VideoBeginnerSubscriptionSignup", {
          on: { closeClicked: _vm.handleCloseClicked }
        }) : _vm.showVideoProfessionalSubscriptionSignup ? _c("VideoProfessionalSubscriptionSignup", {
          attrs: { isUpgrade: _vm.isUpgrade },
          on: { closeClicked: _vm.handleCloseClicked }
        }) : _vm._e()
      ],
      1
    );
  };
  var __vue_staticRenderFns__30 = [];
  __vue_render__30._withStripped = true;
  var __vue_inject_styles__30 = void 0;
  var __vue_scope_id__30 = void 0;
  var __vue_module_identifier__30 = void 0;
  var __vue_is_functional_template__30 = false;
  function __vue_normalize__30(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/stickySmartBanner/App.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__30 = /* @__PURE__ */ __vue_normalize__30(
    { render: __vue_render__30, staticRenderFns: __vue_staticRenderFns__30 },
    __vue_inject_styles__30,
    __vue_script__30,
    __vue_scope_id__30,
    __vue_is_functional_template__30,
    __vue_module_identifier__30,
    false,
    void 0,
    void 0,
    void 0
  );
  var App_default3 = __vue_component__30;

  // application/components/newsletter/SignupButton.vue
  var __vue_script__31 = Vue.extend({
    name: "NewsletterSignupButton",
    props: {
      userId: {
        type: String,
        required: true
      },
      userToken: {
        type: String,
        required: true
      },
      eventCategory: {
        type: String,
        required: false
      }
    },
    data() {
      return {
        networkOperationInProgress: false,
        signedUp: false
      };
    },
    methods: {
      handleClick() {
        if (this.signedUp) {
          return;
        }
        this.networkOperationInProgress = true;
        const data = new FormData();
        data.append("newsletter_subscriber", true);
        Rails.ajax({
          url: `${window.CAROLUS_ENV.GUARDPOST_BASE_URL}/users/${this.userId}/update_subscriptions`,
          type: "PATCH",
          dataType: "json",
          data,
          success: (data2) => {
            this.signedUp = true;
            this.$emit("success");
            EventBus.$emit(FLASH_SUCCESS, "You have successfully signed up to the kodeco.com newsletter.", true);
            if (this.eventCategory) {
              triggerEvent(this.eventCategory, "newsletter");
            }
          },
          error: (data2) => {
            this.$emit("failure");
            EventBus.$emit(FLASH_ERROR, "There was a problem signing up to the newsletter. Please try again later.", true);
          },
          complete: (xhr) => {
            this.$emit("complete");
            this.networkOperationInProgress = false;
          },
          beforeSend: (xhr) => {
            xhr.setRequestHeader("Authorization", `Token ${this.userToken}`);
            return true;
          }
        });
      }
    },
    components: {
      ButtonContent: ButtonContent_default
    }
  });
  var __vue_render__31 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "button",
      { staticClass: "o-button--green", on: { click: _vm.handleClick } },
      [
        _c("ButtonContent", {
          attrs: {
            text: "Sign up to the newsletter",
            checked: _vm.signedUp,
            saving: _vm.networkOperationInProgress,
            disabled: _vm.networkOperationInProgress,
            iconInputClass: "o-button__icon--left o-button__icon--white",
            svgUncheckedClass: "o-button__svg--green l-button__svg-plus",
            svgUncheckedHref: "#plus--green",
            svgCheckedClass: "l-button__svg-checkmark o-button__svg--green",
            svgCheckedHref: "#checkmark--green"
          }
        })
      ],
      1
    );
  };
  var __vue_staticRenderFns__31 = [];
  __vue_render__31._withStripped = true;
  var __vue_inject_styles__31 = function(inject) {
    if (!inject)
      return;
    inject("data-v-21584dc3_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "SignupButton.vue" }, media: void 0 });
  };
  var __vue_scope_id__31 = void 0;
  var __vue_module_identifier__31 = void 0;
  var __vue_is_functional_template__31 = false;
  function __vue_normalize__31(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/newsletter/SignupButton.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__19() {
    const styles = __vue_create_injector__19.styles || (__vue_create_injector__19.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__31 = /* @__PURE__ */ __vue_normalize__31(
    { render: __vue_render__31, staticRenderFns: __vue_staticRenderFns__31 },
    __vue_inject_styles__31,
    __vue_script__31,
    __vue_scope_id__31,
    __vue_is_functional_template__31,
    __vue_module_identifier__31,
    false,
    __vue_create_injector__19,
    void 0,
    void 0
  );
  var SignupButton_default = __vue_component__31;

  // application/components/videoPlayer/Modal.vue
  var __vue_script__32 = Vue.extend({
    name: "VideoPlayerModal",
    props: {
      video: {
        type: Object
      },
      contentId: {
        type: Number,
        default: null
      },
      videoId: {
        type: Number,
        default: null
      },
      trailerUrl: {
        type: String
      },
      playButtonLabel: {
        type: String
      }
    },
    data() {
      return {
        showModal: false
      };
    },
    computed: {
      hasButtonLabel() {
        return !!this.playButtonLabel;
      },
      buttonClass() {
        return {
          "o-button": true,
          "o-button-video": !this.hasButtonLabel,
          "o-button-video-start": this.hasButtonLabel,
          "a-pulse": true
        };
      },
      buttonSvgClass() {
        return {
          "o-button__icon--left": this.hasButtonLabel
        };
      }
    },
    methods: {
      toggle() {
        this.showModal = !this.showModal;
      }
    }
  });
  var __vue_render__32 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _vm.showModal ? _c(
        "div",
        {
          staticClass: "c-modal c-modal--trailer",
          on: { click: _vm.toggle }
        },
        [
          _c("div", { staticClass: "c-modal-wrapper" }, [
            _c(
              "button",
              {
                staticClass: "c-modal__close o-icon-button o-button__icon--dark",
                on: {
                  click: function($event) {
                    $event.stopPropagation();
                    return _vm.toggle.apply(null, arguments);
                  }
                }
              },
              [
                _c("svg", [
                  _c("use", { attrs: { "xlink:href": "#plus--dark-blue" } })
                ])
              ]
            ),
            _vm._v(" "),
            _c("div", { staticClass: "c-modal__copy" }, [
              _vm.contentId && _vm.videoId ? _c(
                "div",
                { staticClass: "l-margin-24 l-flex-justify-center" },
                [
                  _c(
                    "div",
                    {
                      staticClass: "c-video-player__video l-relative",
                      attrs: {
                        "data-controller": "player",
                        "data-player-autoplay-value": "true",
                        "data-player-content-id-value": _vm.contentId,
                        "data-player-video-id-value": _vm.videoId
                      }
                    },
                    [
                      _c("div", {
                        staticClass: "vimeo-player",
                        attrs: { "data-player-target": "playerView" }
                      })
                    ]
                  )
                ]
              ) : _vm.trailerUrl ? _c(
                "div",
                {
                  staticClass: "c-modal__player l-margin-24 l-flex-justify-center"
                },
                [
                  _c("iframe", {
                    attrs: {
                      src: _vm.trailerUrl,
                      width: "640",
                      height: "360",
                      webkitallowfullscreen: "webkitallowfullscreen",
                      mozallowfullscreen: "mozallowfullscreen",
                      allowfullscreen: "allowfullscreen"
                    }
                  })
                ]
              ) : _vm._e()
            ])
          ])
        ]
      ) : _vm._e(),
      _vm._v(" "),
      _c("button", { class: _vm.buttonClass, on: { click: _vm.toggle } }, [
        _c("svg", { class: _vm.buttonSvgClass }, [
          _c("use", { attrs: { "xlink:href": "#play" } })
        ]),
        _vm._v(" "),
        _vm.hasButtonLabel ? _c("span", { staticClass: "o-button__label" }, [
          _vm._v(_vm._s(_vm.playButtonLabel))
        ]) : _vm._e()
      ])
    ]);
  };
  var __vue_staticRenderFns__32 = [];
  __vue_render__32._withStripped = true;
  var __vue_inject_styles__32 = void 0;
  var __vue_scope_id__32 = void 0;
  var __vue_module_identifier__32 = void 0;
  var __vue_is_functional_template__32 = false;
  function __vue_normalize__32(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/videoPlayer/Modal.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__32 = /* @__PURE__ */ __vue_normalize__32(
    { render: __vue_render__32, staticRenderFns: __vue_staticRenderFns__32 },
    __vue_inject_styles__32,
    __vue_script__32,
    __vue_scope_id__32,
    __vue_is_functional_template__32,
    __vue_module_identifier__32,
    false,
    void 0,
    void 0,
    void 0
  );
  var Modal_default2 = __vue_component__32;

  // application/components/bookSearch/Overlay.vue
  var import_debounce6 = __toESM(require_debounce(), 1);
  var __vue_script__33 = Vue.extend({
    name: "BookSearchOverlay",
    props: {
      showOverlay: {
        type: Boolean,
        default: false
      },
      url: {
        type: String,
        required: true
      }
    },
    data() {
      return {
        loading: false,
        noResults: false,
        query: "",
        results: "",
        page: 0,
        maxPage: null
      };
    },
    computed: {
      showNextPage() {
        return this.page < this.maxPage;
      },
      showPreviousPage() {
        return this.page > 0;
      }
    },
    methods: {
      loadResults() {
        this.loading = true;
        const data = constructURLParams_default({
          q: this.query,
          page: this.page.toString()
        });
        Rails.ajax({
          url: this.url,
          type: "GET",
          data,
          success: (doc, _status, request) => {
            this.loading = false;
            this.noResults = false;
            this.results = doc.body.innerHTML;
            this.maxPage = request.getResponseHeader("search-max-page") ? parseInt(request.getResponseHeader("search-max-page")) : null;
          },
          error: () => {
            this.loading = false;
            this.noResults = true;
            this.maxPage = null;
          }
        });
      },
      debouncedLoadResults: (0, import_debounce6.default)(function(append) {
        this.loadResults();
      }, 500),
      reset() {
        this.query = "";
        this.results = "";
        this.loading = "";
        this.maxPage = null;
        this.$refs.searchField.focus();
      },
      toggleVisibility() {
        this.showOverlay = !this.showOverlay;
      },
      resultClicked(event) {
        this.toggleVisibility();
      },
      loadNextPage() {
        if (!this.showNextPage) {
          return;
        }
        this.page += 1;
        this.loadResults();
      },
      loadPreviousPage() {
        if (!this.showPreviousPage) {
          return;
        }
        this.page -= 1;
        this.loadResults();
      }
    },
    watch: {
      query() {
        this.maxPage = null;
        this.page = 0;
        if (!this.query || this.query === "") {
          this.noResults = false;
          this.loading = false;
          this.results = "";
        } else {
          this.debouncedLoadResults();
        }
      },
      showOverlay() {
        this.query = "";
        this.results = "";
        this.loading = "";
        this.maxPage = null;
        if (this.showOverlay) {
          this.$nextTick(() => this.$refs.searchField.focus());
        }
      }
    },
    mounted() {
      const triggerElements = document.querySelectorAll("[data-book-search-trigger]");
      triggerElements.forEach((triggerElement) => {
        triggerElement.addEventListener("click", (event) => {
          this.toggleVisibility();
        });
      });
    }
  });
  var __vue_render__33 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _vm.showOverlay ? _c(
      "div",
      {
        staticClass: "chapter-search c-global-search c-global-search--overlay c-global-search--book"
      },
      [
        _c("div", { staticClass: "modal-wrapper m-auto" }, [
          _c(
            "button",
            { staticClass: "btn-icon", on: { click: _vm.toggleVisibility } },
            [
              _c("svg", { staticClass: "icon-close" }, [
                _c("use", { attrs: { "xlink:href": "#x-close" } })
              ])
            ]
          ),
          _vm._v(" "),
          _c("div", { staticClass: "mt-16" }, [
            _c("div", { staticClass: "l-full-col input__group search" }, [
              _c(
                "svg",
                {
                  staticClass: "input__icon-svg--search w-16",
                  attrs: { role: "presentation" }
                },
                [_c("use", { attrs: { "xlink:href": "#search" } })]
              ),
              _vm._v(" "),
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.query,
                    expression: "query"
                  }
                ],
                ref: "searchField",
                staticClass: "search-normal w-100",
                attrs: {
                  type: "search",
                  placeholder: "Search inside this book"
                },
                domProps: { value: _vm.query },
                on: {
                  input: function($event) {
                    if ($event.target.composing) {
                      return;
                    }
                    _vm.query = $event.target.value;
                  }
                }
              }),
              _vm._v(" "),
              _c(
                "svg",
                { attrs: { role: "clear" }, on: { click: _vm.reset } },
                [_c("use", { attrs: { "xlink:href": "#cross" } })]
              )
            ])
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "c-global-search__recommendations" }, [
            _vm.loading ? _c("div", [_vm._m(0)]) : _c("div", [
              _vm.noResults ? _c("div", [
                _c("div", [
                  _c("h3", {}, [
                    _vm._v("We couldn't find any results for")
                  ]),
                  _vm._v(" "),
                  _c("p", {}, [
                    _vm._v("'" + _vm._s(_vm.query) + "'")
                  ])
                ])
              ]) : _c("div", [
                _c("div", {
                  staticClass: "chapter-search-results",
                  domProps: { innerHTML: _vm._s(_vm.results) },
                  on: { click: _vm.resultClicked }
                }),
                _vm._v(" "),
                _vm.showPreviousPage || _vm.showNextPage ? _c("ul", { staticClass: "pagination" }, [
                  _c("li", { staticClass: "page prev" }, [
                    _vm.showPreviousPage ? _c(
                      "a",
                      {
                        staticClass: "page-link",
                        attrs: { rel: "next" },
                        on: { click: _vm.loadPreviousPage }
                      },
                      [
                        _c("svg", [
                          _c("use", {
                            attrs: {
                              "xlink:href": "#arrow-left"
                            }
                          })
                        ])
                      ]
                    ) : _vm._e()
                  ]),
                  _vm._v(" "),
                  _c("li", { staticClass: "page next" }, [
                    _vm.showNextPage ? _c(
                      "a",
                      {
                        staticClass: "page-link",
                        attrs: { rel: "next" },
                        on: { click: _vm.loadNextPage }
                      },
                      [
                        _c("svg", [
                          _c("use", {
                            attrs: {
                              "xlink:href": "#arrow-right"
                            }
                          })
                        ])
                      ]
                    ) : _vm._e()
                  ])
                ]) : _vm._e()
              ])
            ])
          ])
        ])
      ]
    ) : _vm._e();
  };
  var __vue_staticRenderFns__33 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("h3", { staticClass: "mt-24 l-text-align-center" }, [
        _vm._v("Searching"),
        _c("span", { staticClass: "dot-loader" }, [
          _c("span", { staticClass: "a-dot-loader--1" }, [_vm._v(".")]),
          _c("span", { staticClass: "a-dot-loader--2" }, [_vm._v(".")]),
          _c("span", { staticClass: "a-dot-loader--3" }, [_vm._v(".")])
        ])
      ]);
    }
  ];
  __vue_render__33._withStripped = true;
  var __vue_inject_styles__33 = function(inject) {
    if (!inject)
      return;
    inject("data-v-31f4a298_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "Overlay.vue" }, media: void 0 });
  };
  var __vue_scope_id__33 = void 0;
  var __vue_module_identifier__33 = void 0;
  var __vue_is_functional_template__33 = false;
  function __vue_normalize__33(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/bookSearch/Overlay.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__20() {
    const styles = __vue_create_injector__20.styles || (__vue_create_injector__20.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__33 = /* @__PURE__ */ __vue_normalize__33(
    { render: __vue_render__33, staticRenderFns: __vue_staticRenderFns__33 },
    __vue_inject_styles__33,
    __vue_script__33,
    __vue_scope_id__33,
    __vue_is_functional_template__33,
    __vue_module_identifier__33,
    false,
    __vue_create_injector__20,
    void 0,
    void 0
  );
  var Overlay_default = __vue_component__33;

  // application/components/elements/NightModeToggle.vue
  var NIGHT_MODE_COOKIE_NAME2 = "night-mode-on";
  var NIGHT_MODE_COOKIE_NAME_OS = "night-mode-on-os";
  var NIGHT_MODE_CLASS_NAME = "l-prefers-color-scheme--dark";
  var NIGHT_MODE_MEDIA_SELECTOR = "(prefers-color-scheme: dark)";
  var __vue_script__34 = Vue.extend({
    name: "NightModeToggle",
    data() {
      return {
        active: this.defaultStateAndSetDefaultCookie()
      };
    },
    created() {
      this.setClass();
    },
    methods: {
      defaultStateAndSetDefaultCookie() {
        const osMode = window.matchMedia(NIGHT_MODE_MEDIA_SELECTOR).matches;
        set(NIGHT_MODE_COOKIE_NAME_OS, osMode, { expires: "10Y" });
        if (get(NIGHT_MODE_COOKIE_NAME2)) {
          return get(NIGHT_MODE_COOKIE_NAME2) === "true";
        }
        return get(NIGHT_MODE_COOKIE_NAME_OS) === "true";
      },
      buttonClicked() {
        this.active = !this.active;
        set(NIGHT_MODE_COOKIE_NAME2, this.active, { expires: "10Y" });
        this.setClass();
        EventBus.$emit(NIGHT_MODE_TOGGLED, this.active);
      },
      setClass() {
        document.body.classList.toggle(NIGHT_MODE_CLASS_NAME, this.active);
      }
    }
  });
  var __vue_render__34 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("li", { on: { click: _vm.buttonClicked } }, [
      _c(
        "i",
        {
          staticClass: "o-dropdown-menu__icon o-dropdown-menu__icon--night-mode"
        },
        [
          _c("svg", [
            _c("title", [_vm._v("Dark Mode")]),
            _c("use", { attrs: { "xlink:href": "#moon" } })
          ])
        ]
      ),
      _vm._v(" "),
      _c("a", { staticClass: "l-cursor-pointer" }, [
        _vm._v(
          "\n    Night Mode (" + _vm._s(_vm.active ? "On" : "Off") + ")\n    "
        ),
        _c("label", { staticClass: "o-checkbox" }, [
          _c("input", {
            staticClass: "checkbox__input",
            attrs: { type: "checkbox" },
            domProps: { checked: _vm.active },
            on: { click: _vm.buttonClicked }
          }),
          _vm._v(" "),
          _c("span", { staticClass: "checkbox__indicator" }, [
            _c("svg", [_c("use", { attrs: { "xlink:href": "#checkmark" } })])
          ])
        ])
      ])
    ]);
  };
  var __vue_staticRenderFns__34 = [];
  __vue_render__34._withStripped = true;
  var __vue_inject_styles__34 = void 0;
  var __vue_scope_id__34 = void 0;
  var __vue_module_identifier__34 = void 0;
  var __vue_is_functional_template__34 = false;
  function __vue_normalize__34(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/NightModeToggle.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__34 = /* @__PURE__ */ __vue_normalize__34(
    { render: __vue_render__34, staticRenderFns: __vue_staticRenderFns__34 },
    __vue_inject_styles__34,
    __vue_script__34,
    __vue_scope_id__34,
    __vue_is_functional_template__34,
    __vue_module_identifier__34,
    false,
    void 0,
    void 0,
    void 0
  );
  var NightModeToggle_default = __vue_component__34;

  // application/components/elements/LoadingSkeletonList.vue
  var __vue_script__35 = Vue.extend({
    name: "LoadingSkeletonList"
  });
  var __vue_render__35 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _vm._m(0);
  };
  var __vue_staticRenderFns__35 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _c("div", { staticClass: "l-margin-30" }, [
          _c("div", { staticClass: "l-margin-30 l-flex-wrap" }, [
            _c(
              "div",
              {
                staticClass: "l-flex l-full-col o-skeleton-card o-skeleton-card--small"
              },
              [
                _c("div", {
                  staticClass: "o-skeleton__graphic o-skeleton__graphic--large"
                }),
                _vm._v(" "),
                _c("div", { staticClass: "o-skeleton-sidebar__meta-wrapper" }, [
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta o-skeleton-sidebar__meta--large"
                  }),
                  _vm._v(" "),
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta l-margin-9"
                  }),
                  _vm._v(" "),
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta o-skeleton-sidebar__meta--small"
                  }),
                  _vm._v(" "),
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta l-margin-9"
                  })
                ])
              ]
            ),
            _vm._v(" "),
            _c(
              "div",
              {
                staticClass: "l-flex l-full-col l-margin-15 o-skeleton-card o-skeleton-card--small"
              },
              [
                _c("div", {
                  staticClass: "o-skeleton__graphic o-skeleton__graphic--large"
                }),
                _vm._v(" "),
                _c("div", { staticClass: "o-skeleton-sidebar__meta-wrapper" }, [
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta o-skeleton-sidebar__meta--large"
                  }),
                  _vm._v(" "),
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta l-margin-9"
                  }),
                  _vm._v(" "),
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta o-skeleton-sidebar__meta--small"
                  }),
                  _vm._v(" "),
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta l-margin-9"
                  })
                ])
              ]
            ),
            _vm._v(" "),
            _c(
              "div",
              {
                staticClass: "l-flex l-full-col l-margin-15 o-skeleton-card o-skeleton-card--small"
              },
              [
                _c("div", {
                  staticClass: "o-skeleton__graphic o-skeleton__graphic--large"
                }),
                _vm._v(" "),
                _c("div", { staticClass: "o-skeleton-sidebar__meta-wrapper" }, [
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta o-skeleton-sidebar__meta--large"
                  }),
                  _vm._v(" "),
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta l-margin-9"
                  }),
                  _vm._v(" "),
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta o-skeleton-sidebar__meta--small"
                  }),
                  _vm._v(" "),
                  _c("div", {
                    staticClass: "o-skeleton-sidebar__meta l-margin-9"
                  })
                ])
              ]
            )
          ])
        ])
      ]);
    }
  ];
  __vue_render__35._withStripped = true;
  var __vue_inject_styles__35 = function(inject) {
    if (!inject)
      return;
    inject("data-v-becac656_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "LoadingSkeletonList.vue" }, media: void 0 });
  };
  var __vue_scope_id__35 = void 0;
  var __vue_module_identifier__35 = void 0;
  var __vue_is_functional_template__35 = false;
  function __vue_normalize__35(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/LoadingSkeletonList.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__21() {
    const styles = __vue_create_injector__21.styles || (__vue_create_injector__21.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__35 = /* @__PURE__ */ __vue_normalize__35(
    { render: __vue_render__35, staticRenderFns: __vue_staticRenderFns__35 },
    __vue_inject_styles__35,
    __vue_script__35,
    __vue_scope_id__35,
    __vue_is_functional_template__35,
    __vue_module_identifier__35,
    false,
    __vue_create_injector__21,
    void 0,
    void 0
  );
  var LoadingSkeletonList_default = __vue_component__35;

  // application/components/profile/UserBookmarks.vue
  var progressAnnotator2 = new progress_annotator_default();
  var bookmarksLoader2 = new bookmarks_loader_default();
  var __vue_script__36 = Vue.extend({
    name: "UserBookmarks",
    props: {
      username: {
        type: String,
        required: true
      }
    },
    data() {
      return {};
    },
    components: {
      LoadMorePagination: LoadMorePagination_default,
      LoadingSkeletonList: LoadingSkeletonList_default
    },
    methods: {
      refreshAnnotations(changedDiv) {
        this.$nextTick(() => {
          progressAnnotator2.updateDOMWithUserProgress(changedDiv);
          bookmarksLoader2.updateDOMWithBookmarks(changedDiv);
        });
      }
    }
  });
  var __vue_render__36 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _c(
        "div",
        {
          staticClass: "c-tutorial--list c-tutorial--mason c-tutorial--mason-large l-margin-27 l-margin-bottom-45"
        },
        [
          _c("LoadMorePagination", {
            attrs: {
              contentUrl: "/u/" + _vm.username + "/bookmarked",
              listClass: "c-tutorial--list__page"
            },
            on: { contentUpdated: _vm.refreshAnnotations },
            scopedSlots: _vm._u([
              {
                key: "noResults",
                fn: function() {
                  return [
                    _c("div", { staticClass: "c-profile__empty" }, [
                      _c("h4", { staticClass: "l-margin-21" }, [
                        _vm._v("It's looking very empty in here")
                      ])
                    ])
                  ];
                },
                proxy: true
              },
              {
                key: "loading",
                fn: function() {
                  return [_c("LoadingSkeletonList")];
                },
                proxy: true
              }
            ])
          })
        ],
        1
      )
    ]);
  };
  var __vue_staticRenderFns__36 = [];
  __vue_render__36._withStripped = true;
  var __vue_inject_styles__36 = void 0;
  var __vue_scope_id__36 = void 0;
  var __vue_module_identifier__36 = void 0;
  var __vue_is_functional_template__36 = false;
  function __vue_normalize__36(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/profile/UserBookmarks.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__36 = /* @__PURE__ */ __vue_normalize__36(
    { render: __vue_render__36, staticRenderFns: __vue_staticRenderFns__36 },
    __vue_inject_styles__36,
    __vue_script__36,
    __vue_scope_id__36,
    __vue_is_functional_template__36,
    __vue_module_identifier__36,
    false,
    void 0,
    void 0,
    void 0
  );
  var UserBookmarks_default = __vue_component__36;

  // application/components/profile/UserBookmarks+kodeco.vue
  var progressAnnotator3 = new progress_annotator_default();
  var bookmarksLoader3 = new bookmarks_loader_default();
  var __vue_script__37 = Vue.extend({
    name: "UserBookmarks_Kodeco",
    props: {
      username: {
        type: String,
        required: true
      }
    },
    data() {
      return {};
    },
    components: {
      LoadMorePagination: LoadMorePagination_default,
      KodecoLoadingSkeleton: KodecoLoadingSkeleton_default
    },
    methods: {
      refreshAnnotations(changedDiv) {
        this.$nextTick(() => {
          progressAnnotator3.updateDOMWithUserProgress(changedDiv);
          bookmarksLoader3.updateDOMWithBookmarks(changedDiv);
        });
      }
    }
  });
  var __vue_render__37 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _c(
        "div",
        {},
        [
          _c("LoadMorePagination", {
            attrs: {
              contentUrl: "/u/" + _vm.username + "/bookmarked",
              listClass: "three-column-grid mt-32"
            },
            on: { contentUpdated: _vm.refreshAnnotations },
            scopedSlots: _vm._u([
              {
                key: "noResults",
                fn: function() {
                  return [
                    _c("div", { staticClass: "c-profile__empty" }, [
                      _c("h4", { staticClass: "l-margin-21" }, [
                        _vm._v("It's looking very empty in here")
                      ])
                    ])
                  ];
                },
                proxy: true
              },
              {
                key: "loading",
                fn: function() {
                  return [_c("KodecoLoadingSkeleton")];
                },
                proxy: true
              }
            ])
          })
        ],
        1
      )
    ]);
  };
  var __vue_staticRenderFns__37 = [];
  __vue_render__37._withStripped = true;
  var __vue_inject_styles__37 = void 0;
  var __vue_scope_id__37 = void 0;
  var __vue_module_identifier__37 = void 0;
  var __vue_is_functional_template__37 = false;
  function __vue_normalize__37(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/profile/UserBookmarks+kodeco.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__37 = /* @__PURE__ */ __vue_normalize__37(
    { render: __vue_render__37, staticRenderFns: __vue_staticRenderFns__37 },
    __vue_inject_styles__37,
    __vue_script__37,
    __vue_scope_id__37,
    __vue_is_functional_template__37,
    __vue_module_identifier__37,
    false,
    void 0,
    void 0,
    void 0
  );
  var UserBookmarks_kodeco_default = __vue_component__37;

  // application/images/artwork/desk.svg
  var desk_default = '<svg viewBox="0 0 1082.32 925.24" xmlns="http://www.w3.org/2000/svg"><path d="m609.72 765.36-342.65-326.36a4.88 4.88 0 0 1 -.17-6.9l209.68-220.16 349.72 333.12-209.68 220.13a4.89 4.89 0 0 1 -6.9.17z" fill="#bbbdbf"/><path d="m604.44 770.9-141.74-135.7-141.61-135.84-35.39-34-17.66-17-4.41-4.27-.54-.54-.35-.34-.59-.63a11.13 11.13 0 0 1 -1.79-2.93 10.95 10.95 0 0 1 .77-9.87 10.52 10.52 0 0 1 1-1.37l.28-.32.21-.23.27-.28 2.15-2.19 4.3-4.37c11.48-11.65 23-23.25 34.42-35s22.72-23.52 33.89-35.47c44.87-47.59 88-96.79 133-144.27l5.56-5.87 5.92 5.59q43.91 41.44 87.62 83.08l87.26 83.46 87.18 83.55 43.65 41.7q21.81 20.86 43.72 41.64l5.56 5.26-5.3 5.62-53.45 56.7c-17.83 18.88-35.82 37.61-53.75 56.4l-53.86 56.31-27 28.12-13.4 14.16-6.74 7-.84.88-.42.44-.28.28-.56.54a12.52 12.52 0 0 1 -5.52 2.86 12.72 12.72 0 0 1 -6.19-.09 12.56 12.56 0 0 1 -5.37-3.01zm10.56-11.09a2.78 2.78 0 0 0 -2.56-.71 2.83 2.83 0 0 0 -1.24.64.68.68 0 0 0 -.12.12l.11-.11.41-.45.84-.88 6.7-7.07 13.39-14.15 26.77-28.3 53.7-56.57c17.9-18.83 35.74-37.7 53.73-56.43l54-56.14.27 10.88q-21.79-20.91-43.72-41.64l-43.78-41.58-87.68-83-87.6-83.1q-43.71-41.66-87.22-83.5l11.48-.28c-45.24 47.24-92.29 92.76-137.64 139.89q-17.1 17.57-33.84 35.57c-11.14 12-22.17 24.05-33.24 36.09l-4.16 4.5-2.09 2.25-.26.28c-.06.07-.07.08 0 .06s.08-.08.11-.14a1.24 1.24 0 0 0 .15-.33 1.12 1.12 0 0 0 0-.7 1 1 0 0 0 -.19-.34l-.05-.07.06.06.14.13.56.52 4.48 4.19 17.86 16.82 35.63 33.68 142.58 134.83z"/><path d="m316.32 365.18h450.42a0 0 0 0 1 0 0v252.53a4.88 4.88 0 0 1 -4.88 4.88h-440.66a4.88 4.88 0 0 1 -4.88-4.88v-252.53a0 0 0 0 1 0 0z" fill="#d0d2d3" transform="matrix(.72405149 .68974593 -.68974593 .72405149 490.06 -237.23)"/><path d="m427.15 347.7h473.22a4.88 4.88 0 0 1 4.88 4.88v30.86a0 0 0 0 1 0 0h-483a0 0 0 0 1 0 0v-30.86a4.88 4.88 0 0 1 4.9-4.88z" fill="#bbbdbf" transform="matrix(.72405149 .68974593 -.68974593 .72405149 435.28 -356.94)"/><path d="m826.58 556.6-361.58-344.38 27-28.22a13.06 13.06 0 0 1 18.44-.45l342.56 326.36a13.05 13.05 0 0 1 .45 18.44zm-338.46-344.94 337.88 321.87 13.39-14.06-337.88-321.87z"/><path d="m649.15 131.22h15.61v482.98h-15.61z" fill="#333" transform="matrix(.68974593 -.72405149 .72405149 .68974593 -66.04 591.33)"/><path d="m832.09 533.75q-43.62-41.19-87-82.39l-86.7-82.54-21.65-20.67c-7.22-6.89-14.45-13.78-21.57-20.73l-21.32-20.93c-7.11-7-14.25-14-21.55-20.82q-21.88-20.6-43.94-41c-14.78-13.55-29.44-27.16-44.3-40.53l7.06-.17q-5.26 5.78-10.44 11.61l-.19-7.69 174.61 166.76 21.84 20.84 10.93 10.42 11 10.36 43.9 41.45 43.66 41.7q21.81 20.87 43.6 41.75l-7.33.18a41.18 41.18 0 0 1 4.34-3.92c1.51-1.22 3.22-2.43 5.05-3.68zm10.21-.24c-1.77 2.48-3.65 5.07-5.69 7.62s-4.22 5-6.43 7.37l-3.54 3.75-3.79-3.57c-14.66-13.78-29.22-27.68-43.85-41.52l-43.76-41.59-43.54-41.83-10.88-10.45-10.92-10.41-21.9-20.8-175-166.34-4.08-3.87 3.89-3.82c3.71-3.65 7.41-7.3 11.09-11l3.62-3.63 3.44 3.46c14.28 14.39 28.76 28.54 43.13 42.76s28.91 28.24 43.45 42.26c7.26 7 14.7 13.92 22.15 20.82l22.41 20.71c7.44 6.93 14.79 13.92 22.14 20.91l22.06 21 88.16 84q44.1 42.05 87.84 84.17z"/><path d="m502.23 232.81h151.26v444.74h-151.26z" fill="#929497" transform="matrix(.69 -.72 .72 .69 -150.29 559.65)"/><path d="m784.66 554c-26.74-25.19-53.55-50.35-80.13-75.54l-79.71-75.68-79.57-75.94q-9.94-9.51-19.78-19.12c-6.57-6.4-13.05-12.88-19.59-19.32s-13.07-12.91-19.69-19.3c-3.31-3.2-6.62-6.39-10-9.55s-6.68-6.33-10.05-9.47l5.82-.14-25.83 27.62-25.69 27.75q-12.84 13.89-25.55 27.89c-8.43 9.37-16.95 18.67-25.31 28.11l-.23-9.61 80.34 76.86 80.44 76.75 80.47 76.69c26.78 25.61 54 50.77 80.8 76.38l-9.6.23q25.29-26.46 50.87-52.47l25.79-26.06zm12.76-.31-26 28.61-26.33 28.7q-26.52 28.69-53.46 57a6.79 6.79 0 0 1 -9.58.25c-26.88-25.51-53.33-51.48-80.22-77l-80.57-76.61-80.59-76.64-80.67-76.51-.17-.15a6.56 6.56 0 0 1 -.24-9.28l.17-.18c9-8.81 17.9-17.77 26.85-26.65s17.79-17.87 26.62-26.87l26.47-27 26.3-27.15.06-.06a4.06 4.06 0 0 1 5.75-.08q5 4.88 10.08 9.7t10.15 9.62c6.8 6.4 13.7 12.7 20.56 19.05s13.82 12.63 20.67 19 13.68 12.78 20.47 19.23l81.45 77.43 81.3 77.69c27.13 25.95 54 51.92 80.93 77.85z"/><path d="m596.4 602-170.73-162.6a.81.81 0 0 0 -1.14 0l-73.24 76.89 171.89 163.77 73.24-76.9a.79.79 0 0 0 -.02-1.16z" fill="#929497"/><path d="m592.88 605.73-61.88-59.43-61.81-59.52c-10.28-9.95-20.68-19.76-30.77-29.91l-7.56-7.61-3.8-3.79-1.9-1.89-.95-.95-.48-.47-.23-.24-.06-.06a2.24 2.24 0 0 0 .43.31 2.52 2.52 0 0 0 2 .21 2.45 2.45 0 0 0 .91-.53s.18-.18.13-.12h-.06l-.12.12-.94 1-1.87 1.92c-1.24 1.29-2.5 2.56-3.72 3.87-2.46 2.59-4.92 5.19-7.34 7.82-19.54 20.89-38 42.81-57.65 63.6l-.19-7.68 43.08 40.82 42.82 41.1 42.82 41.09c7.15 6.83 14.27 13.7 21.48 20.48l21.65 20.29-7.59.18c12.26-13.06 24.7-25.93 37.07-38.89l18.65-19.36 9.31-9.68 4.66-4.84 2.33-2.42 1.16-1.21.29-.3a4.32 4.32 0 0 0 .16 6.09zm7-7.4a5.94 5.94 0 0 1 1.67 5.67 6 6 0 0 1 -1.46 2.69l-.29.31-1.15 1.22-2.31 2.44-4.61 4.89-9.21 9.77-18.45 19.53c-12.34 13-24.59 26-37 38.91l-.06.06a5.33 5.33 0 0 1 -7.53.13l-21.32-20.65c-7.12-6.87-14.32-13.65-21.5-20.46l-43.12-40.77-43.13-40.77-42.87-41a5.41 5.41 0 0 1 -.17-7.65c19.8-20.64 40.8-40.14 60.72-60.67 2.51-2.54 5-5.13 7.45-7.71 1.25-1.28 2.45-2.6 3.68-3.9l1.83-2 .91-1 .11-.12.06-.06.25-.24a4.11 4.11 0 0 1 1.48-.87 4.2 4.2 0 0 1 3.34.35 4.48 4.48 0 0 1 .7.51l.19.17.25.23.49.45 1 .9 2 1.81 4 3.61 8 7.19c10.63 9.57 20.94 19.49 31.37 29.27l62.45 58.85z"/><path d="m782.56 925.24a103.38 103.38 0 1 1 103.38-103.38 103.5 103.5 0 0 1 -103.38 103.38zm0-179.56a76.18 76.18 0 1 0 76.18 76.18 76.26 76.26 0 0 0 -76.18-76.18z" opacity=".24"/><circle cx="763.62" cy="817.09" fill="#fff" r="89.78"/><path d="m763.62 920.47a103.38 103.38 0 1 1 103.38-103.37 103.49 103.49 0 0 1 -103.38 103.37zm0-179.55a76.18 76.18 0 1 0 76.18 76.18 76.26 76.26 0 0 0 -76.18-76.18z" fill="#2193b9"/><circle cx="762.94" cy="817.77" fill="#fff" r="58.5"/><path d="m762.94 879a61.22 61.22 0 1 1 61.22-61.21 61.28 61.28 0 0 1 -61.22 61.21zm0-117a55.78 55.78 0 1 0 55.78 55.78 55.84 55.84 0 0 0 -55.78-55.78z"/><path d="m762.94 880a62.24 62.24 0 1 1 62.24-62.24 62.31 62.31 0 0 1 -62.24 62.24zm0-122.43a60.2 60.2 0 1 0 60.2 60.19 60.26 60.26 0 0 0 -60.2-60.18zm0 117a56.8 56.8 0 1 1 56.8-56.8 56.86 56.86 0 0 1 -56.8 56.8zm0-111.55a54.76 54.76 0 1 0 54.76 54.75 54.81 54.81 0 0 0 -54.76-54.77z"/><circle cx="762.94" cy="818.21" fill="#1a1a1a" r="48.74"/><path d="m762.94 868a49.76 49.76 0 1 1 49.75-49.76 49.81 49.81 0 0 1 -49.75 49.76zm0-97.47a47.72 47.72 0 1 0 47.71 47.71 47.77 47.77 0 0 0 -47.71-47.74z"/><circle cx="739.48" cy="802.32" r="1.2"/><circle cx="742.92" cy="798.92" r="1.62"/><circle cx="739.33" cy="798.24" r=".66"/><path d="m805.51 857.89 17.44 17.44" fill="#fff"/><path d="m811.51 854.28h5.44v24.66h-5.44z" fill="#e6e7e8" transform="matrix(.70710678 -.70710678 .70710678 .70710678 -374.3 829.57)"/><path d="m813.9 877.82-14.16-14.16 11.54-11.54 14.16 14.16a4.64 4.64 0 0 1 0 6.56l-5 5a4.63 4.63 0 0 1 -6.54-.02z" fill="#fff"/><path d="m817.18 881.9a7.32 7.32 0 0 1 -5.21-2.16l-16.07-16.08 15.38-15.39 16.08 16.09a7.36 7.36 0 0 1 0 10.4l-5 5a7.32 7.32 0 0 1 -5.18 2.14zm-13.59-18.24 12.23 12.24a2 2 0 0 0 2.71 0l5-5a1.91 1.91 0 0 0 0-2.71l-12.25-12.19z"/><circle cx="790.07" cy="798.43" r="2.1"/><circle cx="790.01" cy="803.33" r="1.01"/><circle cx="794.9" cy="804.2" r="1.32"/><path d="m760.27 538.17-1.88-1.82c-7.79 6.49-15.22 13.32-22.53 20.27q-7.83-7.71-15.65-15.44l-5.35-5.18c6.43-7.2 12.74-14.51 18.72-22.15l-1.87-1.85c-7.46 6.21-14.58 12.74-21.58 19.38l-23.3-22.6c6.06-6.82 12-13.74 17.67-20.95l-1.87-1.83c-7 5.86-13.78 12-20.42 18.29l-1.62-1.58c-6.75-6.52-13.55-13-20.34-19.47 6.86-7.65 13.6-15.42 20-23.56l-1.87-1.81c-8 6.61-15.53 13.59-23 20.68-7.07-6.75-14.13-13.53-21.22-20.27 6.66-7.45 13.21-15 19.4-22.93l-1.87-1.81c-7.74 6.43-15.12 13.22-22.38 20.12q-11.65-11.02-23.31-22.08c.58-.65 1.18-1.28 1.76-1.94 5.77-6.53 11.41-13.2 16.65-20.25l-1.87-1.82c-6.89 5.45-13.39 11.28-19.75 17.25-.65.61-1.28 1.25-1.94 1.87a1.29 1.29 0 0 0 -.17-.16q-10.51-9.81-21-19.66c.5-.56 1-1.11 1.51-1.67 5.74-6.5 11.34-13.13 16.54-20.14l-1.87-1.82c-6.85 5.42-13.31 11.21-19.63 17.14-.59.54-1.15 1.11-1.73 1.65q-12.32-11.56-24.71-23.03c.44-.49.9-1 1.34-1.47 5.7-6.46 11.26-13.05 16.43-20l-1.88-1.82c-6.81 5.37-13.23 11.13-19.52 17-.52.48-1 1-1.54 1.48q-10.74-10-21.5-20c6.09-6.85 12.08-13.8 17.75-21l-1.87-1.88c-7.12 5.92-13.92 12.15-20.62 18.47l-24-22c6-6.72 11.84-13.53 17.4-20.64l-1.87-1.82c-7 5.82-13.66 11.93-20.25 18.13l-10.37-9.52c-3.88-3.47-7.74-7-11.6-10.46 6-6.73 11.84-13.55 17.41-20.66l-1.87-1.81c-7 5.83-13.7 12-20.3 18.18-8.2-7.41-16.41-14.82-24.71-22.13l-1.79 1.9q11.58 11.69 23.33 23.19l-.51.48c-7.8 7.4-15.37 15-22.89 22.69-.17.19-.34.37-.52.55-7.34-6.62-14.68-13.24-22.1-19.77l-1.74 1.91q10.43 10.53 21 20.91c-6.29 6.57-12.54 13.18-18.61 20-.52.58-1 1.19-1.56 1.77q-9.5-8.57-19.08-17.07l-1.8 1.9q9.07 9.15 18.25 18.17c-5.72 6.47-11.35 13-16.69 19.86l1.87 1.82c6.66-5.54 13-11.35 19.31-17.25q8.25 8.13 16.49 16.26l4.82 4.63c-5.41 6.14-10.74 12.35-15.8 18.83l1.88 1.82c6.32-5.25 12.37-10.76 18.35-16.35l23.57 22.86c-5 5.75-10 11.58-14.74 17.63l1.88 1.82c5.91-4.91 11.58-10.05 17.18-15.26l2.47 2.39c26.42 25.59 53.21 50.81 79.83 76.26q11.85 11 23.65 22.1c-4.22 4.89-8.38 9.84-12.38 14.95l1.87 1.82c5-4.17 9.87-8.5 14.66-12.9q11.1 10.41 22.26 20.78c-4.13 4.78-8.2 9.63-12.1 14.63l1.87 1.82c4.91-4.08 9.67-8.32 14.35-12.62q11.41 10.63 22.85 21.24c-5 5.78-10 11.62-14.79 17.69l1.88 1.82c6-5 11.69-10.14 17.34-15.4l24.3 22.29c-4.93 5.64-9.8 11.35-14.44 17.29l1.88 1.81c5.83-4.84 11.44-9.92 17-15.06l11.18 10.32q5.54 5 11 10c-4.94 5.64-9.81 11.36-14.45 17.3l1.87 1.81c5.86-4.86 11.48-9.95 17-15.1 8.5 7.68 17 15.35 25.61 22.92l1.79-1.9c-8-8.08-16.08-16.06-24.17-24 1.24-1.17 2.51-2.32 3.75-3.5 5.89-5.59 11.64-11.33 17.34-17.11 7.08 6.39 14.16 12.76 21.32 19.06l1.79-1.9q-10-10.12-20.19-20.1c.87-.88 1.75-1.76 2.61-2.65 7-7.23 13.85-14.53 20.57-22q9.81 8.85 19.7 17.6l1.79-1.9q-9.33-9.42-18.79-18.7c6.84-7.59 13.46-15.24 19.73-23.24zm-77.08 19.89-22.13-21.48.55-.56c7-7.33 14-14.7 20.81-22.26l23.58 21.59c-7.17 6.87-14.18 13.9-21.12 21zm-6-49c-7.3 7-14.42 14.12-21.48 21.33l-.55.57c-6.94-6.69-13.92-13.33-20.89-20l3-3q9.13-9.5 18-19.22c6.83 6.36 13.65 12.75 20.52 19.08zm-48.75-3.67c-6.76-6.45-13.49-12.92-20.26-19.35l2.41-2.43q9.25-9.65 18.28-19.5c7 6.57 14.08 13.11 21.11 19.67q-9.4 9.11-18.56 18.48c-.95.99-1.93 2.04-2.93 3.08zm-4.86-46.22q-9.55 9.24-18.85 18.76c-.81.84-1.6 1.69-2.41 2.54q-11.25-10.69-22.5-21.41c3.42-3.36 6.81-6.77 10.18-10.19q5.33-5.56 10.56-11.24 11.57 10.71 23.07 21.49zm-28.58-26.83q-5.46 5.34-10.82 10.8c-3.34 3.48-6.67 7-10 10.55q-10.37-9.68-20.7-19.36 5.06-5 10-10.06 5.46-5.72 10.82-11.54 10.42 9.8 20.7 19.61zm-76.75-20.77q12.19 11.63 24.36 23.25c-.84.95-1.71 1.87-2.55 2.82-4.88 5.53-9.61 11.21-14.13 17.09-9.13-8.55-18.29-17-27.44-25.56 5.75-4.69 11.3-9.59 16.68-14.64 1.06-.97 2.06-1.98 3.09-2.96zm26.79 30.91c1-.88 1.86-1.8 2.8-2.69q10.47 10 20.93 19.92c-.78.87-1.58 1.72-2.35 2.6-4.88 5.52-9.61 11.2-14.13 17.07q-11.94-11.14-23.85-22.31 8.56-7.02 16.61-14.59zm23.82-35q-5.62 5.5-11.15 11.12-5 5.18-9.85 10.44c-8.07-7.56-16.17-15.07-24.25-22.61q5-4.95 10-10 5.67-5.91 11.2-11.94 12.03 11.51 24.06 22.98zm-41.13-16.72q-4.95 5.14-9.8 10.39c-6.87-6.4-13.72-12.81-20.62-19.17l.66-.67c6.94-7.23 13.83-14.51 20.54-22 6.9 6.66 13.85 13.27 20.79 19.9q-5.84 5.73-11.56 11.54zm-36.41-14.29-22.72-20.86.3-.3c7.3-7.61 14.56-15.26 21.6-23.12l22.94 22.26c-7.24 6.93-14.3 14-21.31 21.17zm-49.11-45.47c7.44-7.74 14.84-15.53 22-23.55.15-.16.29-.33.43-.49q5.52 5.43 11 10.86l9.86 9.56c-7.65 7.27-15.08 14.75-22.46 22.28l-.45.47-7.78-7.13q-6.46-5.81-12.92-11.66zm-7.43 39.47q-8.5-7.63-17-15.33c.51-.48 1-.95 1.54-1.44 6.59-6.25 13-12.68 19.36-19.14q6.24 6.14 12.47 12.29l7.56 7.34c-6 6.26-11.92 12.55-17.69 19-.5.55-1 1.11-1.47 1.67zm9.76 8.95c.49-.47 1-.92 1.48-1.38 6.29-6 12.4-12.09 18.48-18.26l22.21 21.56c-5.6 5.88-11.17 11.79-16.59 17.85-.61.68-1.19 1.37-1.8 2zm28.71 26.34 1.85-1.76c5.9-5.6 11.65-11.35 17.37-17.13 6.82 6.59 13.7 13.13 20.56 19.69-.94 1.05-1.9 2.07-2.83 3.13-4.9 5.55-9.65 11.26-14.18 17.17-6.85-6.37-13.67-12.77-20.56-19.1zm83 77.31-1.39-1.3q8.58-7 16.6-14.6c.88-.82 1.73-1.67 2.6-2.5l22.94 21.43c-4.79 5-9.54 10.13-14.18 15.32-1.12 1.24-2.2 2.51-3.3 3.76q-11.68-11.07-23.31-22.18zm27.94 26.58c1.2-1.13 2.42-2.23 3.61-3.36 5.09-4.83 10.06-9.77 15-14.74 6.86 6.42 13.74 12.8 20.61 19.21-4.69 4.95-9.35 9.93-13.9 15-1.29 1.44-2.54 2.91-3.83 4.36q-10.79-10.24-21.53-20.5zm26.08 24.9c1.4-1.32 2.83-2.61 4.22-3.93 5-4.74 9.87-9.58 14.72-14.46 7.09 6.6 14.16 13.22 21.28 19.78-5.64 5.92-11.25 11.87-16.7 18-.51.56-1 1.15-1.5 1.71q-11.02-10.65-22.06-21.13zm26.87 25.72 1.63-1.52c6-5.68 11.82-11.52 17.62-17.38l22.83 20.94c-5.52 5.79-11 11.62-16.35 17.6-.85.94-1.68 1.92-2.53 2.88zm52.42 44c-1.14 1.25-2.23 2.55-3.36 3.81q-5.24-5.16-10.46-10.32l-10.74-10.43c.93-.88 1.88-1.74 2.8-2.62 5.87-5.57 11.59-11.28 17.27-17l7 6.41q6.93 6.23 13.83 12.47c-5.54 5.79-11.03 11.63-16.38 17.62zm22-23.55-2.56 2.59q-6.64-6.54-13.27-13.09l-6.73-6.52 1.67-1.69c6.92-7.2 13.78-14.46 20.47-21.89l5.39 4.94q8.1 7.28 16.15 14.57c-7.17 6.88-14.19 13.93-21.16 21.03z" opacity=".26"/><path d="m467.6 395.34c-2.69-2.56-5.42-5.1-8.16-7.6s-5.28-4.68-8-7q6.78-7.81 13.57-15.61 3.78 3.57 7.61 7.06 4.3 3.84 8.7 7.59c-4.55 5.22-9.12 10.38-13.72 15.56z" fill="#fff" opacity=".26"/><path d="m589.29 432.69q-4 3.9-7.89 7.88-3.67 3.81-7.27 7.7-7.56-7-15.11-14.13 3.71-3.64 7.33-7.34 4-4.17 7.9-8.42 7.53 7.16 15.04 14.31z" fill="#fff" opacity=".26"/><path d="m1080.66 442.78-.08-.1a274.46 274.46 0 0 0 -22.74-25.22 302.79 302.79 0 0 0 -25.41-22.46 322.75 322.75 0 0 0 -27.71-19.57c-9.52-6-19.33-11.52-28.83-16.94-15.65-8.77-29.86-19.42-43.35-31h.06a47.58 47.58 0 0 0 11.29-1c3.62-.8 7.09-1.78 10.5-2.75a162.93 162.93 0 0 1 40.67-7.39 154.89 154.89 0 0 1 20.66.44c1.71.21 3.45.24 5.15.55a34.53 34.53 0 0 1 5 1.5 36.66 36.66 0 0 0 5 1.17q2.52.51 5 1.08h.06a4.81 4.81 0 0 0 5.07-7.33 107.84 107.84 0 0 0 -33.5-32.29 143.73 143.73 0 0 0 -36.44-16c2.34-3 4.43-6.09 6.42-9.11a256 256 0 0 1 14.76-21.22 163.68 163.68 0 0 1 17.45-18.56 173.45 173.45 0 0 1 20.31-15.67c1.8-1.15 3.57-2.37 5.39-3.49a31 31 0 0 1 6-2.49 33.17 33.17 0 0 0 5.87-2.58q2.85-1.44 5.74-2.81a6.09 6.09 0 0 0 -1-11.36 159 159 0 0 0 -57.89-5.07c-1.65.16-3.3.37-5 .57a318.37 318.37 0 0 0 24.9-39.05 2.61 2.61 0 0 0 .29-.88 2.52 2.52 0 0 0 -2.18-2.82c-5.5-.75-10.86-1.18-16.31-1.46s-10.89-.43-16.37-.39a169.49 169.49 0 0 0 -33.06 3.21c-22.09 4.22-43.09 16.55-58.21 33.92a105.1 105.1 0 0 0 -18.36 29.08c-.62 1.34-1.15 2.72-1.65 4.1-.16-4.2-.22-8.39-.08-12.58a263.24 263.24 0 0 1 2.49-30.56c.59-5.17 1.23-10.44 1.73-15.76s.72-10.72.81-16.11a217.77 217.77 0 0 0 -2.09-32.13 347.24 347.24 0 0 0 -14.82-62v-.05a3.08 3.08 0 0 0 -.29-.61 3.14 3.14 0 0 0 -4.3-1.07 253.75 253.75 0 0 0 -33.11 24.11 176.68 176.68 0 0 0 -28.77 30.31 112.29 112.29 0 0 0 -18.42 38.85 111.56 111.56 0 0 0 -3.09 22.93q-11.38-8.16-23.49-15.18l-.3-.15a2.52 2.52 0 0 0 -3.3 1.36v.06a170.07 170.07 0 0 0 -9.52 31.37 136.92 136.92 0 0 0 -2.85 33.27 93.89 93.89 0 0 0 7.64 33.29 98.16 98.16 0 0 0 6.49 12.35l-1.5-.47a330.1 330.1 0 0 0 -34.84-9.09 246.13 246.13 0 0 0 -36-4.15 401.24 401.24 0 0 0 -71.75 3.62 3.43 3.43 0 0 0 -.86.23 3.28 3.28 0 0 0 -1.72 4.32v.13a232.92 232.92 0 0 0 20.78 37.26 191.35 191.35 0 0 0 28.06 32.93 142.27 142.27 0 0 0 36.44 24.59c3.38 1.5 6.8 2.91 10.22 4.35l10.54 3.49a99.2 99.2 0 0 0 10.75 2.79l5.41 1.24c1.8.42 3.65.56 5.48.85 3.66.49 7.31 1.05 11 1.47l11.06.44c1.84 0 3.68.21 5.52.14l5.53-.3 5.51-.33a48.25 48.25 0 0 0 5.5-.51l10.9-1.66c3.62-.61 7.15-1.67 10.72-2.49 1.77-.47 3.56-.83 5.3-1.38l5.21-1.72c3.46-1.17 7-2.21 10.28-3.7a182.83 182.83 0 0 0 26.63-13.51 127.29 127.29 0 0 0 -18.45 43.37 135.46 135.46 0 0 0 -3.61 32.47 102.12 102.12 0 0 0 6.23 32.22 92.44 92.44 0 0 0 16.06 28.87 80.31 80.31 0 0 0 26 21 118.67 118.67 0 0 0 31.49 10.52l.4.06a6.09 6.09 0 0 0 6.79-5.3 205.69 205.69 0 0 0 -.06-50.69 210.62 210.62 0 0 0 -4.68-25c-.12-.49-.26-1-.39-1.47a192 192 0 0 0 23 25.83c10.29 9.63 22.42 17.23 35.09 23.33a154 154 0 0 0 40.07 13.44 112.76 112.76 0 0 0 21.32 2.13 110.87 110.87 0 0 0 21.44-1.81 145.85 145.85 0 0 0 40.39-14.23 7.48 7.48 0 0 0 1.24-.8 7.67 7.67 0 0 0 1.27-10.79z" opacity=".39"/><path d="m631.52 551q-4-3.84-8.16-7.6-3.95-3.52-8-7 6.78-7.82 13.58-15.61 3.76 3.57 7.6 7.06 4.3 3.84 8.7 7.59-6.83 7.76-13.72 15.56z" fill="#fff" opacity=".14"/><path d="m834.48 396.27a404.83 404.83 0 0 1 -137.89-166.33 536.58 536.58 0 0 1 155.48-128.94 672.65 672.65 0 0 1 137.93 166.37 447.41 447.41 0 0 1 -72.29 74.93 447.6 447.6 0 0 1 -83.23 53.97z" fill="#f6921e"/><path d="m834.06 402.13a38.54 38.54 0 0 1 -4.89-2.53c-.79-.48-1.61-1-2.29-1.52l-1.4-1q-2.81-2-5.58-4.12c-3.7-2.76-7.33-5.62-10.94-8.51q-10.8-8.7-21-18.11a406.54 406.54 0 0 1 -37.96-40.34q-8.76-10.74-16.83-22c-5.37-7.51-10.45-15.23-15.3-23.08a415.83 415.83 0 0 1 -25.77-48.92v-.05a4.89 4.89 0 0 1 .71-5.1c5.48-6.55 11.09-13 16.88-19.28s11.82-12.34 18-18.22 12.51-11.61 18.85-17.3 12.72-11.35 19.23-16.87c13-11 26.25-21.83 40.12-31.84 6.94-5 14-9.92 21.16-14.53s14.56-9 22-13.22a6.18 6.18 0 0 1 7.07.71l.07.06q20.65 18 39.87 37.51c12.79 13 24.91 26.71 36.54 40.77s22.59 28.69 33 43.66 20.26 30.36 29.45 46.11a5.89 5.89 0 0 1 -.41 6.55q-7.84 10.24-16.25 20c-5.57 6.56-11.34 12.94-17.23 19.21a403.75 403.75 0 0 1 -37.62 35.31 452.78 452.78 0 0 1 -41.54 30.52c-7.22 4.68-14.56 9.18-22.05 13.42q-5.61 3.18-11.32 6.19c-1.89 1-3.81 2-5.72 3l-1.6.81c-.77.38-1.56.74-2.37 1.07a40 40 0 0 1 -4.88 1.64zm.85-11.72a6.55 6.55 0 0 1 .82-1.26 2.07 2.07 0 0 1 .46-.38l1.23-.65c1.85-1 3.7-2 5.54-3 3.68-2 7.32-4.07 10.93-6.17q10.86-6.32 21.38-13.19a440.49 440.49 0 0 0 40.33-29.86c6.43-5.37 12.75-10.86 18.89-16.55s12.19-11.47 18-17.47 11.5-12.18 17-18.52 10.69-12.91 15.76-19.57l-.4 6.57c-9.13-15.42-18.81-30.52-29.19-45.13s-21.33-28.8-32.8-42.57-23.54-27-36-39.87-25.46-25.2-38.92-37l7.14.77c-7.37 4-14.64 8.11-21.88 12.32s-14.43 8.52-21.49 13.05a452.58 452.58 0 0 0 -41 29.2c-6.55 5.26-13 10.72-19.1 16.46s-12.08 11.69-17.86 17.79-11.41 12.33-17 18.59-11.06 12.63-16.36 19.13l.69-5.15a402.7 402.7 0 0 0 25.65 47.47q7.2 11.42 15.14 22.33t16.6 21.25a406.32 406.32 0 0 0 37.3 38.87q9.93 9.09 20.47 17.52c3.52 2.78 7.06 5.54 10.67 8.22q2.7 2 5.44 4l1.36 1a2.12 2.12 0 0 1 .51.46 6.16 6.16 0 0 1 .69 1.34z"/><path d="m835.86 370.18a331.6 331.6 0 0 1 -113-136.27 439.87 439.87 0 0 1 127.38-105.6 550.93 550.93 0 0 1 113 136.27 366.81 366.81 0 0 1 -59.24 61.42 366.23 366.23 0 0 1 -68.14 44.18z" fill="#1a1a1a"/><path d="m835.52 375a32.56 32.56 0 0 1 -4-2.08c-.64-.39-1.31-.84-1.87-1.24l-1.15-.84q-2.31-1.66-4.57-3.37c-3-2.27-6-4.61-9-7q-8.84-7.14-17.19-14.85a330.43 330.43 0 0 1 -31.1-33.05 335.63 335.63 0 0 1 -26.32-36.93 338.9 338.9 0 0 1 -21.12-40.09l-1-2.31 1.59-1.91a350.35 350.35 0 0 1 28.58-30.72q7.59-7.23 15.44-14.18c5.22-4.64 10.42-9.3 15.75-13.82 10.65-9 21.51-17.88 32.87-26.08 5.68-4.1 11.43-8.13 17.34-11.9s11.93-7.39 18-10.84l3.11-1.75 2.74 2.38q16.92 14.72 32.66 30.74c10.48 10.67 20.41 21.88 29.94 33.4s18.5 23.5 27 35.77 16.6 24.87 24.13 37.78l1.65 2.82-2 2.57c-8.58 11.17-17.77 21.87-27.43 32.14a330.45 330.45 0 0 1 -30.82 28.93 371.71 371.71 0 0 1 -34.08 25q-8.88 5.76-18.06 11c-3.07 1.73-6.16 3.43-9.28 5.07-1.55.83-3.12 1.63-4.69 2.44l-1.3.66c-.63.31-1.28.61-2 .88a34.27 34.27 0 0 1 -3.82 1.38zm.69-9.61a5.41 5.41 0 0 1 .67-1 1.44 1.44 0 0 1 .39-.31l1-.54c1.52-.8 3-1.6 4.54-2.43 3-1.64 6-3.34 9-5.06 5.93-3.45 11.78-7 17.51-10.8a362.16 362.16 0 0 0 33-24.49c5.27-4.39 10.45-8.89 15.48-13.55s10-9.4 14.78-14.31 9.42-10 13.9-15.18 8.76-10.57 12.91-16l-.32 5.39c-7.48-12.63-15.41-25-23.92-37s-17.47-23.6-26.87-34.88-19.28-22.17-29.49-32.71-20.87-20.65-31.89-30.34l5.85.63c-6 3.24-12 6.64-17.93 10.09s-11.82 7-17.6 10.69a369.09 369.09 0 0 0 -33.62 23.93c-5.37 4.31-10.6 8.78-15.6 13.48s-9.9 9.58-14.63 14.58-9.35 10.1-13.92 15.23-9.06 10.34-13.4 15.67l.57-4.22a328.12 328.12 0 0 0 21 38.89 325.22 325.22 0 0 0 26 35.7 333.06 333.06 0 0 0 30.56 31.85q8.15 7.46 16.77 14.35c2.88 2.28 5.78 4.55 8.74 6.74 1.47 1.1 3 2.18 4.45 3.25l1.12.81a1.75 1.75 0 0 1 .42.38 4.92 4.92 0 0 1 .53 1.15z"/><path d="m857.84 259-4.83.15c-12.77 9.59-40.26 33.13-50.62 71.37-3.16 11.65-17.26 63.68 19.46 98.63 17.81 16.95 40 22.68 51.58 24.83a208.92 208.92 0 0 0 .87-42.48c-2.27-27.81-9.38-45.26-13.71-61.17-5.51-20.19-9.94-50.42-2.75-91.33z" fill="#006838"/><path d="m853.6 262.71a2.86 2.86 0 0 0 -.42 1.53c0 .39.09.54 0 .54l3.18-1.12q-6.12 4.57-11.76 9.71c-3.77 3.42-7.29 7.08-10.69 10.84a126.13 126.13 0 0 0 -17.4 24.79l-1.76 3.36c-.57 1.12-1 2.29-1.59 3.43s-1.07 2.28-1.55 3.45l-1.36 3.52c-1 2.33-1.67 4.76-2.45 7.16l-.57 1.8-.53 1.87c-.34 1.24-.67 2.47-1 3.71a130.66 130.66 0 0 0 -3.44 45.3 66.4 66.4 0 0 0 3.18 14.77c.42 1.19.84 2.38 1.35 3.53s1 2.31 1.57 3.43 1.11 2.25 1.75 3.33 1.24 2.18 2 3.21a64.47 64.47 0 0 0 9.53 11.48 95.84 95.84 0 0 0 24.51 16.54 112.59 112.59 0 0 0 28.4 9.11l-7.22 5.29a208.57 208.57 0 0 0 .46-47.84c-.4-4-1-7.92-1.64-11.86s-1.51-7.84-2.45-11.74c-1.88-7.8-4.26-15.5-6.64-23.48-1.19-4-2.37-8.08-3.38-12.2s-1.93-8.27-2.72-12.44a176.35 176.35 0 0 1 -2.65-25.29 209.92 209.92 0 0 1 .61-25.34c.14-2.1.37-4.2.6-6.29l.34-3.15c.13-1 .29-2.08.44-3.12l.45-3.13.22-1.56a2.27 2.27 0 0 1 .2-.65c.33-.73 1.31-1.27 2.43-2.49zm8.47-7.35a38.92 38.92 0 0 1 .47 9.72l-.82 6.89c-.26 2-.44 4-.63 6s-.38 4-.49 6a213 213 0 0 0 1.91 47.81c.61 3.94 1.3 7.87 2.19 11.75s1.91 7.72 3.09 11.62c2.38 7.77 4.93 15.79 7 24 1 4.1 1.91 8.25 2.73 12.4s1.46 8.36 2 12.57a208.58 208.58 0 0 1 .07 50.68 6.14 6.14 0 0 1 -6.86 5.32l-.35-.06a115.51 115.51 0 0 1 -31.48-10.54c-2.48-1.3-4.92-2.67-7.27-4.19s-4.64-3.15-6.82-4.92a86.41 86.41 0 0 1 -12-11.78 92.66 92.66 0 0 1 -16-28.93c-3.61-10.36-6.08-21.24-6.22-32.23a137.6 137.6 0 0 1 3.59-32.47c.31-1.33.63-2.65 1-3.95l.51-2 .58-2c.78-2.63 1.49-5.29 2.49-7.86l1.41-3.87c.5-1.28 1.07-2.53 1.61-3.8s1.06-2.54 1.67-3.77l1.85-3.68a137.13 137.13 0 0 1 18.42-27.07 158.75 158.75 0 0 1 23.93-22.28 5.5 5.5 0 0 1 3.12-1.12h.06a21.28 21.28 0 0 1 4.84.38 24.78 24.78 0 0 1 4.4 1.38z"/><path d="m856.27 262.75c-4.81.63-71.19 8.35-114.45-35.73-41-41.79-28.33-96.58-26-106.52a112.69 112.69 0 0 1 5.29-16.76 202.64 202.64 0 0 1 45.53 34.87c20.74 21.36 26.52 37.56 47.94 69.59a551.09 551.09 0 0 0 41.69 54.55z" fill="#006838"/><path d="m858.65 263.66a3.85 3.85 0 0 1 -.8.94 3.56 3.56 0 0 1 -1.25.68 2.9 2.9 0 0 1 -.62.14h-.15l-.26.05-1 .21c-.68.14-1.36.25-2 .36-1.35.23-2.71.44-4.06.63-2.71.39-5.43.64-8.16.85a154.62 154.62 0 0 1 -49.3-4.2 127.37 127.37 0 0 1 -31.3-12.58 120.19 120.19 0 0 1 -14.17-9.58 110.6 110.6 0 0 1 -12.62-11.68 103.61 103.61 0 0 1 -19-28.76 93.39 93.39 0 0 1 -7.63-33.32 121.1 121.1 0 0 1 .43-16.84 156.78 156.78 0 0 1 2.49-16.43c1.1-5.4 2.46-10.73 4-15.94.79-2.63 1.6-5.24 2.55-7.81s1.88-5.12 3-7.63v-.08a2.54 2.54 0 0 1 3.31-1.34 2.64 2.64 0 0 1 .29.15c7.6 4.52 15.12 9.32 22.38 14.52a237 237 0 0 1 21 16.62 163.13 163.13 0 0 1 18.71 19.53 210.89 210.89 0 0 1 15.17 22.14c4.6 7.52 9 15 13.69 22.38q3.45 5.53 7 11c2.38 3.64 4.82 7.25 7.24 10.87s4.92 7.2 7.43 10.76 5 7.14 7.59 10.67 5.13 7.07 7.74 10.58l3.91 5.28.49.66.62.83a22.28 22.28 0 0 1 1.39 2.13 30.41 30.41 0 0 1 1.89 4.21zm-4.77-1.82a13.78 13.78 0 0 0 -2.42-.76 2.69 2.69 0 0 1 -.76-.37l-.16-.14-.28-.29-.58-.59-4.54-4.85c-3-3.25-5.92-6.58-8.83-9.92s-5.69-6.79-8.49-10.23-5.47-7-8.14-10.52c-5.36-7.07-10.39-14.4-15.3-21.79s-9.49-15-14-22.5-8.88-14.93-13.71-22c-2.4-3.53-4.93-7-7.63-10.3-.67-.83-1.33-1.68-2-2.5l-2.1-2.45c-1.37-1.65-2.85-3.23-4.3-4.83a165.47 165.47 0 0 0 -19.07-17.57 161.8 161.8 0 0 0 -21.74-14.23l3.63-1.27c-.93 2.44-1.77 4.91-2.5 7.41s-1.35 5-1.84 7.59a105.62 105.62 0 0 0 -1.88 15.5 121 121 0 0 0 2.6 30.58 137.82 137.82 0 0 0 3.88 14.46 120.56 120.56 0 0 0 5.39 13.73 106.87 106.87 0 0 0 7 12.86l2.06 3c.71 1 1.47 2 2.19 2.94s1.51 1.94 2.29 2.88 1.53 1.92 2.39 2.81l2.48 2.73 2.63 2.61 1.31 1.3 1.38 1.25c.92.81 1.82 1.67 2.77 2.46 1.91 1.57 3.81 3.16 5.84 4.59s4.06 2.86 6.12 4.26a128 128 0 0 0 27.21 13 171.22 171.22 0 0 0 29.97 7.31c5.13.78 10.32 1.34 15.53 1.74 2.61.21 5.22.29 7.84.41 1.31.05 2.62.08 3.92.08h3.27a1.75 1.75 0 0 0 -1.13.73 1.69 1.69 0 0 0 -.3.88z"/><path d="m859 262.77a101.62 101.62 0 0 1 -13.69-44.21c-.39-6.09-2.25-45.49 29.38-78 43.31-44.5 110.41-35.79 114.72-35.17a223.66 223.66 0 0 1 -36.95 51.19c-20.94 21.8-34.89 27.7-54.65 48.38a207.42 207.42 0 0 0 -38.81 57.81z" fill="#006838"/><path d="m859.08 265.32a8.57 8.57 0 0 1 -1.89-1.1 7.13 7.13 0 0 1 -1.62-1.84l-1.15-1.74c-.74-1.16-1.48-2.33-2.18-3.52-1.42-2.38-2.7-4.84-3.9-7.35a93.82 93.82 0 0 1 -5.91-15.68c-.38-1.36-.72-2.72-1.07-4.09s-.64-2.75-.88-4.15c-.51-2.79-.91-5.56-1.2-8.44a100.42 100.42 0 0 1 0-17.08c.09-1.42.28-2.82.45-4.23s.33-2.83.6-4.22.47-2.81.74-4.21l1-4.17c.3-1.39.7-2.76 1.11-4.14s.78-2.75 1.21-4.11l1.48-4c.49-1.35 1-2.7 1.58-4a106.37 106.37 0 0 1 18.37-29.08 108.39 108.39 0 0 1 26.46-22 107 107 0 0 1 15.48-7.3 113.77 113.77 0 0 1 16.24-4.69 167.32 167.32 0 0 1 33.09-3.18c5.48 0 10.93.08 16.37.39s10.82.72 16.31 1.49a2.51 2.51 0 0 1 2.13 2.84 2.38 2.38 0 0 1 -.28.84 310.74 310.74 0 0 1 -28.42 43.81 205.77 205.77 0 0 1 -17.47 19.63 244.87 244.87 0 0 1 -19.73 17.14 252.1 252.1 0 0 0 -19.2 16.4c-3 2.85-6 5.82-8.87 8.88s-5.62 6.21-8.34 9.42-5.28 6.53-7.8 9.89-5 6.82-7.3 10.33-4.62 7.07-6.79 10.72c-1.13 1.8-2.15 3.66-3.22 5.49l-.48.73-.58 1a19.64 19.64 0 0 1 -1.37 2 35.35 35.35 0 0 1 -2.97 3.32zm-.24-5.11a13.45 13.45 0 0 0 -.24-2.53 3.16 3.16 0 0 1 0-.87 2.25 2.25 0 0 1 .12-.44l.31-.75c.88-2 1.71-4 2.65-6s1.86-4 2.86-5.9 2-3.89 3.05-5.82c2.16-3.82 4.38-7.61 6.77-11.3s4.92-7.29 7.58-10.8a186.8 186.8 0 0 1 17.39-19.92 239.58 239.58 0 0 1 19.85-17.27c6.8-5.35 13.5-10.41 19.89-15.87 3.22-2.7 6.35-5.52 9.42-8.41 1.55-1.43 3-2.91 4.58-4.38s3-3 4.44-4.53a172.07 172.07 0 0 0 29.66-41.2l1.88 3.68a105.92 105.92 0 0 0 -15.67-.65 124.18 124.18 0 0 0 -15.67 1.46 132.91 132.91 0 0 0 -15.29 3.34 140.52 140.52 0 0 0 -14.64 4.95q-7.14 2.79-13.89 6.15c-2.22 1.18-4.49 2.24-6.63 3.52s-4.3 2.5-6.43 3.77-4.18 2.65-6.17 4.11-4 2.93-5.92 4.44c-1 .77-1.87 1.61-2.81 2.41l-1.4 1.21c-.45.41-.89.85-1.33 1.28l-2.68 2.55-2.5 2.72-2.51 2.72c-.78 1-1.52 1.93-2.29 2.89l-2.3 2.89-2.08 3.05c-.68 1-1.42 2-2.07 3.07l-1.85 3.2c-1.31 2.1-2.36 4.34-3.48 6.54a105.84 105.84 0 0 0 -9 28.45 98 98 0 0 0 -1.38 14.93c0 2.46.08 5 .27 7.52.08 1.26.22 2.52.33 3.78s.31 2.52.5 3.78c.4 2.5.84 5 1.45 7.5.28 1.26.62 2.49.92 3.74s.67 2.49 1.06 3.71c.73 2.48 1.64 4.9 2.53 7.35.45 1.22.94 2.42 1.44 3.63.25.59.53 1.22.76 1.78a.91.91 0 0 0 -.63-.09 1.36 1.36 0 0 0 -.85.61z"/><path d="m859 262.77a88.51 88.51 0 0 1 39.38-22.92c41.62-11.22 77.77 12.25 84.62 16.73a105.43 105.43 0 0 1 31.57 31.73 160.15 160.15 0 0 0 -55.52-2.76c-27.44 3.57-38.72 12.75-57.15 9.6-11.38-1.94-27.03-8.88-42.9-32.38z" fill="#006838"/><path d="m856.91 262.57a16.12 16.12 0 0 1 1.36-1.84c.26-.29.53-.57.79-.83l.58-.53 2.11-1.95c1.4-1.31 2.83-2.58 4.27-3.87s2.9-2.54 4.3-3.93a35.82 35.82 0 0 1 4.44-3.9 81.55 81.55 0 0 1 21.5-9.37 87.24 87.24 0 0 1 11.51-2.35c1.94-.3 3.9-.43 5.84-.62s3.91-.21 5.86-.19a105.48 105.48 0 0 1 23.13 2.6 115 115 0 0 1 11.15 3.12c3.68 1.17 7.28 2.55 10.85 4a140.32 140.32 0 0 1 20.58 10.5 108.29 108.29 0 0 1 18.46 14.28 103.08 103.08 0 0 1 15 18 4.82 4.82 0 0 1 -5 7.34h-.1l-5-1.07a38.46 38.46 0 0 1 -5-1.18 35.88 35.88 0 0 0 -5-1.51 22.4 22.4 0 0 0 -2.58-.3l-2.57-.24a153.27 153.27 0 0 0 -20.66-.44 146.49 146.49 0 0 0 -20.48 2.39c-6.77 1.24-13.4 3.07-20.19 5-3.41 1-6.89 1.95-10.51 2.74a47 47 0 0 1 -11.29 1 55.8 55.8 0 0 1 -32-10.3c-.78-.52-1.55-1.06-2.28-1.64s-1.5-1.13-2.22-1.72c-1.4-1.23-2.84-2.43-4.1-3.78a59.42 59.42 0 0 1 -7.06-8.5c-.55-.74-1-1.53-1.49-2.31s-.95-1.56-1.4-2.35a29.45 29.45 0 0 1 -1.61-3.23c-.55-1.04-.9-2.09-1.19-3.02zm4.09.43c.74.51 1.41.9 2 1.26a8.46 8.46 0 0 1 1.45 1.09c1.25 1.21 2.43 2.47 3.62 3.7 2.45 2.4 4.76 4.87 7.25 7.12 4.86 4.59 10 8.84 16 11.67a46.32 46.32 0 0 0 9.16 3.41c.8.16 1.6.34 2.41.47l2.42.33c.81.1 1.62.09 2.43.12a17.93 17.93 0 0 0 2.43-.06 66.21 66.21 0 0 0 9.7-1.53c3.28-.72 6.62-1.65 10-2.6s6.85-1.94 10.34-2.83 7-1.65 10.62-2.26a152.19 152.19 0 0 1 21.6-2.3 160 160 0 0 1 21.68.7c.9.08 1.8.18 2.69.3s1.79.27 2.69.33c1.81.11 3.65 0 5.49 0a22.49 22.49 0 0 1 2.73.2l2.68.45c1.79.32 3.57.69 5.34 1.08l-5.13 7.32a103.16 103.16 0 0 0 -29.6-31.15c-12-8.31-25.53-14.66-39.83-17.44a88.7 88.7 0 0 0 -42.77 1.62 92.66 92.66 0 0 0 -19.76 8.33c-1.61.78-3.35 1.41-5 2.14a26.89 26.89 0 0 0 -4.8 2.7c-.76.51-1.51 1-2.24 1.6s-1.45 1.12-2.15 1.71-1.39 1.2-2.06 1.83l-.46.44a.7.7 0 0 1 -.21.14 2.9 2.9 0 0 1 -.72.11z"/><path d="m852.72 248-4.4 3.82c-2.92 18.75-6.46 61.86 20 105.73 8.08 13.36 44.12 73.05 111.78 77.92 32.82 2.36 59.11-9.18 72-16a305.54 305.54 0 0 0 -39.44-40.62c-28.49-24.41-51.71-35.41-70.86-47.07-24.29-14.78-57.11-39.78-89.08-83.78z" fill="#009345"/><path d="m851.92 255.09a3.66 3.66 0 0 0 .71 1.63c.27.33.43.42.35.48l2.35-4.26a155.12 155.12 0 0 0 7 76.92c.5 1.55 1.19 3 1.78 4.54s1.2 3 1.86 4.51l2.09 4.41c.71 1.46 1.34 3 2.16 4.37l2.36 4.29 1.17 2.14 1.27 2.16c1.71 2.85 3.45 5.64 5.27 8.39a179.77 179.77 0 0 0 25.09 30.33q7.1 6.83 14.8 12.94a105 105 0 0 0 16.42 10.79 89.82 89.82 0 0 0 8.94 4.07c1.51.63 3.08 1.11 4.62 1.64.78.26 1.55.54 2.33.78l2.35.67c1.57.45 3.15.86 4.75 1.18s3.17.75 4.79 1 3.21.51 4.82.71l4.85.48a134.22 134.22 0 0 0 38.39-3.26 142.22 142.22 0 0 0 18.48-5.44 150.92 150.92 0 0 0 17.62-7.9l-2.43 11.75a322.53 322.53 0 0 0 -21.52-24.05 315.12 315.12 0 0 0 -23.92-21.71 279.26 279.26 0 0 0 -26.12-19c-9.1-5.86-18.53-11.24-28.17-16.84s-19.38-11.7-28.62-18.22a258 258 0 0 1 -26.3-21.48 306 306 0 0 1 -23.59-24.33l-2.78-3.19-2.7-3.26c-1.8-2.17-3.61-4.34-5.31-6.59l-2.58-3.34-1.29-1.67a4.44 4.44 0 0 1 -.39-.55 4.36 4.36 0 0 1 -.23-.42c-.54-1.09-.41-2.54-.67-4.67zm1.6-14.13a56.32 56.32 0 0 1 9.25 8.59l5.72 7.07c1.69 2.11 3.45 4.16 5.2 6.22l2.62 3.09 2.7 3c7.21 8 14.74 15.78 22.68 23.06 16 14.46 32.87 27.8 51.82 38.43 9.5 5.43 19.3 10.92 28.83 16.95q7.13 4.55 14.1 9.4c4.6 3.29 9.19 6.63 13.6 10.17a302.72 302.72 0 0 1 25.42 22.48 286.36 286.36 0 0 1 22.77 25.2 7.76 7.76 0 0 1 -1.23 10.9 8.62 8.62 0 0 1 -1.23.8q-4.75 2.49-9.67 4.66c-3.28 1.42-6.61 2.74-10 3.93a134.71 134.71 0 0 1 -20.75 5.62 115.14 115.14 0 0 1 -21.45 1.82 128.84 128.84 0 0 1 -21.33-2l-5.24-1.05c-1.74-.38-3.46-.86-5.18-1.28s-3.42-1-5.12-1.44c-.85-.26-1.7-.48-2.54-.77l-2.49-.81-2.52-.84c-.83-.29-1.65-.63-2.47-.94-1.64-.65-3.31-1.25-4.91-2-3.26-1.33-6.43-2.87-9.62-4.37a174.35 174.35 0 0 1 -18.42-10.36 122.54 122.54 0 0 1 -16.67-13 191.8 191.8 0 0 1 -27.48-31.82c-2-2.88-3.92-5.82-5.77-8.77l-1.36-2.2-1.33-2.3-2.65-4.61c-.92-1.51-1.65-3.13-2.46-4.71l-2.34-4.76c-.74-1.61-1.4-3.26-2.1-4.89s-1.44-3.25-2-4.92l-1.79-5c-.29-.83-.61-1.66-.88-2.51l-.76-2.55-1.52-5.11-1.26-5.17-.62-2.59c-.21-.86-.34-1.74-.52-2.61l-1-5.23-.75-5.27c-.12-.88-.26-1.75-.36-2.63l-.26-2.65a160.32 160.32 0 0 1 -.73-21.24 176.54 176.54 0 0 1 1.89-21.17 6.94 6.94 0 0 1 2.28-4.2l.07-.05a26.65 26.65 0 0 1 4.74-3.35 30.87 30.87 0 0 1 5.09-2.18z"/><path d="m854.76 252.72c-3.92 4.26-59 62.14-141.5 53.68-78.18-8-118.16-69.23-125.42-80.33a150.33 150.33 0 0 1 -10.91-19.8 290.75 290.75 0 0 1 75.87-1.93c39.75 4.27 60.54 15.09 111 28.88a854.06 854.06 0 0 0 90.96 19.5z" fill="#009345"/><path d="m857.82 251.65a4.81 4.81 0 0 1 0 1.72 4.51 4.51 0 0 1 -.78 1.75l-.71.87-.85 1.06c-.57.7-1.16 1.36-1.75 2-1.17 1.35-2.38 2.67-3.6 4-2.43 2.62-5 5.07-7.62 7.52a179.49 179.49 0 0 1 -54.39 34.6 160.45 160.45 0 0 1 -20.82 6.83 155.14 155.14 0 0 1 -21.64 4.07 153.48 153.48 0 0 1 -22.07 1.06h-2.77c-.92 0-1.84-.1-2.76-.15l-5.53-.35c-1.83-.16-3.67-.4-5.5-.61-.92-.11-1.84-.2-2.75-.33l-2.74-.44a150.05 150.05 0 0 1 -21.63-4.91 152 152 0 0 1 -20.77-7.86 141.8 141.8 0 0 1 -36.49-24.55 191.38 191.38 0 0 1 -28-33c-4-5.91-7.77-12-11.26-18.16-1.77-3.1-3.42-6.26-5-9.43s-3.06-6.42-4.49-9.67v-.1a3.29 3.29 0 0 1 1.7-4.34 3.4 3.4 0 0 1 .88-.25c11.86-1.6 23.77-2.75 35.72-3.36q9-.48 18-.56t18 .32a246.42 246.42 0 0 1 36 4.15 327.57 327.57 0 0 1 34.8 9.03c22.6 7.09 44.9 14.13 67.65 20.14q8.5 2.31 17.06 4.45t17.13 4.26q8.58 2.1 17.2 4.09l8.62 2 2.43.57a27.43 27.43 0 0 1 3.22 1 40.63 40.63 0 0 1 5.51 2.58zm-6.12 2.13a21.27 21.27 0 0 0 -3.23 1.21 3.76 3.76 0 0 1 -1.16.24h-.31l-.54-.05-1.11-.12-8.86-1.06c-5.9-.75-11.8-1.62-17.68-2.54s-11.75-2-17.62-3.07-11.68-2.36-17.51-3.62c-11.66-2.55-23.22-5.53-34.72-8.7s-22.88-6.75-34.12-10.39-22.28-7.35-33.43-10.39a260.19 260.19 0 0 0 -34.08-7 224.13 224.13 0 0 0 -69.88 1.24l2.52-4.69q2.19 4.59 4.81 9c1.7 2.93 3.59 5.75 5.54 8.51a149.21 149.21 0 0 0 12.92 15.71 188.39 188.39 0 0 0 30.63 25.94 220.38 220.38 0 0 0 34.13 19.24c1.49.64 2.95 1.34 4.45 1.94l4.5 1.84c3 1.1 6.07 2.24 9.18 3.15a149.91 149.91 0 0 0 18.87 4.61l2.4.44c.8.13 1.61.22 2.41.33l4.83.66 4.85.47c.81.07 1.62.18 2.43.22l2.44.12a157 157 0 0 0 19.52-.13 165.44 165.44 0 0 0 38.59-7.4 194.52 194.52 0 0 0 36.66-15.92c5.87-3.29 11.61-6.87 17.21-10.69 2.79-1.92 5.52-3.94 8.23-6 1.35-1 2.69-2.08 4-3.15l2-1.61 1-.81.24-.21s.29-.31 0 .13a2.35 2.35 0 0 0 -.35 1.28 2.23 2.23 0 0 0 .24 1.27z"/><path d="m857.31 250.68c-13.43-4.5-34.75-13.44-54.78-31.14-6.14-5.43-45.22-41.06-46.26-95.74-1.42-74.94 69.92-117.91 74.58-120.61a258.8 258.8 0 0 1 13.76 76.31c1 36.47-6.56 52.67-5.55 87.19.57 19.51 3.94 48.48 18.25 83.99z" fill="#009345"/><path d="m859.67 252.9a11.71 11.71 0 0 1 -2.56.59 8.73 8.73 0 0 1 -3-.24l-2.78-.73c-1.65-.46-3.31-.91-4.95-1.42-3.31-1-6.54-2.17-9.77-3.38a148.69 148.69 0 0 1 -18.87-8.79 145.94 145.94 0 0 1 -17.57-11.53c-2.79-2.1-5.58-4.43-8.2-6.81s-5.15-4.86-7.57-7.43a146.39 146.39 0 0 1 -13.49-16.38 140 140 0 0 1 -11.1-18.29 127.75 127.75 0 0 1 -13-41.22c-.11-.9-.26-1.8-.35-2.71l-.26-2.72c-.07-.9-.19-1.81-.23-2.72l-.12-2.73c0-.91-.1-1.82-.11-2.73v-2.74c0-1.83 0-3.65.1-5.47a113 113 0 0 1 3.07-21.67l1.44-5.28c.53-1.74 1.15-3.45 1.75-5.17s1.3-3.38 2-5.07l1.06-2.5 1.17-2.44c1.5-3.29 3.33-6.4 5.1-9.5l2.87-4.53c1-1.49 2-2.92 3.06-4.37 8.38-11.5 18.33-21.39 28.77-30.31 5.21-4.48 10.61-8.68 16.08-12.75s11.03-7.86 17.04-11.42a3.14 3.14 0 0 1 4.32 1.12 3.37 3.37 0 0 1 .28.61c3.33 10.07 6.31 20.26 8.8 30.6a304.42 304.42 0 0 1 6 31.42 220.68 220.68 0 0 1 2.11 32.14 269.88 269.88 0 0 1 -2.55 31.87 279.65 279.65 0 0 0 -2.5 30.55c-.11 5.08-.1 10.17.16 15.26.13 2.54.29 5.08.5 7.62s.39 5.08.68 7.62c.53 5.08 1.27 10.14 2.12 15.19.39 2.53.9 5.05 1.36 7.57s1 5 1.62 7.54c1.08 5 2.38 10 3.74 15 .64 2.51 1.44 5 2.14 7.47l.13.47c.05.16.08.28.17.54.15.47.29.95.42 1.43a23.48 23.48 0 0 1 .62 3 42.28 42.28 0 0 1 .3 5.44zm-4.67-4.44a13.18 13.18 0 0 0 -2.57-1.9 3.61 3.61 0 0 1 -.8-.66 3 3 0 0 1 -.29-.41 3.16 3.16 0 0 1 -.17-.38l-.2-.45c-1-2.46-2.14-4.89-3.1-7.37s-2-5-2.83-7.49-1.76-5.05-2.6-7.6a217.47 217.47 0 0 1 -7.47-31.31c-.45-2.65-.81-5.32-1.16-8s-.57-5.36-.8-8c-.45-5.38-.65-10.78-.71-16.19v-4.06l.13-4.06c0-1.36.1-2.71.19-4.06s.14-2.7.26-4c.42-5.38 1-10.7 1.68-15.93 1.32-10.48 2.85-20.56 3.6-30.73a264.28 264.28 0 0 0 .69-30.86 217.17 217.17 0 0 0 -3.18-30.79 198.89 198.89 0 0 0 -7.83-30l4.6 1.72c-2.7 1.66-5.48 3.48-8.09 5.44s-5.23 4-7.72 6.11a140 140 0 0 0 -14 13.78 145.3 145.3 0 0 0 -21.27 32.17 147.33 147.33 0 0 0 -7.13 17.33 142 142 0 0 0 -4.86 17.69c-.35 1.48-.54 3-.84 4.48l-.4 2.24-.27 2.26c-.17 1.5-.45 3-.56 4.51l-.34 4.54c-.12 1.51-.07 3-.11 4.55v2.28c0 .76 0 1.52.07 2.28.05 1.52.1 3 .23 4.56l.17 2.28c.06.75.16 1.51.24 2.27 2.69 24.23 13.72 47.58 29.54 67.3 2 2.46 4 4.87 6.16 7.2s4.29 4.5 6.63 6.68a156.42 156.42 0 0 0 14.72 12.25 183.11 183.11 0 0 0 16.25 10.56c2.82 1.62 5.71 3.14 8.62 4.64 1.46.76 2.93 1.47 4.41 2.18l1.11.49.56.26.27.13c.07 0 .06 0 0 0a1.28 1.28 0 0 0 -.67.57 1.83 1.83 0 0 0 -.16 1.5z"/><path d="m857.31 250.68a91.28 91.28 0 0 1 15.32-51.59c28.56-42.33 84.79-47.82 95.51-48.86a157.94 157.94 0 0 1 59.76 5.77c-14.93 7.16-36.05 19.4-54.83 39.74-22.42 24.29-24.33 41.52-44.64 52.62-12.59 6.87-33.88 12.29-71.12 2.32z" fill="#009345"/><path d="m855.24 252.27a20 20 0 0 1 -.4-2.85c0-.49 0-1 0-1.44v-.91l.06-1.81.09-1.81c.1-2.41.28-4.82.44-7.24.09-1.21.24-2.42.3-3.64s.14-2.45.18-3.7.1-2.49.21-3.74a30.42 30.42 0 0 1 .56-3.69 85.17 85.17 0 0 1 12.89-26.72 91.35 91.35 0 0 1 9.6-11.34c1.71-1.79 3.56-3.43 5.38-5.1s3.78-3.16 5.77-4.61a125.5 125.5 0 0 1 25.37-14.52 188.53 188.53 0 0 1 27.5-9.12 193.53 193.53 0 0 1 28.5-5c4.84-.45 9.69-.74 14.56-.75s9.73.2 14.58.62a152.79 152.79 0 0 1 28.76 5.19 6.12 6.12 0 0 1 1 11.36h-.08l-5.74 2.82a34.22 34.22 0 0 1 -5.87 2.57 31.08 31.08 0 0 0 -6 2.49c-.92.54-1.8 1.16-2.69 1.74s-1.81 1.14-2.69 1.75a170.72 170.72 0 0 0 -20.21 15.67 159.42 159.42 0 0 0 -17.44 18.57c-5.31 6.65-9.88 13.78-14.75 21.22a123.41 123.41 0 0 1 -8.06 11.14 48.89 48.89 0 0 1 -10.84 9.42c-1 .67-2 1.33-3.06 1.89s-2.05 1.21-3.11 1.75-2.09 1.11-3.18 1.57-2.14 1-3.24 1.44a69.08 69.08 0 0 1 -13.47 4.11 90.21 90.21 0 0 1 -13.84 1.55l-3.46.11c-1.15 0-2.3-.05-3.45-.08s-2.3-.07-3.43-.18-2.28-.21-3.42-.33c-2.27-.25-4.5-.69-6.75-1.05s-4.43-1-6.61-1.6c-1.08-.32-2.16-.67-3.23-1l-1.61-.53-1.73-.61a40.84 40.84 0 0 1 -7.39-3.61zm4.13-3.18c2.24-.19 3.87-.52 5.31-.47h.32.4l.81.05 1.61.15c1.08.09 2.14.2 3.21.32 2.13.2 4.25.38 6.36.64l6.31.55c2.1.1 4.19.36 6.28.42l3.13.16 3.12.05a75.47 75.47 0 0 0 12.33-.91 63.27 63.27 0 0 0 11.83-3 40.91 40.91 0 0 0 5.52-2.5c.89-.49 1.73-1 2.58-1.57.41-.28.85-.52 1.25-.82l1.17-.93a56.18 56.18 0 0 0 8.43-8.39 115.65 115.65 0 0 0 7.36-10.18c2.38-3.61 4.76-7.36 7.31-11.05s5.26-7.33 8.09-10.86a167.69 167.69 0 0 1 18.76-19.57 181.21 181.21 0 0 1 21.54-16.33c1.89-1.22 3.79-2.42 5.75-3.53a52.76 52.76 0 0 0 5.39-4.16 29.86 29.86 0 0 1 2.75-2c1-.6 2-1.12 3-1.66l3-1.58 3-1.49.93 11.41c-4.35-1.28-8.72-2.46-13.13-3.48s-8.9-1.81-13.4-2.41a155.67 155.67 0 0 0 -27.22-1.24 160.5 160.5 0 0 0 -27.26 3.49 126.07 126.07 0 0 0 -13.26 3.62 136 136 0 0 0 -12.73 5.07 121.24 121.24 0 0 0 -12.06 6.33 104.55 104.55 0 0 0 -11.16 7.78 91.5 91.5 0 0 0 -9.87 9.09 81.66 81.66 0 0 0 -8.38 10.38 86.66 86.66 0 0 0 -6.75 11.45l-1.42 3-1.29 3.08c-.42 1-.78 2.08-1.18 3.11s-.7 2.11-1.14 3.14c-.8 2.08-1.87 4.11-2.81 6.22-.46 1.05-.85 2.13-1.21 3.22s-.57 2.21-.82 3.33a59.33 59.33 0 0 0 -1 6.78c-.11 1.15-.18 2.29-.21 3.44v.85a.83.83 0 0 1 -.05.32 2.91 2.91 0 0 1 -.5.68z"/><g fill="#64bb51"><path d="m827.89 262a150.38 150.38 0 0 1 -56.54 21.35c-45.23 7.17-81.47-8.55-104.89-18.71a234.3 234.3 0 0 1 -74.29-51 261.32 261.32 0 0 0 82.48 43.51c68.16 21.67 128.18 10.85 153.24 4.85z"/><path d="m866.21 240.88a141 141 0 0 1 18.79-31.75c7-8.95 19.25-24.56 40.53-35.76 28.63-15.09 58-14 71.21-12.63-23.75 3.46-40.56 10.48-50.94 15.8-16.17 8.26-28.65 19-53 40.11-11.45 10.02-20.59 18.53-26.59 24.23z"/><path d="m873 328.88a128.77 128.77 0 0 0 24.15 44.94c9.13 11.06 27.73 33.59 62.19 42.92 28.49 7.71 53.44 2.52 65.46-.85a131.26 131.26 0 0 1 -52.44-4.74c-24.56-7.6-39.64-20.92-58.87-37.92a280.91 280.91 0 0 1 -40.49-44.35z"/><path d="m840.74 232.35c-15.83-36.42-18.13-65.8-17-86.47.9-16.88 3.9-25.12 6.06-45.26a292.41 292.41 0 0 0 -3-83.16c-1.46 12.32-4 30.51-8.7 52.34-8.06 37.72-14.54 49.51-16.54 65.88-2.76 22.14 2.51 54.24 39.18 96.67z"/></g><path d="m830.12 566.1q14.63 3.12 30.53 5.55a521.61 521.61 0 0 0 94.35 5.55q-1.38 59.67-2.77 119.35a282.45 282.45 0 0 1 -131.83-11.11z" fill="#e2b459"/><path d="m828.5 563.92a10 10 0 0 1 2-.32 6.83 6.83 0 0 1 1.11 0 4.46 4.46 0 0 1 .54.06l.42.07 1.93.31 3.86.6c2.58.4 5.15.79 7.73 1.15 5.16.73 10.31 1.43 15.48 2 10.33 1.24 20.68 2.19 31 2.91s20.73 1.17 31.1 1.26 20.74 0 31.1-.37l5.84-.22-.11 5.91c-.19 9.95-.37 19.89-.64 29.84s-.56 19.93-.86 29.88l-2 59.66-.14 4-3.86.56a308.06 308.06 0 0 1 -33.78 3.06 288.22 288.22 0 0 1 -100.33-14.28l-3.58-1.17.31-3.78 1.25-15.38 1.39-15.39q1.43-15.4 3-30.75l1.63-15.26c.6-5 1.16-10.09 1.79-15.07 1.17-9.97 2.45-19.79 3.82-29.28zm3.24 4.36c-.26 10.4-.59 20.47-1 30.39l-.65 14.77-.78 14.56q-.91 14.5-1.91 28.93l-1 14.44-1.18 14.45-3.28-4.94a288.58 288.58 0 0 0 31.68 8.54 281.55 281.55 0 0 0 32.46 4.79 276.37 276.37 0 0 0 32.81.82c5.47-.19 10.93-.53 16.38-1s10.88-1.25 16.28-2.1l-4 4.55.72-59.69c.16-10 .24-19.9.46-29.84s.47-19.89.74-29.84l5.74 5.69q-15.87.35-31.74-.27c-5.29-.23-10.57-.53-15.84-.93s-10.54-.89-15.8-1.45c-10.51-1.15-21-2.69-31.36-4.54-5.19-1-10.37-2-15.52-3.12-2.58-.57-5.15-1.15-7.71-1.76l-3.84-1-1.92-.48c-.11 0-.07 0-.06 0h.06a.52.52 0 0 0 .15-.17 1.11 1.11 0 0 0 .11-.8z"/><path d="m865.5 616.25q14.64 3.12 30.53 5.55a520 520 0 0 0 94.37 5.55q-1.4 59.65-2.78 119.35a282.57 282.57 0 0 1 -131.83-11.1q4.86-59.67 9.71-119.35z" fill="#f9ca61"/><path d="m863.88 614.08a9.35 9.35 0 0 1 2-.33 6.86 6.86 0 0 1 1.11 0l.54.06.42.07 1.93.31 3.86.6c2.57.4 5.15.79 7.73 1.15 5.15.74 10.31 1.44 15.48 2 10.32 1.23 20.67 2.18 31 2.91s20.72 1.16 31.1 1.25 20.73 0 31.09-.36l5.85-.23-.11 5.91c-.19 9.95-.37 19.9-.65 29.84s-.62 19.89-.93 29.83l-2 59.66-.13 4-3.86.57a311 311 0 0 1 -33.78 3 288.53 288.53 0 0 1 -100.28-14.25l-3.56-1.07.31-3.77 1.25-15.39 1.4-15.39q1.41-15.39 3-30.75l1.63-15.26c.59-5 1.16-10.09 1.78-15.06 1.17-10 2.46-19.82 3.82-29.3zm3.24 4.35c-.25 10.4-.59 20.47-1 30.39l-.64 14.77-.8 14.58q-.9 14.49-1.9 28.92l-1 14.45-1.21 14.46-3.27-5a286.19 286.19 0 0 0 31.7 8.58 277.88 277.88 0 0 0 32.46 4.79 274.26 274.26 0 0 0 32.81.82c5.47-.19 10.94-.53 16.39-1.05s10.87-1.25 16.28-2.1l-4 4.55.73-59.69c.16-9.95.23-19.89.46-29.84s.46-19.89.74-29.84l5.73 5.69q-15.87.36-31.74-.26-7.92-.35-15.84-.94c-5.27-.36-10.54-.88-15.79-1.45-10.51-1.15-21-2.69-31.36-4.54-5.2-1-10.37-2-15.53-3.11q-3.85-.86-7.71-1.77l-3.83-1-1.92-.49c-.12 0-.08 0-.06 0h.06a.66.66 0 0 0 .15-.17 1.1 1.1 0 0 0 .09-.75z"/><path d="m876.27 645.76c7.9 0 15.7.38 23.48.85s15.52 1.08 23.26 1.74 15.48 1.41 23.22 2.24 15.49 1.79 23.27 3.19a176.61 176.61 0 0 1 -23.5 1.54c-7.84 0-15.68-.31-23.49-1s-15.58-1.68-23.31-3.06a177.59 177.59 0 0 1 -22.93-5.5z"/><path d="m879.28 678.84c7.9 0 15.7.38 23.47.85s15.53 1.08 23.27 1.74 15.47 1.41 23.22 2.25 15.49 1.78 23.27 3.18a176.72 176.72 0 0 1 -23.51 1.54q-11.76.06-23.49-1t-23.31-3a178.49 178.49 0 0 1 -22.92-5.56z"/><path d="m876.27 708.91c7.9 0 15.7.39 23.48.85s15.52 1.09 23.26 1.75 15.48 1.4 23.22 2.24 15.49 1.79 23.27 3.18a175 175 0 0 1 -23.5 1.54c-7.84 0-15.68-.3-23.49-1s-15.58-1.68-23.31-3.06a177.63 177.63 0 0 1 -22.93-5.5z"/><path d="m156.78 37.34q28.91 10.06 58.09 20 83 28.28 164.57 54.4l-122.44 289.71a731.32 731.32 0 0 1 -148.24-47.6c-21.6-9.59-41.53-19.7-59.82-29.93z" fill="#e6e7e8"/><path d="m154.08 31.56c9.89 2.91 19.93 5.88 30 9s20.12 6.45 30 9.87l55.8 18.7 111.22 37.32h.1a5.52 5.52 0 0 1 3.47 7c-.05.14-.1.29-.16.42l-30.91 72.32c-10.35 24.08-21.6 47.81-31.6 71.99q-7.56 18.13-14.84 36.4l-14.39 36.6-7.19 18.3-3.6 9.15-3.67 9.12q-3.64 9.13-7.41 18.2l-3.78 9.05-3.8 9.06a6.82 6.82 0 0 1 -7.65 4q-27.54-5.69-54.62-13.37c-18.05-5.09-35.84-11.08-53.41-17.64s-34.85-13.87-51.84-21.79-33.65-16.55-50-25.73a6.48 6.48 0 0 1 -2.88-7.95l27.56-72.58c9.2-24.22 18.16-48.67 27.43-72.93s18.67-48.36 28-72.47l14-36.1zm5.41 11.57-12.86 35.74-12.9 35.53c-8.62 23.66-17.17 47.32-25.88 70.83s-17.71 46.77-26.49 70.35l-26.3 70.63-2.91-8q24.14 13.41 49.28 24.88t51 21.06q12.94 4.79 26.06 9.07c8.76 2.8 17.53 5.6 26.37 8.14q26.5 7.69 53.55 13.38l-7.67 4 3.84-9 3.91-9q3.88-9 7.88-18l4-9 4.05-9 8.11-17.91 16.21-35.83q8-18 15.76-36c10.38-24 19.5-48.63 29.58-72.83l30.26-72.57 3.41 7.43-111.68-36.37-27.93-9.09-13.95-4.57-7-2.29-3.48-1.15-1.66-.56-1.61-.55c-8.58-3-17-6-25.45-9.25s-16.89-6.61-25.5-10.07z"/><path d="m114.33 63.45q28.89 10 58.08 20 83 28.27 164.57 54.41l-122.4 289.69a731.19 731.19 0 0 1 -148.25-47.55c-21.6-9.64-41.53-19.75-59.82-30z" fill="#f1f1f2"/><path d="m111.62 57.67c9.89 2.9 19.93 5.87 30 9s20.13 6.46 30 9.87l55.8 18.7 111.22 37.32h.1a5.52 5.52 0 0 1 3.47 7c0 .13-.1.28-.15.41l-30.95 72.28c-10.34 24.08-21.61 47.77-31.63 72q-7.56 18.15-14.84 36.4l-14.39 36.6-7.19 18.3-3.6 9.15-3.66 9.12q-3.65 9.13-7.42 18.21l-3.74 9.08-3.81 9.07a6.81 6.81 0 0 1 -7.64 4q-27.54-5.69-54.62-13.37c-18-5.09-35.84-11.08-53.4-17.64s-34.86-13.86-51.85-21.79-33.65-16.55-50-25.73a6.48 6.48 0 0 1 -2.89-7.95l27.57-72.63c9.19-24.22 18.16-48.67 27.42-72.93s18.68-48.36 28-72.47l14-36.1zm5.38 11.56-12.82 35.77-12.91 35.51c-8.62 23.65-17.17 47.31-25.88 70.82s-17.71 46.81-26.48 70.35l-26.3 70.63-2.92-8q24.14 13.44 49.31 24.92c16.75 7.61 33.76 14.68 51 21q12.94 4.79 26.07 9.07c8.76 2.81 17.52 5.6 26.36 8.14q26.51 7.71 53.55 13.38l-7.67 4 3.85-9 3.9-9q3.9-9 7.89-18l4-9 4.06-9 8.1-17.91 16.22-35.83q8-17.94 15.76-36c10.38-24.07 19.51-48.66 29.57-72.86l30.26-72.57 3.41 7.43-111.72-36.31-27.92-9.1-14-4.56-7-2.29-3.49-1.15-1.68-.56-1.52-.55c-8.58-3-17-6-25.45-9.25s-16.91-6.61-25.55-10.08z"/><path d="m122.09 86.17 190 62.57-16.32 44.88-189.55-63.47z" fill="#f9ca61"/><path d="m40.52 299.7a568.34 568.34 0 0 0 108.32 45.79 567.32 567.32 0 0 0 71.16 16.78q-7.71 22.44-15.41 44.88c-17.09-3.23-35.12-7.37-53.89-12.7a621.66 621.66 0 0 1 -125.17-50.77q7.47-21.99 14.99-43.98z" fill="#bbbdbf"/><path d="m85.63 181.27 189.19 64.42q-2.16 5.92-4.31 11.83l-189.51-63.47z" fill="#bbbdbf"/><path d="m74.74 213.79 189.2 64.42q-2.16 5.93-4.31 11.83l-189.5-63.47z" fill="#bbbdbf"/><path d="m210.08 239.31-177.08 9.69a5.85 5.85 0 0 0 -5.52 6.15l.39 7a5.83 5.83 0 0 0 6.13 5.51l177.1-9.66a9.38 9.38 0 0 0 8.84-9.86 9.36 9.36 0 0 0 -9.86-8.83z" fill="#f05a28"/><path d="m210.29 243.13-102.25 5c-8.52.37-17 .89-25.57 1s-17.06.32-25.57 1q-6.39.43-12.76 1l-6.37.61-3.19.3-.8.08h-.4-.19-.09a2.12 2.12 0 0 0 -.66.21 2.37 2.37 0 0 0 -1.33 2.08 1.62 1.62 0 0 0 0 .31l.06.69.15 1.6c.11 1.06.2 2.12.28 3.19l.13 1.59a2.29 2.29 0 0 0 .15.52 2 2 0 0 0 .63.8 1.8 1.8 0 0 0 .92.37h.24.14.39l1.6-.11c17-1 34.06-2 51.1-2.83l51.1-2.42c8.52-.44 17-.86 25.55-1.41s17-1.15 25.55-1.58l12.78-.66 6.38-.33 1.6-.09h.8.31.23a5.6 5.6 0 0 0 1.74-.5 5.41 5.41 0 0 0 2.88-6.2 5.51 5.51 0 0 0 -5.57-4.13zm-.42-7.65a13.28 13.28 0 0 1 6.68 25.13 13.65 13.65 0 0 1 -4.36 1.31l-.56.06h-.49-.8l-1.6.1-6.39.36-12.77.74c-8.52.49-17 .84-25.56 1.2s-17 .89-25.56 1.38l-51.09 3c-17 1.05-34.07 1.88-51.11 2.74l-1.59.07h-1.07a12.3 12.3 0 0 1 -1.35-.12 9.89 9.89 0 0 1 -4.84-2.23 9.57 9.57 0 0 1 -2.93-4.22 9.88 9.88 0 0 1 -.46-2.61l-.05-1.6c0-1.06 0-2.13-.07-3.2v-1.6-.99a9.4 9.4 0 0 1 6.19-8.83 9.11 9.11 0 0 1 2.45-.49h.31 1.41l3.2-.05 6.4-.08c4.27-.08 8.54-.19 12.8-.37 8.53-.26 17-1 25.53-1.79s17-1.18 25.53-1.74z"/><path d="m284.13 253.57c-3.43 1.18-6.79 2.54-10.18 3.81s-6.72 2.7-10.06 4.1l1.2-.29c-9.66.15-19.31.54-28.95 1.11s-19.27 1.41-28.88 2.69a2 2 0 0 0 .19 4.05c9.68.41 19.34.38 29 .1s19.29-.78 28.93-1.49h.19a2.61 2.61 0 0 0 1-.27q4.88-2.4 9.69-4.9c3.19-1.73 6.41-3.37 9.56-5.19a2 2 0 0 0 -1.69-3.7z" fill="#ee4036"/><path d="m284.85 255.65-10.13 3.71-10 4-1.28-3.89 1.2-.28.51 4-37.65 1.11c-3.13.2-6.25.57-9.35 1s-6.19 1-9.27 1.58l-1.15.22c-.29 0-.13 0-.15 0a.06.06 0 0 0 .06 0 .2.2 0 0 0 .14-.19.28.28 0 0 0 -.19-.25h.22.58 1.17c3.13.1 6.25.15 9.37.17 6.25 0 12.51 0 18.77-.17l18.79-.86 4.69-.28 2.35-.15 1.17-.07h.59.14l3.75-1.94 4.19-2.1c2.81-1.38 5.51-2.94 8.28-4.38l2.06-1.1.93-.5a.3.3 0 0 0 -.07.1.18.18 0 0 0 .28.27zm-1.43-4.15a4.26 4.26 0 0 1 3.72 7.59 3.11 3.11 0 0 1 -.36.21l-.26.15-.52.29-2.08 1.15-4.16 2.29c-1.39.77-2.78 1.53-4.2 2.24l-4.23 2.15-2.13 1.05-1.07.52-.53.26a5.32 5.32 0 0 1 -1 .37l-.53.1h-.45-.59l-1.19.05-2.36.09-4.73.21-18.91 1.08c-6.31.31-12.63.41-19 .36-3.17 0-6.33-.13-9.5-.26l-1.18-.05h-.6-.33l-.63-.09a4.37 4.37 0 0 1 -3.35-3.38 4.26 4.26 0 0 1 1.76-4.35 4.2 4.2 0 0 1 1.1-.55 4.67 4.67 0 0 1 1-.19l1.19-.09c3.16-.24 6.32-.42 9.48-.57s6.31-.37 9.45-.66l4.77-.47c1.56-.19 3.14-.36 4.71-.46 3.15-.2 6.3-.32 9.45-.48l18.9-.89a2 2 0 0 1 .59 4h-.07l-1.2.29a2 2 0 0 1 -1.28-3.88l10.09-4.19z"/><path d="m32.69 254.34 41.64-2.89 41.67-2.78c13.88-.93 27.75-2 41.64-2.65s27.8-1.24 41.72-1.38v.24c-13.85 1.47-27.73 2.45-41.6 3.47s-27.78 1.51-41.67 2.19l-41.69 2.08-41.68 2z" fill="#fff" opacity=".72"/><path d="m33.94 261.64 41.63-2.89 41.64-2.75c13.88-.93 27.75-2 41.65-2.66s27.79-1.23 41.72-1.37v.23c-13.85 1.48-27.72 2.46-41.6 3.48s-27.78 1.51-41.67 2.19l-41.68 2.08-41.63 1.92z" fill="#fff" opacity=".72"/><path d="m283 258.86-78 1.51-1.72-21.37 79.17-3.52h.06a11.69 11.69 0 0 1 10.55 6.21 11.72 11.72 0 0 1 -10.06 17.17z" fill="#ee4036"/><path d="m283 260.65c-6.5.19-13 .37-19.49.65l-19.49.92-19.49.95c-6.5.27-13 .51-19.49.68a3.46 3.46 0 0 1 -3.54-3.15v-.06c-.15-1.78-.34-3.56-.41-5.35s-.09-3.58 0-5.37l.12-5.39c0-1.8 0-3.59-.15-5.37v-.07a2.25 2.25 0 0 1 2.09-2.38h.08c2.42-.07 4.82-.48 7.24-.73s4.83-.21 7.25-.3l14.51-.37 7.25-.21 7.25-.28c4.83-.15 9.66-.52 14.49-1 2.41-.2 4.82-.45 7.24-.6s4.83-.26 7.25-.33l3.62-.11h1.82c.61 0 1.15-.05 1.95 0a14 14 0 0 1 7.69 25.22 13.47 13.47 0 0 1 -7.79 2.65zm-.07-3.58a9.62 9.62 0 0 0 9.08-6.93 9.4 9.4 0 0 0 -3.75-10.37 9.28 9.28 0 0 0 -5.32-1.6l-7.09.43c-2.41.14-4.83.26-7.24.31s-4.84 0-7.26.05c-4.83 0-9.67 0-14.49.32l-7.25.36-7.24.44-14.47.91c-2.41.12-4.82.4-7.24.35s-4.85-.24-7.26-.09l2.16-2.45c.17 1.78.41 3.56.69 5.33l1 5.3c.33 1.77.59 3.54.81 5.32s.3 3.56.42 5.35l-3.54-3.21c6.5-.09 13-.1 19.51-.08l19.51.2 19.51.17c6.45.02 12.95-.04 19.45-.11z"/><path d="m244.35 211.94-172.58-40.76a5.85 5.85 0 0 1 -4.34-7l1.62-6.85a5.84 5.84 0 0 1 7-4.34l172.58 40.76a9.36 9.36 0 0 1 7 11.26 9.36 9.36 0 0 1 -11.28 6.93z" fill="#25a9e0"/><path d="m243.47 215.67-99.47-24.11c-8.28-2.05-16.6-4-24.83-6.22s-16.46-4.51-24.81-6.27q-6.25-1.38-12.53-2.62l-6.29-1.22-3.14-.6-.79-.16-.39-.07h-.2l-.3-.08a9.12 9.12 0 0 1 -2.33-.92 9.31 9.31 0 0 1 -4.67-8.49 8 8 0 0 1 .14-1.29l.17-.88.3-1.58c.2-1 .41-2.09.64-3.13l.32-1.57a10 10 0 0 1 .91-2.48 9.59 9.59 0 0 1 3.67-3.83 9.87 9.87 0 0 1 5.13-1.38 12.09 12.09 0 0 1 1.35.12l.65.11.39.09 1.56.35c16.62 3.85 33.25 7.68 49.82 11.72l49.76 12c8.29 2 16.58 4 24.9 5.87s16.66 3.7 25 5.69l12.45 3 6.22 1.49 1.56.37.77.19.48.12.55.16a13.28 13.28 0 0 1 -7 25.61zm1.76-7.45a5.46 5.46 0 0 0 6.52-6.71 5.49 5.49 0 0 0 -2-3 5.89 5.89 0 0 0 -1.63-.8l-.22-.06-.3-.08-.78-.18-1.56-.37-6.26-1.44-12.46-2.9c-8.31-1.94-16.58-4-24.86-6.08s-16.59-4-24.9-5.89l-49.88-11.52c-16.63-3.8-33.21-7.81-49.8-11.8l-1.55-.39-.39-.1a.42.42 0 0 1 -.13 0c-.08 0-.16 0-.25 0a1.84 1.84 0 0 0 -1 .21 2 2 0 0 0 -.76.67 2 2 0 0 0 -.24.49l-.41 1.55q-.41 1.55-.84 3.09l-.43 1.54-.18.67a1.63 1.63 0 0 0 -.07.3 2.37 2.37 0 0 0 .94 2.29 2.53 2.53 0 0 0 .61.32h.08l.19.05.39.11.77.21 3.08.87 6.21 1.73c4.11 1.13 8.23 2.23 12.37 3.27 8.26 2.16 16.63 3.83 25 5.49s16.66 3.67 25 5.55z"/><path d="m319.76 211c-3.17-1.76-6.24-3.69-9.35-5.54s-6.14-3.84-9.18-5.81l1.13.5q-14.22-2.79-28.3-6.2c-9.38-2.28-18.71-4.8-27.94-7.75a2 2 0 0 1 .89-4c9.61 1.3 19.11 3 28.56 5s18.86 4.17 28.21 6.57l.19.05a2.73 2.73 0 0 1 .94.45c2.91 2.14 5.81 4.32 8.67 6.53s5.72 4.45 8.49 6.8a2 2 0 0 1 -2.31 3.33z" fill="#1b75bb"/><path d="m318.69 212.89-9.38-5.64-9.19-5.91a2.05 2.05 0 0 1 1.95-3.6l1.12.5h.07a2 2 0 0 1 -1.28 3.85l-18.46-4.22c-3.07-.71-6.15-1.38-9.21-2.14-1.53-.37-3.05-.82-4.56-1.28l-4.54-1.34c-3-.85-6.11-1.58-9.19-2.32s-6.16-1.44-9.23-2.23l-1.15-.3a5.08 5.08 0 0 1 -.95-.37 4.45 4.45 0 0 1 -1-.73 4.28 4.28 0 0 1 -1-4.59 4.37 4.37 0 0 1 3.9-2.74 4.42 4.42 0 0 1 .63 0l.33.05.59.07 1.18.16c3.13.44 6.27.91 9.39 1.42 6.24 1.07 12.44 2.29 18.6 3.71l18.42 4.4 4.62 1 2.31.51 1.15.26.58.13a3.46 3.46 0 0 1 .44.12 4.29 4.29 0 0 1 .5.19 5.72 5.72 0 0 1 .91.53l.48.36 1 .7 1.91 1.41 3.79 2.87c1.27.94 2.5 1.93 3.73 2.93l3.7 3 1.84 1.5.46.38.23.18a3.71 3.71 0 0 1 .31.28 4.18 4.18 0 0 1 1.22 2.11 4.25 4.25 0 0 1 -6.22 4.7zm2.14-3.83c-.1-.1-.3 0-.27.18a.22.22 0 0 0 .05.11l-.83-.65-1.84-1.45c-2.47-1.91-4.85-3.92-7.37-5.77l-3.75-2.81-3.35-2.57s0 0-.13 0l-.57-.14-1.15-.28-2.28-.56-4.61-1.12-18.34-4.16c-6.12-1.3-12.28-2.42-18.44-3.48-3.08-.54-6.17-1-9.26-1.49l-1.16-.17-.58-.08h-.25a.27.27 0 0 0 .23-.21.17.17 0 0 0 -.11-.21h-.05s-.13 0 .14.07l1.1.41q4.39 1.65 8.84 3.2c3 1 6 1.9 9 2.65l36.84 7.69-1.15 3.78-1.13-.49 1.94-3.6 9.17 5.72z"/><path d="m319.54 205.56-76.54-15.25-5.42 20.75 77.29 17.45h.13a11.72 11.72 0 0 0 11.49-4.25 11.72 11.72 0 0 0 -6.91-18.71z" fill="#1b75bb"/><path d="m319.19 207.32c-6.39-1.22-12.78-2.43-19.18-3.55l-19.24-3.27-19.23-3.26q-9.62-1.68-19.19-3.51l4.05-2.54c-.44 1.73-.85 3.48-1.36 5.19s-1.09 3.41-1.73 5.09l-1.88 5.05c-.6 1.69-1.15 3.4-1.62 5.12l-1.7-2.79c2.35.57 4.77.8 7.16 1.2s4.71 1.07 7.07 1.61l14.08 3.46 7.05 1.71 7.07 1.64c4.7 1.13 9.44 2 14.21 2.86 2.38.45 4.76.84 7.13 1.34s4.72 1 7.07 1.58l6.91 1.67a9.23 9.23 0 0 0 5.52-.63 9.39 9.39 0 0 0 5.52-9.55 9.64 9.64 0 0 0 -7.71-8.42zm.7-3.52a13.61 13.61 0 0 1 7.21 4 14 14 0 0 1 -12.1 23.47c-.8-.1-1.33-.24-1.93-.35l-1.78-.36-3.55-.75c-2.37-.5-4.73-1-7.08-1.61s-4.68-1.24-7-1.86c-4.67-1.3-9.35-2.52-14.09-3.52l-7.08-1.56-7.1-1.48-14.22-2.93c-2.36-.52-4.76-.89-7.08-1.58s-4.62-1.5-7-2a2.23 2.23 0 0 1 -1.74-2.64v-.07-.08c.43-1.74.78-3.49 1.09-5.26l.83-5.32c.27-1.78.61-3.54 1-5.29s.89-3.46 1.35-5.19v-.05a3.47 3.47 0 0 1 4-2.49q9.56 2 19.07 4.12l19 4.37 19 4.35c6.47 1.43 12.83 2.76 19.2 4.08z"/><path d="m468.08 418.13-11.34 11.33 98.38 94.3 10.88-11.76z" fill="#fff" opacity=".2"/><path d="m763.62 924.88a107.2 107.2 0 0 1 -97.78-67.29c-.6-1.62-1.26-3.22-1.81-4.87s-1.1-3.28-1.57-5-1-3.31-1.38-5-.81-3.36-1.13-5.06a106.47 106.47 0 0 1 -2-20.62 110.76 110.76 0 0 1 2-20.62c.3-1.7.71-3.38 1.06-5.08s.88-3.35 1.31-5c1-3.32 2.1-6.6 3.3-9.86.61-1.63 1.32-3.22 2-4.83s1.47-3.15 2.21-4.73l2.39-4.65c.83-1.54 1.73-3 2.6-4.55a107.66 107.66 0 0 1 28.43-31c1.46-1 2.9-2.08 4.38-3.06s3-2 4.56-2.82 3.12-1.75 4.72-2.55 3.21-1.6 4.85-2.32a102.46 102.46 0 0 1 20.48-6.55 109.32 109.32 0 0 1 21.42-2.11l5.38.13c1.79.12 3.59.26 5.37.41s3.57.47 5.35.71 3.53.64 5.3 1a103.78 103.78 0 0 1 20.44 6.44 108.81 108.81 0 0 1 63 122 106.46 106.46 0 0 1 -6.12 20c-.66 1.62-1.43 3.2-2.14 4.79s-1.58 3.13-2.37 4.69-1.71 3-2.56 4.58-1.86 3-2.78 4.45a108.39 108.39 0 0 1 -47.77 40 102.15 102.15 0 0 1 -41.17 8.4zm0-8.81a100 100 0 0 0 19.3-1.93 97.39 97.39 0 0 0 18.6-5.51 99.38 99.38 0 0 0 54.54-129.81 100.52 100.52 0 0 0 -191.57 18.56 99.54 99.54 0 0 0 -1.76 19.71 100 100 0 0 0 62.82 91.91 99.22 99.22 0 0 0 38.07 7.07z"/></svg>';

  // application/components/profile/UserContent.vue
  var __vue_script__38 = Vue.extend({
    name: "UserContent",
    props: {
      username: {
        type: String,
        required: true
      },
      authoredCount: {
        type: Number,
        required: true
      }
    },
    data() {
      return {
        contributionsEmptyImage: desk_default,
        selectedTab: this.authoredCount > 0 ? "authored" : ""
      };
    },
    methods: {
      refreshAnnotations(container) {
        this.$nextTick(() => {
          vue_mount_default("[data-mark-complete-wrapper]", MarkAsCompleteButtonWrapper_default, container);
        });
      }
    },
    components: {
      LoadMorePagination: LoadMorePagination_default,
      LoadingSkeletonList: LoadingSkeletonList_default
    }
  });
  var __vue_render__38 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      { staticClass: "c-profile__links l-overflow-hidden--mobile" },
      [
        _c("div", { staticClass: "l-overflow-x" }, [
          _c("ul", { staticClass: "c-tabs" }, [
            _vm.authoredCount > 0 ? _c(
              "li",
              {
                class: { "c-tabs--active": _vm.selectedTab === "authored" },
                on: {
                  click: function($event) {
                    _vm.selectedTab = "authored";
                  }
                }
              },
              [
                _vm._v(
                  "\n        Contributions (" + _vm._s(_vm.authoredCount) + ")\n      "
                )
              ]
            ) : _vm._e()
          ])
        ]),
        _vm._v(" "),
        _c(
          "div",
          {
            staticClass: "c-tutorial--list c-tutorial--mason c-tutorial--mason-large c-tutorial--contributor l-margin-21 l-padding-bottom-120"
          },
          [
            _c(
              "div",
              {
                staticClass: "c-profile__contributions u-hide",
                class: { "u-show": _vm.selectedTab === "authored" }
              },
              [
                _c("LoadMorePagination", {
                  attrs: {
                    contentUrl: "/u/" + _vm.username + "/authored",
                    listClass: "c-tutorial--list__page"
                  },
                  on: { contentUpdated: _vm.refreshAnnotations },
                  scopedSlots: _vm._u([
                    {
                      key: "noResults",
                      fn: function() {
                        return [
                          _c("div", { staticClass: "c-profile__empty" }, [
                            _c("img", {
                              staticClass: "l-margin-21",
                              attrs: { src: _vm.contributionsEmptyImage }
                            }),
                            _vm._v(" "),
                            _c("h4", { staticClass: "l-margin-21" }, [
                              _vm._v("No contributions")
                            ])
                          ])
                        ];
                      },
                      proxy: true
                    },
                    {
                      key: "loading",
                      fn: function() {
                        return [_c("LoadingSkeletonList")];
                      },
                      proxy: true
                    }
                  ])
                })
              ],
              1
            )
          ]
        )
      ]
    );
  };
  var __vue_staticRenderFns__38 = [];
  __vue_render__38._withStripped = true;
  var __vue_inject_styles__38 = function(inject) {
    if (!inject)
      return;
    inject("data-v-6101fadb_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "UserContent.vue" }, media: void 0 });
  };
  var __vue_scope_id__38 = void 0;
  var __vue_module_identifier__38 = void 0;
  var __vue_is_functional_template__38 = false;
  function __vue_normalize__38(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/profile/UserContent.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__22() {
    const styles = __vue_create_injector__22.styles || (__vue_create_injector__22.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__38 = /* @__PURE__ */ __vue_normalize__38(
    { render: __vue_render__38, staticRenderFns: __vue_staticRenderFns__38 },
    __vue_inject_styles__38,
    __vue_script__38,
    __vue_scope_id__38,
    __vue_is_functional_template__38,
    __vue_module_identifier__38,
    false,
    __vue_create_injector__22,
    void 0,
    void 0
  );
  var UserContent_default = __vue_component__38;

  // application/components/profile/UserContent+kodeco.vue
  var __vue_script__39 = Vue.extend({
    name: "UserContent_Kodeco",
    props: {
      username: {
        type: String,
        required: true
      },
      authoredCount: {
        type: Number,
        required: true
      }
    },
    data() {
      return {
        contributionsEmptyImage: desk_default,
        selectedTab: this.authoredCount > 0 ? "authored" : ""
      };
    },
    methods: {
      refreshAnnotations(container) {
        this.$nextTick(() => {
          vue_mount_default("[data-mark-complete-wrapper]", MarkAsCompleteButtonWrapper_default, container);
        });
      }
    },
    components: {
      LoadMorePagination: LoadMorePagination_default,
      KodecoLoadingSkeleton: KodecoLoadingSkeleton_default
    }
  });
  var __vue_render__39 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "div",
      [
        _c("LoadMorePagination", {
          attrs: {
            contentUrl: "/u/" + _vm.username + "/authored",
            listClass: "mt-16 display-grid grid-gap-16"
          },
          on: { contentUpdated: _vm.refreshAnnotations },
          scopedSlots: _vm._u([
            {
              key: "noResults",
              fn: function() {
                return [
                  _c("div", { staticClass: "c-profile__empty" }, [
                    _c("img", {
                      staticClass: "my-24",
                      attrs: { src: _vm.contributionsEmptyImage }
                    }),
                    _vm._v(" "),
                    _c("h4", { staticClass: "mt-24" }, [
                      _vm._v("No contributions")
                    ])
                  ])
                ];
              },
              proxy: true
            },
            {
              key: "loading",
              fn: function() {
                return [
                  _c(
                    "div",
                    { staticClass: "w-742" },
                    [_c("KodecoLoadingSkeleton")],
                    1
                  )
                ];
              },
              proxy: true
            }
          ])
        })
      ],
      1
    );
  };
  var __vue_staticRenderFns__39 = [];
  __vue_render__39._withStripped = true;
  var __vue_inject_styles__39 = function(inject) {
    if (!inject)
      return;
    inject("data-v-ccf159de_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "UserContent+kodeco.vue" }, media: void 0 });
  };
  var __vue_scope_id__39 = void 0;
  var __vue_module_identifier__39 = void 0;
  var __vue_is_functional_template__39 = false;
  function __vue_normalize__39(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/profile/UserContent+kodeco.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__23() {
    const styles = __vue_create_injector__23.styles || (__vue_create_injector__23.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__39 = /* @__PURE__ */ __vue_normalize__39(
    { render: __vue_render__39, staticRenderFns: __vue_staticRenderFns__39 },
    __vue_inject_styles__39,
    __vue_script__39,
    __vue_scope_id__39,
    __vue_is_functional_template__39,
    __vue_module_identifier__39,
    false,
    __vue_create_injector__23,
    void 0,
    void 0
  );
  var UserContent_kodeco_default = __vue_component__39;

  // application/components/elements/Flash.vue
  var __vue_script__40 = Vue.extend({
    name: "flash",
    data() {
      return {
        timeout: null,
        variant: "danger",
        message: null
      };
    },
    props: {
      transitionName: {
        type: String,
        default: "custom-classes-transition"
      },
      transitionIn: {
        type: String,
        default: "animated animated--half a-slide-in-up"
      },
      transitionOut: {
        type: String,
        default: "animated animated--half a-slide-out-down"
      },
      duration: {
        type: Number,
        default: 3e3
      },
      autoHide: {
        type: Boolean,
        default: false
      }
    },
    computed: {
      variantClass() {
        return `notification toast`;
      },
      show() {
        return this.message !== null;
      }
    },
    watch: {
      message(newVal) {
        if (newVal !== null && this.autoHide) {
          this.autoClose();
        }
      }
    },
    methods: {
      closeFlash() {
        this.clearFlash();
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
      },
      clearFlash() {
        this.message = null;
      },
      autoClose() {
        if (this.timeout !== null) {
          clearTimeout(this.timeout);
        }
        this.timeout = setTimeout(() => this.closeFlash(), this.duration);
      }
    },
    created() {
      EventBus.$on(FLASH_ERROR, (message, autoDismiss = false) => {
        this.message = message;
        this.variant = "danger";
        if (autoDismiss) {
          this.autoClose();
        }
      });
      EventBus.$on(FLASH_WARNING, (message, autoDismiss = false) => {
        this.message = message;
        this.variant = "warning";
        if (autoDismiss) {
          this.autoClose();
        }
      });
      EventBus.$on(FLASH_SUCCESS, (message, autoDismiss = false) => {
        this.message = message;
        this.variant = "success";
        if (autoDismiss) {
          this.autoClose();
        }
      });
      EventBus.$on(FLASH_CLEAR, () => {
        this.message = null;
      });
    },
    destroyed() {
      if (this.timeout !== null) {
        clearTimeout(this.timeout);
      }
    }
  });
  var __vue_render__40 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      "transition",
      {
        attrs: {
          name: _vm.transitionName,
          "enter-active-class": _vm.transitionIn,
          "leave-active-class": _vm.transitionOut
        }
      },
      [
        _vm.show ? _c(
          "div",
          {
            class: _vm.variantClass,
            attrs: {
              role: "alert",
              "aria-live": "polite",
              "aria-atomic": "true"
            }
          },
          [
            _c("p", [_vm._v(_vm._s(_vm.message))]),
            _vm._v(" "),
            _c(
              "button",
              {
                staticClass: "notification--delete btn-iconsm",
                attrs: {
                  type: "button",
                  "data-dismiss": "alert",
                  "aria-label": "delete"
                },
                on: {
                  click: function($event) {
                    $event.stopPropagation();
                    $event.preventDefault();
                    return _vm.closeFlash.apply(null, arguments);
                  }
                }
              },
              [
                _c("span", { attrs: { "aria-hidden": "true" } }, [
                  _c("svg", { staticClass: "icon" }, [
                    _c("use", { attrs: { "xlink:href": "#x-close" } })
                  ])
                ])
              ]
            )
          ]
        ) : _vm._e()
      ]
    );
  };
  var __vue_staticRenderFns__40 = [];
  __vue_render__40._withStripped = true;
  var __vue_inject_styles__40 = void 0;
  var __vue_scope_id__40 = void 0;
  var __vue_module_identifier__40 = void 0;
  var __vue_is_functional_template__40 = false;
  function __vue_normalize__40(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/Flash.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__40 = /* @__PURE__ */ __vue_normalize__40(
    { render: __vue_render__40, staticRenderFns: __vue_staticRenderFns__40 },
    __vue_inject_styles__40,
    __vue_script__40,
    __vue_scope_id__40,
    __vue_is_functional_template__40,
    __vue_module_identifier__40,
    false,
    void 0,
    void 0,
    void 0
  );
  var Flash_default = __vue_component__40;

  // application/tools/dismissible/index.ts
  var COOKIE_NAME = "rw-carolus-promotions";
  var getCookieJSON = (key) => get(key, JSON.parse);
  var setCookieJSON = (key, value, options = {}) => {
    set(key, value, JSON.stringify, options);
  };
  function dismissible_default(container = document) {
    const elements = Array.from(container.querySelectorAll("[data-dismissible]"));
    elements.forEach((element) => {
      const el = element;
      const promotion = el.dataset.dismissiblePromotion;
      const eventUri = el.dataset.dismissibleEventUri;
      const eventName = el.dataset.dismissibleEventName;
      if (promotionPreviouslyDismissed(promotion)) {
        hideElement(el);
      }
      const buttons = el.querySelectorAll("[data-dismissible-button]");
      Array.from(buttons).forEach((button) => {
        button.addEventListener("click", () => {
          dismissElement(el, { promotion, eventUri, eventName });
        });
      });
    });
  }
  var dismissElement = (element, config2) => {
    storePromotionDismissed(config2);
    sendDismissedEvent(config2);
    hideElement(element);
  };
  var hideElement = (element) => {
    element.style.display = "none";
  };
  var promotionPreviouslyDismissed = (promotion) => {
    if (!promotion || promotion === "") {
      return false;
    }
    const cookieContent = getCookieJSON(COOKIE_NAME);
    if (!cookieContent || !cookieContent[promotion]) {
      return false;
    }
    return cookieContent[promotion];
  };
  var storePromotionDismissed = ({ promotion }) => {
    if (!promotion || promotion === "") {
      return;
    }
    const cookieContent = getCookieJSON(COOKIE_NAME) || {};
    cookieContent[promotion] = true;
    setCookieJSON(COOKIE_NAME, cookieContent, { expires: "10Y" });
  };
  var sendDismissedEvent = ({ eventUri, eventName }) => {
    if (!eventUri || eventUri === "" || !eventName || eventName === "") {
      return false;
    }
    const data = new FormData();
    data.append("event_name", eventName);
    Rails.ajax({
      data,
      url: eventUri,
      type: "PUT",
      dataType: "json",
      accept: "json",
      error: (response, status, xhr) => {
        console.error(`There was a problem sending the dismissal notification: ${response}`);
      }
    });
  };

  // ../../node_modules/vue-scrollactive/src/scrollactive.vue
  var import_bezier_easing = __toESM(require_src());

  // ../../node_modules/vue-scrollactive/src/ScrollContainer.js
  var ScrollContainer = class {
    constructor(containerSelector) {
      let container = window;
      if (containerSelector) {
        container = document.querySelector(containerSelector) || window;
      }
      this.container = container;
    }
    addScrollListener(callback) {
      this.scrollListenerCallback = callback;
      this.container.addEventListener("scroll", callback);
    }
    removeScrollListener() {
      this.container.removeEventListener("scroll", this.scrollListenerCallback);
    }
    getDistanceFromTop() {
      return this.container.scrollTop || this.container.pageYOffset;
    }
    scrollTo(x, y) {
      return this.container.scrollTo(x, y);
    }
    getOffsetTop() {
      return this.container.offsetTop;
    }
  };

  // ../../node_modules/vue-scrollactive/src/utils/forEach.js
  var forEach = (list, callback) => [].forEach.call(list, callback);

  // ../../node_modules/vue-scrollactive/src/utils/getIdFromHash.js
  var getIdFromHash = (hash) => decodeURI(hash.substr(1));

  // ../../node_modules/vue-scrollactive/src/utils/pushHashToUrl.js
  var pushHashToUrl = (hash) => {
    if (window.history.pushState) {
      window.history.pushState(null, null, hash);
      return;
    }
    window.location.hash = hash;
  };

  // ../../node_modules/vue-scrollactive/src/utils/getSectionSelector.js
  var getSectionSelector = (element) => {
    if (element.dataset.sectionSelector)
      return element.dataset.sectionSelector;
    if (element.hash)
      return `#${getIdFromHash(element.hash)}`;
    return "";
  };

  // ../../node_modules/vue-scrollactive/src/utils/getSectionIdFromElement.js
  var getSectionIdFromElement = (element) => {
    if (element.dataset.sectionSelector && element.dataset.sectionSelector.substr(0, 1) === "#") {
      return element.dataset.sectionSelector;
    }
    return element.hash;
  };

  // ../../node_modules/vue-scrollactive/src/scrollactive.vue
  var __vue_script__41 = {
    props: {
      activeClass: {
        type: String,
        default: "is-active"
      },
      offset: {
        type: Number,
        default: 20
      },
      scrollOffset: {
        type: Number,
        default: null
      },
      scrollContainerSelector: {
        type: String,
        default: ""
      },
      clickToScroll: {
        type: Boolean,
        default: true
      },
      duration: {
        type: Number,
        default: 600
      },
      alwaysTrack: {
        type: Boolean,
        default: false
      },
      bezierEasingValue: {
        type: String,
        default: ".5,0,.35,1"
      },
      modifyUrl: {
        type: Boolean,
        default: true
      },
      exact: {
        type: Boolean,
        default: false
      },
      highlightFirstItem: {
        type: Boolean,
        default: false
      },
      tag: {
        type: String,
        default: "nav"
      },
      scrollOnStart: {
        type: Boolean,
        default: true
      }
    },
    data() {
      return {
        observer: null,
        items: [],
        currentItem: null,
        lastActiveItem: null,
        scrollAnimationFrame: null,
        bezierEasing: import_bezier_easing.default
      };
    },
    computed: {
      cubicBezierArray() {
        return this.bezierEasingValue.split(",");
      },
      scrollContainer() {
        return new ScrollContainer(this.scrollContainerSelector);
      }
    },
    mounted() {
      this.resetOnDOMChange();
      this.initScrollactiveItems();
      this.removeActiveClass();
      this.currentItem = this.getItemInsideWindow();
      if (this.currentItem)
        this.currentItem.classList.add(this.activeClass);
      if (this.scrollOnStart)
        this.scrollToHashElement();
      this.scrollContainer.addScrollListener(this.onScroll);
    },
    updated() {
      this.initScrollactiveItems();
    },
    beforeDestroy() {
      this.scrollContainer.removeScrollListener();
      window.cancelAnimationFrame(this.scrollAnimationFrame);
    },
    methods: {
      resetOnDOMChange() {
        const MutationObserver2 = window.MutationObserver || window.WebKitMutationObserver;
        if (!this.observer) {
          this.observer = new MutationObserver2(this.initScrollactiveItems);
          this.observer.observe(this.$refs["scrollactive-nav-wrapper"], {
            childList: true,
            subtree: true
          });
        }
      },
      initScrollactiveItems() {
        const elements = this.$el.querySelectorAll(".scrollactive-item");
        const items = [];
        forEach(elements, (menuElement) => {
          const section = document.querySelector(getSectionSelector(menuElement));
          if (!section)
            return;
          items.push({ section, menuElement });
        });
        this.items = items;
        if (this.clickToScroll) {
          forEach(elements, (element) => element.addEventListener("click", this.onMenuItemClick));
        } else {
          forEach(elements, (element) => element.removeEventListener("click", this.onMenuItemClick));
        }
      },
      onScroll(event) {
        this.currentItem = this.getItemInsideWindow();
        const sectionHasChanged = this.currentItem !== this.lastActiveItem;
        if (sectionHasChanged) {
          this.removeActiveClass();
          this.$emit("itemchanged", event, this.currentItem, this.lastActiveItem);
          this.lastActiveItem = this.currentItem;
        }
        if (this.currentItem)
          this.currentItem.classList.add(this.activeClass);
      },
      getItemInsideWindow() {
        let currentItem;
        forEach(this.items, ({ menuElement, section }, index2) => {
          const isFirstItem = index2 === 0;
          const distanceFromTop = this.scrollContainer.getDistanceFromTop();
          const targetOffsetTop = this.getOffsetTop(section) - this.offset;
          const isScreenPastSectionStart = distanceFromTop >= targetOffsetTop;
          const isScreenBeforeSectionEnd = distanceFromTop < targetOffsetTop + section.offsetHeight;
          const isScreenInsideSection = isScreenPastSectionStart && isScreenBeforeSectionEnd;
          if (isFirstItem && this.highlightFirstItem) {
            if (isScreenBeforeSectionEnd)
              currentItem = menuElement;
          }
          if (this.exact && isScreenInsideSection)
            currentItem = menuElement;
          if (!this.exact && isScreenPastSectionStart)
            currentItem = menuElement;
        });
        return currentItem;
      },
      async onMenuItemClick(event) {
        event.preventDefault();
        const menuItem = event.target;
        const sectionSelector = getSectionSelector(menuItem);
        const section = document.querySelector(sectionSelector);
        if (!section) {
          console.warn(
            `[vue-scrollactive] Element '${sectionSelector}' was not found. Make sure it is set in the DOM.`
          );
          return;
        }
        if (!this.alwaysTrack) {
          this.scrollContainer.removeScrollListener();
          window.cancelAnimationFrame(this.scrollAnimationFrame);
          this.removeActiveClass();
          menuItem.classList.add(this.activeClass);
        }
        await this.scrollTo(section);
        if (!this.alwaysTrack) {
          this.scrollContainer.addScrollListener(this.onScroll);
          this.currentItem = menuItem;
          if (this.currentItem !== this.lastActiveItem) {
            this.$emit("itemchanged", event, this.currentItem, this.lastActiveItem);
            this.lastActiveItem = this.currentItem;
          }
        }
        if (this.modifyUrl) {
          pushHashToUrl(getSectionIdFromElement(menuItem));
        }
      },
      scrollTo(target2) {
        return new Promise((resolve) => {
          const targetDistanceFromTop = this.getOffsetTop(target2);
          const startingY = this.scrollContainer.getDistanceFromTop();
          const distanceFromTarget = targetDistanceFromTop - startingY;
          const easing = this.bezierEasing(...this.cubicBezierArray);
          let startingTime = null;
          const step = (currentTime) => {
            if (!startingTime)
              startingTime = currentTime;
            let progress = currentTime - startingTime;
            let progressPercentage = progress / this.duration;
            if (progress >= this.duration)
              progress = this.duration;
            if (progressPercentage >= 1)
              progressPercentage = 1;
            const offset = this.scrollOffset || this.offset;
            const perTick = startingY + easing(progressPercentage) * (distanceFromTarget - offset);
            this.scrollContainer.scrollTo(0, perTick);
            if (progress < this.duration) {
              this.scrollAnimationFrame = window.requestAnimationFrame(step);
            } else {
              resolve();
            }
          };
          window.requestAnimationFrame(step);
        });
      },
      getOffsetTop(element) {
        let yPosition = 0;
        let nextElement = element;
        while (nextElement) {
          yPosition += nextElement.offsetTop;
          nextElement = nextElement.offsetParent;
        }
        if (this.scrollContainer.getOffsetTop()) {
          yPosition -= this.scrollContainer.getOffsetTop();
        }
        return yPosition;
      },
      removeActiveClass() {
        forEach(this.items, ({ menuElement }) => {
          menuElement.classList.remove(this.activeClass);
        });
      },
      scrollToHashElement() {
        const { hash } = window.location;
        if (!hash)
          return;
        const hashElement = document.getElementById(getIdFromHash(hash));
        if (!hashElement)
          return;
        window.location.hash = "";
        setTimeout(() => {
          const yPos = hashElement.offsetTop - this.offset;
          this.scrollContainer.scrollTo(0, yPos);
          pushHashToUrl(hash);
        }, 0);
      }
    }
  };
  var __vue_render__41 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c(
      _vm.tag,
      {
        ref: "scrollactive-nav-wrapper",
        tag: "component",
        staticClass: "scrollactive-nav"
      },
      [_vm._t("default")],
      2
    );
  };
  var __vue_staticRenderFns__41 = [];
  __vue_render__41._withStripped = true;
  var __vue_inject_styles__41 = void 0;
  var __vue_scope_id__41 = void 0;
  var __vue_module_identifier__41 = void 0;
  var __vue_is_functional_template__41 = false;
  function __vue_normalize__41(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "node_modules/vue-scrollactive/src/scrollactive.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__41 = /* @__PURE__ */ __vue_normalize__41(
    { render: __vue_render__41, staticRenderFns: __vue_staticRenderFns__41 },
    __vue_inject_styles__41,
    __vue_script__41,
    __vue_scope_id__41,
    __vue_is_functional_template__41,
    __vue_module_identifier__41,
    false,
    void 0,
    void 0,
    void 0
  );
  var scrollactive_default = __vue_component__41;

  // application/components/elements/Affix.vue
  var __vue_script__42 = {
    props: {
      relativeElementSelector: {
        type: String,
        required: true
      },
      offset: {
        type: Object,
        default() {
          return {
            top: 40,
            bottom: 40
          };
        }
      },
      enabled: {
        type: Boolean,
        default: true
      },
      scrollAffix: {
        type: Boolean,
        default: false
      }
    },
    computed: {
      relativeElement() {
        return document.querySelector(this.relativeElementSelector);
      }
    },
    data() {
      return {
        affixHeight: null,
        affixBottomPos: null,
        affixRect: null,
        relativeElmBottomPos: null,
        relativeElmOffsetTop: null,
        topPadding: null,
        lastState: null,
        currentState: null,
        currentScrollAffix: null,
        distanceFromTop: window.pageYOffset,
        lastDistanceFromTop: window.pageYOffset,
        scrollingUp: null,
        scrollingDown: null
      };
    },
    methods: {
      setDynamicVariables() {
        this.distanceFromTop = window.pageYOffset;
        this.affixRect = this.$el.getBoundingClientRect();
        this.affixHeight = this.$el.offsetHeight;
        this.affixBottomPos = this.distanceFromTop + this.affixRect.bottom;
        this.screenBottomPos = this.distanceFromTop + window.innerHeight;
        this.relativeElmBottomPos = this.distanceFromTop + this.relativeElement.getBoundingClientRect().bottom;
        this.relativeElmOffsetTop = this.getOffsetTop(this.relativeElement);
      },
      onScroll() {
        if (!this.enabled) {
          this.removeClasses();
          return;
        }
        this.setDynamicVariables();
        if (this.affixHeight + this.offset.top >= this.relativeElement.offsetHeight) {
          return;
        }
        this.handleAffix();
      },
      handleAffix() {
        if (this.scrollAffix && this.affixHeight > window.innerHeight) {
          this.setScrollingDirection();
          if (this.currentScrollAffix === "scrollaffix-top") {
            if (this.distanceFromTop + this.offset.top >= this.affixInitialTop) {
              this.setScrollAffixScrolling();
            }
          }
          if (this.scrollingDown && this.currentScrollAffix === "scrollaffix-scrolling") {
            if (this.screenBottomPos >= this.affixBottomPos + this.offset.bottom && this.screenBottomPos < this.relativeElmBottomPos) {
              this.setScrollAffixDown();
            }
          }
          if (this.scrollingUp && this.currentScrollAffix === "scrollaffix-scrolling") {
            if (this.distanceFromTop + this.offset.top + this.topPadding < this.affixRect.top + this.distanceFromTop) {
              this.setScrollAffixUp();
            }
          }
          if (this.scrollingDown && this.currentScrollAffix === "scrollaffix-down") {
            if (this.screenBottomPos >= this.relativeElmBottomPos + this.offset.bottom) {
              this.setScrollAffixBottom();
            }
          }
          if (this.currentScrollAffix === "scrollaffix-bottom" && this.screenBottomPos < this.relativeElmBottomPos) {
            this.setScrollAffixScrolling();
          }
          if (this.scrollingUp && this.currentScrollAffix === "scrollaffix-down" || this.scrollingDown && this.currentScrollAffix === "scrollaffix-up") {
            this.setScrollAffixScrolling();
          }
          if (this.scrollingUp && this.currentScrollAffix === "scrollaffix-up" && this.distanceFromTop < this.relativeElmOffsetTop - this.offset.top) {
            this.setScrollAffixTop();
          }
          this.lastScrollAffixState = this.currentScrollAffix;
          this.lastDistanceFromTop = this.distanceFromTop;
          return;
        }
        if (this.distanceFromTop < this.relativeElmOffsetTop - this.offset.top) {
          this.setAffixTop();
        }
        if (this.distanceFromTop >= this.relativeElmOffsetTop - this.offset.top && this.relativeElmBottomPos - this.offset.bottom >= this.distanceFromTop + this.topPadding + this.affixHeight + this.offset.top) {
          this.setAffix();
        }
        if (this.relativeElmBottomPos - this.offset.bottom < this.distanceFromTop + this.topPadding + this.affixHeight + this.offset.top) {
          this.setAffixBottom();
        }
        this.lastState = this.currentState;
      },
      initScrollAffix() {
        if (this.distanceFromTop < this.affixInitialTop - this.offset.top) {
          this.setScrollAffixTop();
        } else if (this.screenBottomPos >= this.affixBottomPos + this.offset.bottom && this.screenBottomPos < this.relativeElmBottomPos) {
          this.setScrollAffixDown();
        } else if (this.screenBottomPos >= this.relativeElmBottomPos) {
          this.setScrollAffixBottom();
        } else {
          this.setScrollAffixScrolling();
        }
      },
      setScrollAffixScrolling() {
        this.currentScrollAffix = "scrollaffix-scrolling";
        this.$el.style.top = `${this.affixRect.top + this.distanceFromTop - this.affixInitialTop}px`;
        this.$el.style.bottom = "auto";
        this.removeClasses();
        this.emitEvent();
      },
      setScrollAffixUp() {
        this.currentScrollAffix = "scrollaffix-up";
        if (this.currentScrollAffix !== this.lastState) {
          this.$el.style.top = `${this.topPadding + this.offset.top}px`;
          this.$el.style.bottom = "auto";
          this.removeClasses();
          this.emitEvent();
          this.$el.classList.add("affix");
        }
      },
      setScrollAffixDown() {
        this.currentScrollAffix = "scrollaffix-down";
        if (this.currentScrollAffix !== this.lastState) {
          this.$el.style.bottom = `${this.offset.bottom}px`;
          this.$el.style.top = "auto";
          this.removeClasses();
          this.emitEvent();
          this.$el.classList.add("affix");
        }
      },
      setScrollAffixTop() {
        this.currentScrollAffix = "scrollaffix-top";
        this.$el.style.top = 0;
        this.$el.style.bottom = "auto";
        this.removeClasses();
        this.emitEvent();
      },
      setScrollAffixBottom() {
        this.currentScrollAffix = "scrollaffix-bottom";
        this.$el.style.top = `${this.relativeElmBottomPos - this.affixInitialTop - this.affixHeight}px`;
        this.$el.style.bottom = "auto";
        this.removeClasses();
        this.emitEvent();
      },
      setScrollingDirection() {
        if (this.distanceFromTop > this.lastDistanceFromTop) {
          this.scrollingDown = true;
          this.scrollingUp = false;
        } else {
          this.scrollingUp = true;
          this.scrollingDown = false;
        }
      },
      setAffixTop() {
        this.currentState = "affix-top";
        if (this.currentState !== this.lastState) {
          this.emitEvent();
          this.removeClasses();
          this.$el.classList.remove("affix");
          this.$el.classList.add("affix-top");
          this.$el.style.top = null;
        }
      },
      setAffix() {
        this.currentState = "affix";
        this.$el.style.top = `${this.topPadding + this.offset.top}px`;
        if (this.currentState !== this.lastState) {
          this.emitEvent();
          this.removeClasses();
          this.$el.classList.add("affix");
        }
      },
      setAffixBottom() {
        this.currentState = "affix-bottom";
        this.$el.style.top = `${this.relativeElement.offsetHeight - this.affixHeight - this.offset.bottom - this.topPadding}px`;
        if (this.currentState !== this.lastState) {
          this.emitEvent();
          this.removeClasses();
          this.$el.classList.add("affix-bottom");
        }
      },
      removeClasses() {
        this.$el.classList.remove("affix-top");
        this.$el.classList.remove("affix");
        this.$el.classList.remove("affix-bottom");
      },
      emitEvent() {
        if (this.scrollAffix && this.lastScrollAffixState) {
          this.$emit(this.currentScrollAffix.replace("-", ""));
        }
        if (this.lastState) {
          this.$emit(this.currentState.replace("-", ""));
        }
      },
      getOffsetTop(element) {
        let yPosition = 0;
        let nextElement = element;
        while (nextElement) {
          yPosition += nextElement.offsetTop;
          nextElement = nextElement.offsetParent;
        }
        return yPosition;
      }
    },
    mounted() {
      this.$el.classList.add("vue-affix");
      this.affixInitialTop = this.getOffsetTop(this.$el);
      this.topPadding = this.affixInitialTop - this.getOffsetTop(this.relativeElement);
      this.setDynamicVariables();
      if (this.scrollAffix)
        this.initScrollAffix();
      this.onScroll();
      window.addEventListener("scroll", this.onScroll);
    },
    beforeDestroy() {
      window.removeEventListener("scroll", this.onScroll);
    }
  };
  var __vue_render__42 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [_vm._t("default")], 2);
  };
  var __vue_staticRenderFns__42 = [];
  __vue_render__42._withStripped = true;
  var __vue_inject_styles__42 = function(inject) {
    if (!inject)
      return;
    inject("data-v-6bb46fe0_0", { source: "\n.vue-affix {\n  position: relative;\n}\n.affix {\n  position: fixed;\n  width: 270px;\n  top: 10px !important;\n  height: 100vh;\n  overflow-y: scroll;\n  overflow: -moz-scrollbars-none;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n.affix::-webkit-scrollbar {\n  width: 0 !important\n}\n.affix-bottom {\n  position: relative;\n}\n", map: { "version": 3, "sources": ["app/javascript/application/components/elements/Affix.vue"], "names": [], "mappings": ";AA4YA;EACA,kBAAA;AACA;AAEA;EACA,eAAA;EACA,YAAA;EACA,oBAAA;EACA,aAAA;EACA,kBAAA;EACA,8BAAA;EACA,wBAAA;EACA,qBAAA;AACA;AAEA;EACA;AACA;AAEA;EACA,kBAAA;AACA", "file": "Affix.vue", "sourcesContent": ["<template>\n  <div>\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    /**\n     * The relative element selector string. The relative element is\n     * the element you want your affix to be related to, as it will\n     * not be related to the window. The element will be affixed when\n     * the window reaches the relative element.\n     *\n     * @example '#contact'\n     * @type {String}\n     */\n    relativeElementSelector: {\n      type: String,\n      required: true,\n    },\n\n    /**\n     * This is the offset margin between the top/bottom of the window\n     * before the affix is applied.\n     *\n     * @type {Object}\n     */\n    offset: {\n      type: Object,\n      default() {\n        return {\n          top: 40,\n          bottom: 40,\n        };\n      },\n    },\n\n    /**\n     * Checks if the plugin should be enabled/disabled based\n     * on true/false, good for conditional rendering like\n     * mobile behavior.\n     *\n     * @type {Boolean}\n     */\n    enabled: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Sets if the affix should be 'scrollable' when it is\n     * taller than the viewport or if it should always be\n     * affixed to the top until it reaches the end of the\n     * relative element.\n     *\n     * @type {Boolean}\n     */\n    scrollAffix: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  computed: {\n    /**\n     * Computes the relative element selector to an element.\n     *\n     * @return {Element} document.querySelector(this.relativeElementSelector)\n     */\n    relativeElement() {\n      return document.querySelector(this.relativeElementSelector);\n    },\n  },\n\n  data() {\n    return {\n      affixHeight: null,\n      affixBottomPos: null,\n      affixRect: null,\n      relativeElmBottomPos: null,\n      relativeElmOffsetTop: null,\n      topPadding: null,\n      lastState: null,\n      currentState: null,\n      currentScrollAffix: null,\n      distanceFromTop: window.pageYOffset,\n      lastDistanceFromTop: window.pageYOffset,\n      scrollingUp: null,\n      scrollingDown: null,\n    };\n  },\n\n  methods: {\n    setDynamicVariables() {\n      this.distanceFromTop = window.pageYOffset;\n      this.affixRect = this.$el.getBoundingClientRect();\n      this.affixHeight = this.$el.offsetHeight;\n      this.affixBottomPos = this.distanceFromTop + this.affixRect.bottom;\n      this.screenBottomPos = this.distanceFromTop + window.innerHeight;\n      this.relativeElmBottomPos = this.distanceFromTop\n      + this.relativeElement.getBoundingClientRect().bottom;\n      this.relativeElmOffsetTop = this.getOffsetTop(this.relativeElement);\n    },\n\n    onScroll() {\n      if (!this.enabled) {\n        this.removeClasses();\n        return;\n      }\n\n      this.setDynamicVariables();\n\n      if (this.affixHeight + this.offset.top >= this.relativeElement.offsetHeight) {\n        return;\n      }\n\n      this.handleAffix();\n    },\n\n    handleAffix() {\n      if (this.scrollAffix && this.affixHeight > window.innerHeight) {\n        this.setScrollingDirection();\n\n        if (this.currentScrollAffix === 'scrollaffix-top') {\n          if (this.distanceFromTop + this.offset.top >= this.affixInitialTop) {\n            this.setScrollAffixScrolling();\n          }\n        }\n\n        if (this.scrollingDown && this.currentScrollAffix === 'scrollaffix-scrolling') {\n          if (this.screenBottomPos >= this.affixBottomPos + this.offset.bottom\n              && this.screenBottomPos < this.relativeElmBottomPos) {\n            this.setScrollAffixDown();\n          }\n        }\n\n        if (this.scrollingUp && this.currentScrollAffix === 'scrollaffix-scrolling') {\n          if (this.distanceFromTop + this.offset.top + this.topPadding\n              < this.affixRect.top + this.distanceFromTop) {\n            this.setScrollAffixUp();\n          }\n        }\n\n        if (this.scrollingDown && this.currentScrollAffix === 'scrollaffix-down') {\n          if (this.screenBottomPos >= this.relativeElmBottomPos + this.offset.bottom) {\n            this.setScrollAffixBottom();\n          }\n        }\n\n        if (this.currentScrollAffix === 'scrollaffix-bottom' && this.screenBottomPos < this.relativeElmBottomPos) {\n          this.setScrollAffixScrolling();\n        }\n\n        if ((this.scrollingUp && this.currentScrollAffix === 'scrollaffix-down')\n            || (this.scrollingDown && this.currentScrollAffix === 'scrollaffix-up')) {\n          this.setScrollAffixScrolling();\n        }\n\n        if (this.scrollingUp\n            && this.currentScrollAffix === 'scrollaffix-up'\n            && this.distanceFromTop < this.relativeElmOffsetTop - this.offset.top) {\n          this.setScrollAffixTop();\n        }\n\n        this.lastScrollAffixState = this.currentScrollAffix;\n        this.lastDistanceFromTop = this.distanceFromTop;\n\n        return;\n      }\n\n      if (this.distanceFromTop < this.relativeElmOffsetTop - this.offset.top) {\n        this.setAffixTop();\n      }\n\n      if (this.distanceFromTop >= this.relativeElmOffsetTop - this.offset.top\n          && this.relativeElmBottomPos - this.offset.bottom\n          >= this.distanceFromTop + this.topPadding + this.affixHeight + this.offset.top) {\n        this.setAffix();\n      }\n\n      if (this.relativeElmBottomPos - this.offset.bottom\n          < this.distanceFromTop + this.topPadding + this.affixHeight + this.offset.top) {\n        this.setAffixBottom();\n      }\n\n      this.lastState = this.currentState;\n    },\n\n    /**\n     * Sets the initial position of the affixed element\n     * when scrollAffix is set to true.\n     */\n    initScrollAffix() {\n      if (this.distanceFromTop < this.affixInitialTop - this.offset.top) {\n        this.setScrollAffixTop();\n      } else if (this.screenBottomPos >= this.affixBottomPos + this.offset.bottom\n          && this.screenBottomPos < this.relativeElmBottomPos) {\n        this.setScrollAffixDown();\n      } else if (this.screenBottomPos >= this.relativeElmBottomPos) {\n        this.setScrollAffixBottom();\n      } else {\n        this.setScrollAffixScrolling();\n      }\n    },\n\n    /**\n     * Sets te currentScrollAffix to 'scrolling' to indicate that\n     * the window is scrolling inside the affixed element.\n     */\n    setScrollAffixScrolling() {\n      this.currentScrollAffix = 'scrollaffix-scrolling';\n      this.$el.style.top = `${(this.affixRect.top + this.distanceFromTop) - this.affixInitialTop}px`;\n      this.$el.style.bottom = 'auto';\n      this.removeClasses();\n      this.emitEvent();\n    },\n\n    /**\n     * Sets the position of the affixed element to be fixed\n     * at the top of the screen, as you are scrolling UP.\n     */\n    setScrollAffixUp() {\n      this.currentScrollAffix = 'scrollaffix-up';\n\n      if (this.currentScrollAffix !== this.lastState) {\n        this.$el.style.top = `${this.topPadding + this.offset.top}px`;\n        this.$el.style.bottom = 'auto';\n        this.removeClasses();\n        this.emitEvent();\n        this.$el.classList.add('affix');\n      }\n    },\n\n    /**\n     * Sets the position of the affixed element to be fixed\n     * at the bottom of the screen, as you are scrolling DOWN.\n     */\n    setScrollAffixDown() {\n      this.currentScrollAffix = 'scrollaffix-down';\n\n      if (this.currentScrollAffix !== this.lastState) {\n        this.$el.style.bottom = `${this.offset.bottom}px`;\n        this.$el.style.top = 'auto';\n        this.removeClasses();\n        this.emitEvent();\n        this.$el.classList.add('affix');\n      }\n    },\n\n    /**\n     * Sets the position of the affixed element to be at the\n     * most top.\n     */\n    setScrollAffixTop() {\n      this.currentScrollAffix = 'scrollaffix-top';\n      this.$el.style.top = 0;\n      this.$el.style.bottom = 'auto';\n      this.removeClasses();\n      this.emitEvent();\n    },\n\n    /**\n     * Sets the position of the affixed element to be at the\n     * most bottom.\n     */\n    setScrollAffixBottom() {\n      this.currentScrollAffix = 'scrollaffix-bottom';\n      this.$el.style.top = `${this.relativeElmBottomPos - this.affixInitialTop - this.affixHeight}px`;\n      this.$el.style.bottom = 'auto';\n      this.removeClasses();\n      this.emitEvent();\n    },\n\n    /**\n     * Sets the direction the window is being scrolled.\n     */\n    setScrollingDirection() {\n      if (this.distanceFromTop > this.lastDistanceFromTop) {\n        this.scrollingDown = true;\n        this.scrollingUp = false;\n      } else {\n        this.scrollingUp = true;\n        this.scrollingDown = false;\n      }\n    },\n\n    /**\n     * Sets the affix-top class to indicate that the element is\n     * above the relative element.\n     */\n    setAffixTop() {\n      this.currentState = 'affix-top';\n\n      if (this.currentState !== this.lastState) {\n        this.emitEvent();\n        this.removeClasses();\n        this.$el.classList.remove('affix');\n        this.$el.classList.add('affix-top');\n        this.$el.style.top = null;\n      }\n    },\n\n    /**\n     * Sets the affix class to indicate that the element is\n     * fixed to the top of the relative element.\n     */\n    setAffix() {\n      this.currentState = 'affix';\n      this.$el.style.top = `${this.topPadding + this.offset.top}px`;\n\n      if (this.currentState !== this.lastState) {\n        this.emitEvent();\n        this.removeClasses();\n        this.$el.classList.add('affix');\n      }\n    },\n\n    /**\n     * Sets the affix-bottom class to indicate that the element is\n     * below the relative element.\n     */\n    setAffixBottom() {\n      this.currentState = 'affix-bottom';\n      this.$el.style.top = `${this.relativeElement.offsetHeight - this.affixHeight\n        - this.offset.bottom - this.topPadding}px`;\n\n      if (this.currentState !== this.lastState) {\n        this.emitEvent();\n        this.removeClasses();\n        this.$el.classList.add('affix-bottom');\n      }\n    },\n\n    /**\n     * Removes all three affix classes.\n     */\n    removeClasses() {\n      this.$el.classList.remove('affix-top');\n      this.$el.classList.remove('affix');\n      this.$el.classList.remove('affix-bottom');\n    },\n\n    /**\n     * Emits the events based on the current state of the affix.\n     */\n    emitEvent() {\n      if (this.scrollAffix && this.lastScrollAffixState) {\n        this.$emit(this.currentScrollAffix.replace('-', ''));\n      }\n\n      if (this.lastState) {\n        this.$emit(this.currentState.replace('-', ''));\n      }\n    },\n\n    /**\n     * Gets the top offset position of an element in the document.\n     *\n     * @param  {Element} element\n     * @return {Number}\n     */\n    getOffsetTop(element) {\n      let yPosition = 0;\n      let nextElement = element;\n\n      while (nextElement) {\n        yPosition += (nextElement.offsetTop);\n        nextElement = nextElement.offsetParent;\n      }\n\n      return yPosition;\n    },\n  },\n\n  mounted() {\n    this.$el.classList.add('vue-affix');\n    this.affixInitialTop = this.getOffsetTop(this.$el);\n    this.topPadding = this.affixInitialTop - this.getOffsetTop(this.relativeElement);\n\n    this.setDynamicVariables();\n\n    if (this.scrollAffix) this.initScrollAffix();\n\n    this.onScroll();\n    window.addEventListener('scroll', this.onScroll);\n  },\n\n  beforeDestroy() {\n    window.removeEventListener('scroll', this.onScroll);\n  },\n};\n<\/script>\n\n<style>\n.vue-affix {\n  position: relative;\n}\n\n.affix {\n  position: fixed;\n  width: 270px;\n  top: 10px !important;\n  height: 100vh;\n  overflow-y: scroll;\n  overflow: -moz-scrollbars-none;\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n.affix::-webkit-scrollbar {\n  width: 0 !important\n}\n\n.affix-bottom {\n  position: relative;\n}\n</style>\n"] }, media: void 0 });
  };
  var __vue_scope_id__42 = void 0;
  var __vue_module_identifier__42 = void 0;
  var __vue_is_functional_template__42 = false;
  function __vue_normalize__42(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/Affix.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__24() {
    const styles = __vue_create_injector__24.styles || (__vue_create_injector__24.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__42 = /* @__PURE__ */ __vue_normalize__42(
    { render: __vue_render__42, staticRenderFns: __vue_staticRenderFns__42 },
    __vue_inject_styles__42,
    __vue_script__42,
    __vue_scope_id__42,
    __vue_is_functional_template__42,
    __vue_module_identifier__42,
    false,
    __vue_create_injector__24,
    void 0,
    void 0
  );
  var Affix_default = __vue_component__42;

  // application/components/elements/TableOfContents.vue
  var __vue_script__43 = {
    name: "TableOfContents",
    props: {
      content: {
        required: true,
        type: String
      },
      containerClass: {
        required: false,
        type: String
      },
      affixSelector: {
        required: false,
        type: String
      },
      withOffset: {
        default: false,
        type: Boolean
      },
      enableProgressionTracking: {
        default: false,
        type: Boolean
      }
    },
    data() {
      return {
        networkOperationInProgress: false,
        offset: 144,
        scrollOffset: 72
      };
    },
    methods: {
      onItemChanged(event, currentItem, lastActiveItem) {
        if (currentItem && currentItem.dataset.scrollactiveContentId && currentItem.dataset.scrollactiveProgress && this.enableProgressionTracking) {
          this.updateProgression(currentItem.dataset.scrollactiveContentId, currentItem.dataset.scrollactiveProgress);
        }
      },
      updateProgression(contentId, progress) {
        this.networkOperationInProgress = true;
        const data = new FormData();
        data.append("progression[content_id]", contentId);
        data.append("progression[progress]", progress);
        Rails.ajax({
          url: "/progressions",
          type: "POST",
          data,
          dataType: "json",
          complete: () => {
            this.networkOperationInProgress = false;
          },
          error: (data2, status, xhr) => {
            console.log(data2);
            if (xhr.status === 422) {
              this.resetCSRFToken();
            }
          }
        });
      },
      resetCSRFToken() {
        Rails.ajax({
          url: "/csrf_token",
          type: "GET",
          dataType: "json",
          success: (data) => {
            if (data.csrf_token) {
              document.querySelector('meta[name="csrf-token"]').setAttribute("content", data.csrf_token);
            }
          },
          beforeSend: (xhr) => true
        });
      }
    },
    components: {
      Affix: Affix_default,
      VueScrollactive: scrollactive_default
    }
  };
  var __vue_render__43 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _vm.affixSelector ? _c(
      "Affix",
      {
        attrs: {
          "relative-element-selector": _vm.affixSelector,
          offset: { top: 0, bottom: -50 },
          "scroll-affix": false
        }
      },
      [
        _c("VueScrollactive", {
          class: _vm.containerClass,
          domProps: { innerHTML: _vm._s(_vm.content) }
        })
      ],
      1
    ) : _vm.withOffset ? _c("VueScrollactive", {
      class: _vm.containerClass,
      attrs: { offset: _vm.offset, scrollOffset: _vm.scrollOffset },
      domProps: { innerHTML: _vm._s(_vm.content) },
      on: { itemchanged: _vm.onItemChanged }
    }) : _c("VueScrollactive", {
      class: _vm.containerClass,
      domProps: { innerHTML: _vm._s(_vm.content) },
      on: { itemchanged: _vm.onItemChanged }
    });
  };
  var __vue_staticRenderFns__43 = [];
  __vue_render__43._withStripped = true;
  var __vue_inject_styles__43 = function(inject) {
    if (!inject)
      return;
    inject("data-v-0f5f134e_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "TableOfContents.vue" }, media: void 0 });
  };
  var __vue_scope_id__43 = void 0;
  var __vue_module_identifier__43 = void 0;
  var __vue_is_functional_template__43 = false;
  function __vue_normalize__43(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/TableOfContents.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__25() {
    const styles = __vue_create_injector__25.styles || (__vue_create_injector__25.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__43 = /* @__PURE__ */ __vue_normalize__43(
    { render: __vue_render__43, staticRenderFns: __vue_staticRenderFns__43 },
    __vue_inject_styles__43,
    __vue_script__43,
    __vue_scope_id__43,
    __vue_is_functional_template__43,
    __vue_module_identifier__43,
    false,
    __vue_create_injector__25,
    void 0,
    void 0
  );
  var TableOfContents_default = __vue_component__43;

  // application/tools/table-of-contents.js
  function configureTableOfContents() {
    const tablesOfContents = document.querySelectorAll("[data-table-of-contents]");
    [...tablesOfContents].forEach((tableOfContents) => {
      const { dataset: { withOffset, enableProgressionTracking } } = tableOfContents;
      const progression = enableProgressionTracking ? JSON.parse(enableProgressionTracking) : false;
      new Vue({
        el: tableOfContents,
        render: (h) => h(TableOfContents_default, {
          props: {
            containerClass: tableOfContents.className,
            content: tableOfContents.innerHTML,
            affixSelector: tableOfContents.dataset.affixSelector,
            withOffset: withOffset ? JSON.parse(withOffset) : false,
            enableProgressionTracking: progression
          }
        })
      });
    });
  }

  // application/components/elements/DynamicLoader.vue
  var __vue_script__44 = Vue.extend({
    name: "DynamicLoader",
    props: {
      url: {
        required: true,
        type: String
      },
      listenEvent: {
        required: true,
        type: String
      },
      content: {
        required: true,
        type: String
      }
    },
    data() {
      return {
        html: this.content
      };
    },
    created() {
      EventBus.$on(this.listenEvent, () => {
        this.fetchContent();
      });
    },
    methods: {
      fetchContent() {
        Rails.ajax({
          url: this.url,
          type: "GET",
          success: (doc) => {
            this.html = doc.body.innerHTML;
            dismissible_default();
            configureTableOfContents();
          }
        });
      }
    }
  });
  var __vue_render__44 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { domProps: { innerHTML: _vm._s(_vm.html) } });
  };
  var __vue_staticRenderFns__44 = [];
  __vue_render__44._withStripped = true;
  var __vue_inject_styles__44 = function(inject) {
    if (!inject)
      return;
    inject("data-v-391b02cc_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "DynamicLoader.vue" }, media: void 0 });
  };
  var __vue_scope_id__44 = void 0;
  var __vue_module_identifier__44 = void 0;
  var __vue_is_functional_template__44 = false;
  function __vue_normalize__44(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/elements/DynamicLoader.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (true) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  function __vue_create_injector__26() {
    const styles = __vue_create_injector__26.styles || (__vue_create_injector__26.styles = {});
    const isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    return function addStyle(id, css2) {
      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]'))
        return;
      const group = isOldIE ? css2.media || "default" : id;
      const style2 = styles[group] || (styles[group] = { ids: [], parts: [], element: void 0 });
      if (!style2.ids.includes(id)) {
        let code = css2.source;
        let index2 = style2.ids.length;
        style2.ids.push(id);
        if (false) {
          code += "\n/*# sourceURL=" + css2.map.sources[0] + " */";
          code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css2.map)))) + " */";
        }
        if (isOldIE) {
          style2.element = style2.element || document.querySelector("style[data-group=" + group + "]");
        }
        if (!style2.element) {
          const head = document.head || document.getElementsByTagName("head")[0];
          const el = style2.element = document.createElement("style");
          el.type = "text/css";
          if (css2.media)
            el.setAttribute("media", css2.media);
          if (isOldIE) {
            el.setAttribute("data-group", group);
            el.setAttribute("data-next-index", "0");
          }
          head.appendChild(el);
        }
        if (isOldIE) {
          index2 = parseInt(style2.element.getAttribute("data-next-index"));
          style2.element.setAttribute("data-next-index", index2 + 1);
        }
        if (style2.element.styleSheet) {
          style2.parts.push(code);
          style2.element.styleSheet.cssText = style2.parts.filter(Boolean).join("\n");
        } else {
          const textNode = document.createTextNode(code);
          const nodes = style2.element.childNodes;
          if (nodes[index2])
            style2.element.removeChild(nodes[index2]);
          if (nodes.length)
            style2.element.insertBefore(textNode, nodes[index2]);
          else
            style2.element.appendChild(textNode);
        }
      }
    };
  }
  var __vue_component__44 = /* @__PURE__ */ __vue_normalize__44(
    { render: __vue_render__44, staticRenderFns: __vue_staticRenderFns__44 },
    __vue_inject_styles__44,
    __vue_script__44,
    __vue_scope_id__44,
    __vue_is_functional_template__44,
    __vue_module_identifier__44,
    false,
    __vue_create_injector__26,
    void 0,
    void 0
  );
  var DynamicLoader_default = __vue_component__44;

  // application/components/readingExperienceSwitcher/classRangeSelectorMixin.js
  var classRangeSelectorMixin_default = {
    data() {
      return {
        selectedIndex: 0
      };
    },
    created() {
      let idx = this.validClasses.findIndex((className) => this.currentClassName === className);
      if (idx < 0) {
        idx = Math.floor((this.validClasses.length - 1) / 2);
      }
      this.selectedIndex = idx;
    },
    watch: {
      selectedIndex() {
        this.currentClassName = this.validClasses[this.selectedIndex];
      }
    }
  };

  // application/components/readingExperienceSwitcher/styleCookieMixin.js
  var getCookieJSON2 = (key) => get(key, JSON.parse) || {};
  var setCookieJSON2 = (key, value, opts) => set(key, value, JSON.stringify, opts);
  var styleCookieMixin_default = {
    props: {
      cookieName: {
        type: String,
        required: true
      },
      cookieField: {
        type: String,
        required: true
      },
      element: {
        type: Element,
        default: () => document.body
      },
      validClasses: {
        type: Array,
        required: true
      },
      defaultClass: {
        type: String
      },
      trackedEventCategory: {
        type: String,
        required: true
      },
      trackedEventAction: {
        type: String,
        default: "book"
      }
    },
    data() {
      return {
        currentClassName: this.initialClass()
      };
    },
    methods: {
      currentlyInstalledClass() {
        return this.validClasses.find((validClass) => this.element.classList.contains(validClass));
      },
      setClass() {
        this.element.classList.remove(this.currentlyInstalledClass());
        this.element.classList.add(this.currentClassName);
      },
      initialClass() {
        try {
          return getCookieJSON2(this.cookieName)[this.cookieField] || this.currentlyInstalledClass() || this.defaultClass || this.validClasses[0];
        } catch (e) {
          setCookieJSON2(this.cookieName, {}, { expires: "0" });
          return this.defaultClass || this.validClasses[0];
        }
      }
    },
    created() {
      this.setClass();
    },
    watch: {
      currentClassName() {
        this.setClass();
        const cookie = getCookieJSON2(this.cookieName);
        cookie[this.cookieField] = this.currentClassName;
        setCookieJSON2(this.cookieName, cookie, { expires: "10Y" });
        triggerEvent(this.trackedEventCategory, this.trackedEventAction);
      }
    }
  };

  // application/components/readingExperienceSwitcher/PageSize.vue
  var READING_EXPERIENCE_VALID_PAGE_SIZES = [
    "l-page-size-456",
    "l-page-size-572",
    "l-page-size-688",
    "l-page-size-920",
    "l-page-size-1036"
  ];
  var READING_EXPERIENCE_PAGE_SIZE_COOKIE_FIELD = "page-size";
  var __vue_script__45 = Vue.extend({
    name: "PageSize",
    mixins: [
      styleCookieMixin_default,
      classRangeSelectorMixin_default
    ],
    props: {
      validClasses: {
        type: Array,
        default: () => READING_EXPERIENCE_VALID_PAGE_SIZES
      },
      defaultClass: {
        type: String,
        default: "l-page-size-688"
      },
      cookieField: {
        type: String,
        default: READING_EXPERIENCE_PAGE_SIZE_COOKIE_FIELD
      },
      trackedEventCategory: {
        type: String,
        default: "book_chapter_readingExperiencePageSize"
      }
    }
  });
  var __vue_render__45 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _c("h4", [_vm._v("Page Size")]),
      _vm._v(" "),
      _c("div", { staticClass: "mt-16 display-flex align-items-baseline" }, [
        _c("span", [
          _c("svg", { staticClass: "w-18 rot-45" }, [
            _c("use", { attrs: { "xlink:href": "#cinema-mode" } })
          ])
        ]),
        _vm._v(" "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.selectedIndex,
              expression: "selectedIndex"
            }
          ],
          staticClass: "range mx-8",
          attrs: { type: "range", min: "0", max: _vm.validClasses.length - 1 },
          domProps: { value: _vm.selectedIndex },
          on: {
            __r: function($event) {
              _vm.selectedIndex = $event.target.value;
            }
          }
        }),
        _vm._v(" "),
        _c("span", [
          _c("svg", { staticClass: "w-24 rot-45" }, [
            _c("use", { attrs: { "xlink:href": "#cinema-mode" } })
          ])
        ])
      ])
    ]);
  };
  var __vue_staticRenderFns__45 = [];
  __vue_render__45._withStripped = true;
  var __vue_inject_styles__45 = void 0;
  var __vue_scope_id__45 = void 0;
  var __vue_module_identifier__45 = void 0;
  var __vue_is_functional_template__45 = false;
  function __vue_normalize__45(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/readingExperienceSwitcher/PageSize.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__45 = /* @__PURE__ */ __vue_normalize__45(
    { render: __vue_render__45, staticRenderFns: __vue_staticRenderFns__45 },
    __vue_inject_styles__45,
    __vue_script__45,
    __vue_scope_id__45,
    __vue_is_functional_template__45,
    __vue_module_identifier__45,
    false,
    void 0,
    void 0,
    void 0
  );
  var PageSize_default = __vue_component__45;

  // application/components/readingExperienceSwitcher/TextSize.vue
  var READING_EXPERIENCE_VALID_TEXT_SIZES = [
    "l-chapter-text-size-75",
    "l-chapter-text-size-80",
    "l-chapter-text-size-85",
    "l-chapter-text-size-90",
    "l-chapter-text-size-100",
    "l-chapter-text-size-110",
    "l-chapter-text-size-120",
    "l-chapter-text-size-130",
    "l-chapter-text-size-140"
  ];
  var READING_EXPERIENCE_TEXT_SIZE_COOKIE_FIELD = "text-size";
  var __vue_script__46 = Vue.extend({
    name: "TextSize",
    mixins: [
      styleCookieMixin_default,
      classRangeSelectorMixin_default
    ],
    props: {
      validClasses: {
        type: Array,
        default: () => READING_EXPERIENCE_VALID_TEXT_SIZES
      },
      defaultClass: {
        type: String,
        default: "l-chapter-text-size-100"
      },
      cookieField: {
        type: String,
        default: READING_EXPERIENCE_TEXT_SIZE_COOKIE_FIELD
      },
      trackedEventCategory: {
        type: String,
        default: "book_chapter_readingExperienceTextSize"
      }
    }
  });
  var __vue_render__46 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _c("h4", [_vm._v("Text Size")]),
      _vm._v(" "),
      _c("div", { staticClass: "mt-16 display-flex align-items-baseline" }, [
        _c("span", [
          _c("svg", { staticClass: "w-18" }, [
            _c("use", { attrs: { "xlink:href": "#font" } })
          ])
        ]),
        _vm._v(" "),
        _c("input", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.selectedIndex,
              expression: "selectedIndex"
            }
          ],
          staticClass: "range mx-8",
          attrs: { type: "range", min: "0", max: _vm.validClasses.length - 1 },
          domProps: { value: _vm.selectedIndex },
          on: {
            __r: function($event) {
              _vm.selectedIndex = $event.target.value;
            }
          }
        }),
        _vm._v(" "),
        _c("span", [
          _c("svg", { staticClass: "w-24" }, [
            _c("use", { attrs: { "xlink:href": "#font" } })
          ])
        ])
      ])
    ]);
  };
  var __vue_staticRenderFns__46 = [];
  __vue_render__46._withStripped = true;
  var __vue_inject_styles__46 = void 0;
  var __vue_scope_id__46 = void 0;
  var __vue_module_identifier__46 = void 0;
  var __vue_is_functional_template__46 = false;
  function __vue_normalize__46(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/readingExperienceSwitcher/TextSize.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__46 = /* @__PURE__ */ __vue_normalize__46(
    { render: __vue_render__46, staticRenderFns: __vue_staticRenderFns__46 },
    __vue_inject_styles__46,
    __vue_script__46,
    __vue_scope_id__46,
    __vue_is_functional_template__46,
    __vue_module_identifier__46,
    false,
    void 0,
    void 0,
    void 0
  );
  var TextSize_default = __vue_component__46;

  // application/components/readingExperienceSwitcher/TextStyle.vue
  var READING_EXPERIENCE_VALID_TEXT_STYLES = {
    "l-chapter-font-serif": "Classic",
    "l-chapter-font-sans-serif": "Modern"
  };
  var READING_EXPERIENCE_TEXT_STYLE_COOKIE_FIELD = "text-style";
  var __vue_script__47 = Vue.extend({
    name: "TextStyle",
    mixins: [styleCookieMixin_default],
    props: {
      validClasses: {
        type: Array,
        default: () => Object.keys(READING_EXPERIENCE_VALID_TEXT_STYLES)
      },
      defaultClass: {
        type: String,
        default: Object.keys(READING_EXPERIENCE_VALID_TEXT_STYLES)[0]
      },
      cookieField: {
        type: String,
        default: READING_EXPERIENCE_TEXT_STYLE_COOKIE_FIELD
      },
      trackedEventCategory: {
        type: String,
        default: "book_chapter_readingExperienceTextStyle"
      }
    },
    methods: {
      displayName(className) {
        return READING_EXPERIENCE_VALID_TEXT_STYLES[className];
      }
    }
  });
  var __vue_render__47 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _c("h4", [_vm._v("Text Style")]),
      _vm._v(" "),
      _c(
        "div",
        { staticClass: "l-grid-2-fr l-grid-col-gap-12 l-margin-15" },
        _vm._l(_vm.validClasses, function(className) {
          return _c(
            "span",
            {
              key: className,
              staticClass: "bg-grey-thought c-reading-experience-selector__checkbox--large",
              class: className
            },
            [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.currentClassName,
                    expression: "currentClassName"
                  }
                ],
                staticClass: "c-reading-experience-selector__radio",
                attrs: { type: "radio" },
                domProps: {
                  value: className,
                  checked: _vm._q(_vm.currentClassName, className)
                },
                on: {
                  change: function($event) {
                    _vm.currentClassName = className;
                  }
                }
              }),
              _vm._v(" "),
              _c("span"),
              _vm._v(" "),
              _c("label", [_vm._v(_vm._s(_vm.displayName(className)))])
            ]
          );
        }),
        0
      )
    ]);
  };
  var __vue_staticRenderFns__47 = [];
  __vue_render__47._withStripped = true;
  var __vue_inject_styles__47 = void 0;
  var __vue_scope_id__47 = void 0;
  var __vue_module_identifier__47 = void 0;
  var __vue_is_functional_template__47 = false;
  function __vue_normalize__47(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/readingExperienceSwitcher/TextStyle.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__47 = /* @__PURE__ */ __vue_normalize__47(
    { render: __vue_render__47, staticRenderFns: __vue_staticRenderFns__47 },
    __vue_inject_styles__47,
    __vue_script__47,
    __vue_scope_id__47,
    __vue_is_functional_template__47,
    __vue_module_identifier__47,
    false,
    void 0,
    void 0,
    void 0
  );
  var TextStyle_default = __vue_component__47;

  // application/components/readingExperienceSwitcher/App.vue
  var READING_EXPERIENCE_COOKIE_NAME = "reading-experience";
  var __vue_script__48 = Vue.extend({
    name: "ReadingExperienceSwitcher",
    props: {
      cookieName: {
        type: String,
        default: READING_EXPERIENCE_COOKIE_NAME
      }
    },
    data() {
      return {
        visible: false
      };
    },
    methods: {
      toggleVisibility() {
        this.visible = !this.visible;
      },
      dismiss() {
        this.visible = false;
      }
    },
    mounted() {
      const triggerElements = document.querySelectorAll("[data-reading-experience-switcher-trigger]");
      triggerElements.forEach((triggerElement) => {
        triggerElement.addEventListener("click", (event) => {
          this.toggleVisibility();
        });
      });
      this.$el.addEventListener("click", (event) => {
        event.stopPropagation();
      });
      document.body.addEventListener("click", (event) => {
        if (event.target.closest("[data-reading-experience-switcher-trigger]") == null) {
          this.dismiss();
        }
      });
    },
    components: {
      NightModeToggle: NightModeToggle_default,
      PageSize: PageSize_default,
      TextSize: TextSize_default,
      TextStyle: TextStyle_default
    }
  });
  var __vue_render__48 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _vm.visible ? _c(
        "div",
        { staticClass: "c-reading-experience-selector" },
        [
          _c(
            "button",
            { staticClass: "btn-icon", on: { click: _vm.dismiss } },
            [
              _c("svg", { staticClass: "fc-black-night icon-close" }, [
                _c("use", { attrs: { "xlink:href": "#x-close" } })
              ])
            ]
          ),
          _vm._v(" "),
          _c("TextStyle", { attrs: { cookieName: _vm.cookieName } }),
          _vm._v(" "),
          _c("TextSize", { attrs: { cookieName: _vm.cookieName } }),
          _vm._v(" "),
          _c("PageSize", { attrs: { cookieName: _vm.cookieName } })
        ],
        1
      ) : _vm._e()
    ]);
  };
  var __vue_staticRenderFns__48 = [];
  __vue_render__48._withStripped = true;
  var __vue_inject_styles__48 = void 0;
  var __vue_scope_id__48 = void 0;
  var __vue_module_identifier__48 = void 0;
  var __vue_is_functional_template__48 = false;
  function __vue_normalize__48(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/readingExperienceSwitcher/App.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__48 = /* @__PURE__ */ __vue_normalize__48(
    { render: __vue_render__48, staticRenderFns: __vue_staticRenderFns__48 },
    __vue_inject_styles__48,
    __vue_script__48,
    __vue_scope_id__48,
    __vue_is_functional_template__48,
    __vue_module_identifier__48,
    false,
    void 0,
    void 0,
    void 0
  );
  var App_default4 = __vue_component__48;

  // application/components/notebook/Annotation.vue
  var import_insert_tag2 = __toESM(require_lib(), 1);
  var __vue_script__49 = Vue.extend({
    name: "Annotation",
    props: {
      annotation: {
        required: true,
        type: Object
      }
    },
    data() {
      return {
        note: this.annotation.note,
        editing: false
      };
    },
    computed: {
      text() {
        return this.annotation.text;
      },
      notebookClasses() {
        return `c-notebook__entry c-notebook__entry--${this.annotation.colour}`;
      },
      noteClasses() {
        return `c-notebook__entry-text o-fragment--highlighter-${this.annotation.colour}`;
      }
    },
    methods: {
      saveNote() {
        this.editing = false;
        this.$emit("updateNote", this.annotation.id, this.note);
      },
      removeNote() {
        this.editing = false;
        this.note = null;
        this.$emit("updateNote", this.annotation.id, this.note);
      },
      unhighlight() {
        this.$emit("delete", this.annotation.id);
      }
    }
  });
  var __vue_render__49 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { class: _vm.notebookClasses }, [
      _c("a", { attrs: { href: _vm.annotation.url } }, [
        _c("h4", [
          _vm._v(
            "Chapter " + _vm._s(_vm.annotation.content_display_number) + ". " + _vm._s(_vm.annotation.content_name)
          )
        ])
      ]),
      _vm._v(" "),
      _c("a", { staticClass: "mt-8", attrs: { href: _vm.annotation.url } }, [
        _c("mark", {
          class: _vm.noteClasses,
          domProps: { innerHTML: _vm._s(_vm.text) }
        })
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "c-notebook__entry-note control" }, [
        _vm.editing ? _c("textarea", {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.note,
              expression: "note"
            }
          ],
          staticClass: "text-area",
          domProps: { value: _vm.note },
          on: {
            input: function($event) {
              if ($event.target.composing) {
                return;
              }
              _vm.note = $event.target.value;
            }
          }
        }) : _vm.note && _vm.note.length > 0 ? _c("span", [_vm._v(_vm._s(_vm.note))]) : _vm._e()
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "c-notebook__actions mb-16" }, [
        _vm.editing ? _c("span", [
          _c(
            "span",
            {
              staticClass: "c-notebook__action",
              on: { click: _vm.saveNote }
            },
            [_vm._v("Save")]
          ),
          _vm._v(" "),
          _c("span", { staticClass: "l-margin-sides-3" }, [_vm._v("\xB7")]),
          _vm._v(" "),
          _c(
            "span",
            {
              staticClass: "c-notebook__action l-margin-right-auto",
              on: {
                click: function($event) {
                  _vm.editing = false;
                }
              }
            },
            [_vm._v("Cancel")]
          )
        ]) : _c("span", [
          _vm.note && _vm.note.length > 0 ? _c(
            "span",
            {
              staticClass: "c-notebook__action",
              on: {
                click: function($event) {
                  _vm.editing = true;
                }
              }
            },
            [_vm._v("Edit")]
          ) : _c(
            "span",
            {
              staticClass: "c-notebook__action",
              on: {
                click: function($event) {
                  _vm.editing = true;
                }
              }
            },
            [_vm._v("Add Note")]
          ),
          _vm._v(" "),
          _vm.note && _vm.note.length > 0 ? _c("span", { staticClass: "l-margin-sides-3" }, [_vm._v("\xB7")]) : _vm._e(),
          _vm._v(" "),
          _vm.note && _vm.note.length > 0 ? _c(
            "span",
            {
              staticClass: "c-notebook__action l-margin-right-auto",
              on: { click: _vm.removeNote }
            },
            [_vm._v("Remove")]
          ) : _vm._e()
        ]),
        _vm._v(" "),
        _c(
          "span",
          { staticClass: "c-notebook__action", on: { click: _vm.unhighlight } },
          [_vm._v("Unhighlight")]
        )
      ])
    ]);
  };
  var __vue_staticRenderFns__49 = [];
  __vue_render__49._withStripped = true;
  var __vue_inject_styles__49 = void 0;
  var __vue_scope_id__49 = void 0;
  var __vue_module_identifier__49 = void 0;
  var __vue_is_functional_template__49 = false;
  function __vue_normalize__49(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/notebook/Annotation.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__49 = /* @__PURE__ */ __vue_normalize__49(
    { render: __vue_render__49, staticRenderFns: __vue_staticRenderFns__49 },
    __vue_inject_styles__49,
    __vue_script__49,
    __vue_scope_id__49,
    __vue_is_functional_template__49,
    __vue_module_identifier__49,
    false,
    void 0,
    void 0,
    void 0
  );
  var Annotation_default = __vue_component__49;

  // application/components/notebook/App.vue
  var __vue_script__50 = Vue.extend({
    name: "Notebook",
    props: {
      title: {
        required: true,
        type: String
      },
      contentIds: {
        required: true,
        type: Array
      },
      svgIcons: {
        required: false,
        default: {},
        type: Object
      }
    },
    data() {
      return {
        annotations: [],
        visible: false,
        firstLoadComplete: false,
        showModal: false
      };
    },
    watch: {
      visible() {
        if (this.visible) {
          Rails.ajax({
            url: "/annotations",
            type: "GET",
            dataType: "json",
            accept: "json",
            data: constructURLParams_default({
              content_ids: this.contentIds
            }),
            success: (data) => {
              this.annotations = data;
              this.firstLoadComplete = true;
            }
          });
        }
      }
    },
    methods: {
      toggleVisibility() {
        this.visible = !this.visible;
      },
      dismiss() {
        this.visible = false;
      },
      deleteAnnotation(annotationId) {
        Rails.ajax({
          url: `/annotations/${annotationId}`,
          type: "DELETE",
          success: () => {
            const annotation = this.annotations.find((h) => h.id === annotationId);
            EventBus.$emit(FRAGMENT_ANNOTATION_REMOVED, this, annotation.fragment_id, annotationId);
            this.annotations = this.annotations.filter((h) => h.id !== annotationId);
          }
        });
      },
      deleteAllAnnotations() {
        Rails.ajax({
          url: "/annotations",
          type: "DELETE",
          dataType: "json",
          accept: "json",
          data: constructURLParams_default({
            annotation_ids: this.annotations.map((annotation) => annotation.id)
          }),
          success: () => {
            this.annotations.forEach((annotation) => {
              EventBus.$emit(FRAGMENT_ANNOTATION_REMOVED, this, annotation.fragment_id, annotation.id);
              this.annotations = [];
              this.showModal = false;
            });
          }
        });
      },
      updateNote(annotationId, note) {
        const annotation = this.annotations.find((h) => h.id === annotationId);
        const data = new FormData();
        data.append("annotation[content_id]", annotation.content_id);
        data.append("annotation[colour]", annotation.colour);
        data.append("annotation[note]", note);
        Rails.ajax({
          url: `/annotations/${annotationId}`,
          type: "PUT",
          data,
          success: (data2) => {
            annotation.note = note;
            EventBus.$emit(FRAGMENT_ANNOTATION_UPDATED, this, annotation.fragment_id, annotation);
            if (note === null) {
              EventBus.$emit(FLASH_SUCCESS, "Your note has been removed.", true);
            } else {
              EventBus.$emit(FLASH_SUCCESS, "Your note has been updated.", true);
            }
          }
        });
      }
    },
    mounted() {
      const triggerElements = document.querySelectorAll("[data-notebook-trigger]");
      triggerElements.forEach((triggerElement) => {
        triggerElement.addEventListener("click", (event) => {
          this.toggleVisibility();
        });
      });
      this.$el.addEventListener("click", (event) => {
        event.stopPropagation();
      });
      document.body.addEventListener("click", (event) => {
        if (event.target.closest("[data-notebook-trigger]") == null) {
          this.dismiss();
        }
      });
      let hash = window.location.hash.substr(1);
      if (hash === "notebook") {
        this.toggleVisibility();
      }
      EventBus.$on(FRAGMENT_ANNOTATION_UPDATED, (source, fragmentId, annotation) => {
        if (source === this) {
          return;
        }
        const localAnnotation = this.annotations.find((h) => h.id === annotation.id);
        if (!localAnnotation) {
          return;
        }
        localAnnotation.note = annotation.note;
        localAnnotation.colour = annotation.colour;
      });
      EventBus.$on(FRAGMENT_ANNOTATION_REMOVED, (source, fragmentId, annotationId) => {
        if (source === this) {
          return;
        }
        this.annotations = this.annotations.filter((h) => h.id !== annotationId);
      });
    },
    components: {
      Annotation: Annotation_default,
      Modal: Modal_default
    }
  });
  var __vue_render__50 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _vm.visible ? _c(
        "div",
        { staticClass: "c-notebook" },
        [
          _c("div", { staticClass: "c-notebook-header" }, [
            _c("h3", [_vm._v("Notebook \xB7 " + _vm._s(_vm.title))]),
            _vm._v(" "),
            _vm.annotations.length > 0 && !_vm.showModal ? _c(
              "button",
              {
                staticClass: "btn-icon ml-auto",
                on: {
                  click: function($event) {
                    _vm.showModal = true;
                  }
                }
              },
              [
                _c("svg", [
                  _c("use", { attrs: { "xlink:href": "#delete" } })
                ])
              ]
            ) : _vm._e(),
            _vm._v(" "),
            _c(
              "button",
              { staticClass: "btn-icon", on: { click: _vm.dismiss } },
              [
                _c("svg", { staticClass: "rot-180" }, [
                  _c("use", {
                    attrs: { "xlink:href": _vm.svgIcons["close"] }
                  })
                ])
              ]
            )
          ]),
          _vm._v(" "),
          _vm.showModal ? _c("Modal", {
            on: {
              closeModal: function($event) {
                _vm.showModal = false;
              }
            },
            scopedSlots: _vm._u(
              [
                {
                  key: "title",
                  fn: function() {
                    return [_vm._v("Delete everything in this notebook?")];
                  },
                  proxy: true
                },
                {
                  key: "content",
                  fn: function() {
                    return [
                      _vm._v(
                        "\n        This will delete all the highlights and notes for this book. After deleting you will not be able to recover\n        them.\n      "
                      )
                    ];
                  },
                  proxy: true
                },
                {
                  key: "footer",
                  fn: function() {
                    return [
                      _c(
                        "div",
                        {
                          staticClass: "display-flex justify-content-end"
                        },
                        [
                          _c(
                            "a",
                            {
                              staticClass: "btn-normalw bg-white",
                              on: {
                                click: function($event) {
                                  _vm.showModal = false;
                                }
                              }
                            },
                            [_vm._v("Cancel")]
                          ),
                          _vm._v(" "),
                          _c(
                            "button",
                            {
                              staticClass: "btn-normalw bg-red-lychee fc-white ml-16",
                              on: { click: _vm.deleteAllAnnotations }
                            },
                            [
                              _c(
                                "span",
                                { staticClass: "o-button__label" },
                                [_vm._v("Delete notebook")]
                              )
                            ]
                          )
                        ]
                      )
                    ];
                  },
                  proxy: true
                }
              ],
              null,
              false,
              2640972836
            )
          }) : _vm._e(),
          _vm._v(" "),
          _vm.annotations.length > 0 ? _c(
            "div",
            { staticClass: "c-notebook-content p-24" },
            _vm._l(_vm.annotations, function(annotation) {
              return _c("Annotation", {
                key: annotation.id,
                attrs: { annotation },
                on: {
                  delete: _vm.deleteAnnotation,
                  updateNote: _vm.updateNote
                }
              });
            }),
            1
          ) : _vm.firstLoadComplete ? _c("div", { staticClass: "c-notebook-content p-24" }, [
            _c("h4", { staticClass: "fs-20" }, [
              _vm._v("Your notebook is empty!")
            ]),
            _vm._v(" "),
            _c("p", { staticClass: "mt-24" }, [
              _vm._v(
                "This is a place where you can save text, code, and leave notes about what you\u2019re reading."
              )
            ]),
            _vm._v(" "),
            _c("p", { staticClass: "mt-16" }, [
              _vm._v(
                "To create a note, simply select any text from the chapter right in your browser, and use the\n        notebook tooltip to highlight or add a note:"
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "c-notebook__demo" }, [
              _c("span", { staticClass: "o-fragment--tooltip" }, [
                _c("span", [
                  _vm._m(0),
                  _vm._v(" "),
                  _vm._m(1),
                  _vm._v(" "),
                  _vm._m(2),
                  _vm._v(" "),
                  _vm._m(3),
                  _vm._v(" "),
                  _vm._m(4),
                  _vm._v(" "),
                  _vm._m(5),
                  _vm._v(" "),
                  _c(
                    "span",
                    {
                      staticClass: "o-tooltip__svg o-tooltip__svg--note"
                    },
                    [
                      _c("span", [
                        _c(
                          "svg",
                          { staticClass: "o-button__svg--white" },
                          [
                            _c("use", {
                              attrs: { "xlink:href": "#delete" }
                            })
                          ]
                        )
                      ])
                    ]
                  ),
                  _vm._v(" "),
                  _c(
                    "span",
                    {
                      staticClass: "o-tooltip__svg o-tooltip__svg--note"
                    },
                    [
                      _c("span", [
                        _c(
                          "svg",
                          { staticClass: "o-button__svg--white" },
                          [
                            _c("use", {
                              attrs: { "xlink:href": "#pencil" }
                            })
                          ]
                        )
                      ])
                    ]
                  )
                ])
              ]),
              _vm._v(" "),
              _vm._m(6)
            ])
          ]) : _c("div", { staticClass: "l-margin-24" }, [_vm._m(7)])
        ],
        1
      ) : _vm._e()
    ]);
  };
  var __vue_staticRenderFns__50 = [
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("span", [
        _c("span", { staticClass: "o-tooltip__color o-tooltip__color--yellow" })
      ]);
    },
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("span", [
        _c("span", { staticClass: "o-tooltip__color o-tooltip__color--orange" })
      ]);
    },
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("span", [
        _c("span", {
          staticClass: "o-tooltip__color o-tooltip__color--selected o-tooltip__color--red"
        })
      ]);
    },
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("span", [
        _c("span", { staticClass: "o-tooltip__color o-tooltip__color--purple" })
      ]);
    },
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("span", [
        _c("span", { staticClass: "o-tooltip__color o-tooltip__color--blue" })
      ]);
    },
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("span", [
        _c("span", { staticClass: "o-tooltip__color o-tooltip__color--green" })
      ]);
    },
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("p", {}, [
        _c("mark", [
          _vm._v(
            "Different platforms do this in different ways, of course, and methods have changed over\n            time. Today\u2019s Android apps use Jetpack Compose with Lazy composables"
          )
        ])
      ]);
    },
    function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "h4",
        { staticClass: "l-margin-60 l-text-align-center l-font-19" },
        [
          _vm._v("Loading"),
          _c("span", { staticClass: "c-dot-loader" }, [
            _c("span", { staticClass: "a-dot-loader--1" }, [_vm._v(".")]),
            _c("span", { staticClass: "a-dot-loader--2" }, [_vm._v(".")]),
            _c("span", { staticClass: "a-dot-loader--3" }, [_vm._v(".")])
          ])
        ]
      );
    }
  ];
  __vue_render__50._withStripped = true;
  var __vue_inject_styles__50 = void 0;
  var __vue_scope_id__50 = void 0;
  var __vue_module_identifier__50 = void 0;
  var __vue_is_functional_template__50 = false;
  function __vue_normalize__50(template, style2, script, scope, functional, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    const component = (typeof script === "function" ? script.options : script) || {};
    component.__file = "app/javascript/application/components/notebook/App.vue";
    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;
      if (functional)
        component.functional = true;
    }
    component._scopeId = scope;
    if (false) {
      let hook;
      if (false) {
        hook = function(context) {
          context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
          if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
            context = __VUE_SSR_CONTEXT__;
          }
          if (style2) {
            style2.call(this, createInjectorSSR(context));
          }
          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        };
        component._ssrRegister = hook;
      } else if (style2) {
        hook = shadowMode ? function(context) {
          style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
        } : function(context) {
          style2.call(this, createInjector(context));
        };
      }
      if (hook !== void 0) {
        if (component.functional) {
          const originalRender = component.render;
          component.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          const existing = component.beforeCreate;
          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }
    }
    return component;
  }
  var __vue_component__50 = /* @__PURE__ */ __vue_normalize__50(
    { render: __vue_render__50, staticRenderFns: __vue_staticRenderFns__50 },
    __vue_inject_styles__50,
    __vue_script__50,
    __vue_scope_id__50,
    __vue_is_functional_template__50,
    __vue_module_identifier__50,
    false,
    void 0,
    void 0,
    void 0
  );
  var App_default5 = __vue_component__50;

  // application/tools/link-tools/index.ts
  function link_tools_default(container = document) {
    const elements = Array.from(container.querySelectorAll("[data-secondary-href]"));
    elements.forEach((element) => {
      const el = element;
      const { secondaryHref } = el.dataset;
      if (secondaryHref) {
        el.addEventListener("click", () => {
          turbo_es2017_esm_exports.visit(secondaryHref);
        });
      }
    });
  }

  // application/tools/spoilers/index.ts
  var createSpoilerDivs = (container) => {
    const rawHtml = container.innerHTML;
    const spoilerStartRegex = /\[spoiler.*?\]/g;
    const spoilerEndRegex = /\[\/spoiler\]/g;
    const newHtml = rawHtml.replace(spoilerStartRegex, '<div class="c-spoiler">').replace(spoilerEndRegex, "</div>");
    container.innerHTML = newHtml;
  };
  var wrapInner = (container, className) => {
    const wrapper = document.createElement("div");
    wrapper.classList.add(className);
    wrapper.innerHTML = container.innerHTML;
    container.innerHTML = "";
    container.appendChild(wrapper);
  };
  function spoilers_default(container = document.body) {
    createSpoilerDivs(container);
    Array.from(container.getElementsByClassName("c-spoiler")).forEach((element) => {
      wrapInner(element, "c-spoiler__answer");
      const spoilerButton = document.createElement("button");
      spoilerButton.classList.add("o-button", "o-button--grey");
      spoilerButton.innerText = "Reveal";
      element.appendChild(spoilerButton);
      spoilerButton.addEventListener("click", () => {
        element.classList.add("c-spoiler--revealed");
      });
    });
  }

  // application/tools/discussion-embeds/index.ts
  var emptyDiscussionContainer = () => {
    const container = document.getElementById("discourse-comments");
    if (container) {
      container.innerHTML = "";
    }
  };
  var triggerDiscussionLoad = () => {
    emptyDiscussionContainer();
    const d = document.createElement("script");
    d.type = "text/javascript";
    d.async = true;
    d.src = `${DiscourseEmbed.discourseUrl}javascripts/embed.js`;
    document.getElementsByTagName("head")[0].appendChild(d);
  };
  function discussion_embeds_default(container = document) {
    Array.from(container.getElementsByClassName("c-forum-comments__load")).forEach((element) => {
      const el = element;
      window.DiscourseEmbed = el.dataset;
      element.addEventListener("click", triggerDiscussionLoad);
    });
  }

  // application/tools/countdown.ts
  function countdown_default(container = document) {
    const elements = Array.from(
      container.querySelectorAll("[data-countdown-to-time]")
    );
    elements.forEach((element) => {
      const endTime = element.dataset.countdownToTime;
      const timeInterval = window.setInterval(
        () => {
          updateClock(timeInterval, element, endTime);
        },
        1e3
      );
      updateClock(timeInterval, element, endTime);
    });
  }
  var zeroPad = (i, noDigits) => {
    const numberString = String(i);
    const numberLength = numberString.length;
    if (numberLength >= noDigits) {
      return numberString;
    }
    return Array(noDigits - numberLength + 1).join("0") + i;
  };
  var remainingTime = (endTime) => {
    const total = Date.parse(endTime) - Date.now();
    const seconds = Math.floor(total / 1e3 % 60);
    const minutes = Math.floor(total / (1e3 * 60) % 60);
    const hours = Math.floor(total / (1e3 * 60 * 60));
    return {
      total,
      hours,
      minutes,
      seconds
    };
  };
  var updateClock = (intervalId, countdown, endTime) => {
    const remaining = remainingTime(endTime);
    if (remaining.total < 0) {
      countdown.style.display = "none";
      clearInterval(intervalId);
    }
    const hoursElement = countdown.querySelector("[data-countdown-hours]");
    const minutesElement = countdown.querySelector("[data-countdown-minutes]");
    const secondsElement = countdown.querySelector("[data-countdown-seconds]");
    if (hoursElement && minutesElement && secondsElement) {
      hoursElement.innerHTML = zeroPad(remaining.hours, 2);
      minutesElement.innerHTML = zeroPad(remaining.minutes, 2);
      secondsElement.innerHTML = zeroPad(remaining.seconds, 2);
    }
  };

  // application/tools/sidebar-toggle.ts
  var COOKIE_NAME2 = "rw-carolus-sidebar";
  var COOKIE_KEY = "hide-sidebar";
  var getCookieJSON3 = (key) => get(key, JSON.parse);
  var setCookieJSON3 = (key, value, options = {}) => {
    set(key, value, JSON.stringify, options);
  };
  function sidebar_toggle_default(container = document) {
    const adminContainer = container.querySelector(".l-admin");
    if (!adminContainer) {
      return;
    }
    const { sidebarName } = adminContainer.dataset;
    if (!sidebarName) {
      return;
    }
    setSidebarVisibility(adminContainer, sidebarPreviouslyDismissed(adminContainer, sidebarName, false), false);
    const buttons = Array.from(container.querySelectorAll("[data-sidebar-toggle]"));
    buttons.forEach((element) => {
      const el = element;
      el.addEventListener("click", () => {
        toggleSidebarHidden(adminContainer, sidebarName, el.dataset.sidebarToggle === "mobile");
      });
    });
  }
  var toggleSidebarHidden = (container, sidebarName, mobile) => {
    const hidden = sidebarPreviouslyDismissed(container, sidebarName, mobile);
    setSidebarVisibility(container, !hidden, mobile);
    storeSidebarDismissed(!hidden, sidebarName);
  };
  var setSidebarVisibility = (container, hide, mobile) => {
    if (hide) {
      container.classList.remove("l-admin--sidebar-open");
      container.classList.remove("s_show_mobile_menu");
    } else {
      container.classList.add("l-admin--sidebar-open");
      if (mobile) {
        container.classList.add("s_show_mobile_menu");
      }
      const scrollToElement = container.getElementsByClassName("c-box-list__item-scroll-to")[0];
      if (scrollToElement) {
        scrollToElement.scrollIntoView();
        container.getElementsByClassName("c-video-player__lessons")[0].scrollTop += -72;
      }
    }
  };
  var sidebarPreviouslyDismissed = (container, sidebarName, mobile) => {
    if (mobile) {
      return !container.classList.contains("s_show_mobile_menu");
    }
    const cookieContent = getCookieJSON3(COOKIE_NAME2);
    if (!cookieContent || !cookieContent[sidebarName]) {
      return false;
    }
    return cookieContent[sidebarName][COOKIE_KEY];
  };
  var storeSidebarDismissed = (dismissed, sidebarName) => {
    const cookieContent = getCookieJSON3(COOKIE_NAME2) || {};
    cookieContent[sidebarName] = cookieContent[sidebarName] || {};
    cookieContent[sidebarName][COOKIE_KEY] = dismissed;
    setCookieJSON3(COOKIE_NAME2, cookieContent, { expires: "10Y" });
  };

  // application/tools/header-toggles.js
  function configureHeaderToggles() {
    const headerToggles = document.querySelectorAll("[data-header-toggle]");
    [...headerToggles].forEach((headerToggle) => {
      headerToggle.addEventListener("click", () => {
        const headerToggleTarget = document.querySelector(`[data-header-toggle-target="${headerToggle.dataset.headerToggle}"]`);
        headerToggle.classList.toggle("c-video-player__lessons-header--open");
        headerToggleTarget.classList.toggle("c-video-player__lesson-list--open");
      });
    });
  }

  // application/tools/css-toggles.js
  function configureCssToggles() {
    const cssToggles = document.querySelectorAll("[data-toggle-css-selector]");
    [...cssToggles].forEach((cssToggle) => {
      cssToggle.addEventListener("click", () => {
        const cssToggleTarget = document.querySelector(cssToggle.dataset.toggleCssSelector);
        const cssClass = cssToggle.dataset.toggleCssClass;
        cssToggleTarget.classList.toggle(cssClass);
      });
    });
  }

  // application/tools/badge-animations.js
  function configureBadgeAnimations() {
    let badgeAnimationCounter = 0.1;
    document.querySelectorAll(".l-achievements-grid img").forEach((badge) => {
      badgeAnimationCounter += 0.1;
      badge.style.animation = "a-slight-fade-in-up 1s forwards";
      badge.style.animationDelay = `${badgeAnimationCounter}s`;
    });
  }

  // application/tools/content-permissions-required-links.js
  function configureContentPermissionsRequiredLinks() {
    const links = document.querySelectorAll("a[data-set-content-permissions-required]");
    [...links].forEach((link) => {
      link.addEventListener("click", () => {
        set(
          "content-permissions-required",
          link.dataset.setContentPermissionsRequired,
          { expires: "1h", domain: window.CAROLUS_ENV.CONTENT_PERMISSIONS_REQUIRED_COOKIE_DOMAIN }
        );
      });
    });
  }

  // application/tools/modal/index.ts
  function modal_default(container = document) {
    configureModal();
    configureModalTriggers(container);
  }
  var configureModalTriggers = (container = document) => {
    Array.from(container.querySelectorAll("[data-modal-trigger]")).forEach((element) => {
      const el = element;
      element.addEventListener("click", () => {
        EventBus.$emit(SHOW_MODAL, el.dataset.modalTrigger);
      });
    });
  };
  var configureModal = (container = document) => {
    EventBus.$on(SHOW_MODAL, (modalName) => {
      const modal = container.querySelector(`[data-modal=${modalName}]`);
      modal.classList.remove("u-hide");
    });
    Array.from(container.querySelectorAll("[data-modal]")).forEach((element) => {
      const el = element;
      el.querySelectorAll("[data-modal-dismiss]").forEach((dismissElement2) => {
        const dismissEl = dismissElement2;
        dismissEl.addEventListener("click", () => {
          el.classList.add("u-hide");
        });
      });
    });
  };

  // application/tools/content-selector.js
  function contentSelector(container = document) {
    const selector = container.querySelector("#content-selector");
    if (!selector) {
      return;
    }
    const triggers = [...selector.querySelectorAll("a[data-selector-target]")];
    const targetIds = triggers.map((trigger2) => trigger2.dataset.selectorTarget);
    const targets = targetIds.map((id) => container.querySelector(`#${id}`));
    triggers.forEach((trigger2) => {
      const targetId = trigger2.dataset.selectorTarget;
      trigger2.addEventListener("click", () => {
        targets.forEach((target2) => {
          if (target2.id === targetId) {
            target2.classList.remove("hidden");
          } else {
            target2.classList.add("hidden");
          }
        });
        triggers.forEach((triggerForClass) => {
          if (triggerForClass === trigger2) {
            triggerForClass.classList.add("bg-black-night", "fc-white");
            triggerForClass.classList.remove("bg-grey-thought", "fc-black-night");
          } else {
            triggerForClass.classList.add("bg-grey-thought", "fc-black-night");
            triggerForClass.classList.remove("bg-black-night", "fc-white");
          }
        });
      });
    });
  }

  // application/tools/obfuscator.ts
  function obfuscator_default(container = document) {
    const elements = Array.from(
      container.querySelectorAll(".l-obfuscated-text")
    );
    const originalValues = elements.map((e) => e.innerText);
    let counter = 0;
    window.setInterval(
      () => {
        counter++;
        if (counter > 40) {
          counter = 0;
          return;
        }
        elements.forEach((element, index2) => {
          const originalValue = originalValues[index2];
          if (counter < 30) {
            element.innerText = obfuscate(originalValue);
          } else {
            element.innerText = originalValue;
          }
        });
      },
      100
    );
  }
  var vowels = ["a", "e", "i", "o", "u", "y"];
  var consonants = ["b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "z"];
  var obfuscate = (text) => Array.from(text.toLowerCase()).map((character) => {
    if (vowels.includes(character)) {
      return vowels[Math.floor(Math.random() * vowels.length)];
    }
    return consonants[Math.floor(Math.random() * consonants.length)];
  }).join("");

  // application.js
  require_rails_ujs().start();
  require_activestorage().start();
  init_channels();
  window.Rails = import_ujs5.default;
  Vue.use(vue_turbo_default);
  window.Turbo = turbo_es2017_esm_exports;
  document.addEventListener("turbo:load", () => {
    const tutorialContainers = document.querySelectorAll(".c-written-tutorial");
    [...tutorialContainers].forEach((tutorialContainer) => {
      spoilers_default(tutorialContainer);
    });
    configureBadgeAnimations();
    configureCodeFormatting();
    configureContentSliders();
    event_tracking_default();
    link_tools_default();
    discussion_embeds_default();
    countdown_default();
    sidebar_toggle_default();
    configureHeaderToggles();
    configureCssToggles();
    configureContentPermissionsRequiredLinks();
    modal_default();
    contentSelector();
    obfuscator_default();
    vue_mount_default("#video_player_modal", Modal_default2);
    vue_mount_default("[data-mark-as-complete]", MarkAsCompleteButton_default);
    vue_mount_default("[data-mark-complete-wrapper]", MarkAsCompleteButtonWrapper_default);
    vue_mount_default(".vue-sticky-smart-banner", App_default3);
    vue_mount_default("#vue-user-bookmarks", UserBookmarks_default);
    vue_mount_default("#vue-user-bookmarks-kodeco", UserBookmarks_kodeco_default);
    vue_mount_default("#vue-user-content", UserContent_default);
    vue_mount_default("#vue-user-content-kodeco", UserContent_kodeco_default);
    vue_mount_default(".vue-filter-select", FilterSelect_default);
    vue_mount_default(".vue-newsletter-signup-button", SignupButton_default);
    vue_mount_default("#vue-reading-experience-switcher", App_default4);
    vue_mount_default("#vue-notebook", App_default5);
    vue_mount_default("#vue-book-search-overlay", Overlay_default);
    vue_mount_default(".facebook-share", FacebookShare_default);
    vue_mount_default(".twitter-share", TwitterShare_default);
    vue_mount_default("#domain_follow_add_button", AddButton_default);
    vue_mount_default(".domain_follow_toggle_button", ToggleButton_default2);
    vue_mount_default("#domain_page_app", App_default2);
    vue_mount_default("#vue-flash", Flash_default);
    vue_mount_default("#night-mode-toggle", NightModeToggle_default);
    const loginRequiredButtons = document.querySelectorAll("[data-login-required]");
    [...loginRequiredButtons].forEach((loginRequiredButton) => {
      new Vue({
        el: loginRequiredButton,
        render: (h) => h(LoginRequiredButton_default, {
          props: {
            buttonClass: loginRequiredButton.className,
            buttonContent: loginRequiredButton.innerHTML
          }
        })
      });
    });
    const subscriptionRequiredButtons = document.querySelectorAll("[data-subscription-required]");
    [...subscriptionRequiredButtons].forEach((subscriptionRequiredButton) => {
      new Vue({
        el: subscriptionRequiredButton,
        render: (h) => h(SubscriptionRequiredButton_default, {
          props: {
            buttonClass: subscriptionRequiredButton.className,
            buttonContent: subscriptionRequiredButton.innerHTML
          }
        })
      });
    });
    const stickyBanners = document.querySelectorAll("[data-sticky-banner]");
    [...stickyBanners].forEach((stickyBanner) => {
      new Vue({
        el: stickyBanner,
        render: (h) => h(StickyBanner_default, {
          props: {
            containerClass: stickyBanner.className,
            content: stickyBanner.innerHTML
          }
        })
      });
    });
    const dynamicLoaders = document.querySelectorAll("[data-dynamic-loader]");
    [...dynamicLoaders].forEach((dynamicLoader) => {
      new Vue({
        el: dynamicLoader,
        render: (h) => h(DynamicLoader_default, {
          props: {
            content: dynamicLoader.innerHTML,
            url: dynamicLoader.dataset.url,
            listenEvent: dynamicLoader.dataset.listenEvent
          }
        })
      });
    });
    const homeNavOpener = document.querySelector(".c-nav-sidebar__menu-toggle--opener");
    const homeNavCloser = document.querySelector(".c-nav-sidebar__menu-toggle--closer");
    const homeNavOpenerMobile = document.querySelector(".c-nav-sidebar__menu-toggle--mobile-opener");
    const homeNavCloserMobile = document.querySelector(".c-nav-sidebar__menu-toggle--mobile-closer");
    const homeNav = document.querySelector(".c-nav-sidebar-my-interests");
    const homeWrapper = document.querySelector(".l-home-dashboard");
    if (homeNavOpener !== null) {
      homeNavOpener.addEventListener("click", () => {
        if (homeNav) {
          homeNav.classList.toggle("c-nav-sidebar-my-interests--show");
        }
        if (homeWrapper) {
          homeWrapper.classList.toggle("l-home-dashboard--sidebar");
        }
        if (homeNav) {
          homeNav.classList.remove("c-nav-sidebar-my-interests--show-mobile");
        }
        set("home-show-sidebar", "true", { expires: "10Y" });
      });
    }
    if (homeNavCloser !== null) {
      homeNavCloser.addEventListener("click", () => {
        if (homeNav) {
          homeNav.classList.toggle("c-nav-sidebar-my-interests--show");
        }
        if (homeWrapper) {
          homeWrapper.classList.toggle("l-home-dashboard--sidebar");
        }
        if (homeNav) {
          homeNav.classList.remove("c-nav-sidebar-my-interests--show-mobile");
        }
        set("home-show-sidebar", "false", { expires: "10Y" });
      });
    }
    if (homeNavOpenerMobile !== null) {
      homeNavOpenerMobile.addEventListener("click", () => {
        if (homeNav) {
          homeNav.classList.remove("c-nav-sidebar-my-interests--show");
        }
        if (homeNav) {
          homeNav.classList.toggle("c-nav-sidebar-my-interests--show-mobile");
        }
        if (homeWrapper) {
          homeWrapper.classList.remove("l-home-dashboard--sidebar");
        }
      });
    }
    if (homeNavCloserMobile !== null) {
      homeNavCloserMobile.addEventListener("click", () => {
        if (homeNav) {
          homeNav.classList.remove("c-nav-sidebar-my-interests--show");
        }
        if (homeNav) {
          homeNav.classList.toggle("c-nav-sidebar-my-interests--show-mobile");
        }
        if (homeWrapper) {
          homeWrapper.classList.remove("l-home-dashboard--sidebar");
        }
      });
    }
    if (get("home-show-sidebar") === "true") {
      if (homeNav) {
        homeNav.classList.add("c-nav-sidebar-my-interests--show");
      }
      if (homeWrapper) {
        homeWrapper.classList.add("l-home-dashboard--sidebar");
      }
    } else if (get("home-show-sidebar") === "false") {
      if (homeNav) {
        homeNav.classList.remove("c-nav-sidebar-my-interests--show");
      }
      if (homeWrapper) {
        homeWrapper.classList.remove("l-home-dashboard--sidebar");
      }
    }
    const navToggles = document.querySelectorAll(".o-button-menu");
    const mainNav = document.getElementById("global-header-nav");
    const learnDetails = document.getElementById("learn-menu-details");
    if (navToggles && navToggles.length > 0) {
      navToggles.forEach((navToggle) => {
        navToggle.addEventListener("click", () => {
          if (learnDetails.open) {
            mainNav.classList.remove("c-global-header__nav--show-menu");
            learnDetails.open = false;
          } else {
            mainNav.classList.add("c-global-header__nav--show-menu");
            learnDetails.open = true;
          }
        });
      });
      learnDetails.querySelectorAll("a").forEach((anchor) => {
        anchor.addEventListener("click", (event) => {
          const turboDisable = anchor.getAttribute("data-turbo") === "false";
          event.stopPropagation();
          if (!turboDisable) {
            event.preventDefault();
            turbo_es2017_esm_exports.visit(anchor.href);
          }
        });
      });
    }
    const rotateDiscloseArrows = document.querySelectorAll(".o-button-disclose--js");
    rotateDiscloseArrows.forEach(function(a) {
      a.addEventListener("click", function() {
        this.classList.toggle("o-button-disclose--rotate");
      });
    });
    dismissible_default();
    configureTableOfContents();
  });
})();
//# sourceMappingURL=/assets/application.js-a433e7a618608dfad522714d59b0f7e3a91df1764188b5793ff2d8c77e4ffdd2.map
//!
;
